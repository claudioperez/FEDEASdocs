{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u03a6\u03b5\u03b9\u03b4\u03b9\u03b1\u03c2 FEDEASLab is a modular framework for teaching and research on the simulation of nonlinear structural response under static and dynamic loads, with a reference implementation in Matlab\u00a9 . Get Started ... See example. ... See example. ... See example. Guides View guides that explain the concepts and components of FEDEASLab . Function Index Peruse a comprehensive list of functions provided by FEDEASLab , with detailed explanations of their interfaces. Examples Walk through some examples of the various analysis procedures that FEDEASLab provides. Rapid Development FEDEASLab functions interact through a consistent API that allows users to rapidly implement and explore new finite element and material models. Developer's Manual Insight through Visualization FEDEASLab provides a powerful post-processing module that is integrated with Matlab's state-of-the art visualization tools. This module is built on top of a simple, unified data model that can be leveraged by users to build insightful illustrations of responses at the model, element, and material level, at any point in a model's lifecycle. Library Examples","title":"Home"},{"location":"DataStructs/","text":"Data Structures Model Model contains... --8<-- \"DataStructures/Model.md\" ElemData","title":"Data Structures"},{"location":"DataStructs/#data-structures","text":"","title":"Data Structures"},{"location":"DataStructs/#model","text":"Model contains... --8<-- \"DataStructures/Model.md\"","title":"Model"},{"location":"DataStructs/#elemdata","text":"","title":"ElemData"},{"location":"ModelLib/","text":"","title":"Modeling Library"},{"location":"about/","text":"About FEDEASLab FEDEASLab is a modular Matlab\u00a9 toolbox for the simulation of the nonlinear structural response under static and dynamic loads. The names stands for Finite Elements for Design, Evaluation and Analysis of Structures and pays homage to \u03a6\u03f5\u03b9\u03b4\u03b9\u03b1\u03c2, the creator of the magnificent sculptures for the Parthenon during the golden age of Athens under Pericles. and has been used successfully for the development of new elements and material models, as well as for the simulation of the response of small and large structural models in research and instruction. The toolbox consists of several functions grouped in categories. These functions operate on five basic data structures which represent the model, the loading, the element properties, the state of the structural response, and the parameters of the solution strategy. A sixth data structure is optional and carries post-processing information that can be used for response interpretation and visualization. The process of performing the nonlinear response analysis of a structure under static or transient conditions is broken down into logical steps. Each step is represented by a separate function. With this approach the definition of the model, the element properties and the loading as well as the analysis of the model under the given loading is accomplished with scripts that invoke the individual functions. Alternative solution strategies can be readily explored. Moreover, the user can easily exchange a function to provide additional capabilities. It is equally easy to access the data objects and enhance the information stored in them. A common task is the addition of element and material models. This task is simplified by the consistent function interface used throughout the toolbox. Acknowledgements License","title":"About"},{"location":"about/#about-fedeaslab","text":"FEDEASLab is a modular Matlab\u00a9 toolbox for the simulation of the nonlinear structural response under static and dynamic loads. The names stands for Finite Elements for Design, Evaluation and Analysis of Structures and pays homage to \u03a6\u03f5\u03b9\u03b4\u03b9\u03b1\u03c2, the creator of the magnificent sculptures for the Parthenon during the golden age of Athens under Pericles. and has been used successfully for the development of new elements and material models, as well as for the simulation of the response of small and large structural models in research and instruction. The toolbox consists of several functions grouped in categories. These functions operate on five basic data structures which represent the model, the loading, the element properties, the state of the structural response, and the parameters of the solution strategy. A sixth data structure is optional and carries post-processing information that can be used for response interpretation and visualization. The process of performing the nonlinear response analysis of a structure under static or transient conditions is broken down into logical steps. Each step is represented by a separate function. With this approach the definition of the model, the element properties and the loading as well as the analysis of the model under the given loading is accomplished with scripts that invoke the individual functions. Alternative solution strategies can be readily explored. Moreover, the user can easily exchange a function to provide additional capabilities. It is equally easy to access the data objects and enhance the information stored in them. A common task is the addition of element and material models. This task is simplified by the consistent function interface used throughout the toolbox.","title":"About FEDEASLab"},{"location":"about/#acknowledgements","text":"","title":"Acknowledgements"},{"location":"about/#license","text":"","title":"License"},{"location":"elements/","text":"Finite elements This page briefly presents some important families of finite elements. Mixed-Field Elements Beams 3-Field Primal Field Elements Elements in this family are formulated in terms of an unknown displacement field from the total potential energy functional. Lagrange Tensor Product Quad LE4to9nodeQuad Lagrange Serendipity Quad LE4to9nodeQuad Lagrange Hierarchical Quad Lagrange Standard Simplex Lagrange Hierarchical Simplex","title":"Finite elements"},{"location":"elements/#finite-elements","text":"This page briefly presents some important families of finite elements.","title":"Finite elements"},{"location":"elements/#mixed-field-elements","text":"","title":"Mixed-Field Elements"},{"location":"elements/#beams","text":"","title":"Beams"},{"location":"elements/#3-field","text":"","title":"3-Field"},{"location":"elements/#primal-field-elements","text":"Elements in this family are formulated in terms of an unknown displacement field from the total potential energy functional.","title":"Primal Field Elements"},{"location":"elements/#lagrange-tensor-product-quad","text":"LE4to9nodeQuad","title":"Lagrange Tensor Product Quad"},{"location":"elements/#lagrange-serendipity-quad","text":"LE4to9nodeQuad","title":"Lagrange Serendipity Quad"},{"location":"elements/#lagrange-hierarchical-quad","text":"","title":"Lagrange Hierarchical Quad"},{"location":"elements/#lagrange-standard-simplex","text":"","title":"Lagrange Standard Simplex"},{"location":"elements/#lagrange-hierarchical-simplex","text":"","title":"Lagrange Hierarchical Simplex"},{"location":"elemlib/","text":"Element Library # Element Description Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Inel2dFrm_wLHNMYS 2d linear elastic frame element with linear plastic hardening axial-flexure hinges Parameters rho : mass density A : cross sectional area I : moment of inertia E : modulus of elasticity Np : plastic axial capacity of element Mp : plastic moment capacity of element GPYSC : polynomial exponents for plastic surface (see help for function GPYS) Hir : isotropic hardening ratio for flexural end i and j Hkr : kinematic hardening ratio for axial, flexural end i and end j w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; LdIdx : load history no for element loading in x-direction LdIdy : load history no for element loading in y-direction Wtol : incremental work tolerance for state convergence MaxIter : maximum number of iterations for state convergence SubDivNo : number of element deformation subdivisions State Inel2dFrm_wLPPM 2d frame linear elastic element perfectly plastic flexural response Parameters State Inel2dFrm_wOneComp one component 2d frame element with rigid-linear hardening end hinges Parameters rho : mass density E : Young's modulus A : cross-sectional area I : moment of inertia Mp : plastic moment capacity at end nodes i & j ( Mp = [Mpi, Mpj] ) Hi : isotropic plastic modulus Hk : kinematic modulus w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State Inel2dFrm_wTwoComp two component 2d frame element (linear + linear-perfectly plastic) Parameters State LE2dFrm 2d LE frame element under linear or nonlinear geometry Parameters A : cross sectional area E : modulus of elasticity I : moment of inertia Mp : plastic moment capacity rho : mass density jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry Parameters State HomoCircSecw1dMat None Parameters R(1:2) : outer radius and inner radius of section (default = R(1) only) nr : no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth : no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) Rdrat : ratio of inner to outer radius for switching to uniform dicretization IntTyp : function name for section integration ('Midpoint' or 'Cubature') MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State HomoRectSecw1dMat None Parameters d : section depth b : section width ny : no of integration points (fibers) in y (default = 10) nz : no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) IntTyp : function name for section integration MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State e : vector of total section deformations De : vector of section deformation increments from last convergence DDe : vector of section deformation increments from last iteration edot : vector of section deformation rates ks : section stiffness matrix; returned under ACTION = 'stif' s : section resisting force vector; returned under ACTION = 'stif' or 'forc' Past : section history variables at last converged state Pres : current section history variables HomoWFSecw1dMat None Parameters State <script type=\"math/tex\">(\"a[id^=show_]\").click(function(event) { (\"#extra_\" + $(this).attr('id').substr(5)).slideToggle(\"fast\"); event.preventDefault();})","title":"Elements"},{"location":"elemlib/#element-library","text":"# Element Description Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Inel2dFrm_wLHNMYS 2d linear elastic frame element with linear plastic hardening axial-flexure hinges Parameters rho : mass density A : cross sectional area I : moment of inertia E : modulus of elasticity Np : plastic axial capacity of element Mp : plastic moment capacity of element GPYSC : polynomial exponents for plastic surface (see help for function GPYS) Hir : isotropic hardening ratio for flexural end i and j Hkr : kinematic hardening ratio for axial, flexural end i and end j w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; LdIdx : load history no for element loading in x-direction LdIdy : load history no for element loading in y-direction Wtol : incremental work tolerance for state convergence MaxIter : maximum number of iterations for state convergence SubDivNo : number of element deformation subdivisions State Inel2dFrm_wLPPM 2d frame linear elastic element perfectly plastic flexural response Parameters State Inel2dFrm_wOneComp one component 2d frame element with rigid-linear hardening end hinges Parameters rho : mass density E : Young's modulus A : cross-sectional area I : moment of inertia Mp : plastic moment capacity at end nodes i & j ( Mp = [Mpi, Mpj] ) Hi : isotropic plastic modulus Hk : kinematic modulus w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State Inel2dFrm_wTwoComp two component 2d frame element (linear + linear-perfectly plastic) Parameters State LE2dFrm 2d LE frame element under linear or nonlinear geometry Parameters A : cross sectional area E : modulus of elasticity I : moment of inertia Mp : plastic moment capacity rho : mass density jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry Parameters State HomoCircSecw1dMat None Parameters R(1:2) : outer radius and inner radius of section (default = R(1) only) nr : no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth : no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) Rdrat : ratio of inner to outer radius for switching to uniform dicretization IntTyp : function name for section integration ('Midpoint' or 'Cubature') MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State HomoRectSecw1dMat None Parameters d : section depth b : section width ny : no of integration points (fibers) in y (default = 10) nz : no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) IntTyp : function name for section integration MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State e : vector of total section deformations De : vector of section deformation increments from last convergence DDe : vector of section deformation increments from last iteration edot : vector of section deformation rates ks : section stiffness matrix; returned under ACTION = 'stif' s : section resisting force vector; returned under ACTION = 'stif' or 'forc' Past : section history variables at last converged state Pres : current section history variables HomoWFSecw1dMat None Parameters State <script type=\"math/tex\">(\"a[id^=show_]\").click(function(event) { (\"#extra_\" + $(this).attr('id').substr(5)).slideToggle(\"fast\"); event.preventDefault();})","title":"Element Library"},{"location":"get-started/","text":"Getting Started Download & Install The FEDEASLab Matlab Toolbox will soon be available for download as a zipped folder from here .","title":"Getting Started"},{"location":"get-started/#getting-started","text":"","title":"Getting Started"},{"location":"get-started/#download-install","text":"The FEDEASLab Matlab Toolbox will soon be available for download as a zipped folder from here .","title":"Download &amp; Install"},{"location":"matlib/","text":"Material Library # Element Description BiLinElastic1dMat Uniaxial stress-strain relation for a bilinear elastic material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinHyst1dMat Bilinear hysteretic force-deformation relation with pinching Parameters sig1p : positive stress at first transition eps1p : positive strain at first transition sig2p : ultimate positive stress eps2p : ultimate positive strain sig1n : negative stress at first transition eps1n : negative strain at first transition sig2n : ultimate negative stress eps2n : ultimate negative strain pnchx(+ve ; -ve) : x-pinching parameters under +ve and -ve deformation pnchy(+ve ; -ve) : y-pinching parameters under +ve and -ve deformation State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinInel1dMat Uniaxial stress-strain relation for bilinear inelastic material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinOrOr1dMat Uniaxial stress-strain relation for bilinear origin-oriented material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinPKOr1dMat Uniaxial stress-strain relation for bilinear origin-oriented material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables GMP1DMAT Uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material Parameters E : initial modulus fy : yield strength b : strain hardening ratio R0 : exp transition elastic-plastic cR1 : coefficient for variation of R0 cR2 : coefficient for variation of R0 a1 : isotropic hardening (IH) coefficient in compression a2 : trigger strain ductility for IH in compression a3 : isotropic hardening (IH) coefficient in tension a4 : trigger strain ductility for IH in tension State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables InelJ2PwLH3DMat inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Parameters E : initial modulus fy : yield strength nu : Poisson ratio Hk : kinematic hardening modulus Hi : isotropic hardening modulus State eps : total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km : material stiffness matrix; returned under ACTION = 'stif' sig : stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables InelLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening. Material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Parameters E : initial modulus fy : yield strength Hi : isotropic plastic modulus Hk : kinematic hardening modulus State eps : total strain Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate km : material stiffness matrix; returned under ACTION = 'stif' sig : stress; returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables MANDERCONCR1DMAT hysteretic concrete stress-strain relation after Mander Parameters fc : compressive strength for unconfined concrete epc0 : strain at compressive strength for unconfined concrete Ec : initial modulus for unconfined concrete Kfc : ratio of confined to unconfined concrete strength State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables <script type=\"math/tex\">(\"a[id^=show_]\").click(function(event) { (\"#extra_\" + $(this).attr('id').substr(5)).slideToggle(\"fast\"); event.preventDefault();})","title":"Materials"},{"location":"matlib/#material-library","text":"# Element Description BiLinElastic1dMat Uniaxial stress-strain relation for a bilinear elastic material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinHyst1dMat Bilinear hysteretic force-deformation relation with pinching Parameters sig1p : positive stress at first transition eps1p : positive strain at first transition sig2p : ultimate positive stress eps2p : ultimate positive strain sig1n : negative stress at first transition eps1n : negative strain at first transition sig2n : ultimate negative stress eps2n : ultimate negative strain pnchx(+ve ; -ve) : x-pinching parameters under +ve and -ve deformation pnchy(+ve ; -ve) : y-pinching parameters under +ve and -ve deformation State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinInel1dMat Uniaxial stress-strain relation for bilinear inelastic material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinOrOr1dMat Uniaxial stress-strain relation for bilinear origin-oriented material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinPKOr1dMat Uniaxial stress-strain relation for bilinear origin-oriented material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables GMP1DMAT Uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material Parameters E : initial modulus fy : yield strength b : strain hardening ratio R0 : exp transition elastic-plastic cR1 : coefficient for variation of R0 cR2 : coefficient for variation of R0 a1 : isotropic hardening (IH) coefficient in compression a2 : trigger strain ductility for IH in compression a3 : isotropic hardening (IH) coefficient in tension a4 : trigger strain ductility for IH in tension State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables InelJ2PwLH3DMat inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Parameters E : initial modulus fy : yield strength nu : Poisson ratio Hk : kinematic hardening modulus Hi : isotropic hardening modulus State eps : total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km : material stiffness matrix; returned under ACTION = 'stif' sig : stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables InelLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening. Material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Parameters E : initial modulus fy : yield strength Hi : isotropic plastic modulus Hk : kinematic hardening modulus State eps : total strain Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate km : material stiffness matrix; returned under ACTION = 'stif' sig : stress; returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables MANDERCONCR1DMAT hysteretic concrete stress-strain relation after Mander Parameters fc : compressive strength for unconfined concrete epc0 : strain at compressive strength for unconfined concrete Ec : initial modulus for unconfined concrete Kfc : ratio of confined to unconfined concrete strength State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables <script type=\"math/tex\">(\"a[id^=show_]\").click(function(event) { (\"#extra_\" + $(this).attr('id').substr(5)).slideToggle(\"fast\"); event.preventDefault();})","title":"Material Library"},{"location":"FEDEASLab/","text":"Index CleanStart InelLPwLH1dMat S_InitialStep Simple_PanelZone_Test Create_MRFrame InelPanelZone S_MultiStep Units Create_PanelZone InelTruss S_MultiStep_wLoadHist shape2d GMP1dMat LE2dFrm S_MultiStep_wLoadHistwSD Gauss2d LEIso2dMat S_Transient_MultiStep Gaussq Plot_SingularModes S_Transient_MultiStepwSD InelJ2PwLH3dMat SIUnits Set_PlastCond","title":"Index"},{"location":"FEDEASLab/src/Element_Library/","text":"Index for src\\Element_Library InelTruss INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry LE2dFrm LE2dFRM 2d LE frame element under linear or nonlinear geometry Other files in this directory Check3dFrmAxes.p DefGeom_2dFrm.p DefGeom_3dFrm.p DeformShape2dFrm.p DeformShape2dFrm_wCurvIntp.p DeformShape2dFrm_wDispIntp.p Dinel2dFrm_EBwDF.p Dinel2dFrm_EBwFF.p ElementLoading.p ExtrReshu.p Extract_BasicEl2SecState.p Extract_El2MatState.p Extract_El2SecState.p GPYS.p GeomTran_2dFrm.p GeomTran_3dFrm.p GeomTran_Truss.p Inel2dFrm_wLHNMYS.p Inel2dFrm_wLPPM.p Inel2dFrm_wOneComp.p Inel2dFrm_wTwoComp.p LE2dFrm_wPdelta.p LE3dFrm.p LETruss.p Large2du2v_Frm.p Large3du2v_Frm.p MaterialWrapper.p SectionWrapper.p TranJnt.p kg_2dFrm.p kg_3dFrm.p kg_Truss.p","title":"Index"},{"location":"FEDEASLab/src/Element_Library/#index-for-srcelement_library","text":"InelTruss INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry LE2dFrm LE2dFRM 2d LE frame element under linear or nonlinear geometry","title":"Index for src\\Element_Library"},{"location":"FEDEASLab/src/Element_Library/#other-files-in-this-directory","text":"Check3dFrmAxes.p DefGeom_2dFrm.p DefGeom_3dFrm.p DeformShape2dFrm.p DeformShape2dFrm_wCurvIntp.p DeformShape2dFrm_wDispIntp.p Dinel2dFrm_EBwDF.p Dinel2dFrm_EBwFF.p ElementLoading.p ExtrReshu.p Extract_BasicEl2SecState.p Extract_El2MatState.p Extract_El2SecState.p GPYS.p GeomTran_2dFrm.p GeomTran_3dFrm.p GeomTran_Truss.p Inel2dFrm_wLHNMYS.p Inel2dFrm_wLPPM.p Inel2dFrm_wOneComp.p Inel2dFrm_wTwoComp.p LE2dFrm_wPdelta.p LE3dFrm.p LETruss.p Large2du2v_Frm.p Large3du2v_Frm.p MaterialWrapper.p SectionWrapper.p TranJnt.p kg_2dFrm.p kg_3dFrm.p kg_Truss.p","title":"Other files in this directory"},{"location":"FEDEASLab/src/Element_Library/InelTruss/","text":"InelTruss Purpose INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry Syntax function ElemResp = InelTruss (action,el_no,xyz,ElemData,ElemState) Description INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry ELEMRESP = INELTRUSS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d/3d inelastic truss element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area MatName = function for material stress-strain response MatData = material property data s0 = initial force (default = 0) e0 = initial deformation (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Mat = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: This function is called by:","title":"InelTruss"},{"location":"FEDEASLab/src/Element_Library/InelTruss/#ineltruss","text":"","title":"InelTruss"},{"location":"FEDEASLab/src/Element_Library/InelTruss/#purpose","text":"INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry","title":"Purpose"},{"location":"FEDEASLab/src/Element_Library/InelTruss/#syntax","text":"function ElemResp = InelTruss (action,el_no,xyz,ElemData,ElemState)","title":"Syntax"},{"location":"FEDEASLab/src/Element_Library/InelTruss/#description","text":"INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry ELEMRESP = INELTRUSS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d/3d inelastic truss element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area MatName = function for material stress-strain response MatData = material property data s0 = initial force (default = 0) e0 = initial deformation (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Mat = material response information for post-processing (see material function with MatName)","title":"Description"},{"location":"FEDEASLab/src/Element_Library/InelTruss/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Element_Library/LE2dFrm/","text":"LE2dFrm Purpose LE2dFRM 2d LE frame element under linear or nonlinear geometry Syntax function ElemResp = LE2dFrm (action,el_no,xyz,ElemData,ElemState) Description LE2dFRM 2d LE frame element under linear or nonlinear geometry ELEMRESP = LE2dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = FunHandle for action = 'defo' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) e0 = initial deformations (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j Release = axial and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: This function is called by:","title":"LE2dFrm"},{"location":"FEDEASLab/src/Element_Library/LE2dFrm/#le2dfrm","text":"","title":"LE2dFrm"},{"location":"FEDEASLab/src/Element_Library/LE2dFrm/#purpose","text":"LE2dFRM 2d LE frame element under linear or nonlinear geometry","title":"Purpose"},{"location":"FEDEASLab/src/Element_Library/LE2dFrm/#syntax","text":"function ElemResp = LE2dFrm (action,el_no,xyz,ElemData,ElemState)","title":"Syntax"},{"location":"FEDEASLab/src/Element_Library/LE2dFrm/#description","text":"LE2dFRM 2d LE frame element under linear or nonlinear geometry ELEMRESP = LE2dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = FunHandle for action = 'defo' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) e0 = initial deformations (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j Release = axial and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces","title":"Description"},{"location":"FEDEASLab/src/Element_Library/LE2dFrm/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Material_Library/","text":"Index for src\\Material_Library GMP1dMat GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material InelJ2PwLH3dMat INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening InelLPwLH1dMat INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening LEIso2dMat LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions Other files in this directory BilinElastic1dMat.p BilinHyst1dMat.p BilinInel1dMat.p BilinOrOr1dMat.p BilinPkOr1dMat.p ManderConcr1dMat.p","title":"Index"},{"location":"FEDEASLab/src/Material_Library/#index-for-srcmaterial_library","text":"GMP1dMat GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material InelJ2PwLH3dMat INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening InelLPwLH1dMat INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening LEIso2dMat LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions","title":"Index for src\\Material_Library"},{"location":"FEDEASLab/src/Material_Library/#other-files-in-this-directory","text":"BilinElastic1dMat.p BilinHyst1dMat.p BilinInel1dMat.p BilinOrOr1dMat.p BilinPkOr1dMat.p ManderConcr1dMat.p","title":"Other files in this directory"},{"location":"FEDEASLab/src/Material_Library/GMP1dMat/","text":"GMP1dMat Purpose GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material Syntax function MatResp = GMP1dMat (action,MatNo,MatData,MatState) Description GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material MATRESP = GMP1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields E = initial modulus fy = yield strength b = strain hardening ratio R0 = exp transition elastic-plastic (default value 20) cR1 = coefficient for variation of R0 (default value 0.925) cR2 = coefficient for variation of R0 (default value 0.15) a1 = isotropic hardening (IH) coefficient in compression (default value 0) a2 = trigger strain ductility for IH in compression (default value 0) a3 = isotropic hardening (IH) coefficient in tension (default value 0) a4 = trigger strain ductility for IH in tension (default value 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"GMP1dMat"},{"location":"FEDEASLab/src/Material_Library/GMP1dMat/#gmp1dmat","text":"","title":"GMP1dMat"},{"location":"FEDEASLab/src/Material_Library/GMP1dMat/#purpose","text":"GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material","title":"Purpose"},{"location":"FEDEASLab/src/Material_Library/GMP1dMat/#syntax","text":"function MatResp = GMP1dMat (action,MatNo,MatData,MatState)","title":"Syntax"},{"location":"FEDEASLab/src/Material_Library/GMP1dMat/#description","text":"GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material MATRESP = GMP1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields E = initial modulus fy = yield strength b = strain hardening ratio R0 = exp transition elastic-plastic (default value 20) cR1 = coefficient for variation of R0 (default value 0.925) cR2 = coefficient for variation of R0 (default value 0.15) a1 = isotropic hardening (IH) coefficient in compression (default value 0) a2 = trigger strain ductility for IH in compression (default value 0) a3 = isotropic hardening (IH) coefficient in tension (default value 0) a4 = trigger strain ductility for IH in tension (default value 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress","title":"Description"},{"location":"FEDEASLab/src/Material_Library/GMP1dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Material_Library/InelJ2PwLH3dMat/","text":"InelJ2PwLH3dMat Purpose INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Syntax function MatResp = InelJ2PwLH3dMat (action,MatNo,MatData,MatState) Description INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening MATRESP = INELJ2PwLH3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material model based on J2 plasticity with isotropic and kinematic hardening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio (default = 0) Hk = kinematic hardening modulus (default = 0) Hi = isotropic hardening modulus (default = 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: This function is called by:","title":"InelJ2PwLH3dMat"},{"location":"FEDEASLab/src/Material_Library/InelJ2PwLH3dMat/#inelj2pwlh3dmat","text":"","title":"InelJ2PwLH3dMat"},{"location":"FEDEASLab/src/Material_Library/InelJ2PwLH3dMat/#purpose","text":"INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening","title":"Purpose"},{"location":"FEDEASLab/src/Material_Library/InelJ2PwLH3dMat/#syntax","text":"function MatResp = InelJ2PwLH3dMat (action,MatNo,MatData,MatState)","title":"Syntax"},{"location":"FEDEASLab/src/Material_Library/InelJ2PwLH3dMat/#description","text":"INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening MATRESP = INELJ2PwLH3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material model based on J2 plasticity with isotropic and kinematic hardening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio (default = 0) Hk = kinematic hardening modulus (default = 0) Hi = isotropic hardening modulus (default = 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23","title":"Description"},{"location":"FEDEASLab/src/Material_Library/InelJ2PwLH3dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Material_Library/InelLPwLH1dMat/","text":"InelLPwLH1dMat Purpose INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening Syntax function MatResp = InelLPwLH1dMat (action,MatNo,MatData,MatState) Description INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening MATRESP = INELLPwLH1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Reference: JC Simo and TJR Hughes, Computational Inelasticity, pp. 43-45 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): eps_p = plastic strain alpha = isotropic hardening variable sig_b = back stress (for kinematic hardening) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Hi = isotropic plastic modulus Hk = kinematic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress eps_p = plastic strain Cross-Reference Information This function calls: This function is called by:","title":"InelLPwLH1dMat"},{"location":"FEDEASLab/src/Material_Library/InelLPwLH1dMat/#inellpwlh1dmat","text":"","title":"InelLPwLH1dMat"},{"location":"FEDEASLab/src/Material_Library/InelLPwLH1dMat/#purpose","text":"INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening","title":"Purpose"},{"location":"FEDEASLab/src/Material_Library/InelLPwLH1dMat/#syntax","text":"function MatResp = InelLPwLH1dMat (action,MatNo,MatData,MatState)","title":"Syntax"},{"location":"FEDEASLab/src/Material_Library/InelLPwLH1dMat/#description","text":"INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening MATRESP = INELLPwLH1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Reference: JC Simo and TJR Hughes, Computational Inelasticity, pp. 43-45 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): eps_p = plastic strain alpha = isotropic hardening variable sig_b = back stress (for kinematic hardening) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Hi = isotropic plastic modulus Hk = kinematic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress eps_p = plastic strain","title":"Description"},{"location":"FEDEASLab/src/Material_Library/InelLPwLH1dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Material_Library/LEIso2dMat/","text":"LEIso2dMat Purpose LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions Syntax function MatResp = LEIso2dMat (action,MatNo,MatData,MatState) Description LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions MATRESP = LEISO2dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the response of a linear elastic, isotropic material under general plane stress or strain conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 4x1 vector form in the order 11, 22, 33, 12 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 4x1 vector form in the order 11, 22, 33, 12 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 4x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus nu = Poisson ratio eps0 = initial strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig0 = initial stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Case = 'stress' or 'strain' irs = stress or strain components to be retained depending on Case ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig = stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Cross-Reference Information This function calls: This function is called by:","title":"LEIso2dMat"},{"location":"FEDEASLab/src/Material_Library/LEIso2dMat/#leiso2dmat","text":"","title":"LEIso2dMat"},{"location":"FEDEASLab/src/Material_Library/LEIso2dMat/#purpose","text":"LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions","title":"Purpose"},{"location":"FEDEASLab/src/Material_Library/LEIso2dMat/#syntax","text":"function MatResp = LEIso2dMat (action,MatNo,MatData,MatState)","title":"Syntax"},{"location":"FEDEASLab/src/Material_Library/LEIso2dMat/#description","text":"LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions MATRESP = LEISO2dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the response of a linear elastic, isotropic material under general plane stress or strain conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 4x1 vector form in the order 11, 22, 33, 12 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 4x1 vector form in the order 11, 22, 33, 12 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 4x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus nu = Poisson ratio eps0 = initial strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig0 = initial stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Case = 'stress' or 'strain' irs = stress or strain components to be retained depending on Case ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig = stress tensor in 4x1 vector form in the order 11, 22, 33, 12","title":"Description"},{"location":"FEDEASLab/src/Material_Library/LEIso2dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Other/","text":"Index for src\\Other Create_PanelZone % Clear memory and close any open windows InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material Plot_SingularModes Set_PlastCond separate truss and frame elements Simple_PanelZone_Test % shape2d SHAPE2D shape functions for 4-9 node quadrilateral element","title":"Index"},{"location":"FEDEASLab/src/Other/#index-for-srcother","text":"Create_PanelZone % Clear memory and close any open windows InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material Plot_SingularModes Set_PlastCond separate truss and frame elements Simple_PanelZone_Test % shape2d SHAPE2D shape functions for 4-9 node quadrilateral element","title":"Index for src\\Other"},{"location":"FEDEASLab/src/Other/Create_PanelZone/","text":"Create_PanelZone Purpose % Clear memory and close any open windows Syntax This is a script file. Description % Clear memory and close any open windows Cross-Reference Information This function calls: CleanStart CLEANSTART initializes workspace for new analysis Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Units % Script file for common unit definition with Imperial units as default This function is called by:","title":"Create PanelZone"},{"location":"FEDEASLab/src/Other/Create_PanelZone/#create_panelzone","text":"","title":"Create_PanelZone"},{"location":"FEDEASLab/src/Other/Create_PanelZone/#purpose","text":"% Clear memory and close any open windows","title":"Purpose"},{"location":"FEDEASLab/src/Other/Create_PanelZone/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Other/Create_PanelZone/#description","text":"% Clear memory and close any open windows","title":"Description"},{"location":"FEDEASLab/src/Other/Create_PanelZone/#cross-reference-information","text":"This function calls: CleanStart CLEANSTART initializes workspace for new analysis Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Units % Script file for common unit definition with Imperial units as default This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Other/InelPanelZone/","text":"InelPanelZone Purpose INELPANELZONE 4-node panel zone element with inelastic material Syntax function ElemResp = InelPanelZone (action,el_no,xyz,ElemData,ElemState) Description INELPANELZONE 4-node panel zone element with inelastic material ELEMRESP = INELPANELZONE (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 4-node panel zone element with inelastic material; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields t = element thickness (default t=1) nIP = number of integration points (default nIP=2) MatName = function name for material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: shape2d SHAPE2D shape functions for 4-9 node quadrilateral element Gauss2d GAUSS2D Gauss integration rule in two dimensions This function is called by:","title":"InelPanelZone"},{"location":"FEDEASLab/src/Other/InelPanelZone/#inelpanelzone","text":"","title":"InelPanelZone"},{"location":"FEDEASLab/src/Other/InelPanelZone/#purpose","text":"INELPANELZONE 4-node panel zone element with inelastic material","title":"Purpose"},{"location":"FEDEASLab/src/Other/InelPanelZone/#syntax","text":"function ElemResp = InelPanelZone (action,el_no,xyz,ElemData,ElemState)","title":"Syntax"},{"location":"FEDEASLab/src/Other/InelPanelZone/#description","text":"INELPANELZONE 4-node panel zone element with inelastic material ELEMRESP = INELPANELZONE (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 4-node panel zone element with inelastic material; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields t = element thickness (default t=1) nIP = number of integration points (default nIP=2) MatName = function name for material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses","title":"Description"},{"location":"FEDEASLab/src/Other/InelPanelZone/#cross-reference-information","text":"This function calls: shape2d SHAPE2D shape functions for 4-9 node quadrilateral element Gauss2d GAUSS2D Gauss integration rule in two dimensions This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Other/Plot_SingularModes/","text":"Plot_SingularModes Purpose Syntax This is a script file. Description Cross-Reference Information This function calls: This function is called by:","title":"Plot SingularModes"},{"location":"FEDEASLab/src/Other/Plot_SingularModes/#plot_singularmodes","text":"","title":"Plot_SingularModes"},{"location":"FEDEASLab/src/Other/Plot_SingularModes/#purpose","text":"","title":"Purpose"},{"location":"FEDEASLab/src/Other/Plot_SingularModes/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Other/Plot_SingularModes/#description","text":"","title":"Description"},{"location":"FEDEASLab/src/Other/Plot_SingularModes/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Other/Set_PlastCond/","text":"Set_PlastCond Purpose separate truss and frame elements Syntax function Ain = Set_PlastCond (Model,ElemData) Description separate truss and frame elements Cross-Reference Information This function calls: This function is called by:","title":"Set PlastCond"},{"location":"FEDEASLab/src/Other/Set_PlastCond/#set_plastcond","text":"","title":"Set_PlastCond"},{"location":"FEDEASLab/src/Other/Set_PlastCond/#purpose","text":"separate truss and frame elements","title":"Purpose"},{"location":"FEDEASLab/src/Other/Set_PlastCond/#syntax","text":"function Ain = Set_PlastCond (Model,ElemData)","title":"Syntax"},{"location":"FEDEASLab/src/Other/Set_PlastCond/#description","text":"separate truss and frame elements","title":"Description"},{"location":"FEDEASLab/src/Other/Set_PlastCond/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Other/Simple_PanelZone_Test/","text":"Simple_PanelZone_Test Purpose % Syntax This is a script file. Description % Cross-Reference Information This function calls: CleanStart CLEANSTART initializes workspace for new analysis This function is called by:","title":"Simple PanelZone Test"},{"location":"FEDEASLab/src/Other/Simple_PanelZone_Test/#simple_panelzone_test","text":"","title":"Simple_PanelZone_Test"},{"location":"FEDEASLab/src/Other/Simple_PanelZone_Test/#purpose","text":"%","title":"Purpose"},{"location":"FEDEASLab/src/Other/Simple_PanelZone_Test/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Other/Simple_PanelZone_Test/#description","text":"%","title":"Description"},{"location":"FEDEASLab/src/Other/Simple_PanelZone_Test/#cross-reference-information","text":"This function calls: CleanStart CLEANSTART initializes workspace for new analysis This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Other/shape2d/","text":"shape2d Purpose SHAPE2D shape functions for 4-9 node quadrilateral element Syntax function [N,dNdx,J] = shape2d (nat,xyz,nodix) Description SHAPE2D shape functions for 4-9 node quadrilateral element [N, dNdx, J] = SHAPE2D (NAT,XYZ,NODIX) shape functions for 4-9 node quadrilateral element % Input Parameters ---------------- nat = [ xi eta ] natural coordinates of point of interest xyz = nodal coordinates for element (row i for node i) nodix = node index, e.g. [1:4 7 8] if nodes 1 through 4 (always), if 7 and 8 are present ---------------- Return Variables ---------------- N = shape function values for point of interest dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Reference: T.J.R. Hughes, The Finite Element Method, pp. 135 Cross-Reference Information This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Shape2d"},{"location":"FEDEASLab/src/Other/shape2d/#shape2d","text":"","title":"shape2d"},{"location":"FEDEASLab/src/Other/shape2d/#purpose","text":"SHAPE2D shape functions for 4-9 node quadrilateral element","title":"Purpose"},{"location":"FEDEASLab/src/Other/shape2d/#syntax","text":"function [N,dNdx,J] = shape2d (nat,xyz,nodix)","title":"Syntax"},{"location":"FEDEASLab/src/Other/shape2d/#description","text":"SHAPE2D shape functions for 4-9 node quadrilateral element [N, dNdx, J] = SHAPE2D (NAT,XYZ,NODIX) shape functions for 4-9 node quadrilateral element % Input Parameters ---------------- nat = [ xi eta ] natural coordinates of point of interest xyz = nodal coordinates for element (row i for node i) nodix = node index, e.g. [1:4 7 8] if nodes 1 through 4 (always), if 7 and 8 are present ---------------- Return Variables ---------------- N = shape function values for point of interest dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Reference: T.J.R. Hughes, The Finite Element Method, pp. 135","title":"Description"},{"location":"FEDEASLab/src/Other/shape2d/#cross-reference-information","text":"This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Solution_Scripts/","text":"Index for src\\Solution_Scripts S_InitialStep % S_INITIALSTEP : script for initial step of incremental analysis S_MultiStep % S_MULTISTEP : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization S_Transient_MultiStep % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization","title":"Index"},{"location":"FEDEASLab/src/Solution_Scripts/#index-for-srcsolution_scripts","text":"S_InitialStep % S_INITIALSTEP : script for initial step of incremental analysis S_MultiStep % S_MULTISTEP : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization S_Transient_MultiStep % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization","title":"Index for src\\Solution_Scripts"},{"location":"FEDEASLab/src/Solution_Scripts/S_InitialStep/","text":"S_InitialStep Purpose % S_INITIALSTEP : script for initial step of incremental analysis Syntax This is a script file. Description % S_INITIALSTEP : script for initial step of incremental analysis ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S InitialStep"},{"location":"FEDEASLab/src/Solution_Scripts/S_InitialStep/#s_initialstep","text":"","title":"S_InitialStep"},{"location":"FEDEASLab/src/Solution_Scripts/S_InitialStep/#purpose","text":"% S_INITIALSTEP : script for initial step of incremental analysis","title":"Purpose"},{"location":"FEDEASLab/src/Solution_Scripts/S_InitialStep/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Solution_Scripts/S_InitialStep/#description","text":"% S_INITIALSTEP : script for initial step of incremental analysis ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"FEDEASLab/src/Solution_Scripts/S_InitialStep/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep/","text":"S_MultiStep Purpose % S_MULTISTEP : script for multi-step incremental analysis including initialization Syntax This is a script file. Description % S_MULTISTEP : script for multi-step incremental analysis including initialization ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S MultiStep"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep/#s_multistep","text":"","title":"S_MultiStep"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep/#purpose","text":"% S_MULTISTEP : script for multi-step incremental analysis including initialization","title":"Purpose"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep/#description","text":"% S_MULTISTEP : script for multi-step incremental analysis including initialization ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHist/","text":"S_MultiStep_wLoadHist Purpose % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization Syntax This is a script file. Description % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S MultiStep wLoadHist"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHist/#s_multistep_wloadhist","text":"","title":"S_MultiStep_wLoadHist"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHist/#purpose","text":"% S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization","title":"Purpose"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHist/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHist/#description","text":"% S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHist/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/","text":"S_MultiStep_wLoadHistwSD Purpose % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization Syntax This is a script file. Description % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S MultiStep wLoadHistwSD"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/#s_multistep_wloadhistwsd","text":"","title":"S_MultiStep_wLoadHistwSD"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/#purpose","text":"% S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization","title":"Purpose"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/#description","text":"% S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"FEDEASLab/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStep/","text":"S_Transient_MultiStep Purpose % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization Syntax This is a script file. Description % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S Transient MultiStep"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStep/#s_transient_multistep","text":"","title":"S_Transient_MultiStep"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStep/#purpose","text":"% S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization","title":"Purpose"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStep/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStep/#description","text":"% S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStep/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStepwSD/","text":"S_Transient_MultiStepwSD Purpose % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization Syntax This is a script file. Description % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S Transient MultiStepwSD"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStepwSD/#s_transient_multistepwsd","text":"","title":"S_Transient_MultiStepwSD"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStepwSD/#purpose","text":"% S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization","title":"Purpose"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStepwSD/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStepwSD/#description","text":"% S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"FEDEASLab/src/Solution_Scripts/S_Transient_MultiStepwSD/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Utilities/","text":"Index for src\\Utilities CleanStart CLEANSTART initializes workspace for new analysis SIUnits % Script file for common unit definition with SI units as default Units % Script file for common unit definition with Imperial units as default Other files in this directory Create_DispCyclewN.p Create_LoadHistory.p Create_MultDispCycleswN.p D_index.p H_index.p Print_PDFile.p Sub directories Interpolation Plotting PostProcessing PreProcessing Quadrature","title":"Index"},{"location":"FEDEASLab/src/Utilities/#index-for-srcutilities","text":"CleanStart CLEANSTART initializes workspace for new analysis SIUnits % Script file for common unit definition with SI units as default Units % Script file for common unit definition with Imperial units as default","title":"Index for src\\Utilities"},{"location":"FEDEASLab/src/Utilities/#other-files-in-this-directory","text":"Create_DispCyclewN.p Create_LoadHistory.p Create_MultDispCycleswN.p D_index.p H_index.p Print_PDFile.p","title":"Other files in this directory"},{"location":"FEDEASLab/src/Utilities/CleanStart/","text":"CleanStart Purpose CLEANSTART initializes workspace for new analysis Syntax This is a script file. Description CLEANSTART initializes workspace for new analysis Cross-Reference Information This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows Simple_PanelZone_Test %","title":"CleanStart"},{"location":"FEDEASLab/src/Utilities/CleanStart/#cleanstart","text":"","title":"CleanStart"},{"location":"FEDEASLab/src/Utilities/CleanStart/#purpose","text":"CLEANSTART initializes workspace for new analysis","title":"Purpose"},{"location":"FEDEASLab/src/Utilities/CleanStart/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Utilities/CleanStart/#description","text":"CLEANSTART initializes workspace for new analysis","title":"Description"},{"location":"FEDEASLab/src/Utilities/CleanStart/#cross-reference-information","text":"This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows Simple_PanelZone_Test %","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Utilities/SIUnits/","text":"SIUnits Purpose % Script file for common unit definition with SI units as default Syntax This is a script file. Description % Script file for common unit definition with SI units as default Cross-Reference Information This function calls: This function is called by:","title":"SIUnits"},{"location":"FEDEASLab/src/Utilities/SIUnits/#siunits","text":"","title":"SIUnits"},{"location":"FEDEASLab/src/Utilities/SIUnits/#purpose","text":"% Script file for common unit definition with SI units as default","title":"Purpose"},{"location":"FEDEASLab/src/Utilities/SIUnits/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Utilities/SIUnits/#description","text":"% Script file for common unit definition with SI units as default","title":"Description"},{"location":"FEDEASLab/src/Utilities/SIUnits/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Utilities/Units/","text":"Units Purpose % Script file for common unit definition with Imperial units as default Syntax This is a script file. Description % Script file for common unit definition with Imperial units as default Cross-Reference Information This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Units"},{"location":"FEDEASLab/src/Utilities/Units/#units","text":"","title":"Units"},{"location":"FEDEASLab/src/Utilities/Units/#purpose","text":"% Script file for common unit definition with Imperial units as default","title":"Purpose"},{"location":"FEDEASLab/src/Utilities/Units/#syntax","text":"This is a script file.","title":"Syntax"},{"location":"FEDEASLab/src/Utilities/Units/#description","text":"% Script file for common unit definition with Imperial units as default","title":"Description"},{"location":"FEDEASLab/src/Utilities/Units/#cross-reference-information","text":"This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Utilities/PreProcessing/","text":"Index for src\\Utilities\\PreProcessing Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Other files in this directory AISC_Sections.mat AISC_Section.p Add_Bars2Section.p Add_Brace2Frame.p Add_GravityColumn2Frame.p Add_Shape2Section.p CircLayer2Bar.p Create_BoxOutline.p Create_BoxwOvhOutline.p Create_CSecOutline.p Create_CircBarGrid.p Create_FrameSections.p Create_IPMesh4Circ.p Create_IPMesh4MultRectShape.p Create_IPMesh4Rect.p Create_IPMesh4WFShape.p Create_ISecOutline.p Create_JntOffsets.p Create_LSecOutline.p Create_Load4Frame.p Create_MPMesh4Circ.p Create_MRFrame.p Create_Mass4Frame.p Create_MultRectShape.p Create_RectBarGrid.p Create_RectOutline.p Create_RectPatch.p Create_RectShape.p Create_RectwCovOutline.p Create_SSecOutline.p Create_ShapewMat.p Create_TSecOutline.p ElemData2Qpl.p ElemData4SteelBraces.p ElemData4SteelFrame.p FiberElemData4SteelBraces.p FiberElemData4SteelFrame.p MP1dInt4Circ.p MP2dInt4Circ.p Rectangle2Fiber.p","title":"Index"},{"location":"FEDEASLab/src/Utilities/PreProcessing/#index-for-srcutilitiespreprocessing","text":"Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame","title":"Index for src\\Utilities\\PreProcessing"},{"location":"FEDEASLab/src/Utilities/PreProcessing/#other-files-in-this-directory","text":"AISC_Sections.mat AISC_Section.p Add_Bars2Section.p Add_Brace2Frame.p Add_GravityColumn2Frame.p Add_Shape2Section.p CircLayer2Bar.p Create_BoxOutline.p Create_BoxwOvhOutline.p Create_CSecOutline.p Create_CircBarGrid.p Create_FrameSections.p Create_IPMesh4Circ.p Create_IPMesh4MultRectShape.p Create_IPMesh4Rect.p Create_IPMesh4WFShape.p Create_ISecOutline.p Create_JntOffsets.p Create_LSecOutline.p Create_Load4Frame.p Create_MPMesh4Circ.p Create_MRFrame.p Create_Mass4Frame.p Create_MultRectShape.p Create_RectBarGrid.p Create_RectOutline.p Create_RectPatch.p Create_RectShape.p Create_RectwCovOutline.p Create_SSecOutline.p Create_ShapewMat.p Create_TSecOutline.p ElemData2Qpl.p ElemData4SteelBraces.p ElemData4SteelFrame.p FiberElemData4SteelBraces.p FiberElemData4SteelFrame.p MP1dInt4Circ.p MP2dInt4Circ.p Rectangle2Fiber.p","title":"Other files in this directory"},{"location":"FEDEASLab/src/Utilities/PreProcessing/Create_MRFrame/","text":"Create_MRFrame Purpose CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Syntax function Frame = Create_MRFrame (Lbv,Hsv,nsub) Description CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame FRAME = CREATE_MRFRAME (LBV,HSV,NSUB) function generates the node coordinates XYZ and element connectivity CON for a regular N-story, M-bay frame with bay spans in row vector LBV and story heights in row vector HSV; the optional row vector NSUB specifies the number of subelements for each frame girder the function returns the generated information in data structure FRAME with fields XYZ (node coordinates), CON (element connectivity), CINDX (column index by story), GINDX (girder index by floor), NBY (no of bays), NST (no of stories), NC (no of columns), NG (no of girders) NN (no of nodes), NE (no of elements) Cross-Reference Information This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Create MRFrame"},{"location":"FEDEASLab/src/Utilities/PreProcessing/Create_MRFrame/#create_mrframe","text":"","title":"Create_MRFrame"},{"location":"FEDEASLab/src/Utilities/PreProcessing/Create_MRFrame/#purpose","text":"CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame","title":"Purpose"},{"location":"FEDEASLab/src/Utilities/PreProcessing/Create_MRFrame/#syntax","text":"function Frame = Create_MRFrame (Lbv,Hsv,nsub)","title":"Syntax"},{"location":"FEDEASLab/src/Utilities/PreProcessing/Create_MRFrame/#description","text":"CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame FRAME = CREATE_MRFRAME (LBV,HSV,NSUB) function generates the node coordinates XYZ and element connectivity CON for a regular N-story, M-bay frame with bay spans in row vector LBV and story heights in row vector HSV; the optional row vector NSUB specifies the number of subelements for each frame girder the function returns the generated information in data structure FRAME with fields XYZ (node coordinates), CON (element connectivity), CINDX (column index by story), GINDX (girder index by floor), NBY (no of bays), NST (no of stories), NC (no of columns), NG (no of girders) NN (no of nodes), NE (no of elements)","title":"Description"},{"location":"FEDEASLab/src/Utilities/PreProcessing/Create_MRFrame/#cross-reference-information","text":"This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Utilities/Quadrature/","text":"Index for src\\Utilities\\Quadrature Gauss2d GAUSS2D Gauss integration rule in two dimensions Gaussq returns the locations y_i and weights w_i for Gauss quadrature of order n Other files in this directory Gauss.p Lobatto.p Midpoint.p Simpson.p Trap.p","title":"Index"},{"location":"FEDEASLab/src/Utilities/Quadrature/#index-for-srcutilitiesquadrature","text":"Gauss2d GAUSS2D Gauss integration rule in two dimensions Gaussq returns the locations y_i and weights w_i for Gauss quadrature of order n","title":"Index for src\\Utilities\\Quadrature"},{"location":"FEDEASLab/src/Utilities/Quadrature/#other-files-in-this-directory","text":"Gauss.p Lobatto.p Midpoint.p Simpson.p Trap.p","title":"Other files in this directory"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gauss2d/","text":"Gauss2d Purpose GAUSS2D Gauss integration rule in two dimensions Syntax function [xIP,wIP] = Gauss2d (nIP) Description GAUSS2D Gauss integration rule in two dimensions [XIP,WIP] = GAUSS2D (NIP) locations and weights of 2d Gauss-Legendre integration scheme the function determines the locations in the intervals -1<xi<1, -1<eta<1, and the weights of the Gauss-Legendre integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP Cross-Reference Information This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Gauss2d"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gauss2d/#gauss2d","text":"","title":"Gauss2d"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gauss2d/#purpose","text":"GAUSS2D Gauss integration rule in two dimensions","title":"Purpose"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gauss2d/#syntax","text":"function [xIP,wIP] = Gauss2d (nIP)","title":"Syntax"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gauss2d/#description","text":"GAUSS2D Gauss integration rule in two dimensions [XIP,WIP] = GAUSS2D (NIP) locations and weights of 2d Gauss-Legendre integration scheme the function determines the locations in the intervals -1<xi<1, -1<eta<1, and the weights of the Gauss-Legendre integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP","title":"Description"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gauss2d/#cross-reference-information","text":"This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Cross-Reference Information"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gaussq/","text":"Gaussq Purpose returns the locations y_i and weights w_i for Gauss quadrature of order n Syntax function [yi,wi] = Gaussq (n) Description returns the locations y_i and weights w_i for Gauss quadrature of order n Requirements: n \\in N Cross-Reference Information This function calls: This function is called by:","title":"Gaussq"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gaussq/#gaussq","text":"","title":"Gaussq"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gaussq/#purpose","text":"returns the locations y_i and weights w_i for Gauss quadrature of order n","title":"Purpose"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gaussq/#syntax","text":"function [yi,wi] = Gaussq (n)","title":"Syntax"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gaussq/#description","text":"returns the locations y_i and weights w_i for Gauss quadrature of order n Requirements: n \\in N","title":"Description"},{"location":"FEDEASLab/src/Utilities/Quadrature/Gaussq/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/","text":"Index CleanStart InelLPwLH1dMat S_InitialStep Simple_PanelZone_Test Create_MRFrame InelPanelZone S_MultiStep Units Create_PanelZone InelTruss S_MultiStep_wLoadHist shape2d GMP1dMat LE2dFrm S_MultiStep_wLoadHistwSD Gauss2d LEIso2dMat S_Transient_MultiStep Gaussq Plot_SingularModes S_Transient_MultiStepwSD InelJ2PwLH3dMat SIUnits Set_PlastCond","title":"Index"},{"location":"developers/","text":"Developer's Manual Coming soon.","title":"Developer's Manual"},{"location":"developers/#developers-manual","text":"Coming soon.","title":"Developer's Manual"},{"location":"examples/","text":"Examples General Yield surface evolution Plastic Analysis Applications of linear programming to perfectly plastic structures. Plastic analysis with section interaction Finite Element Analysis Tapered cantilever","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#general","text":"Yield surface evolution","title":"General"},{"location":"examples/#plastic-analysis","text":"Applications of linear programming to perfectly plastic structures. Plastic analysis with section interaction","title":"Plastic Analysis"},{"location":"examples/#finite-element-analysis","text":"Tapered cantilever","title":"Finite Element Analysis"},{"location":"examples/lim_evol/","text":"Yield Surface Evolution This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward. Formulation We seek to define a surface, F_\\tau , at instant \\tau by the following set of moment-axial force ordered pairs: \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} where \\Phi is satisfied when M and P are resultants of a stress distribution, \\sigma , meeting the condition (\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})] for material behavior with only one component. In this condition, \\mathbf{x} \\in \\Omega denotes a point in the cross section, and \\sigma_{y,\\tau} is the limit stress at time \\tau . For the case of perfect plasticity without hardening, the dependence of \\sigma_y on \\mathbf{x} and \\tau is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into n_{IP} integration points, the aforementioned condition is restated approximately as follows: \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y where N is the set of integration point indices \\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\} and x_i is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\hat{\\mathbf{x}} , of n_{IP} integration point locations, and a vector of corresponding stresses, \\mathbf{y}_\\tau at instant \\tau , find the following set, Y , of admissible stress vectors, \\mathbf{y} : Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ]\\} which is the set of all discrete stress vectors, \\mathbf{y} , such that there exists an admissible strain increment \\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x} which will produce the elastic stress increment \\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon , and there exists an element, y_i , in \\mathbf{y} that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field. Implementation The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size (n_{IP},2) . Each ordinate, XY(i,2) , corresponds to the stress y_i \\in \\mathbf{y}_\\tau at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval [+1, -1] . The function iterates over every integration point in the set N , carrying out 4 separate nested iterations over the remaining integration points indices, \\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\} . This is a very computationally expensive procedure that grows quickly with n_{IP} . The return variable, Y_lim , is a subset of the piecewise continuous set Y_\\tau with column vectors Y_lim(:,k) defining points of discontinuity. Examples The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors y_k (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: ```{include=surf_ex_2.m .matlab} ``` Example 1 - Path O-A-B-O' ( LoadOpt=3 ) Example 2 - Path O-A-B-C-O' ( LoadOpt=4 ) This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C. Source Code lim_clip plot_evol","title":"Yield surface evolution"},{"location":"examples/lim_evol/#yield-surface-evolution","text":"This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward.","title":"Yield Surface Evolution"},{"location":"examples/lim_evol/#formulation","text":"We seek to define a surface, F_\\tau , at instant \\tau by the following set of moment-axial force ordered pairs: \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} where \\Phi is satisfied when M and P are resultants of a stress distribution, \\sigma , meeting the condition (\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})] for material behavior with only one component. In this condition, \\mathbf{x} \\in \\Omega denotes a point in the cross section, and \\sigma_{y,\\tau} is the limit stress at time \\tau . For the case of perfect plasticity without hardening, the dependence of \\sigma_y on \\mathbf{x} and \\tau is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into n_{IP} integration points, the aforementioned condition is restated approximately as follows: \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y where N is the set of integration point indices \\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\} and x_i is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\hat{\\mathbf{x}} , of n_{IP} integration point locations, and a vector of corresponding stresses, \\mathbf{y}_\\tau at instant \\tau , find the following set, Y , of admissible stress vectors, \\mathbf{y} : Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ]\\} which is the set of all discrete stress vectors, \\mathbf{y} , such that there exists an admissible strain increment \\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x} which will produce the elastic stress increment \\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon , and there exists an element, y_i , in \\mathbf{y} that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field.","title":"Formulation"},{"location":"examples/lim_evol/#implementation","text":"The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size (n_{IP},2) . Each ordinate, XY(i,2) , corresponds to the stress y_i \\in \\mathbf{y}_\\tau at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval [+1, -1] . The function iterates over every integration point in the set N , carrying out 4 separate nested iterations over the remaining integration points indices, \\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\} . This is a very computationally expensive procedure that grows quickly with n_{IP} . The return variable, Y_lim , is a subset of the piecewise continuous set Y_\\tau with column vectors Y_lim(:,k) defining points of discontinuity.","title":"Implementation"},{"location":"examples/lim_evol/#examples","text":"The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors y_k (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: ```{include=surf_ex_2.m .matlab} ```","title":"Examples"},{"location":"examples/lim_evol/#example-1-path-o-a-b-o-loadopt3","text":"","title":"Example 1 - Path O-A-B-O' (LoadOpt=3)"},{"location":"examples/lim_evol/#example-2-path-o-a-b-c-o-loadopt4","text":"This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C.","title":"Example 2 - Path O-A-B-C-O' (LoadOpt=4)"},{"location":"examples/lim_evol/#source-code","text":"","title":"Source Code"},{"location":"examples/lim_evol/#lim_clip","text":"","title":"lim_clip"},{"location":"examples/lim_evol/#plot_evol","text":"","title":"plot_evol"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/","text":"HW-3 Problem 3 The purpose of the structural model in Fig. 3(a) is the study of the risk of a mid-rise building forming a soft first-story collapse mechanism under the combined action of a total gravity load P_{v} and a lateral load. The latter is assumed to be linearly distributed over the height of the building with a resultant P_{h} located at a distance H above the first floor. The building has a single bay of length L and the height of the first story is 12 feet. The ratio of (H-h)/ L is 4 . The first story columns consist of \\mathrm{W} 14 \\mathrm{x} 426 steel sections with Grade 50 Steel and are pinned at the foundation. The first story columns can be assumed restrained against rotation at the top, since they frame into a girder that can be assumed to be infinitely rigid in flexure. The girder and columns can be assumed to be inextensible. 3.1 - AISC H2 Verify the maximum lateral force P_{h} that the first story can resist for an ultimate load factor \\lambda=2.0 under the assumption that the gravity load P_{v} is negligible relative to the lateral load P_{h} using the diamond shaped plastic limit surface in Fig. 4.6 of the course reader (AISC Equation H2-1). CleanStart LimEqn = 'AISC-H2'; beta = 0; Ph = 217.67; [lamc,Qc] = hw3p3(beta,LimEqn,Ph,true); lamc Optimal solution found. lamc = 2.0000 3.2 - AISC H1 How much can the maximum lateral force P_{h} be increased by using the N -M plastic limit surface of the AISC specification in equation 4.7 of the course reader? CleanStart LimEqn = 'AISC-H1'; beta = 0; Ph = 236.64; [lamc,Qc] = hw3p3(beta,LimEqn,Ph); lamc Optimal solution found. lamc = 2.0000 3.3 - Vertical Load Repeat the preceding questions for the case that the gravity load P_{v} is equal to 50 \\% of the lateral load P_{h} under the assumption that it remains constant during the application of the lateral load and is, therefore, assigned an ultimate load factor of 1.2. 3.3.1 CleanStart LimEqn = 'AISC-H2'; beta = 1/2; Ph = 217.67; [lamc,Qc] = hw3p3(beta,LimEqn,Ph); lamc Optimal solution found. lamc = 2.0000","title":"HW-3 Problem 3"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/#hw-3-problem-3","text":"The purpose of the structural model in Fig. 3(a) is the study of the risk of a mid-rise building forming a soft first-story collapse mechanism under the combined action of a total gravity load P_{v} and a lateral load. The latter is assumed to be linearly distributed over the height of the building with a resultant P_{h} located at a distance H above the first floor. The building has a single bay of length L and the height of the first story is 12 feet. The ratio of (H-h)/ L is 4 . The first story columns consist of \\mathrm{W} 14 \\mathrm{x} 426 steel sections with Grade 50 Steel and are pinned at the foundation. The first story columns can be assumed restrained against rotation at the top, since they frame into a girder that can be assumed to be infinitely rigid in flexure. The girder and columns can be assumed to be inextensible.","title":"HW-3 Problem 3"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/#31-aisc-h2","text":"Verify the maximum lateral force P_{h} that the first story can resist for an ultimate load factor \\lambda=2.0 under the assumption that the gravity load P_{v} is negligible relative to the lateral load P_{h} using the diamond shaped plastic limit surface in Fig. 4.6 of the course reader (AISC Equation H2-1). CleanStart LimEqn = 'AISC-H2'; beta = 0; Ph = 217.67; [lamc,Qc] = hw3p3(beta,LimEqn,Ph,true); lamc Optimal solution found. lamc = 2.0000","title":"3.1 - AISC H2"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/#32-aisc-h1","text":"How much can the maximum lateral force P_{h} be increased by using the N -M plastic limit surface of the AISC specification in equation 4.7 of the course reader? CleanStart LimEqn = 'AISC-H1'; beta = 0; Ph = 236.64; [lamc,Qc] = hw3p3(beta,LimEqn,Ph); lamc Optimal solution found. lamc = 2.0000","title":"3.2 - AISC H1"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/#33-vertical-load","text":"Repeat the preceding questions for the case that the gravity load P_{v} is equal to 50 \\% of the lateral load P_{h} under the assumption that it remains constant during the application of the lateral load and is, therefore, assigned an ultimate load factor of 1.2.","title":"3.3 - Vertical Load"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/#331","text":"CleanStart LimEqn = 'AISC-H2'; beta = 1/2; Ph = 217.67; [lamc,Qc] = hw3p3(beta,LimEqn,Ph); lamc Optimal solution found. lamc = 2.0000","title":"3.3.1"},{"location":"examples/222_HW04_P2/222_HW04_P2/","text":"Problem 2 LoadFedeas('222'); format compact idx = 1; n = 10; m = 2; bc = 'a'; % Output{idx}.Case = strcat(num2str(n),'-',num2str(m),'-',bc); Output{idx} = CE222_Hw4P2(10,2,'a'); ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 4.687351e-12 Elapsed time is 0.187344 seconds. Tip displacement 20x4 idx = 2; n = 20; m = 4; bc = 'a'; Output{idx} = CE222_Hw4P2(n,m,bc,false); ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 1.110270e-11 Elapsed time is 0.333585 seconds. 40x4 idx = 3; n = 40; m = 4; bc = 'a'; % CleanStart % Output{idx}.Case = strcat(num2str(n),'-',num2str(m),'-',bc); Output{idx} = CE222_Hw4P2(n,m,bc); ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 2.614496e-11 Elapsed time is 0.618235 seconds. Tip displacement % Output{4}.Case = strcat(num2str(2),'-',num2str(2),'-','a'); Output{4} = CE222_Hw4P2(2,2,'a',false); ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 3.292876e-12 Elapsed time is 0.013195 seconds. format compact figure, hold on for jdx=[1:4] out = Output{jdx}; plot(out.State.x,out.State.Ux,'DisplayName',Output{jdx}.Case) end hold off title('Displacements along x at y = d/2') legend() This plot indicates that the displacements of this problem are very insensitive to mesh resolution. m=[ 2, 2, 4, 4, 6, 6]; n=[10,20,10,20,20,40]; bc = 'a' for idx=[1:6] bc lx = 100/n(idx); ly = 30/m(idx); h = sqrt(lx^2 + ly^2) OutputA{idx} = CE222_Hw4P2( n(idx), m(idx),bc,false); OutputA{idx}.h = h OutputA{idx}.lbl = strcat('n:',num2str(n(idx)),' m:',num2str(m(idx))); end bc = 'b' for idx=[1:6] bc lx = 100/n(idx); ly = 30/m(idx); h = sqrt(lx^2 + ly^2) OutputB{idx} = CE222_Hw4P2( n(idx), m(idx),bc,false); OutputB{idx}.h = h OutputB{idx}.lbl = strcat('n:',num2str(n(idx)),' m:',num2str(m(idx))); end bc = 'a' bc = 'a' h = 18.0278 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 4.687351e-12 Elapsed time is 0.087388 seconds. OutputA = 1x1 cell array {1x1 struct} bc = 'a' h = 15.8114 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 6.116751e-12 Elapsed time is 0.126509 seconds. OutputA = 1x2 cell array {1x1 struct} {1x1 struct} bc = 'a' h = 12.5000 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 7.092050e-12 Elapsed time is 0.106591 seconds. OutputA = 1x3 cell array {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 9.0139 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 1.110270e-11 Elapsed time is 0.215658 seconds. OutputA = 1x4 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 7.0711 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.095864e-11 Elapsed time is 0.994828 seconds. OutputA = 1x5 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 5.5902 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.718144e-11 Elapsed time is 1.036072 seconds. OutputA = 1x6 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' bc = 'b' h = 18.0278 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 5.166162e-12 Elapsed time is 0.068224 seconds. OutputB = 1x1 cell array {1x1 struct} bc = 'b' h = 15.8114 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 7.603279e-12 Elapsed time is 0.110418 seconds. OutputB = 1x2 cell array {1x1 struct} {1x1 struct} bc = 'b' h = 12.5000 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 7.842500e-12 Elapsed time is 0.126853 seconds. OutputB = 1x3 cell array {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 9.0139 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 9.996352e-12 Elapsed time is 0.720517 seconds. OutputB = 1x4 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 7.0711 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.183556e-11 Elapsed time is 0.431673 seconds. OutputB = 1x5 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 5.5902 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.960940e-11 Elapsed time is 0.719019 seconds. OutputB = 1x6 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} % clear ha,hb,Fb,Fa figure, hold on for jdx=[1:6] ha(jdx) = OutputA{jdx}.h; Fa(jdx) = max(OutputA{jdx}.F); lbl{jdx} = OutputA{jdx}.lbl; end plot(ha,Fa,'DisplayName','a') for jdx=[1:6] hb(jdx) = OutputB{jdx}.h; Fb(jdx) = max(OutputB{jdx}.F); end plot(hb,Fb,'o','DisplayName','b') text(hb+0.75,Fb+25,lbl) hold off title('Max force vs h') legend('Location','east') There is a lot that this plot is showing. The change in maximum force is generally decreasing as the representative element size, h , decreases, indicating convergence. However, this convergence is seemingly orthogonal to changes in lengthwise subdivisions, n . Additionally, models with the a and b boundary conditions behave exactly the same in this regard. % clear ha,hb,Fb,Fa figure, hold on for jdx=[1:6] out = OutputA{jdx}; lbl{jdx} = strcat('a: ',out.lbl); plot(out.State.x,out.State.Ux,':','DisplayName',lbl{jdx}) end for jdx=[1:6] out = OutputB{jdx}; lbl{jdx} = strcat('b: ',out.lbl); plot(out.State.x,out.State.Ux,':','DisplayName',lbl{jdx}) end hold off title('Displacements along x at y = d/2') legend('Location','east') This plot further shows the invariance of this particular problem to boundary conditions.","title":"Problem 2"},{"location":"examples/222_HW04_P2/222_HW04_P2/#problem-2","text":"LoadFedeas('222'); format compact idx = 1; n = 10; m = 2; bc = 'a'; % Output{idx}.Case = strcat(num2str(n),'-',num2str(m),'-',bc); Output{idx} = CE222_Hw4P2(10,2,'a'); ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 4.687351e-12 Elapsed time is 0.187344 seconds. Tip displacement","title":"Problem 2"},{"location":"examples/222_HW04_P2/222_HW04_P2/#20x4","text":"idx = 2; n = 20; m = 4; bc = 'a'; Output{idx} = CE222_Hw4P2(n,m,bc,false); ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 1.110270e-11 Elapsed time is 0.333585 seconds.","title":"20x4"},{"location":"examples/222_HW04_P2/222_HW04_P2/#40x4","text":"idx = 3; n = 40; m = 4; bc = 'a'; % CleanStart % Output{idx}.Case = strcat(num2str(n),'-',num2str(m),'-',bc); Output{idx} = CE222_Hw4P2(n,m,bc); ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 2.614496e-11 Elapsed time is 0.618235 seconds. Tip displacement % Output{4}.Case = strcat(num2str(2),'-',num2str(2),'-','a'); Output{4} = CE222_Hw4P2(2,2,'a',false); ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 3.292876e-12 Elapsed time is 0.013195 seconds. format compact figure, hold on for jdx=[1:4] out = Output{jdx}; plot(out.State.x,out.State.Ux,'DisplayName',Output{jdx}.Case) end hold off title('Displacements along x at y = d/2') legend() This plot indicates that the displacements of this problem are very insensitive to mesh resolution. m=[ 2, 2, 4, 4, 6, 6]; n=[10,20,10,20,20,40]; bc = 'a' for idx=[1:6] bc lx = 100/n(idx); ly = 30/m(idx); h = sqrt(lx^2 + ly^2) OutputA{idx} = CE222_Hw4P2( n(idx), m(idx),bc,false); OutputA{idx}.h = h OutputA{idx}.lbl = strcat('n:',num2str(n(idx)),' m:',num2str(m(idx))); end bc = 'b' for idx=[1:6] bc lx = 100/n(idx); ly = 30/m(idx); h = sqrt(lx^2 + ly^2) OutputB{idx} = CE222_Hw4P2( n(idx), m(idx),bc,false); OutputB{idx}.h = h OutputB{idx}.lbl = strcat('n:',num2str(n(idx)),' m:',num2str(m(idx))); end bc = 'a' bc = 'a' h = 18.0278 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 4.687351e-12 Elapsed time is 0.087388 seconds. OutputA = 1x1 cell array {1x1 struct} bc = 'a' h = 15.8114 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 6.116751e-12 Elapsed time is 0.126509 seconds. OutputA = 1x2 cell array {1x1 struct} {1x1 struct} bc = 'a' h = 12.5000 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 7.092050e-12 Elapsed time is 0.106591 seconds. OutputA = 1x3 cell array {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 9.0139 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 1.110270e-11 Elapsed time is 0.215658 seconds. OutputA = 1x4 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 7.0711 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.095864e-11 Elapsed time is 0.994828 seconds. OutputA = 1x5 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 5.5902 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.718144e-11 Elapsed time is 1.036072 seconds. OutputA = 1x6 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' bc = 'b' h = 18.0278 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 5.166162e-12 Elapsed time is 0.068224 seconds. OutputB = 1x1 cell array {1x1 struct} bc = 'b' h = 15.8114 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 7.603279e-12 Elapsed time is 0.110418 seconds. OutputB = 1x2 cell array {1x1 struct} {1x1 struct} bc = 'b' h = 12.5000 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 7.842500e-12 Elapsed time is 0.126853 seconds. OutputB = 1x3 cell array {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 9.0139 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 9.996352e-12 Elapsed time is 0.720517 seconds. OutputB = 1x4 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 7.0711 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.183556e-11 Elapsed time is 0.431673 seconds. OutputB = 1x5 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 5.5902 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.960940e-11 Elapsed time is 0.719019 seconds. OutputB = 1x6 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} % clear ha,hb,Fb,Fa figure, hold on for jdx=[1:6] ha(jdx) = OutputA{jdx}.h; Fa(jdx) = max(OutputA{jdx}.F); lbl{jdx} = OutputA{jdx}.lbl; end plot(ha,Fa,'DisplayName','a') for jdx=[1:6] hb(jdx) = OutputB{jdx}.h; Fb(jdx) = max(OutputB{jdx}.F); end plot(hb,Fb,'o','DisplayName','b') text(hb+0.75,Fb+25,lbl) hold off title('Max force vs h') legend('Location','east') There is a lot that this plot is showing. The change in maximum force is generally decreasing as the representative element size, h , decreases, indicating convergence. However, this convergence is seemingly orthogonal to changes in lengthwise subdivisions, n . Additionally, models with the a and b boundary conditions behave exactly the same in this regard. % clear ha,hb,Fb,Fa figure, hold on for jdx=[1:6] out = OutputA{jdx}; lbl{jdx} = strcat('a: ',out.lbl); plot(out.State.x,out.State.Ux,':','DisplayName',lbl{jdx}) end for jdx=[1:6] out = OutputB{jdx}; lbl{jdx} = strcat('b: ',out.lbl); plot(out.State.x,out.State.Ux,':','DisplayName',lbl{jdx}) end hold off title('Displacements along x at y = d/2') legend('Location','east') This plot further shows the invariance of this particular problem to boundary conditions.","title":"40x4"},{"location":"examples/A-short-walk/","text":"Inelasticity in Frame Sections In this section, the response of a nonlinear cross section is analyzed, which is assumed to represent a thin slice of a frame member, for which fiber strains can be considered constant. Part A: T-Section Output = Hw12P1A(nft, nwl, SIntTyp, Hk, yc, N_Np, Tmax, LoadOpt) Solution stability under perfect plasticity {#fig:mc1} fig. 1 presents the moment-curvature response for the first two cases, which utilize perfectly-pastic and effectively plastic ( H_k = 10^{-9} ) materials, respectively. Additionally, this figure tracks the movement of the neutral axis location throughout the moment curvature analysis for runs \\ref{run:P1-0} {=tex} and \\ref{run:P1-1} {=tex}. At each load step, this location is calculated according to the following relation: y_{NA} = \\dfrac{\\epsilon_{ref, i}}{\\kappa_i} - y_{ref} Where \\epsilon_{ref, i} is the axial strain measured at the current reference axis location, y_{ref} . Effects of axial force Cyclic loading 4 {#fig:mc4} 5 {#fig:mc5} 6 Part B: Rectangular Section This problem was used to study some possible applications of automatic differentiation to inelastic section analysis. Using a differentiable programming framework, a return-mapping algorithm was implemented which accounts for linear or nonlinear isotropic hardening, and basic kinematic hardening. This algorithm is called to evaluate cross sectional forces for a given strain distribution, and this procedure is differentiated with forward-mode automatic differentiation to yield the tangent stiffness of the cross section. plastic surface Experiment I: O-A-B-O {width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {#fig:ssh-oabo} Experiment II: O-A-B-C-O {width=\"60%,\" height=\"60%\"} {width=60%,height=\"60%\"} {#fig:ssh-oabco} Inelasticity in Frame Members Output = Hw12P2A( Elem, Hkr , ) Output = Hw12P2B( EIntType, Hkr, SIntTyp,nfl,nwl,nIP) Concentrated plasticity {#fig:cpcol} The cyclic response of two concentrated plasticity elements is compared in fig. 1. Under the conditions of this analysis, the LHNMYS element appears to very closely approximate the true plastic limit capacity of the cross section, shown in red in fig. 1 (a). However, it should be noted that the \"exact\" surface which is depicted here is only representative of a single cross section slice, and not neccessarily the full column. The lack of any axial-moment interaction in the OneComp element is very evident in from plots. The additional computational time required by the LHNMYS element appears to be considerable, but it remains to be seen how this time demand will scale to larger models. Distributed inelasticity Nonlinear Static Analysis A nonlinear static analysis of an 8-story framed structure is performed useing a function with the following handle: Output = Hw12P3(Geom, Column, Dlam0, nostep, Hkr) In this function, Geom specifies the frame element geometric stiffness ( linear , PDelta or corotational ). The argument Column is used to specify the finite element formulation used in the vertical elements of the model. For the purpose of this study, and that of sec. \u00bfsec:4-nta? \\ref{sec:4-nta} {=tex} ,all girders are modeled using the Inel2dFrm_wOneComp formulation. Inelastic without interaction {#fig:lr1} The pushover curves for two cases are presented in fig. 1, which consider two different concentrated plasticity elements. The zoomed field indicates that the curves are essentially identical. 2 The pushover curves for all prescribed transient analysis cases are presented above. The legend indicates the element name, along with the length of time required by the analysis to conclude. Nonlinear Transient Analysis [output,Model] = Hw12P4(Geom, Column, Factor) Inelastic without interaction 2 3 4 Other","title":"Index"},{"location":"examples/A-short-walk/#inelasticity-in-frame-sections","text":"In this section, the response of a nonlinear cross section is analyzed, which is assumed to represent a thin slice of a frame member, for which fiber strains can be considered constant.","title":"Inelasticity in Frame Sections"},{"location":"examples/A-short-walk/#part-a-t-section","text":"Output = Hw12P1A(nft, nwl, SIntTyp, Hk, yc, N_Np, Tmax, LoadOpt)","title":"Part A: T-Section"},{"location":"examples/A-short-walk/#solution-stability-under-perfect-plasticity","text":"{#fig:mc1} fig. 1 presents the moment-curvature response for the first two cases, which utilize perfectly-pastic and effectively plastic ( H_k = 10^{-9} ) materials, respectively. Additionally, this figure tracks the movement of the neutral axis location throughout the moment curvature analysis for runs \\ref{run:P1-0} {=tex} and \\ref{run:P1-1} {=tex}. At each load step, this location is calculated according to the following relation: y_{NA} = \\dfrac{\\epsilon_{ref, i}}{\\kappa_i} - y_{ref} Where \\epsilon_{ref, i} is the axial strain measured at the current reference axis location, y_{ref} .","title":"Solution stability under perfect plasticity"},{"location":"examples/A-short-walk/#effects-of-axial-force","text":"","title":"Effects of axial force"},{"location":"examples/A-short-walk/#cyclic-loading","text":"","title":"Cyclic loading"},{"location":"examples/A-short-walk/#4","text":"{#fig:mc4}","title":"4"},{"location":"examples/A-short-walk/#5","text":"{#fig:mc5}","title":"5"},{"location":"examples/A-short-walk/#6","text":"","title":"6"},{"location":"examples/A-short-walk/#part-b-rectangular-section","text":"This problem was used to study some possible applications of automatic differentiation to inelastic section analysis. Using a differentiable programming framework, a return-mapping algorithm was implemented which accounts for linear or nonlinear isotropic hardening, and basic kinematic hardening. This algorithm is called to evaluate cross sectional forces for a given strain distribution, and this procedure is differentiated with forward-mode automatic differentiation to yield the tangent stiffness of the cross section. plastic surface","title":"Part B: Rectangular Section"},{"location":"examples/A-short-walk/#experiment-i-o-a-b-o","text":"{width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {#fig:ssh-oabo}","title":"Experiment I: O-A-B-O"},{"location":"examples/A-short-walk/#experiment-ii-o-a-b-c-o","text":"{width=\"60%,\" height=\"60%\"} {width=60%,height=\"60%\"} {#fig:ssh-oabco}","title":"Experiment II: O-A-B-C-O"},{"location":"examples/A-short-walk/#inelasticity-in-frame-members","text":"Output = Hw12P2A( Elem, Hkr , ) Output = Hw12P2B( EIntType, Hkr, SIntTyp,nfl,nwl,nIP)","title":"Inelasticity in Frame Members"},{"location":"examples/A-short-walk/#concentrated-plasticity","text":"{#fig:cpcol} The cyclic response of two concentrated plasticity elements is compared in fig. 1. Under the conditions of this analysis, the LHNMYS element appears to very closely approximate the true plastic limit capacity of the cross section, shown in red in fig. 1 (a). However, it should be noted that the \"exact\" surface which is depicted here is only representative of a single cross section slice, and not neccessarily the full column. The lack of any axial-moment interaction in the OneComp element is very evident in from plots. The additional computational time required by the LHNMYS element appears to be considerable, but it remains to be seen how this time demand will scale to larger models.","title":"Concentrated plasticity"},{"location":"examples/A-short-walk/#distributed-inelasticity","text":"","title":"Distributed inelasticity"},{"location":"examples/A-short-walk/#nonlinear-static-analysis","text":"A nonlinear static analysis of an 8-story framed structure is performed useing a function with the following handle: Output = Hw12P3(Geom, Column, Dlam0, nostep, Hkr) In this function, Geom specifies the frame element geometric stiffness ( linear , PDelta or corotational ). The argument Column is used to specify the finite element formulation used in the vertical elements of the model. For the purpose of this study, and that of sec. \u00bfsec:4-nta? \\ref{sec:4-nta} {=tex} ,all girders are modeled using the Inel2dFrm_wOneComp formulation.","title":"Nonlinear Static Analysis"},{"location":"examples/A-short-walk/#inelastic-without-interaction","text":"{#fig:lr1} The pushover curves for two cases are presented in fig. 1, which consider two different concentrated plasticity elements. The zoomed field indicates that the curves are essentially identical.","title":"Inelastic without interaction"},{"location":"examples/A-short-walk/#2","text":"The pushover curves for all prescribed transient analysis cases are presented above. The legend indicates the element name, along with the length of time required by the analysis to conclude.","title":"2"},{"location":"examples/A-short-walk/#nonlinear-transient-analysis","text":"[output,Model] = Hw12P4(Geom, Column, Factor)","title":"Nonlinear Transient Analysis"},{"location":"examples/A-short-walk/#inelastic-without-interaction_1","text":"","title":"Inelastic without interaction"},{"location":"examples/A-short-walk/#2_1","text":"","title":"2"},{"location":"examples/A-short-walk/#3","text":"","title":"3"},{"location":"examples/A-short-walk/#4_1","text":"","title":"4"},{"location":"examples/A-short-walk/#other","text":"","title":"Other"},{"location":"examples/A-short-walk/Part-1a/","text":"Inelasticity in Frame Sections In this section, the response of a nonlinear cross section is analyzed, which is assumed to represent a thin slice of a frame member, for which fiber strains can be considered constant. Part A: T-Section Output = Hw12P1A(nft, nwl, SIntTyp, Hk, yc, N_Np, Tmax, LoadOpt) Solution stability under perfect plasticity {#fig:mc1} fig. 1 presents the moment-curvature response for the first two cases, which utilize perfectly-pastic and effectively plastic ( H_k = 10^{-9} ) materials, respectively. Additionally, this figure tracks the movement of the neutral axis location throughout the moment curvature analysis for runs \\ref{run:P1-0} {=tex} and \\ref{run:P1-1} {=tex}. At each load step, this location is calculated according to the following relation: y_{NA} = \\dfrac{\\epsilon_{ref, i}}{\\kappa_i} - y_{ref} Where \\epsilon_{ref, i} is the axial strain measured at the current reference axis location, y_{ref} . Effects of axial force Cyclic loading 4 {#fig:mc4} 5 {#fig:mc5} 6","title":"Part 1a"},{"location":"examples/A-short-walk/Part-1a/#inelasticity-in-frame-sections","text":"In this section, the response of a nonlinear cross section is analyzed, which is assumed to represent a thin slice of a frame member, for which fiber strains can be considered constant.","title":"Inelasticity in Frame Sections"},{"location":"examples/A-short-walk/Part-1a/#part-a-t-section","text":"Output = Hw12P1A(nft, nwl, SIntTyp, Hk, yc, N_Np, Tmax, LoadOpt)","title":"Part A: T-Section"},{"location":"examples/A-short-walk/Part-1a/#solution-stability-under-perfect-plasticity","text":"{#fig:mc1} fig. 1 presents the moment-curvature response for the first two cases, which utilize perfectly-pastic and effectively plastic ( H_k = 10^{-9} ) materials, respectively. Additionally, this figure tracks the movement of the neutral axis location throughout the moment curvature analysis for runs \\ref{run:P1-0} {=tex} and \\ref{run:P1-1} {=tex}. At each load step, this location is calculated according to the following relation: y_{NA} = \\dfrac{\\epsilon_{ref, i}}{\\kappa_i} - y_{ref} Where \\epsilon_{ref, i} is the axial strain measured at the current reference axis location, y_{ref} .","title":"Solution stability under perfect plasticity"},{"location":"examples/A-short-walk/Part-1a/#effects-of-axial-force","text":"","title":"Effects of axial force"},{"location":"examples/A-short-walk/Part-1a/#cyclic-loading","text":"","title":"Cyclic loading"},{"location":"examples/A-short-walk/Part-1a/#4","text":"{#fig:mc4}","title":"4"},{"location":"examples/A-short-walk/Part-1a/#5","text":"{#fig:mc5}","title":"5"},{"location":"examples/A-short-walk/Part-1a/#6","text":"","title":"6"},{"location":"examples/A-short-walk/Part-1b/","text":"Part B: Rectangular Section This problem was used to study some possible applications of automatic differentiation to inelastic section analysis. Using a differentiable programming framework, a return-mapping algorithm was implemented which accounts for linear or nonlinear isotropic hardening, and basic kinematic hardening. This algorithm is called to evaluate cross sectional forces for a given strain distribution, and this procedure is differentiated with forward-mode automatic differentiation to yield the tangent stiffness of the cross section. plastic surface Experiment I: O-A-B-O {width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {=html} <!-- ![Strain and stiffness history for load path O-A-B-O](docs/img/p1/strain-stiffness-1-4.png){#fig:ssh-oabo} --> Experiment II: O-A-B-C-O {width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {#fig:ssh-oabco}","title":"Part 1b"},{"location":"examples/A-short-walk/Part-1b/#part-b-rectangular-section","text":"This problem was used to study some possible applications of automatic differentiation to inelastic section analysis. Using a differentiable programming framework, a return-mapping algorithm was implemented which accounts for linear or nonlinear isotropic hardening, and basic kinematic hardening. This algorithm is called to evaluate cross sectional forces for a given strain distribution, and this procedure is differentiated with forward-mode automatic differentiation to yield the tangent stiffness of the cross section. plastic surface","title":"Part B: Rectangular Section"},{"location":"examples/A-short-walk/Part-1b/#experiment-i-o-a-b-o","text":"{width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {=html} <!-- ![Strain and stiffness history for load path O-A-B-O](docs/img/p1/strain-stiffness-1-4.png){#fig:ssh-oabo} -->","title":"Experiment I: O-A-B-O"},{"location":"examples/A-short-walk/Part-1b/#experiment-ii-o-a-b-c-o","text":"{width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {#fig:ssh-oabco}","title":"Experiment II: O-A-B-C-O"},{"location":"examples/A-short-walk/Part-2/","text":"Inelasticity in Frame Members Output = Hw12P2A( Elem, Hkr , ) Output = Hw12P2B( EIntType, Hkr, SIntTyp,nfl,nwl,nIP) Concentrated plasticity {#fig:cpcol} The cyclic response of two concentrated plasticity elements is compared in fig. 1. Under the conditions of this analysis, the LHNMYS element appears to very closely approximate the true plastic limit capacity of the cross section, shown in red in fig. 1 (a). However, it should be noted that the \"exact\" surface which is depicted here is only representative of a single cross section slice, and not neccessarily the full column. The lack of any axial-moment interaction in the OneComp element is very evident in from plots. The additional computational time required by the LHNMYS element appears to be considerable, but it remains to be seen how this time demand will scale to larger models. Distributed inelasticity","title":"Part 2"},{"location":"examples/A-short-walk/Part-2/#inelasticity-in-frame-members","text":"Output = Hw12P2A( Elem, Hkr , ) Output = Hw12P2B( EIntType, Hkr, SIntTyp,nfl,nwl,nIP)","title":"Inelasticity in Frame Members"},{"location":"examples/A-short-walk/Part-2/#concentrated-plasticity","text":"{#fig:cpcol} The cyclic response of two concentrated plasticity elements is compared in fig. 1. Under the conditions of this analysis, the LHNMYS element appears to very closely approximate the true plastic limit capacity of the cross section, shown in red in fig. 1 (a). However, it should be noted that the \"exact\" surface which is depicted here is only representative of a single cross section slice, and not neccessarily the full column. The lack of any axial-moment interaction in the OneComp element is very evident in from plots. The additional computational time required by the LHNMYS element appears to be considerable, but it remains to be seen how this time demand will scale to larger models.","title":"Concentrated plasticity"},{"location":"examples/A-short-walk/Part-2/#distributed-inelasticity","text":"","title":"Distributed inelasticity"},{"location":"examples/A-short-walk/Part-3/","text":"Nonlinear Static Analysis {#sec:nsa} A nonlinear static analysis of an 8-story framed structure is performed useing a function with the following handle: Output = Hw12P3(Geom, Column, Dlam0, nostep, Hkr) In this function, Geom specifies the frame element geometric stiffness ( linear , PDelta or corotational ). The argument Column is used to specify the finite element formulation used in the vertical elements of the model. For the purpose of this study, and that of sec. \u00bfsec:4-nta? \\ref{sec:4-nta} {=tex} ,all girders are modeled using the Inel2dFrm_wOneComp formulation. Inelastic without interaction {#fig:lr1} The pushover curves for two cases are presented in fig. 1, which consider two different concentrated plasticity elements. The zoomed field indicates that the curves are essentially identical. 2 The pushover curves for all prescribed transient analysis cases are presented above. The legend indicates the element name, along with the length of time required by the analysis to conclude.","title":"Part 3"},{"location":"examples/A-short-walk/Part-3/#nonlinear-static-analysis-secnsa","text":"A nonlinear static analysis of an 8-story framed structure is performed useing a function with the following handle: Output = Hw12P3(Geom, Column, Dlam0, nostep, Hkr) In this function, Geom specifies the frame element geometric stiffness ( linear , PDelta or corotational ). The argument Column is used to specify the finite element formulation used in the vertical elements of the model. For the purpose of this study, and that of sec. \u00bfsec:4-nta? \\ref{sec:4-nta} {=tex} ,all girders are modeled using the Inel2dFrm_wOneComp formulation.","title":"Nonlinear Static Analysis {#sec:nsa}"},{"location":"examples/A-short-walk/Part-3/#inelastic-without-interaction","text":"{#fig:lr1} The pushover curves for two cases are presented in fig. 1, which consider two different concentrated plasticity elements. The zoomed field indicates that the curves are essentially identical.","title":"Inelastic without interaction"},{"location":"examples/A-short-walk/Part-3/#2","text":"The pushover curves for all prescribed transient analysis cases are presented above. The legend indicates the element name, along with the length of time required by the analysis to conclude.","title":"2"},{"location":"examples/A-short-walk/Part-4/","text":"Nonlinear Transient Analysis {#sec:4-nta} [output,Model] = Hw12P4(Geom, Column, Factor) Inelastic without interaction Figure \\ref{fig:c1-1} {=tex} 2 3 4 Other","title":"Part 4"},{"location":"examples/A-short-walk/Part-4/#nonlinear-transient-analysis-sec4-nta","text":"[output,Model] = Hw12P4(Geom, Column, Factor)","title":"Nonlinear Transient Analysis {#sec:4-nta}"},{"location":"examples/A-short-walk/Part-4/#inelastic-without-interaction","text":"Figure \\ref{fig:c1-1} {=tex}","title":"Inelastic without interaction"},{"location":"examples/A-short-walk/Part-4/#2","text":"","title":"2"},{"location":"examples/A-short-walk/Part-4/#3","text":"","title":"3"},{"location":"examples/A-short-walk/Part-4/#4","text":"","title":"4"},{"location":"examples/A-short-walk/Part-4/#other","text":"","title":"Other"}]}