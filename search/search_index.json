{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u03a6\u03f5\u03b9\u03b4\u03b9\u03b1\u03c2 FEDEASLab is a modular research framework for the simulation of nonlinear structural response under static and dynamic loads, with a reference implementation written in Matlab\u00a9 . Download Modularity FEDEASLab functions interact through a consistent API that allows users to easily implement new finite element and material models.. Library Example Path-dependence The solution procedures implemented by FEDEASLab . Library Example Transient Model transient response under several support acceleration patterns with state-of-the-art integration algorithms. Library \u00bb Examples \u00bb Post-Processing Post-processing is accommodated in the program by generating a data object that carries all important material, element and structural information for plotting or printing. Several functions that address basic post-processing tasks are provided. The user can easily enhance and extend the current capabilities. Library \u00bb Examples \u00bb Learning Talk about use in the classroom, probably link to examples. Introduction to Finite Element Modeling \u00bb Acknowledgements FEDEASLab development has been made possible through the following past and present supportorters: UC Berkeley Family of FEA Tools","title":"Home"},{"location":"DataStructs/","text":"Data Structures Model Model contains... --8<-- \"DataStructures/Model.md\" ElemData","title":"Data Structures"},{"location":"DataStructs/#data-structures","text":"","title":"Data Structures"},{"location":"DataStructs/#model","text":"Model contains... --8<-- \"DataStructures/Model.md\"","title":"Model"},{"location":"DataStructs/#elemdata","text":"","title":"ElemData"},{"location":"ModelLib/","text":"","title":"Modeling Library"},{"location":"about/","text":"About FEDEASLab FEDEASLab is a modular Matlab\u00a9 toolbox for the simulation of the nonlinear structural response under static and dynamic loads. The names stands for Finite Elements for Design, Evaluation and Analysis of Structures and pays homage to \u03a6\u03f5\u03b9\u03b4\u03b9\u03b1\u03c2, the creator of the magnificent sculptures for the Parthenon during the golden age of Athens under Pericles. and has been used successfully for the development of new elements and material models, as well as for the simulation of the response of small and large structural models in research and instruction. The toolbox consists of several functions grouped in categories. These functions operate on five basic data structures which represent the model, the loading, the element properties, the state of the structural response, and the parameters of the solution strategy. A sixth data structure is optional and carries post-processing information that can be used for response interpretation and visualization. The process of performing the nonlinear response analysis of a structure under static or transient conditions is broken down into logical steps. Each step is represented by a separate function. With this approach the definition of the model, the element properties and the loading as well as the analysis of the model under the given loading is accomplished with scripts that invoke the individual functions. Alternative solution strategies can be readily explored. Moreover, the user can easily exchange a function to provide additional capabilities. It is equally easy to access the data objects and enhance the information stored in them. A common task is the addition of element and material models. This task is simplified by the consistent function interface used throughout the toolbox. License","title":"About"},{"location":"about/#about-fedeaslab","text":"FEDEASLab is a modular Matlab\u00a9 toolbox for the simulation of the nonlinear structural response under static and dynamic loads. The names stands for Finite Elements for Design, Evaluation and Analysis of Structures and pays homage to \u03a6\u03f5\u03b9\u03b4\u03b9\u03b1\u03c2, the creator of the magnificent sculptures for the Parthenon during the golden age of Athens under Pericles. and has been used successfully for the development of new elements and material models, as well as for the simulation of the response of small and large structural models in research and instruction. The toolbox consists of several functions grouped in categories. These functions operate on five basic data structures which represent the model, the loading, the element properties, the state of the structural response, and the parameters of the solution strategy. A sixth data structure is optional and carries post-processing information that can be used for response interpretation and visualization. The process of performing the nonlinear response analysis of a structure under static or transient conditions is broken down into logical steps. Each step is represented by a separate function. With this approach the definition of the model, the element properties and the loading as well as the analysis of the model under the given loading is accomplished with scripts that invoke the individual functions. Alternative solution strategies can be readily explored. Moreover, the user can easily exchange a function to provide additional capabilities. It is equally easy to access the data objects and enhance the information stored in them. A common task is the addition of element and material models. This task is simplified by the consistent function interface used throughout the toolbox.","title":"About FEDEASLab"},{"location":"about/#license","text":"","title":"License"},{"location":"elements/","text":"Finite elements This page briefly presents some important families of finite elements. Mixed-Field Elements Beams 3-Field Primal Field Elements Elements in this family are formulated in terms of an unknown displacement field from the total potential energy functional. Lagrange Tensor Product Quad LE4to9nodeQuad Lagrange Serendipity Quad LE4to9nodeQuad Lagrange Hierarchical Quad Lagrange Standard Simplex Lagrange Hierarchical Simplex","title":"Finite elements"},{"location":"elements/#finite-elements","text":"This page briefly presents some important families of finite elements.","title":"Finite elements"},{"location":"elements/#mixed-field-elements","text":"","title":"Mixed-Field Elements"},{"location":"elements/#beams","text":"","title":"Beams"},{"location":"elements/#3-field","text":"","title":"3-Field"},{"location":"elements/#primal-field-elements","text":"Elements in this family are formulated in terms of an unknown displacement field from the total potential energy functional.","title":"Primal Field Elements"},{"location":"elements/#lagrange-tensor-product-quad","text":"LE4to9nodeQuad","title":"Lagrange Tensor Product Quad"},{"location":"elements/#lagrange-serendipity-quad","text":"LE4to9nodeQuad","title":"Lagrange Serendipity Quad"},{"location":"elements/#lagrange-hierarchical-quad","text":"","title":"Lagrange Hierarchical Quad"},{"location":"elements/#lagrange-standard-simplex","text":"","title":"Lagrange Standard Simplex"},{"location":"elements/#lagrange-hierarchical-simplex","text":"","title":"Lagrange Hierarchical Simplex"},{"location":"elemlib/","text":"Element Library # Element Description Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Inel2dFrm_wLHNMYS 2d linear elastic frame element with linear plastic hardening axial-flexure hinges Parameters rho : mass density A : cross sectional area I : moment of inertia E : modulus of elasticity Np : plastic axial capacity of element Mp : plastic moment capacity of element GPYSC : polynomial exponents for plastic surface (see help for function GPYS) Hir : isotropic hardening ratio for flexural end i and j Hkr : kinematic hardening ratio for axial, flexural end i and end j w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; LdIdx : load history no for element loading in x-direction LdIdy : load history no for element loading in y-direction Wtol : incremental work tolerance for state convergence MaxIter : maximum number of iterations for state convergence SubDivNo : number of element deformation subdivisions State Inel2dFrm_wLPPM 2d frame linear elastic element perfectly plastic flexural response Parameters State Inel2dFrm_wOneComp one component 2d frame element with rigid-linear hardening end hinges Parameters rho : mass density E : Young's modulus A : cross-sectional area I : moment of inertia Mp : plastic moment capacity at end nodes i & j ( Mp = [Mpi, Mpj] ) Hi : isotropic plastic modulus Hk : kinematic modulus w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State Inel2dFrm_wTwoComp two component 2d frame element (linear + linear-perfectly plastic) Parameters State LE2dFrm 2d LE frame element under linear or nonlinear geometry Parameters A : cross sectional area E : modulus of elasticity I : moment of inertia Mp : plastic moment capacity rho : mass density jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry Parameters State HomoCircSecw1dMat None Parameters R(1:2) : outer radius and inner radius of section (default = R(1) only) nr : no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth : no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) Rdrat : ratio of inner to outer radius for switching to uniform dicretization IntTyp : function name for section integration ('Midpoint' or 'Cubature') MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State HomoRectSecw1dMat None Parameters d : section depth b : section width ny : no of integration points (fibers) in y (default = 10) nz : no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) IntTyp : function name for section integration MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State e : vector of total section deformations De : vector of section deformation increments from last convergence DDe : vector of section deformation increments from last iteration edot : vector of section deformation rates ks : section stiffness matrix; returned under ACTION = 'stif' s : section resisting force vector; returned under ACTION = 'stif' or 'forc' Past : section history variables at last converged state Pres : current section history variables HomoWFSecw1dMat None Parameters State <script type=\"math/tex\">(\"a[id^=show_]\").click(function(event) { (\"#extra_\" + $(this).attr('id').substr(5)).slideToggle(\"fast\"); event.preventDefault();})","title":"Elements"},{"location":"elemlib/#element-library","text":"# Element Description Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Inel2dFrm_wLHNMYS 2d linear elastic frame element with linear plastic hardening axial-flexure hinges Parameters rho : mass density A : cross sectional area I : moment of inertia E : modulus of elasticity Np : plastic axial capacity of element Mp : plastic moment capacity of element GPYSC : polynomial exponents for plastic surface (see help for function GPYS) Hir : isotropic hardening ratio for flexural end i and j Hkr : kinematic hardening ratio for axial, flexural end i and end j w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; LdIdx : load history no for element loading in x-direction LdIdy : load history no for element loading in y-direction Wtol : incremental work tolerance for state convergence MaxIter : maximum number of iterations for state convergence SubDivNo : number of element deformation subdivisions State Inel2dFrm_wLPPM 2d frame linear elastic element perfectly plastic flexural response Parameters State Inel2dFrm_wOneComp one component 2d frame element with rigid-linear hardening end hinges Parameters rho : mass density E : Young's modulus A : cross-sectional area I : moment of inertia Mp : plastic moment capacity at end nodes i & j ( Mp = [Mpi, Mpj] ) Hi : isotropic plastic modulus Hk : kinematic modulus w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State Inel2dFrm_wTwoComp two component 2d frame element (linear + linear-perfectly plastic) Parameters State LE2dFrm 2d LE frame element under linear or nonlinear geometry Parameters A : cross sectional area E : modulus of elasticity I : moment of inertia Mp : plastic moment capacity rho : mass density jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry Parameters State HomoCircSecw1dMat None Parameters R(1:2) : outer radius and inner radius of section (default = R(1) only) nr : no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth : no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) Rdrat : ratio of inner to outer radius for switching to uniform dicretization IntTyp : function name for section integration ('Midpoint' or 'Cubature') MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State HomoRectSecw1dMat None Parameters d : section depth b : section width ny : no of integration points (fibers) in y (default = 10) nz : no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) IntTyp : function name for section integration MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State e : vector of total section deformations De : vector of section deformation increments from last convergence DDe : vector of section deformation increments from last iteration edot : vector of section deformation rates ks : section stiffness matrix; returned under ACTION = 'stif' s : section resisting force vector; returned under ACTION = 'stif' or 'forc' Past : section history variables at last converged state Pres : current section history variables HomoWFSecw1dMat None Parameters State <script type=\"math/tex\">(\"a[id^=show_]\").click(function(event) { (\"#extra_\" + $(this).attr('id').substr(5)).slideToggle(\"fast\"); event.preventDefault();})","title":"Element Library"},{"location":"matlib/","text":"Material Library # Element Description BiLinElastic1dMat Uniaxial stress-strain relation for a bilinear elastic material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinHyst1dMat Bilinear hysteretic force-deformation relation with pinching Parameters sig1p : positive stress at first transition eps1p : positive strain at first transition sig2p : ultimate positive stress eps2p : ultimate positive strain sig1n : negative stress at first transition eps1n : negative strain at first transition sig2n : ultimate negative stress eps2n : ultimate negative strain pnchx(+ve ; -ve) : x-pinching parameters under +ve and -ve deformation pnchy(+ve ; -ve) : y-pinching parameters under +ve and -ve deformation State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinInel1dMat Uniaxial stress-strain relation for bilinear inelastic material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinOrOr1dMat Uniaxial stress-strain relation for bilinear origin-oriented material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinPKOr1dMat Uniaxial stress-strain relation for bilinear origin-oriented material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables GMP1DMAT Uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material Parameters E : initial modulus fy : yield strength b : strain hardening ratio R0 : exp transition elastic-plastic cR1 : coefficient for variation of R0 cR2 : coefficient for variation of R0 a1 : isotropic hardening (IH) coefficient in compression a2 : trigger strain ductility for IH in compression a3 : isotropic hardening (IH) coefficient in tension a4 : trigger strain ductility for IH in tension State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables InelJ2PwLH3DMat inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Parameters E : initial modulus fy : yield strength nu : Poisson ratio Hk : kinematic hardening modulus Hi : isotropic hardening modulus State eps : total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km : material stiffness matrix; returned under ACTION = 'stif' sig : stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables InelLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening. Material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Parameters E : initial modulus fy : yield strength Hi : isotropic plastic modulus Hk : kinematic hardening modulus State eps : total strain Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate km : material stiffness matrix; returned under ACTION = 'stif' sig : stress; returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables MANDERCONCR1DMAT hysteretic concrete stress-strain relation after Mander Parameters fc : compressive strength for unconfined concrete epc0 : strain at compressive strength for unconfined concrete Ec : initial modulus for unconfined concrete Kfc : ratio of confined to unconfined concrete strength State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables <script type=\"math/tex\">(\"a[id^=show_]\").click(function(event) { (\"#extra_\" + $(this).attr('id').substr(5)).slideToggle(\"fast\"); event.preventDefault();})","title":"Materials"},{"location":"matlib/#material-library","text":"# Element Description BiLinElastic1dMat Uniaxial stress-strain relation for a bilinear elastic material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinHyst1dMat Bilinear hysteretic force-deformation relation with pinching Parameters sig1p : positive stress at first transition eps1p : positive strain at first transition sig2p : ultimate positive stress eps2p : ultimate positive strain sig1n : negative stress at first transition eps1n : negative strain at first transition sig2n : ultimate negative stress eps2n : ultimate negative strain pnchx(+ve ; -ve) : x-pinching parameters under +ve and -ve deformation pnchy(+ve ; -ve) : y-pinching parameters under +ve and -ve deformation State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinInel1dMat Uniaxial stress-strain relation for bilinear inelastic material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinOrOr1dMat Uniaxial stress-strain relation for bilinear origin-oriented material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables BiLinPKOr1dMat Uniaxial stress-strain relation for bilinear origin-oriented material Parameters E : initial modulus fy : yield strength Eh : post-yield modulus State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material stiffness matrix; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables GMP1DMAT Uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material Parameters E : initial modulus fy : yield strength b : strain hardening ratio R0 : exp transition elastic-plastic cR1 : coefficient for variation of R0 cR2 : coefficient for variation of R0 a1 : isotropic hardening (IH) coefficient in compression a2 : trigger strain ductility for IH in compression a3 : isotropic hardening (IH) coefficient in tension a4 : trigger strain ductility for IH in tension State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables InelJ2PwLH3DMat inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Parameters E : initial modulus fy : yield strength nu : Poisson ratio Hk : kinematic hardening modulus Hi : isotropic hardening modulus State eps : total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km : material stiffness matrix; returned under ACTION = 'stif' sig : stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables InelLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening. Material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Parameters E : initial modulus fy : yield strength Hi : isotropic plastic modulus Hk : kinematic hardening modulus State eps : total strain Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate km : material stiffness matrix; returned under ACTION = 'stif' sig : stress; returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables MANDERCONCR1DMAT hysteretic concrete stress-strain relation after Mander Parameters fc : compressive strength for unconfined concrete epc0 : strain at compressive strength for unconfined concrete Ec : initial modulus for unconfined concrete Kfc : ratio of confined to unconfined concrete strength State eps : total strain (tensor for 2d or 3d) Deps : strain increments from last convergence DDeps : strain increments from last iteration epsdot : strain rate (tensor for 2d or 3d) km : material tangent modulus; returned under ACTION = 'stif' sig : stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past : material history variables at last converged state Pres : current values of material history variables <script type=\"math/tex\">(\"a[id^=show_]\").click(function(event) { (\"#extra_\" + $(this).attr('id').substr(5)).slideToggle(\"fast\"); event.preventDefault();})","title":"Material Library"},{"location":"FEDEASLab/Basic/A_matrix/","text":"A = A_MATRIX (MODEL) the function forms the kinematic matrix A for all degrees of freedom and all element deformations of the structural model specified in data structure MODEL; the function is currently limited to 2d/3d truss and 2d frame elements ========================================================================================= FEDEASLab - Release 5.0, July 2018 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2018. The Regents of the University of California. All Rights Reserved. ========================================================================================= function added 10-2002 3d truss option 10-2003 changed syntax to function 'contains' 07-2017","title":"A matrix"},{"location":"FEDEASLab/Basic/B_matrix/","text":"B = B_MATRIX (MODEL) the function forms the static matrix B for all degrees of freedom and all basic forces of the structural model specified in data structure MODEL; the function is currently limited to 2d/3d truss and 2d frame elements ========================================================================================= FEDEASLab - Release 5.0, July 2018 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2018. The Regents of the University of California. All Rights Reserved. ========================================================================================= function added 10-2002 3d truss option 10-2003 changed syntax to function 'contains' 07-2017","title":"B matrix"},{"location":"FEDEASLab/Basic/BbariBbarx_matrix/","text":"[BBARI,BBARX,IND_X] = BBARIBBARX_MATRIX (BF,IND_R) the function determines the force influence matrices BBARI and BBARX of the primary structure from static matrix BF; the optional argument IND_R specifies the index for the selected redundant basic forces; BBARI is the force influence matrix for the applied forces at the free dofs, and BBARX is the force influence matrix for the redundant basic forces; IND_X is the redundant force index vector into the basic forces of the structure ========================================================================================= FEDEASLab - Release 5.0, July 2018 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2018. The Regents of the University of California. All Rights Reserved. ========================================================================================= function added 01-2004 added case for empty ind_r 04-2012 changed function name 11-2012","title":"BbariBbarx matrix"},{"location":"FEDEASLab/Basic/ElmLenOr/","text":"[L,DCX] = ELMLENOR (XYZ); the function determines the length L and x-axis orientation of an element with end node coordinates XYZ (column 1 for node i, column 2 for node j); the direction cosines for the element x-axis are reported in vector DCX ========================================================================================= FEDEASLab - Release 5.0, July 2018 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2018. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"ElmLenOr"},{"location":"FEDEASLab/Basic/Fs_matrix/","text":"FS = FS_MATRIX (MODEL,ELEMDATA,ROPTION) the function sets up the block diagonal matrix of element flexibility matrices FS for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA; if ROPTION=0, element release information is not accounted for in setting up Fs (default=1) ========================================================================================= FEDEASLab - Release 5.0, July 2018 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2018. The Regents of the University of California. All Rights Reserved. ========================================================================================= function added 11-2002 support for hinge element added 11-2003 Roption added 07-2012","title":"Fs matrix"},{"location":"FEDEASLab/Basic/Kf_matrix/","text":"KF = KF_MATRIX (MODEL,ELEMDATA) the function forms the stiffness matrix KF at the free dofs of the structural model specified in data structure MODEL with element property information in cell array ELEMDATA ========================================================================================= FEDEASLab - Release 5.0, July 2018 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2018. The Regents of the University of California. All Rights Reserved. ========================================================================================= function added 11-2002 3d truss option and releases for frame element 10-2003","title":"Kf matrix"},{"location":"FEDEASLab/Basic/Ks_matrix/","text":"KS = KS_MATRIX (MODEL,ELEMDATA) the function sets up the block diagonal matrix of basic element stiffness matrices KS for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA ========================================================================================= FEDEASLab - Release 5.0, July 2018 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2018. The Regents of the University of California. All Rights Reserved. ========================================================================================= function added 05-2006","title":"Ks matrix"},{"location":"FEDEASLab/Basic/Localize/","text":"[XYZ,ID] = LOCALIZE (MODEL,EL) the function returns the node coordinates XYZ and the id array ID of the element with number EL for the structural model specified in data structure MODEL ========================================================================================= FEDEASLab - Release 5.0, July 2018 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2018. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Localize"},{"location":"FEDEASLab/Basic/Q0_vector/","text":"Q0 = Q0_VECTOR (MODEL,ELEMDATA) the function sets up the initial (fixed-end) force vector Q0 for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA ========================================================================================= FEDEASLab - Release 5.0, July 2018 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2018. The Regents of the University of California. All Rights Reserved. ========================================================================================= function added 04-2012","title":"Q0 vector"},{"location":"FEDEASLab/Basic/V0_vector/","text":"V0 = V0_VECTOR (MODEL,ELEMDATA,ROPTION) the function sets up the initial element deformation vector V0 for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA if ROPTION=0, element release information is not accounted for in setting up V0 (default=1) ========================================================================================= FEDEASLab - Release 5.0, July 2018 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2018. The Regents of the University of California. All Rights Reserved. ========================================================================================= function added 11-2003 Roption added 07-2012","title":"V0 vector"},{"location":"FEDEASLab/Dynamics/AccelerationIntegral/","text":"Home > Dynamics > AccelerationIntegral.m AccelerationIntegral PURPOSE ACCELERATIONINTEGRAL determines displacement and velocity history for given acceleration history SYNOPSIS function [u,udot] = AccelerationIntegral (uddot,Deltat,nstep,u0,udot0) DESCRIPTION ACCELERATIONINTEGRAL determines displacement and velocity history for given acceleration history [U,UDOT] = ACCELERATIONINTEGRAL (UDDOT,DELTAT,NSTEP,U0,UDOT0) function integrates the acceleration history(ies) in array UDDOT to obtain the displacement history(ies) in array U and velocity history(ies) in array UDOT; the time step of the acceleration record is DELTAT and the total number of steps is NSTEP (default=no of acceleration values) the initial displacement is supplied in row vector U0 and the initial velocity in row vector UDOT0 (default=0); histories are arranged columnwise in arrays UDDOT, U and UDOT (column no=history no); the displacement and velocity histories are corrected for zero end values CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"AccelerationIntegral"},{"location":"FEDEASLab/Dynamics/EigenMode/","text":"Description of EigenMode Home > Dynamics > EigenMode.m EigenMode PURPOSE EIGENMODE determines eigenfrequencies and eigenmodes of structural model SYNOPSIS function [omega,Ueig] = EigenMode (Kf,M,nmod) DESCRIPTION EIGENMODE determines eigenfrequencies and eigenmodes of structural model [OMEGA UEIG] = EIGENMODE(KF,M,NMOD) function determines the lowest NMOD (default=all) eigenfrequencies in row vector OMEGA and corresponding eigenmodes in array UEIG for a structure with free dof stiffness matrix KF and free dof lumped mass vector or consistent mass matrix M; the eigenmodes in array UEIG are arranged columnwise (column no=mode no) CROSS-REFERENCE INFORMATION This function calls: This function is called by: ModalAnalysis MODALANALYSIS determines modal response history for given transient loading Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"EigenMode"},{"location":"FEDEASLab/Dynamics/ElasticResponseSpectrum/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [Dynamics](FEDEASLab.html) \\> ElasticResponseSpectrum.m ElasticResponseSpectrum PURPOSE ::: {.box} ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history ::: SYNOPSIS ::: {.box} function D,Psv,Psa = ElasticResponseSpectrum (Acceleration,T,zeta) ::: DESCRIPTION ::: {.fragment} ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history [D,PSV,PSA] = ELASTICRESPONSESPECTRUM (ACCELERATION,T,ZETA) the function determines the elastic response spectrum for a given acceleration history in data structure ACCELERATION with fields Deltat (time step size) and Value (acceleration value); the periods for the spectrum are specified in row vector T ( default= [0.001 0.1:0.1:5] ); the row vector ZETA contains the damping ratio(s) ( default=0 ); the response spectrum values for the periods in row vector T are returned in arrays D for displacement, PSV for pseudo-velocity, and PSA for pseudo-acceleration with the row number corresponding to the period and the column number to the damping ratio ::: CROSS-REFERENCE INFORMATION This function calls: LSDOF_LinearWilson {.code} LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"ElasticResponseSpectrum"},{"location":"FEDEASLab/Dynamics/ElasticResponseSpectrum/#elasticresponsespectrum","text":"","title":"ElasticResponseSpectrum"},{"location":"FEDEASLab/Dynamics/ElasticResponseSpectrum/#purpose","text":"::: {.box} ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history :::","title":"PURPOSE"},{"location":"FEDEASLab/Dynamics/ElasticResponseSpectrum/#synopsis","text":"::: {.box} function D,Psv,Psa = ElasticResponseSpectrum (Acceleration,T,zeta) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/Dynamics/ElasticResponseSpectrum/#description","text":"::: {.fragment} ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history [D,PSV,PSA] = ELASTICRESPONSESPECTRUM (ACCELERATION,T,ZETA) the function determines the elastic response spectrum for a given acceleration history in data structure ACCELERATION with fields Deltat (time step size) and Value (acceleration value); the periods for the spectrum are specified in row vector T ( default= [0.001 0.1:0.1:5] ); the row vector ZETA contains the damping ratio(s) ( default=0 ); the response spectrum values for the periods in row vector T are returned in arrays D for displacement, PSV for pseudo-velocity, and PSA for pseudo-acceleration with the row number corresponding to the period and the column number to the damping ratio :::","title":"DESCRIPTION"},{"location":"FEDEASLab/Dynamics/ElasticResponseSpectrum/#cross-reference-information","text":"This function calls: LSDOF_LinearWilson {.code} LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/Dynamics/FEDEASLab/","text":"<img alt=\"<\" border=\"0\" src=\"../left.png\"> Master index Index for Dynamics Index for Dynamics Matlab files in this directory: AccelerationIntegral ACCELERATIONINTEGRAL determines displacement and velocity history for given acceleration history EigenMode EIGENMODE determines eigenfrequencies and eigenmodes of structural model ElasticResponseSpectrum ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history InelSDOF_Newmark INELSDOF_NEWMARK inelastic response of SDOF system to acceleration history with Newmark's method LSDOF_LinearWilson LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation LSDOF_Newmark LSDOF_NEWMARK determines the response of linear SDOF system to acceleration history with Newmark's method ModalAnalysis MODALANALYSIS determines modal response history for given transient loading ModeDecomposition MODEDECOMPOSITION determines eigenmode participation factors of given vector V Other Matlab-specific files in this directory: AccelerationIntegral.p EigenMode.p ElasticResponseSpectrum.p InelSDOF_Newmark.p LSDOF_LinearWilson.p LSDOF_Newmark.p ModalAnalysis.p ModeDecomposition.p Generated on Wed 22-Jan-2020 08:42:47 by m2html \u00a9 2005","title":"Transient analysis"},{"location":"FEDEASLab/Dynamics/InelSDOF_Newmark/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [Dynamics](FEDEASLab.html) \\> InelSDOF\\_Newmark.m InelSDOF_Newmark PURPOSE ::: {.box} INELSDOF_NEWMARK inelastic response of SDOF system to acceleration history with Newmark\\'s method ::: SYNOPSIS ::: {.box} function u,udot,uddot,pr = InelSDOF_Newmark (Deltat,omega,p,InelSDFData,zeta,u0,udot0) ::: DESCRIPTION ::: {.fragment} INELSDOF_NEWMARK inelastic response of SDOF system to acceleration history with Newmark's method [U,UDOT,UDDOT,PR] = INELSDOF_NEWMARK (DELT,OMEGA,P,INELSDFDATA,ZETA,U0,UDOT0) the function determines the transient response history of an inelastic SDOF system to the acceleration history (force/mass) in vector P with Newmark's constant average acceleration method (1959) with time step of integration DELTAT; row vector OMEGA contains the eigenfrequency(ies) of the SDOF system, and row vector ZETA the optional damping ratio(s) (default = 0); the optional initial conditions are specified in row vectors U0 for the displacement and UDOT0 for the velocity (default values for both = 0); INELSDFDATA carries the force-deformation properties for the inelastic SDOF system: MatName = function name for 1d relation (default = InelLPwLH1dMat) uy = yield displacement (default = 1) eta = post-yield stiffness ratio (default = 0) the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT, the acceleration history(ies) in array UDDOT, and the resisting force history(ies) in array PR (also in the form force/mass!); these arrays are arranged columnwise (column no=frequency no) ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"InelSDOF Newmark"},{"location":"FEDEASLab/Dynamics/InelSDOF_Newmark/#inelsdof_newmark","text":"","title":"InelSDOF_Newmark"},{"location":"FEDEASLab/Dynamics/InelSDOF_Newmark/#purpose","text":"::: {.box} INELSDOF_NEWMARK inelastic response of SDOF system to acceleration history with Newmark\\'s method :::","title":"PURPOSE"},{"location":"FEDEASLab/Dynamics/InelSDOF_Newmark/#synopsis","text":"::: {.box} function u,udot,uddot,pr = InelSDOF_Newmark (Deltat,omega,p,InelSDFData,zeta,u0,udot0) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/Dynamics/InelSDOF_Newmark/#description","text":"::: {.fragment} INELSDOF_NEWMARK inelastic response of SDOF system to acceleration history with Newmark's method [U,UDOT,UDDOT,PR] = INELSDOF_NEWMARK (DELT,OMEGA,P,INELSDFDATA,ZETA,U0,UDOT0) the function determines the transient response history of an inelastic SDOF system to the acceleration history (force/mass) in vector P with Newmark's constant average acceleration method (1959) with time step of integration DELTAT; row vector OMEGA contains the eigenfrequency(ies) of the SDOF system, and row vector ZETA the optional damping ratio(s) (default = 0); the optional initial conditions are specified in row vectors U0 for the displacement and UDOT0 for the velocity (default values for both = 0); INELSDFDATA carries the force-deformation properties for the inelastic SDOF system: MatName = function name for 1d relation (default = InelLPwLH1dMat) uy = yield displacement (default = 1) eta = post-yield stiffness ratio (default = 0) the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT, the acceleration history(ies) in array UDDOT, and the resisting force history(ies) in array PR (also in the form force/mass!); these arrays are arranged columnwise (column no=frequency no) :::","title":"DESCRIPTION"},{"location":"FEDEASLab/Dynamics/InelSDOF_Newmark/#cross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/Dynamics/LSDOF_LinearWilson/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [Dynamics](FEDEASLab.html) \\> LSDOF\\_LinearWilson.m LSDOF_LinearWilson PURPOSE ::: {.box} LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation ::: SYNOPSIS ::: {.box} function u,udot,uddot = LSDOF_LinearWilson (Deltat,omega,p,zeta,u0,udot0) ::: DESCRIPTION ::: {.fragment} LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation [U,UDOT,UDDOT] = LSDOF_LINEARWILSON (DELTAT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of linear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; the function integrates exactly the equations of motion for piecewise linear interpolation of excitation; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT and the acceleration history(ies) in array UDDOT arranged columnwise (column no=frequency no); Reference: A.K.Chopra, Dynamics of Structures, 2nd edition, pp. 167-171 ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: ElasticResponseSpectrum {.code} ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history ModalAnalysis {.code} MODALANALYSIS determines modal response history for given transient loading Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"LSDOF LinearWilson"},{"location":"FEDEASLab/Dynamics/LSDOF_LinearWilson/#lsdof_linearwilson","text":"","title":"LSDOF_LinearWilson"},{"location":"FEDEASLab/Dynamics/LSDOF_LinearWilson/#purpose","text":"::: {.box} LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation :::","title":"PURPOSE"},{"location":"FEDEASLab/Dynamics/LSDOF_LinearWilson/#synopsis","text":"::: {.box} function u,udot,uddot = LSDOF_LinearWilson (Deltat,omega,p,zeta,u0,udot0) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/Dynamics/LSDOF_LinearWilson/#description","text":"::: {.fragment} LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation [U,UDOT,UDDOT] = LSDOF_LINEARWILSON (DELTAT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of linear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; the function integrates exactly the equations of motion for piecewise linear interpolation of excitation; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT and the acceleration history(ies) in array UDDOT arranged columnwise (column no=frequency no); Reference: A.K.Chopra, Dynamics of Structures, 2nd edition, pp. 167-171 :::","title":"DESCRIPTION"},{"location":"FEDEASLab/Dynamics/LSDOF_LinearWilson/#cross-reference-information","text":"This function calls: This function is called by: ElasticResponseSpectrum {.code} ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history ModalAnalysis {.code} MODALANALYSIS determines modal response history for given transient loading Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/Dynamics/LSDOF_Newmark/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [Dynamics](FEDEASLab.html) \\> LSDOF\\_Newmark.m LSDOF_Newmark PURPOSE ::: {.box} LSDOF_NEWMARK determines the response of linear SDOF system to acceleration history with Newmark\\'s method ::: SYNOPSIS ::: {.box} function u,udot,uddot = LSDOF_Newmark (Deltat,omega,p,zeta,u0,udot0) ::: DESCRIPTION ::: {.fragment} LSDOF_NEWMARK determines the response of linear SDOF system to acceleration history with Newmark's method [U,UDOT,UDDOT] = LSDOF_NEWMARK (DELTAT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of linear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; N.M. Newmark's method from 1959 is used for the numerical integration of the equations of motion; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT and the acceleration history(ies) in array UDDOT arranged columnwise (column no=frequency no); Reference: A.K.Chopra, Dynamics of Structures, 2nd edition, pp. 174-180 ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"LSDOF Newmark"},{"location":"FEDEASLab/Dynamics/LSDOF_Newmark/#lsdof_newmark","text":"","title":"LSDOF_Newmark"},{"location":"FEDEASLab/Dynamics/LSDOF_Newmark/#purpose","text":"::: {.box} LSDOF_NEWMARK determines the response of linear SDOF system to acceleration history with Newmark\\'s method :::","title":"PURPOSE"},{"location":"FEDEASLab/Dynamics/LSDOF_Newmark/#synopsis","text":"::: {.box} function u,udot,uddot = LSDOF_Newmark (Deltat,omega,p,zeta,u0,udot0) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/Dynamics/LSDOF_Newmark/#description","text":"::: {.fragment} LSDOF_NEWMARK determines the response of linear SDOF system to acceleration history with Newmark's method [U,UDOT,UDDOT] = LSDOF_NEWMARK (DELTAT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of linear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; N.M. Newmark's method from 1959 is used for the numerical integration of the equations of motion; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT and the acceleration history(ies) in array UDDOT arranged columnwise (column no=frequency no); Reference: A.K.Chopra, Dynamics of Structures, 2nd edition, pp. 174-180 :::","title":"DESCRIPTION"},{"location":"FEDEASLab/Dynamics/LSDOF_Newmark/#cross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/Dynamics/ModalAnalysis/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [Dynamics](FEDEASLab.html) \\> ModalAnalysis.m ModalAnalysis PURPOSE ::: {.box} MODALANALYSIS determines modal response history for given transient loading ::: SYNOPSIS ::: {.box} function omega,Ueig,Y\\_t,Ydot\\_t,Yddot\\_t = ModalAnalysis (option,Kf,M,Loading,Deltat,zeta,nmod) ::: DESCRIPTION ::: {.fragment} MODALANALYSIS determines modal response history for given transient loading [OMEGA,UEIG,Y_T,YDOT_T,YDDOT_T] = MODALANALYSIS (OPTION,KF,M,LOADING,DELTAT,ZETA,NMOD) the function determines the response history of a multi-dof structural model with stiffness matrix at free dofs KF and consistent mass matrix or lumped mass vector M under given transient loading in data structure LOADING for the lowest NMOD (default=all) eigenmodes or NMOD Ritz vectors with damping ratios in row vector ZETA (default=0); the time step of integration is DELTAT; OPTION = 'eig' uses nmod eigenvectors, while OPTION = 'Ritz' uses nmod Ritz vectors in the modal analysis; the function returns NMOD eigenfrequencies of the structural model in row vector OMEGA, the eigenmode or Ritz vector shapes in array UEIG arranged columnwise (column no=mode no), and the response history of each eigenmode or Ritz vector in array Y_T arranged columnwise (column no=mode no), the velocity history of each eigenmode or Ritz vector in array YDOT_t, and the acceleration history of each eigenmode or Ritz vector in array YDDOT_t the data structure LOADING has the following fields LOADING.Uddref = vector of reference acceleration values at model dofs Pref = vector of reference load values at model dofs U0 = vector of initial displacement values at model dofs Udot0 = vector of initial velocity values at model dofs FrcHst = force time history in field Value AccHst = acceleration time history in field Value ::: CROSS-REFERENCE INFORMATION This function calls: EigenMode {.code} EIGENMODE determines eigenfrequencies and eigenmodes of structural model LSDOF_LinearWilson {.code} LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation ModeDecomposition {.code} MODEDECOMPOSITION determines eigenmode participation factors of given vector V This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"ModalAnalysis"},{"location":"FEDEASLab/Dynamics/ModalAnalysis/#modalanalysis","text":"","title":"ModalAnalysis"},{"location":"FEDEASLab/Dynamics/ModalAnalysis/#purpose","text":"::: {.box} MODALANALYSIS determines modal response history for given transient loading :::","title":"PURPOSE"},{"location":"FEDEASLab/Dynamics/ModalAnalysis/#synopsis","text":"::: {.box} function omega,Ueig,Y\\_t,Ydot\\_t,Yddot\\_t = ModalAnalysis (option,Kf,M,Loading,Deltat,zeta,nmod) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/Dynamics/ModalAnalysis/#description","text":"::: {.fragment} MODALANALYSIS determines modal response history for given transient loading [OMEGA,UEIG,Y_T,YDOT_T,YDDOT_T] = MODALANALYSIS (OPTION,KF,M,LOADING,DELTAT,ZETA,NMOD) the function determines the response history of a multi-dof structural model with stiffness matrix at free dofs KF and consistent mass matrix or lumped mass vector M under given transient loading in data structure LOADING for the lowest NMOD (default=all) eigenmodes or NMOD Ritz vectors with damping ratios in row vector ZETA (default=0); the time step of integration is DELTAT; OPTION = 'eig' uses nmod eigenvectors, while OPTION = 'Ritz' uses nmod Ritz vectors in the modal analysis; the function returns NMOD eigenfrequencies of the structural model in row vector OMEGA, the eigenmode or Ritz vector shapes in array UEIG arranged columnwise (column no=mode no), and the response history of each eigenmode or Ritz vector in array Y_T arranged columnwise (column no=mode no), the velocity history of each eigenmode or Ritz vector in array YDOT_t, and the acceleration history of each eigenmode or Ritz vector in array YDDOT_t the data structure LOADING has the following fields LOADING.Uddref = vector of reference acceleration values at model dofs Pref = vector of reference load values at model dofs U0 = vector of initial displacement values at model dofs Udot0 = vector of initial velocity values at model dofs FrcHst = force time history in field Value AccHst = acceleration time history in field Value :::","title":"DESCRIPTION"},{"location":"FEDEASLab/Dynamics/ModalAnalysis/#cross-reference-information","text":"This function calls: EigenMode {.code} EIGENMODE determines eigenfrequencies and eigenmodes of structural model LSDOF_LinearWilson {.code} LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation ModeDecomposition {.code} MODEDECOMPOSITION determines eigenmode participation factors of given vector V This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/Dynamics/ModeDecomposition/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [Dynamics](FEDEASLab.html) \\> ModeDecomposition.m ModeDecomposition PURPOSE ::: {.box} MODEDECOMPOSITION determines eigenmode participation factors of given vector V ::: SYNOPSIS ::: {.box} function Mmod,Ymod,Vmod = ModeDecomposition (M,Ueig,V) ::: DESCRIPTION ::: {.fragment} MODEDECOMPOSITION determines eigenmode participation factors of given vector V [MMOD,YMOD,VMOD] = MODEDECOMPOSITION (M,UEIG,V) the function determines the mode participation factors of vector V for a structural model with free dof consistent mass matrix or lumped mass vector M for the modes in array UEIG arranged columnwise (column no=mode no); the function returns the modal mass terms in row vector MMOD, the mode participation factors in row vector YMOD and the inertial force decomposition vectors in array VMOD arranged columwise the size of the consistent mass matrix or the length of lumped mass vector M, the length of vector V and the number of rows of arrays UEIG and VMOD is equal to the number of free dofs of the structural model; the length of row vectors MMOD and YMOD is equal to the number of non-zero mass terms in the lumped mass vector M or the number of free dofs of the structural model for the case of consistent mass matrix M ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: ModalAnalysis {.code} MODALANALYSIS determines modal response history for given transient loading Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"ModeDecomposition"},{"location":"FEDEASLab/Dynamics/ModeDecomposition/#modedecomposition","text":"","title":"ModeDecomposition"},{"location":"FEDEASLab/Dynamics/ModeDecomposition/#purpose","text":"::: {.box} MODEDECOMPOSITION determines eigenmode participation factors of given vector V :::","title":"PURPOSE"},{"location":"FEDEASLab/Dynamics/ModeDecomposition/#synopsis","text":"::: {.box} function Mmod,Ymod,Vmod = ModeDecomposition (M,Ueig,V) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/Dynamics/ModeDecomposition/#description","text":"::: {.fragment} MODEDECOMPOSITION determines eigenmode participation factors of given vector V [MMOD,YMOD,VMOD] = MODEDECOMPOSITION (M,UEIG,V) the function determines the mode participation factors of vector V for a structural model with free dof consistent mass matrix or lumped mass vector M for the modes in array UEIG arranged columnwise (column no=mode no); the function returns the modal mass terms in row vector MMOD, the mode participation factors in row vector YMOD and the inertial force decomposition vectors in array VMOD arranged columwise the size of the consistent mass matrix or the length of lumped mass vector M, the length of vector V and the number of rows of arrays UEIG and VMOD is equal to the number of free dofs of the structural model; the length of row vectors MMOD and YMOD is equal to the number of non-zero mass terms in the lumped mass vector M or the number of free dofs of the structural model for the case of consistent mass matrix M :::","title":"DESCRIPTION"},{"location":"FEDEASLab/Dynamics/ModeDecomposition/#cross-reference-information","text":"This function calls: This function is called by: ModalAnalysis {.code} MODALANALYSIS determines modal response history for given transient loading Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/Element_Library/FEDEASLab/","text":"<img alt=\"<\" border=\"0\" src=\"../left.png\"> Master index Index for Element_Library Index for Element_Library Matlab files in this directory: Check3dFrmAxes CHECK3dFRMAXES check that y-axis is not co-linear with element chord DefGeom_2dFrm DEFGEOM_2dFRM determines current length and corotational diad of 2-node, 2d frame element DefGeom_3dFrm DEFGEOM_3dFRM determines current length and corotational triad of 2-node, 3d frame element DeformShape2dFrm DEFORMSHAPE2dFRM deformed shape of linear elastic, uniform, prismatic 2d frame element DeformShape2dFrm_wCurvIntp DEFORMSHAPE2dFRM_wCURVINTP deformed shape of 2d frame element from curvatures DeformShape2dFrm_wDispIntp DEFORMSHAPE2dFRM_wDISPINTP deformed shape of 2d frame element with cubic polynomials Dinel2dFrm_EBwDF DINEL2dFRM_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF DINEL2dFRM_EBwFF 2d-frame element with distributed inelasticity (force formulation) ElementLoading ELEMENTLOADING determines current distributed element load value ExtrReshu EXTRRESHU extracts displacements and increments from State and reshapes into array Extract_BasicEl2SecState EXTRACT_BASICEL2SECSTATE extract section state from basic element state Extract_El2MatState EXTRACT_EL2MATSTATE extract material state from element state Extract_El2SecState EXTRACT_EL2SECSTATE extract section state from element state GPYS GPYS function value, gradient and Hessian of polynomial yield surface GeomTran_2dFrm GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element GeomTran_3dFrm GEOMTRAN_3dFRM kinematic matrices and deformations for a 2-node 3d frame element GeomTran_Truss GEOMTRAN_TRUSS kinematic matrices and deformations for a 2-node truss element Inel2dFrm_wLHNMYS INEL2dFRM_wLHNMYS 2d linear elastic frame element with linear plastic hardening axial-flexure hinges Inel2dFrm_wLPPM INEL2dFRM_wLPPM 2d frame linear elastic element perfectly plastic flexural response Inel2dFrm_wOneComp INEL2dFRM_wONECOMP one component 2d frame element with rigid-linear hardening end hinges Inel2dFrm_wTwoComp INEL2dFRM_wTWOCOMP two component 2d frame element (linear + linear-perfectly plastic) InelTruss INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry LE2dFrm LE2dFRM 2d LE frame element under linear or nonlinear geometry LE2dFrm_wPdelta LE2dFRM 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry LE3dFrm LE3dFRM 3d linear frame element under linear or nonlinear geometry LETruss LETRUSS 2d/3d linear truss element under linear or nonlinear geometry Large2du2v_Frm LARGE2DU2V_FRM determine 2d frame element deformations from end displacements Large3du2v_Frm LARGE3DU2V_FRM determine 3d frame element deformations from end displacements MaterialWrapper MATERIALWRAPPER wrapper element that passes on arguments to the material state determination SectionWrapper SECTIONWRAPPER wrapper element that passes on arguments to the section state determination TranJnt TRANJNT sets up transformation matrix for finite size joints kg_2dFrm KG_2dFRM geometric stiffness matrix for 2-node 2d frame element for different options kg_3dFrm KG_3dFRM geometric stiffness matrix for 2-node 3d frame element different options kg_Truss KG_TRUSS geometric stiffness matrix for 2d/3d 2-node truss element for different options Other Matlab-specific files in this directory: Check3dFrmAxes.p DefGeom_2dFrm.p DefGeom_3dFrm.p DeformShape2dFrm.p DeformShape2dFrm_wCurvIntp.p DeformShape2dFrm_wDispIntp.p Dinel2dFrm_EBwDF.p Dinel2dFrm_EBwFF.p ElementLoading.p ExtrReshu.p Extract_BasicEl2SecState.p Extract_El2MatState.p Extract_El2SecState.p GPYS.p GeomTran_2dFrm.p GeomTran_3dFrm.p GeomTran_Truss.p Inel2dFrm_wLHNMYS.p Inel2dFrm_wLPPM.p Inel2dFrm_wOneComp.p Inel2dFrm_wTwoComp.p InelTruss.p LE2dFrm.p LE2dFrm_wPdelta.p LE3dFrm.p LETruss.p Large2du2v_Frm.p Large3du2v_Frm.p MaterialWrapper.p SectionWrapper.p TranJnt.p kg_2dFrm.p kg_3dFrm.p kg_Truss.p Generated on Wed 22-Jan-2020 08:42:47 by m2html \u00a9 2005","title":"FEDEASLab"},{"location":"FEDEASLab/Element_Library/FEDEASLab/Check3dFrmAxes/","text":"Home > Element_Library > Check3dFrmAxes.m Check3dFrmAxes PURPOSE CHECK3dFRMAXES check that y-axis is not co-linear with element chord SYNOPSIS function y = Check3dFrmAxes (el,y,xyz) DESCRIPTION CHECK3dFRMAXES check that y-axis is not co-linear with element chord Y = CHECK3dFRMAXES(EL,Y,XYZ) the function checks that the specified Y-axis for the element EL with end node coordinates XYZ is not colinear with the element chord; if colinearity is detected, the function returns a unit vector in the global Y- or Z-axis and issues a warning message with information about the change; if not, the function returns the normalized vector Y CROSS-REFERENCE INFORMATION This function calls: This function is called by: LE3dFrm LE3dFRM 3d linear frame element under linear or nonlinear geometry Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Check3dFrmAxes"},{"location":"FEDEASLab/Element_Library/FEDEASLab/DefGeom_2dFrm/","text":"Home > Element_Library > DefGeom_2dFrm.m DefGeom_2dFrm PURPOSE DEFGEOM_2dFRM determines current length and corotational diad of 2-node, 2d frame element SYNOPSIS function [L,T] = DefGeom_2dFrm (xyz) DESCRIPTION DEFGEOM_2dFRM determines current length and corotational diad of 2-node, 2d frame element [L,T] = DEFGEOM_2dFRM (XYZ); the function determines the length L and the corotational diad T of a 2d frame element in the current configuration from the end node coordinates XYZ (column 1 for node i, column 2 for node j); the corotational diad is given in matrix T whose columns correspond to axes x and y, resp. CROSS-REFERENCE INFORMATION This function calls: This function is called by: DeformShape2dFrm DEFORMSHAPE2dFRM deformed shape of linear elastic, uniform, prismatic 2d frame element DeformShape2dFrm_wCurvIntp DEFORMSHAPE2dFRM_wCURVINTP deformed shape of 2d frame element from curvatures DeformShape2dFrm_wDispIntp DEFORMSHAPE2dFRM_wDISPINTP deformed shape of 2d frame element with cubic polynomials Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"DefGeom 2dFrm"},{"location":"FEDEASLab/Element_Library/FEDEASLab/DefGeom_3dFrm/","text":"Home > Element_Library > DefGeom_3dFrm.m DefGeom_3dFrm PURPOSE DEFGEOM_3dFRM determines current length and corotational triad of 2-node, 3d frame element SYNOPSIS function [L,T] = DefGeom_3dFrm (xyz,GeomData,u) DESCRIPTION DEFGEOM_3dFRM determines current length and corotational triad of 2-node, 3d frame element [L,T] = DEFGEOM_3dFRM (XYZ,GEOMDATA,U); the function determines the length L and corotational triad T of a 2-node, 3d frame element in the current configuration from the end node coordinates XYZ (column 1 for node i, column 2 for node j) and the end displacement vector U (optional); the corotational triad is given in matrix T whose columns correspond to axes x,y,z resp. CROSS-REFERENCE INFORMATION This function calls: This function is called by: GeomTran_3dFrm GEOMTRAN_3dFRM kinematic matrices and deformations for a 2-node 3d frame element Large3du2v_Frm LARGE3DU2V_FRM determine 3d frame element deformations from end displacements Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"DefGeom 3dFrm"},{"location":"FEDEASLab/Element_Library/FEDEASLab/DeformShape2dFrm_wCurvIntp/","text":"Home > Element_Library > DeformShape2dFrm_wCurvIntp.m DeformShape2dFrm_wCurvIntp PURPOSE DEFORMSHAPE2dFRM_wCURVINTP deformed shape of 2d frame element from curvatures SYNOPSIS function [XYd,xyd] = DeformShape2dFrm_wCurvIntp (xyz,ElemData,u,EPost,MAGF,nsub) DESCRIPTION DEFORMSHAPE2dFRM_wCURVINTP deformed shape of 2d frame element from curvatures [XYd,xyd] = DEFORMSHAPE2dFRM_wCURVINTP (XYZ,ELEMDATA,U,EPOST,MAGF,NSUB) The function returns the global coordinates of the magnified deformed shape of a 2d frame element under large end displacements in array XYd, and the local coordinates of the magnified deformed shape in array xyd. Input arguments are the end node coordinates in array XYZ, the element properties in cell array ELEMDATA, the end displacements in vector U, and the data structure EPOST with information about the curvatures KAPPA along the element axis in field Sec{iP}.e(2). Optional arguments are the magnification factor MAGF (default=10) and the number of intermediate points NSUB (default=100) for the deformed shape. The function uses double integration of the interpolation polynomial of the curvatures at the integration points. (reference: Neuenhofer/Filippou, ASCE, JSE, June 1998, pp. 704-711) CROSS-REFERENCE INFORMATION This function calls: DefGeom_2dFrm DEFGEOM_2dFRM determines current length and corotational diad of 2-node, 2d frame element TranJnt TRANJNT sets up transformation matrix for finite size joints This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"DeformShape2dFrm wCurvIntp"},{"location":"FEDEASLab/General/FEDEASLab/","text":"<img alt=\"<\" border=\"0\" src=\"../left.png\"> Master index Index for General Index for General Matlab files in this directory: Add_Damping2State ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE Add_Mass2Model ADD_MASS2MODEL sets up lumped or consistent mass in Model.M Aj_matrix AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements Create_Damping CREATE_DAMPING setup damping matrix of structural model Create_Loading CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements Create_Model CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions Create_NodalForces CREATE_NODALFORCES set up reference vector of applied forces Create_NodalMass CREATE_NODALMASS free dof lumped mass vector for structural model Create_PwForces CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w Create_SimpleModel CREATE_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions Extract_Str2ElState EXTRACT_STR2ELSTATE extract element state from structure state Structure STRUCTURE performs requested action on group of elements SubIncr4ElemntSD SUBINCR4ELMNTSD element displacement increment subdivision for state determination Other Matlab-specific files in this directory: Add_Damping2State.p Add_Mass2Model.p Aj_matrix.p Create_Damping.p Create_Loading.p Create_Model.p Create_NodalForces.p Create_NodalMass.p Create_PwForces.p Create_SimpleModel.p Extract_Str2ElState.p Structure.p SubIncr4ElemntSD.p Generated on Wed 22-Jan-2020 08:42:47 by m2html \u00a9 2005","title":"Core"},{"location":"FEDEASLab/General/FEDEASLab/Add_Damping2State/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Add\\_Damping2State.m Add_Damping2State PURPOSE ::: {.box} ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE ::: SYNOPSIS ::: {.box} function State = Add_Damping2State (type,Model,State,zeta,mode) ::: DESCRIPTION ::: {.fragment} ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE STATE = ADD_DAMPING2STATE (TYPE,MODEL,STATE,ZETA,MODE) function sets up structural damping matrix C according to character variable TYPE as field of data structure STATE; the free dof stiffness matrix is field Kf of STATE and the free dof lumped mass vector is field Ml of MODEL; the damping matrix is calibrated so that the mode numbers in row vector MODE have damping ratios as specified in row vector ZETA; character variable TYPE should be either 'StifProp' or 'Caughey' Note: Caughey with one mode reduces to mass proportional damping matrix and with two modes reduces to Rayleigh damping ::: CROSS-REFERENCE INFORMATION This function calls: Create_Damping {.code} CREATE_DAMPING setup damping matrix of structural model This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Add Damping2State"},{"location":"FEDEASLab/General/FEDEASLab/Add_Damping2State/#add_damping2state","text":"","title":"Add_Damping2State"},{"location":"FEDEASLab/General/FEDEASLab/Add_Damping2State/#purpose","text":"::: {.box} ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Add_Damping2State/#synopsis","text":"::: {.box} function State = Add_Damping2State (type,Model,State,zeta,mode) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Add_Damping2State/#description","text":"::: {.fragment} ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE STATE = ADD_DAMPING2STATE (TYPE,MODEL,STATE,ZETA,MODE) function sets up structural damping matrix C according to character variable TYPE as field of data structure STATE; the free dof stiffness matrix is field Kf of STATE and the free dof lumped mass vector is field Ml of MODEL; the damping matrix is calibrated so that the mode numbers in row vector MODE have damping ratios as specified in row vector ZETA; character variable TYPE should be either 'StifProp' or 'Caughey' Note: Caughey with one mode reduces to mass proportional damping matrix and with two modes reduces to Rayleigh damping :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Add_Damping2State/#cross-reference-information","text":"This function calls: Create_Damping {.code} CREATE_DAMPING setup damping matrix of structural model This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Add_Mass2Model/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Add\\_Mass2Model.m Add_Mass2Model PURPOSE ::: {.box} ADD_MASS2MODEL sets up lumped or consistent mass in Model.M ::: SYNOPSIS ::: {.box} function Model = Add_Mass2Model (Model,Me,ElemData,option) ::: DESCRIPTION ::: {.fragment} ADD_MASS2MODEL sets up lumped or consistent mass in Model.M MODEL = ADD_MASS2MODEL (MODEL,ME,ELEMDATA,OPTION) the function adds the field M to the data structure Model, which carries information about the structural model; M is either a nfx1 column vector for the lumped mass or, a nfxnf array for the consistent mass of the model, where nf is the number of free DOFs; this depends on the presence ELEMDATA in the argument list and on the character variable OPTION; the following cases are possible: (1) without ELEMDATA the function takes the nodal lumped mass values in array ME where row=node no and column=dof no and assigns them to the column vector M with the row corresponding to the DOF number; Example: ME(5,:) = [20 20 0]; lumped mass value in X and Y at node 5; no rotary inertia (2) if ELEMDATA is present in the argument list the function calculates the lumped and consistent mass contribution of each element in the structural model that supports this feature; it adds the element lumped mass to the nodal lumped mass and returns the lumped mass in column vector M (3) if ELEMDATA is present and OPTION='CONSISTENT' the function returns the consistent mass matrix M after adding the nodal lumped mass on its diagonal if the Model was generated with Create_Model and supports sparse DOF indexing then M is a sparse column vector or matrix; if the Model was generated with Create_SimpleModel then the column vector or matrix are full ::: CROSS-REFERENCE INFORMATION This function calls: Create_NodalMass {.code} CREATE_NODALMASS free dof lumped mass vector for structural model Structure {.code} STRUCTURE performs requested action on group of elements This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Add Mass2Model"},{"location":"FEDEASLab/General/FEDEASLab/Add_Mass2Model/#add_mass2model","text":"","title":"Add_Mass2Model"},{"location":"FEDEASLab/General/FEDEASLab/Add_Mass2Model/#purpose","text":"::: {.box} ADD_MASS2MODEL sets up lumped or consistent mass in Model.M :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Add_Mass2Model/#synopsis","text":"::: {.box} function Model = Add_Mass2Model (Model,Me,ElemData,option) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Add_Mass2Model/#description","text":"::: {.fragment} ADD_MASS2MODEL sets up lumped or consistent mass in Model.M MODEL = ADD_MASS2MODEL (MODEL,ME,ELEMDATA,OPTION) the function adds the field M to the data structure Model, which carries information about the structural model; M is either a nfx1 column vector for the lumped mass or, a nfxnf array for the consistent mass of the model, where nf is the number of free DOFs; this depends on the presence ELEMDATA in the argument list and on the character variable OPTION; the following cases are possible: (1) without ELEMDATA the function takes the nodal lumped mass values in array ME where row=node no and column=dof no and assigns them to the column vector M with the row corresponding to the DOF number; Example: ME(5,:) = [20 20 0]; lumped mass value in X and Y at node 5; no rotary inertia (2) if ELEMDATA is present in the argument list the function calculates the lumped and consistent mass contribution of each element in the structural model that supports this feature; it adds the element lumped mass to the nodal lumped mass and returns the lumped mass in column vector M (3) if ELEMDATA is present and OPTION='CONSISTENT' the function returns the consistent mass matrix M after adding the nodal lumped mass on its diagonal if the Model was generated with Create_Model and supports sparse DOF indexing then M is a sparse column vector or matrix; if the Model was generated with Create_SimpleModel then the column vector or matrix are full :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Add_Mass2Model/#cross-reference-information","text":"This function calls: Create_NodalMass {.code} CREATE_NODALMASS free dof lumped mass vector for structural model Structure {.code} STRUCTURE performs requested action on group of elements This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Aj_matrix/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Aj\\_matrix.m Aj_matrix PURPOSE ::: {.box} AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements ::: SYNOPSIS ::: {.box} function Aj = Aj_matrix (Model) ::: DESCRIPTION ::: {.fragment} AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements AJ = AJ_MATRIX (MODEL) the function forms the kinematic matrix AJ for all degrees of freedom and all element deformations of the structural model specified in data structure MODEL; the kinematic matrix AJ includes the effect of joint offsets for the elements; the function is currently limited to 2d/3d truss and 2d frame elements ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Aj matrix"},{"location":"FEDEASLab/General/FEDEASLab/Aj_matrix/#aj_matrix","text":"","title":"Aj_matrix"},{"location":"FEDEASLab/General/FEDEASLab/Aj_matrix/#purpose","text":"::: {.box} AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Aj_matrix/#synopsis","text":"::: {.box} function Aj = Aj_matrix (Model) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Aj_matrix/#description","text":"::: {.fragment} AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements AJ = AJ_MATRIX (MODEL) the function forms the kinematic matrix AJ for all degrees of freedom and all element deformations of the structural model specified in data structure MODEL; the kinematic matrix AJ includes the effect of joint offsets for the elements; the function is currently limited to 2d/3d truss and 2d frame elements :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Aj_matrix/#cross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Create_Damping/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Create\\_Damping.m Create_Damping PURPOSE ::: {.box} CREATE_DAMPING setup damping matrix of structural model ::: SYNOPSIS ::: {.box} function C = Create_Damping (type,Kf,Ml,zeta,mode) ::: DESCRIPTION ::: {.fragment} CREATE_DAMPING setup damping matrix of structural model C = CREATE_DAMPING (TYPE,KF,ML,ZETA,MODE) function sets up damping matrix C according to character variable TYPE for a structure with free dof stiffness matrix KF and free dof lumped mass vector ML; the damping matrix is calibrated so that the mode numbers in row vector MODE have damping ratios as specified in row vector ZETA; character variable TYPE should be either 'StifProp', 'Caughey' or 'Modal' Note: Caughey with one mode reduces to mass proportional damping matrix and with two modes reduces to Rayleigh damping; for more than 2 modes Caughey damping works only if Ml is fully populated; Modal damping refers to the method of superposing modal damping matrices Reference: Chopra, Dynamics of Structures, 2nd edition, pp. 455-463 ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Add_Damping2State {.code} ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create Damping"},{"location":"FEDEASLab/General/FEDEASLab/Create_Damping/#create_damping","text":"","title":"Create_Damping"},{"location":"FEDEASLab/General/FEDEASLab/Create_Damping/#purpose","text":"::: {.box} CREATE_DAMPING setup damping matrix of structural model :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Create_Damping/#synopsis","text":"::: {.box} function C = Create_Damping (type,Kf,Ml,zeta,mode) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Create_Damping/#description","text":"::: {.fragment} CREATE_DAMPING setup damping matrix of structural model C = CREATE_DAMPING (TYPE,KF,ML,ZETA,MODE) function sets up damping matrix C according to character variable TYPE for a structure with free dof stiffness matrix KF and free dof lumped mass vector ML; the damping matrix is calibrated so that the mode numbers in row vector MODE have damping ratios as specified in row vector ZETA; character variable TYPE should be either 'StifProp', 'Caughey' or 'Modal' Note: Caughey with one mode reduces to mass proportional damping matrix and with two modes reduces to Rayleigh damping; for more than 2 modes Caughey damping works only if Ml is fully populated; Modal damping refers to the method of superposing modal damping matrices Reference: Chopra, Dynamics of Structures, 2nd edition, pp. 455-463 :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Create_Damping/#cross-reference-information","text":"This function calls: This function is called by: Add_Damping2State {.code} ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Create_Loading/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Create\\_Loading.m Create_Loading PURPOSE ::: {.box} CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements ::: SYNOPSIS ::: {.box} function Loading = Create_Loading (Model,Pe,Ue) ::: DESCRIPTION ::: {.fragment} CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements LOADING = CREATE_LOADING (MODEL,PE,UE) the function sets up the data structure LOADING with the array of applied force patterns at the free dofs of the model in field Pref and the array of imposed displacement patterns at the restrained dofs of the model in field Uref; model information is specified in data structure MODEL and the applied forces and imposed displacements are specified in arrays PE and UE, respectively; in arrays PE and UE rows correspond to node numbers and columns to dof direction Example: PE(3,:,1) = [10 0 50]; applied forces at node 3 in X,Y and Z direction for force pattern 1 UE(5,2,3) = 0.02; imposed displacement in Y-direction at node 5 for displacement pattern 3 ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create Loading"},{"location":"FEDEASLab/General/FEDEASLab/Create_Loading/#create_loading","text":"","title":"Create_Loading"},{"location":"FEDEASLab/General/FEDEASLab/Create_Loading/#purpose","text":"::: {.box} CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Create_Loading/#synopsis","text":"::: {.box} function Loading = Create_Loading (Model,Pe,Ue) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Create_Loading/#description","text":"::: {.fragment} CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements LOADING = CREATE_LOADING (MODEL,PE,UE) the function sets up the data structure LOADING with the array of applied force patterns at the free dofs of the model in field Pref and the array of imposed displacement patterns at the restrained dofs of the model in field Uref; model information is specified in data structure MODEL and the applied forces and imposed displacements are specified in arrays PE and UE, respectively; in arrays PE and UE rows correspond to node numbers and columns to dof direction Example: PE(3,:,1) = [10 0 50]; applied forces at node 3 in X,Y and Z direction for force pattern 1 UE(5,2,3) = 0.02; imposed displacement in Y-direction at node 5 for displacement pattern 3 :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Create_Loading/#cross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Create_Model/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Create\\_Model.m Create_Model PURPOSE ::: {.box} CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions ::: SYNOPSIS ::: {.box} function Model = Create_Model (XYZ,CON,BOUN,ElemName) ::: DESCRIPTION ::: {.fragment} CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_MODEL (XYZ,CON,BOUN,ELEMNAME) function creates data structure MODEL with model information from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss data structure MODEL has the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = node connectivity array DOF = array with degree of freedom numbering, nodes are stored columnwise ndf(el) = no of dofs/node for element el nen(el) = no of nodes for element el ElemName = cell array of element names ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create Model"},{"location":"FEDEASLab/General/FEDEASLab/Create_Model/#create_model","text":"","title":"Create_Model"},{"location":"FEDEASLab/General/FEDEASLab/Create_Model/#purpose","text":"::: {.box} CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Create_Model/#synopsis","text":"::: {.box} function Model = Create_Model (XYZ,CON,BOUN,ElemName) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Create_Model/#description","text":"::: {.fragment} CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_MODEL (XYZ,CON,BOUN,ELEMNAME) function creates data structure MODEL with model information from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss data structure MODEL has the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = node connectivity array DOF = array with degree of freedom numbering, nodes are stored columnwise ndf(el) = no of dofs/node for element el nen(el) = no of nodes for element el ElemName = cell array of element names :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Create_Model/#cross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalForces/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Create\\_NodalForces.m Create_NodalForces PURPOSE ::: {.box} CREATE_NODALFORCES set up reference vector of applied forces ::: SYNOPSIS ::: {.box} function Pref = Create_NodalForces (Model,Pe) ::: DESCRIPTION ::: {.fragment} CREATE_NODALFORCES set up reference vector of applied forces PREF = CREATE_NODALFORCES (MODEL,PE) the function sets up the vector of applied forces PREF at the free dofs of the model; model information is supplied in data structure MODEL and the applied forces in array PE; in array PE rows correspond to node numbers and columns to dofs Example: PE(3,:) = [10 0 50] means applied forces at node 3 in X,Y and Z direction ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create NodalForces"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalForces/#create_nodalforces","text":"","title":"Create_NodalForces"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalForces/#purpose","text":"::: {.box} CREATE_NODALFORCES set up reference vector of applied forces :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalForces/#synopsis","text":"::: {.box} function Pref = Create_NodalForces (Model,Pe) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalForces/#description","text":"::: {.fragment} CREATE_NODALFORCES set up reference vector of applied forces PREF = CREATE_NODALFORCES (MODEL,PE) the function sets up the vector of applied forces PREF at the free dofs of the model; model information is supplied in data structure MODEL and the applied forces in array PE; in array PE rows correspond to node numbers and columns to dofs Example: PE(3,:) = [10 0 50] means applied forces at node 3 in X,Y and Z direction :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalForces/#cross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalMass/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Create\\_NodalMass.m Create_NodalMass PURPOSE ::: {.box} CREATE_NODALMASS free dof lumped mass vector for structural model ::: SYNOPSIS ::: {.box} function Ml = Create_NodalMass (Model,Me) ::: DESCRIPTION ::: {.fragment} CREATE_NODALMASS free dof lumped mass vector for structural model ML = CREATE_NODALMASS (MODEL,ME) the function sets up the free dof lumped mass vector ML for the structural model specified in data structure MODEL from the specified nodal lumped mass values in array ME in which rows correspond to node numbers and columns to dof direction Example: ME(5,:) = [20 20 0]; lumped mass value in X and Y at node 5; no rotary inertia ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Add_Mass2Model {.code} ADD_MASS2MODEL sets up lumped or consistent mass in Model.M Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create NodalMass"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalMass/#create_nodalmass","text":"","title":"Create_NodalMass"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalMass/#purpose","text":"::: {.box} CREATE_NODALMASS free dof lumped mass vector for structural model :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalMass/#synopsis","text":"::: {.box} function Ml = Create_NodalMass (Model,Me) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalMass/#description","text":"::: {.fragment} CREATE_NODALMASS free dof lumped mass vector for structural model ML = CREATE_NODALMASS (MODEL,ME) the function sets up the free dof lumped mass vector ML for the structural model specified in data structure MODEL from the specified nodal lumped mass values in array ME in which rows correspond to node numbers and columns to dof direction Example: ME(5,:) = [20 20 0]; lumped mass value in X and Y at node 5; no rotary inertia :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Create_NodalMass/#cross-reference-information","text":"This function calls: This function is called by: Add_Mass2Model {.code} ADD_MASS2MODEL sets up lumped or consistent mass in Model.M Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Create_PwForces/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Create\\_PwForces.m Create_PwForces PURPOSE ::: {.box} CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w ::: SYNOPSIS ::: {.box} function Pw = Create_PwForces (Model,ElemData) ::: DESCRIPTION ::: {.fragment} CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w PW = CREATE_PWFORCES (MODEL,ELEMDATA) the function sets up the vector of equivalent nodal forces PW due to uniform element loading w; model information is supplied in data structure MODEL, and the magnitude of w is supplied for each element in field W of ELEMDATA ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create PwForces"},{"location":"FEDEASLab/General/FEDEASLab/Create_PwForces/#create_pwforces","text":"","title":"Create_PwForces"},{"location":"FEDEASLab/General/FEDEASLab/Create_PwForces/#purpose","text":"::: {.box} CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Create_PwForces/#synopsis","text":"::: {.box} function Pw = Create_PwForces (Model,ElemData) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Create_PwForces/#description","text":"::: {.fragment} CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w PW = CREATE_PWFORCES (MODEL,ELEMDATA) the function sets up the vector of equivalent nodal forces PW due to uniform element loading w; model information is supplied in data structure MODEL, and the magnitude of w is supplied for each element in field W of ELEMDATA :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Create_PwForces/#cross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Create_SimpleModel/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Create\\_SimpleModel.m Create_SimpleModel PURPOSE ::: {.box} CREATE_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions ::: SYNOPSIS ::: {.box} function Model = Create_SimpleModel (XYZ,CON,BOUN,ElemName) ::: DESCRIPTION ::: {.fragment} CREATE_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_SIMPLEMODEL (XYZ,CON,BOUN,ELEMNAME) the function creates the data structure MODEL from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the numerical or cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON (4,:) = [ 6 7] : element 4 connects nodes 6 and 7, or CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss the data structure MODEL contains information about the structural model in the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = cell array of node connectivity DOF = array with degree of freedom numbering, nodes are stored rowwise ndf(el) = no of dofs/node for element el nq (el) = no of basic forces for element el nen(el) = no of nodes for element el ElemName = cell array of element names ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create SimpleModel"},{"location":"FEDEASLab/General/FEDEASLab/Create_SimpleModel/#create_simplemodel","text":"","title":"Create_SimpleModel"},{"location":"FEDEASLab/General/FEDEASLab/Create_SimpleModel/#purpose","text":"::: {.box} CREATE_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Create_SimpleModel/#synopsis","text":"::: {.box} function Model = Create_SimpleModel (XYZ,CON,BOUN,ElemName) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Create_SimpleModel/#description","text":"::: {.fragment} CREATE_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_SIMPLEMODEL (XYZ,CON,BOUN,ELEMNAME) the function creates the data structure MODEL from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the numerical or cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON (4,:) = [ 6 7] : element 4 connects nodes 6 and 7, or CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss the data structure MODEL contains information about the structural model in the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = cell array of node connectivity DOF = array with degree of freedom numbering, nodes are stored rowwise ndf(el) = no of dofs/node for element el nq (el) = no of basic forces for element el nen(el) = no of nodes for element el ElemName = cell array of element names :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Create_SimpleModel/#cross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Extract_Str2ElState/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Extract\\_Str2ElState.m Extract_Str2ElState PURPOSE ::: {.box} EXTRACT_STR2ELSTATE extract element state from structure state ::: SYNOPSIS ::: {.box} function ElemState = Extract_Str2ElState (el,id,State) ::: DESCRIPTION ::: {.fragment} EXTRACT_STR2ELSTATE extract element state from structure state ELEMSTATE = EXTRACT_STR2ELSTATE(EL,ID,STATE) the function extracts from the data structure STATE the necessary state information for element EL, with id-array ID, and returns it in data structure ELEMSTATE; when STATE is numeric, it is assumed to represent the global dof displacement vector and the function extracts only the element dof displacements in ELEMSTATE.U ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Structure {.code} STRUCTURE performs requested action on group of elements Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Extract Str2ElState"},{"location":"FEDEASLab/General/FEDEASLab/Extract_Str2ElState/#extract_str2elstate","text":"","title":"Extract_Str2ElState"},{"location":"FEDEASLab/General/FEDEASLab/Extract_Str2ElState/#purpose","text":"::: {.box} EXTRACT_STR2ELSTATE extract element state from structure state :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Extract_Str2ElState/#synopsis","text":"::: {.box} function ElemState = Extract_Str2ElState (el,id,State) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Extract_Str2ElState/#description","text":"::: {.fragment} EXTRACT_STR2ELSTATE extract element state from structure state ELEMSTATE = EXTRACT_STR2ELSTATE(EL,ID,STATE) the function extracts from the data structure STATE the necessary state information for element EL, with id-array ID, and returns it in data structure ELEMSTATE; when STATE is numeric, it is assumed to represent the global dof displacement vector and the function extracts only the element dof displacements in ELEMSTATE.U :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Extract_Str2ElState/#cross-reference-information","text":"This function calls: This function is called by: Structure {.code} STRUCTURE performs requested action on group of elements Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/Structure/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> Structure.m Structure PURPOSE ::: {.box} STRUCTURE performs requested action on group of elements ::: SYNOPSIS ::: {.box} function Resp = Structure (action,Model,ElemData,State,ElemList) ::: DESCRIPTION ::: {.fragment} STRUCTURE performs requested action on group of elements RESP = STRUCTURE (ACTION,MODEL,ELEMDATA,STATE,ELEMLIST) response of some or all elements in the structural model, as requested in ELEMLIST (default=all); depending on the value of the character variable ACTION, the function returns information in data structure RESP for the structural model with properties in MODEL; the cell array ELEMDATA contains the element properties; the optional data structure STATE contains current response state variables for the model. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in RESP: ACTION = 'chec' check element property data for omissions and assign default values 'init' initialize element history variables 'forc' report structure resisting forces 'stif' report structure stiffness matrix and resisting forces 'mass' report lumped mass vector and consistent mass matrix 'post' report post-processing information 'stre' nodal stress recovery with element least squares 'nstr' nodal stress recovery with direct nodal stress calculations 'spre' nodal stress recovery with superconvergent global patch (ZZ-method) (not implemented) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure RESP stands for the following data object(s) for each ACTION: RESP = ELEMDATA for action = 'chec' RESP = STATE for action = 'init' RESP = STATE for action = 'stif' RESP = STATE for action = 'forc' RESP = MASS for action = 'mass' RESP = POST for action = 'post' RESP = NDSTR for action = 'stre','nstr','spre' RESP is empty for unsupported keywords additional keywords can be added in the function ADD_ACTION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STATE is a data structure with information about the current response state of the model in fields lamda = row vector of current load factor(s) U = global dof total displacement vector DU = global dof displacement increments from last convergencey DDU = global dof displacement increments from last iteration Udot = global dof velocity vector Udotdot = global dof acceleration vector Kf = structure stiffness matrix at free dofs; returned along with U under action = 'stif' Kfd = structure stiffness matrix coupling free and restrained dofs Pr = structure resisting force vector; returned along with U under action = 'stif' or 'forc' Past = data structure of element history variables at last convergence in cell array Elem Pres = data structure of current element history variables in cell array Elem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MASS is a data structure with mass information in fields: Ml = lumped mass vector of free dofs of structural model Mc = consistent mass matrix of free dofs of structural model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ POST is a data structure with structure and element response information for post-processing in fields: lamda = row vector of current load factor(s) Elem{el} = cell array with post-processing information for each element U = global dof displacement vector Udot = global dof velocity vector (for transient analysis) Uddot = global dof acceleration vector (for transient analysis) Pr = structure resisting force vector Time = time ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ NDSTR is a data structure with nodal stress information in fields: SigNd = nodal stresses for plane and membrane finite elements MomNd = nodal moments for plate and shell finite elements ShrNd = nodal shears for plate and shell finite elements with shear deformations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMLIST = list of elements to which action applies (default=all elements in model) ::: CROSS-REFERENCE INFORMATION This function calls: Extract_Str2ElState {.code} EXTRACT_STR2ELSTATE extract element state from structure state SubIncr4ElemntSD {.code} SUBINCR4ELMNTSD element displacement increment subdivision for state determination This function is called by: Add_Mass2Model {.code} ADD_MASS2MODEL sets up lumped or consistent mass in Model.M Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Structure"},{"location":"FEDEASLab/General/FEDEASLab/Structure/#structure","text":"","title":"Structure"},{"location":"FEDEASLab/General/FEDEASLab/Structure/#purpose","text":"::: {.box} STRUCTURE performs requested action on group of elements :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/Structure/#synopsis","text":"::: {.box} function Resp = Structure (action,Model,ElemData,State,ElemList) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/Structure/#description","text":"::: {.fragment} STRUCTURE performs requested action on group of elements RESP = STRUCTURE (ACTION,MODEL,ELEMDATA,STATE,ELEMLIST) response of some or all elements in the structural model, as requested in ELEMLIST (default=all); depending on the value of the character variable ACTION, the function returns information in data structure RESP for the structural model with properties in MODEL; the cell array ELEMDATA contains the element properties; the optional data structure STATE contains current response state variables for the model. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in RESP: ACTION = 'chec' check element property data for omissions and assign default values 'init' initialize element history variables 'forc' report structure resisting forces 'stif' report structure stiffness matrix and resisting forces 'mass' report lumped mass vector and consistent mass matrix 'post' report post-processing information 'stre' nodal stress recovery with element least squares 'nstr' nodal stress recovery with direct nodal stress calculations 'spre' nodal stress recovery with superconvergent global patch (ZZ-method) (not implemented) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure RESP stands for the following data object(s) for each ACTION: RESP = ELEMDATA for action = 'chec' RESP = STATE for action = 'init' RESP = STATE for action = 'stif' RESP = STATE for action = 'forc' RESP = MASS for action = 'mass' RESP = POST for action = 'post' RESP = NDSTR for action = 'stre','nstr','spre' RESP is empty for unsupported keywords additional keywords can be added in the function ADD_ACTION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STATE is a data structure with information about the current response state of the model in fields lamda = row vector of current load factor(s) U = global dof total displacement vector DU = global dof displacement increments from last convergencey DDU = global dof displacement increments from last iteration Udot = global dof velocity vector Udotdot = global dof acceleration vector Kf = structure stiffness matrix at free dofs; returned along with U under action = 'stif' Kfd = structure stiffness matrix coupling free and restrained dofs Pr = structure resisting force vector; returned along with U under action = 'stif' or 'forc' Past = data structure of element history variables at last convergence in cell array Elem Pres = data structure of current element history variables in cell array Elem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MASS is a data structure with mass information in fields: Ml = lumped mass vector of free dofs of structural model Mc = consistent mass matrix of free dofs of structural model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ POST is a data structure with structure and element response information for post-processing in fields: lamda = row vector of current load factor(s) Elem{el} = cell array with post-processing information for each element U = global dof displacement vector Udot = global dof velocity vector (for transient analysis) Uddot = global dof acceleration vector (for transient analysis) Pr = structure resisting force vector Time = time ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ NDSTR is a data structure with nodal stress information in fields: SigNd = nodal stresses for plane and membrane finite elements MomNd = nodal moments for plate and shell finite elements ShrNd = nodal shears for plate and shell finite elements with shear deformations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMLIST = list of elements to which action applies (default=all elements in model) :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/Structure/#cross-reference-information","text":"This function calls: Extract_Str2ElState {.code} EXTRACT_STR2ELSTATE extract element state from structure state SubIncr4ElemntSD {.code} SUBINCR4ELMNTSD element displacement increment subdivision for state determination This function is called by: Add_Mass2Model {.code} ADD_MASS2MODEL sets up lumped or consistent mass in Model.M Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/General/FEDEASLab/SubIncr4ElemntSD/","text":"[]{#_top} [Home](../FEDEASLab.html) \\> [General](FEDEASLab.html) \\> SubIncr4ElemntSD.m SubIncr4ElemntSD PURPOSE ::: {.box} SUBINCR4ELMNTSD element displacement increment subdivision for state determination ::: SYNOPSIS ::: {.box} function ElemState = SubIncr4ElemntSD (el,ElemName,xyz,ElemData,ElemState) ::: DESCRIPTION ::: {.fragment} SUBINCR4ELMNTSD element displacement increment subdivision for state determination ELEMSTATE = SUBINCR4ELMNTSD (EL,ELEMNAME,XYZ,ELEMDATA,ELEMSTATE) function calls the state determination function for all elements in the structural model with the option of subdividing the displacement increment in case of non-convergence; the latter case is represented by the logical variable CONVFLAG in ELEMSTATE; to activate the option of element displacement increment subdivision, the variable SUBDIVNO must be set in the element property data structure ELEMDATA ::: CROSS-REFERENCE INFORMATION This function calls: This function is called by: Structure {.code} STRUCTURE performs requested action on group of elements Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"SubIncr4ElemntSD"},{"location":"FEDEASLab/General/FEDEASLab/SubIncr4ElemntSD/#subincr4elemntsd","text":"","title":"SubIncr4ElemntSD"},{"location":"FEDEASLab/General/FEDEASLab/SubIncr4ElemntSD/#purpose","text":"::: {.box} SUBINCR4ELMNTSD element displacement increment subdivision for state determination :::","title":"PURPOSE"},{"location":"FEDEASLab/General/FEDEASLab/SubIncr4ElemntSD/#synopsis","text":"::: {.box} function ElemState = SubIncr4ElemntSD (el,ElemName,xyz,ElemData,ElemState) :::","title":"SYNOPSIS"},{"location":"FEDEASLab/General/FEDEASLab/SubIncr4ElemntSD/#description","text":"::: {.fragment} SUBINCR4ELMNTSD element displacement increment subdivision for state determination ELEMSTATE = SUBINCR4ELMNTSD (EL,ELEMNAME,XYZ,ELEMDATA,ELEMSTATE) function calls the state determination function for all elements in the structural model with the option of subdividing the displacement increment in case of non-convergence; the latter case is represented by the logical variable CONVFLAG in ELEMSTATE; to activate the option of element displacement increment subdivision, the variable SUBDIVNO must be set in the element property data structure ELEMDATA :::","title":"DESCRIPTION"},{"location":"FEDEASLab/General/FEDEASLab/SubIncr4ElemntSD/#cross-reference-information","text":"This function calls: This function is called by: Structure {.code} STRUCTURE performs requested action on group of elements Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"CROSS-REFERENCE INFORMATION"},{"location":"FEDEASLab/Material_Library/FEDEASLab/","text":"Index for Directory Material_Library Master index Index for Material_Library Index for Material_Library Matlab files in this directory: BilinElastic1dMat BILINELASTIC1dMAT uniaxial stress-strain relation for a bilinear elastic material BilinHyst1dMat BILINHYST1dMAT bilinear hysteretic force-deformation relation with pinching BilinInel1dMat BILININEL1dMAT uniaxial stress-strain relation for bilinear inelastic material BilinOrOr1dMat BILINOROR1dMAT uniaxial stress-strain relation for bilinear origin-oriented material BilinPkOr1dMat BILINPKOR1dMAT uniaxial stress-strain relation for bilinear origin-oriented material GMP1dMat GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material InelJ2PwLH3dMat INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening InelLPwLH1dMat INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening ManderConcr1dMat MANDERCONCR1DMAT hysteretic concrete stress-strain relation after Mander Other Matlab-specific files in this directory: BilinElastic1dMat.p BilinHyst1dMat.p BilinInel1dMat.p BilinOrOr1dMat.p BilinPkOr1dMat.p GMP1dMat.p InelJ2PwLH3dMat.p InelLPwLH1dMat.p ManderConcr1dMat.p Generated on Wed 22-Jan-2020 08:42:47 by m2html \u00a9 2005","title":"FEDEASLab"},{"location":"FEDEASLab/Plastic_Analysis/Ain_matrix/","text":"AIN_MATRIX Syntax AUB = AUB_MATRIX (MODEL,ELEMDATA) AUB = AUB_MATRIX (MODEL,ELEMDATA,ALPH) the function sets up the block diagonal matrix of element limit-surface equations, A_{in} , for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA. Options for parameter ALPH are specified below. Parameters Model : struct\\ Contains structure data. ElemData : cell array\\ Contains element property data. alph : (Optional) Char array or float array. Array. If an n \\times 2 array is passed, n piecewise linear axial-moment interaction equations of the following form will be generated for each element: a_n \\frac{|N|}{N_{pl}} + b_n\\left( \\frac{|M_z|}{M_{p,z}} + \\frac{|M_y|}{M_{p,y}}\\right) \\leq 1.0 If an n \\times 3 array is passed, n piecewise linear axial-moment-shear interaction equations of the following form will be applied: a_n \\frac{|N|}{N_{p}} + b_n \\frac{|M|}{M_{p}} + c_n \\frac{|V|}{V_{p}} \\leq 1.0 String. Alternatively, a char array may be passed indicating one of the following options: 'AISC-H2' (Default) 'AISC-H1' Empty. If no parameter is passed in the third position, the function will go to the NMOpt field of the cell ElemData for each element, which may also contain a string or an array. Elements with no such field will default to the AISC-H2 option. Formulation The matrix A_{in} forms the upper bound plastic conditions in the form \\mathbf{A}_{in} \\mathbf{Q} \\leq \\mathbf{1} for the lower bound linear programming problem expressed as follows: \\begin{aligned} \\lambda_{c}=\\max \\lambda & \\\\ \\text { with } &\\left\\{\\begin{aligned} \\lambda P_{r e f}+P_{c f} &=\\mathbf{B}_{f} Q \\\\ \\mathbf{A}_{in} \\mathbf{Q} & \\leq \\mathbf{1} \\\\ \\end{aligned}\\right. \\end{aligned} 2D Shear-moment-axial interaction Interaction between shear, moment, and axial forces is implemented with n piecewise linear equations of the following form: a_n\\dfrac{|N|}{N_p} + b_n\\dfrac{|M|}{M_p} + c_n\\dfrac{|V|}{V_p} \\leq1.0 N , M , and V are substituted by Q_1 , Q_2 , and (Q_2 +Q_3)/L respectively, and the equations are rearranged and implemented follows: \\dfrac{a}{N_p}Q_1 + \\dfrac{b}{M_p}Q_2 + \\dfrac{ c}{LV_p}(Q_2+Q_3) \\leq1.0 \\dfrac{a}{N_p}Q_1 + \\left(\\dfrac{b}{M_p}+\\dfrac{c}{LV_p}\\right)Q_2 + \\dfrac{c}{LV_p}Q_3 \\leq1.0","title":"AIN_MATRIX"},{"location":"FEDEASLab/Plastic_Analysis/Ain_matrix/#ain_matrix","text":"","title":"AIN_MATRIX"},{"location":"FEDEASLab/Plastic_Analysis/Ain_matrix/#syntax","text":"AUB = AUB_MATRIX (MODEL,ELEMDATA) AUB = AUB_MATRIX (MODEL,ELEMDATA,ALPH) the function sets up the block diagonal matrix of element limit-surface equations, A_{in} , for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA. Options for parameter ALPH are specified below.","title":"Syntax"},{"location":"FEDEASLab/Plastic_Analysis/Ain_matrix/#parameters","text":"Model : struct\\ Contains structure data. ElemData : cell array\\ Contains element property data. alph : (Optional) Char array or float array. Array. If an n \\times 2 array is passed, n piecewise linear axial-moment interaction equations of the following form will be generated for each element: a_n \\frac{|N|}{N_{pl}} + b_n\\left( \\frac{|M_z|}{M_{p,z}} + \\frac{|M_y|}{M_{p,y}}\\right) \\leq 1.0 If an n \\times 3 array is passed, n piecewise linear axial-moment-shear interaction equations of the following form will be applied: a_n \\frac{|N|}{N_{p}} + b_n \\frac{|M|}{M_{p}} + c_n \\frac{|V|}{V_{p}} \\leq 1.0 String. Alternatively, a char array may be passed indicating one of the following options: 'AISC-H2' (Default) 'AISC-H1' Empty. If no parameter is passed in the third position, the function will go to the NMOpt field of the cell ElemData for each element, which may also contain a string or an array. Elements with no such field will default to the AISC-H2 option.","title":"Parameters"},{"location":"FEDEASLab/Plastic_Analysis/Ain_matrix/#formulation","text":"The matrix A_{in} forms the upper bound plastic conditions in the form \\mathbf{A}_{in} \\mathbf{Q} \\leq \\mathbf{1} for the lower bound linear programming problem expressed as follows: \\begin{aligned} \\lambda_{c}=\\max \\lambda & \\\\ \\text { with } &\\left\\{\\begin{aligned} \\lambda P_{r e f}+P_{c f} &=\\mathbf{B}_{f} Q \\\\ \\mathbf{A}_{in} \\mathbf{Q} & \\leq \\mathbf{1} \\\\ \\end{aligned}\\right. \\end{aligned}","title":"Formulation"},{"location":"FEDEASLab/Plastic_Analysis/Ain_matrix/#2d-shear-moment-axial-interaction","text":"Interaction between shear, moment, and axial forces is implemented with n piecewise linear equations of the following form: a_n\\dfrac{|N|}{N_p} + b_n\\dfrac{|M|}{M_p} + c_n\\dfrac{|V|}{V_p} \\leq1.0 N , M , and V are substituted by Q_1 , Q_2 , and (Q_2 +Q_3)/L respectively, and the equations are rearranged and implemented follows: \\dfrac{a}{N_p}Q_1 + \\dfrac{b}{M_p}Q_2 + \\dfrac{ c}{LV_p}(Q_2+Q_3) \\leq1.0 \\dfrac{a}{N_p}Q_1 + \\left(\\dfrac{b}{M_p}+\\dfrac{c}{LV_p}\\right)Q_2 + \\dfrac{c}{LV_p}Q_3 \\leq1.0","title":"2D Shear-moment-axial interaction"},{"location":"FEDEASLab/Plastic_Analysis/LimEqns_2dFrm/","text":"LimEqns_2dFrm Returns a matrix of element limit-surface equations, LimEqns , for the frame element specified in data structure ElemData . Syntax LimEqns = LimEqns_2dFrm (ElemData, lim_coef) LimEqns = LimEqns_2dFrm (ElemData, lim_coef, xyz) Parameters ElemData : cell array\\ Contains element property data. Element plastic capacity information is stored in the fields Np , Mp , and Vp , and may take the following forms: (REWRITE/CLARIFY) \\left[\\begin{array}{ll} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{ (-)} \\\\ \\mathrm{Q}_{\\mathrm{pj}}^{(+)} & \\mathrm{Q}_{\\mathrm{pj}}^{ (-)} \\end{array}\\right] \\left[\\begin{array}{ll} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(-)} \\end{array}\\right] \\quad \\rightarrow \\left[\\begin{array}{ll} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(-)} \\\\ \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(-)} \\end{array}\\right] \\left[\\begin{array}{l} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} \\\\ \\mathrm{Q}_{\\mathrm{pj}}^{(+)} \\end{array}\\right] \\quad \\rightarrow \\left[\\begin{array}{ll} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(+)} \\\\ \\mathrm{Q}_{\\mathrm{pj}}^{(+)} & \\mathrm{Q}_{\\mathrm{pj}}^{(+)} \\end{array}\\right] \\mathrm{Q}_{\\mathrm{pi}}^{(+)} \\rightarrow \\left[\\begin{array}{ll} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(+)} \\\\ \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(+)} \\end{array}\\right] lim_coef : float array. If an n \\times 1 array is passed, n piecewise linear equations of the following form will be generated for each element: a_n \\frac{|Q_i|}{Q_{i,pl}} \\leq 1.0 If an n \\times 2 array is passed, n piecewise linear axial-moment interaction equations of the following form will be generated for each element: a_n \\frac{|N|}{N_{pl}} + b_n\\frac{|M_z|}{M_{p,z}} \\leq 1.0 If an n \\times 3 array is passed, n piecewise linear axial-moment-shear interaction equations of the following form will be applied: a_n \\frac{|N|}{N_{p}} + b_n \\frac{|M|}{M_{p}} + c_n \\frac{|V|}{V_{p}} \\leq 1.0 Case III: NVM interaction Interaction between shear, moment, and axial forces is implemented with n piecewise linear equations of the following form: a_n\\dfrac{|N|}{N_p} + b_n\\dfrac{|M|}{M_p} + c_n\\dfrac{|V|}{V_p} \\leq1.0 N , M , and V are substituted by Q_1 , Q_2 , and (Q_2 +Q_3)/L respectively, and the equations are rearranged and implemented follows: \\dfrac{a}{N_p}Q_1 + \\dfrac{b}{M_p}Q_2 + \\dfrac{ c}{LV_p}(Q_2+Q_3) \\leq1.0 \\dfrac{a}{N_p}Q_1 + \\left(\\dfrac{b}{M_p}+\\dfrac{c}{LV_p}\\right)Q_2 + \\dfrac{c}{LV_p}Q_3 \\leq1.0","title":"Plastic Analysis"},{"location":"FEDEASLab/Plastic_Analysis/LimEqns_2dFrm/#limeqns_2dfrm","text":"Returns a matrix of element limit-surface equations, LimEqns , for the frame element specified in data structure ElemData .","title":"LimEqns_2dFrm"},{"location":"FEDEASLab/Plastic_Analysis/LimEqns_2dFrm/#syntax","text":"LimEqns = LimEqns_2dFrm (ElemData, lim_coef) LimEqns = LimEqns_2dFrm (ElemData, lim_coef, xyz)","title":"Syntax"},{"location":"FEDEASLab/Plastic_Analysis/LimEqns_2dFrm/#parameters","text":"ElemData : cell array\\ Contains element property data. Element plastic capacity information is stored in the fields Np , Mp , and Vp , and may take the following forms: (REWRITE/CLARIFY) \\left[\\begin{array}{ll} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{ (-)} \\\\ \\mathrm{Q}_{\\mathrm{pj}}^{(+)} & \\mathrm{Q}_{\\mathrm{pj}}^{ (-)} \\end{array}\\right] \\left[\\begin{array}{ll} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(-)} \\end{array}\\right] \\quad \\rightarrow \\left[\\begin{array}{ll} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(-)} \\\\ \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(-)} \\end{array}\\right] \\left[\\begin{array}{l} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} \\\\ \\mathrm{Q}_{\\mathrm{pj}}^{(+)} \\end{array}\\right] \\quad \\rightarrow \\left[\\begin{array}{ll} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(+)} \\\\ \\mathrm{Q}_{\\mathrm{pj}}^{(+)} & \\mathrm{Q}_{\\mathrm{pj}}^{(+)} \\end{array}\\right] \\mathrm{Q}_{\\mathrm{pi}}^{(+)} \\rightarrow \\left[\\begin{array}{ll} \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(+)} \\\\ \\mathrm{Q}_{\\mathrm{pi}}^{(+)} & \\mathrm{Q}_{\\mathrm{pi}}^{(+)} \\end{array}\\right] lim_coef : float array. If an n \\times 1 array is passed, n piecewise linear equations of the following form will be generated for each element: a_n \\frac{|Q_i|}{Q_{i,pl}} \\leq 1.0 If an n \\times 2 array is passed, n piecewise linear axial-moment interaction equations of the following form will be generated for each element: a_n \\frac{|N|}{N_{pl}} + b_n\\frac{|M_z|}{M_{p,z}} \\leq 1.0 If an n \\times 3 array is passed, n piecewise linear axial-moment-shear interaction equations of the following form will be applied: a_n \\frac{|N|}{N_{p}} + b_n \\frac{|M|}{M_{p}} + c_n \\frac{|V|}{V_{p}} \\leq 1.0","title":"Parameters"},{"location":"FEDEASLab/Plastic_Analysis/LimEqns_2dFrm/#case-iii-nvm-interaction","text":"Interaction between shear, moment, and axial forces is implemented with n piecewise linear equations of the following form: a_n\\dfrac{|N|}{N_p} + b_n\\dfrac{|M|}{M_p} + c_n\\dfrac{|V|}{V_p} \\leq1.0 N , M , and V are substituted by Q_1 , Q_2 , and (Q_2 +Q_3)/L respectively, and the equations are rearranged and implemented follows: \\dfrac{a}{N_p}Q_1 + \\dfrac{b}{M_p}Q_2 + \\dfrac{ c}{LV_p}(Q_2+Q_3) \\leq1.0 \\dfrac{a}{N_p}Q_1 + \\left(\\dfrac{b}{M_p}+\\dfrac{c}{LV_p}\\right)Q_2 + \\dfrac{c}{LV_p}Q_3 \\leq1.0","title":"Case III: NVM interaction"},{"location":"FEDEASLab/Solution_Library/FEDEASLab/","text":"Index for Directory Solution_Library Master index Index for Solution_Library Index for Solution_Library Matlab files in this directory: Condense_MV CONDENSE_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom Create_PlastLimSurface CREATE_PLASTLIMSURFACE set up pologonal plastic limit surface for truss and 2d frame elements Event2Event_NLAnalysis event-to-event incremental analysis of elasto-plastic structure with linear or P-DELTA geometry Increment INCREMENT load incrementation and state advance under static conditions Initialize INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_SolStrat INITIALIZE_SOLSTRAT default values for most solution strategy parameters Initialize_State INITIALIZE_STATE initialize state variables of structural model and create STATE Iterate ITERATE equilibrium iterations until convergence under static conditions LinearStep LINEARSTEP sets up and solves the structure equilibrium equations for single load step LoadFactorControl LOADFACTORCONTROL determine load factor increment under load control strategy LoadFactorIncrement LOADFACTORINCREMENT load factor increment(s) for given load histories OneIteration ONEITERATION single equilibrium iteration under static conditions OneTransientIteration ONETRANSIENTITERATION single equilibrium iteration under transient conditions PlasticAnalysis determine collapse load factor, element forces, and collapse mechanism by plastic analysis StateDetermination STATEDETERMINATION structure state determination under static conditions TimeIntegrationConstants TIMEINTEGRATIONCONSTANTS constants of time integration strategy TransientIncrement TRANSIENTINCREMENT load incrementation and state advance under transient conditions TransientInitialize TRANSIENTINITIALIZE initialize State variables for transient response analysis TransientIterate TRANSIENTITERATE equilibrium iterations until convergence under transient conditions TransientStateDetermination TRANSIENTSTATEDETERMINATION structure state determination under transient conditions Update_State UPDATE_STATE final state determination under static conditions, reset increments and history Update_TransientState UPDATE_TRANSIENTSTATE final state determination under transient conditions, reset increments and history Other Matlab-specific files in this directory: Condense_MV.p Create_PlastLimSurface.p Event2Event_NLAnalysis.p Increment.p Initialize.p Initialize_SolStrat.p Initialize_State.p Iterate.p LinearStep.p LoadFactorControl.p LoadFactorIncrement.p OneIteration.p OneTransientIteration.p PlasticAnalysis.p StateDetermination.p TimeIntegrationConstants.p TransientIncrement.p TransientInitialize.p TransientIterate.p TransientStateDetermination.p Update_State.p Update_TransientState.p Generated on Wed 22-Jan-2020 08:42:47 by m2html \u00a9 2005","title":"Solution Library"},{"location":"FEDEASLab/Solution_Library/Increment/","text":"Description of Increment Home > Solution_Library > Increment.m Increment PURPOSE INCREMENT load incrementation and state advance under static conditions SYNOPSIS function [State,SolStrat] = Increment(Model,ElemData,Loading,State,SolStrat) DESCRIPTION INCREMENT load incrementation and state advance under static conditions [STATE,SOLSTRAT] = INCREMENT(MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function increments the applied loading and determines the corresponding displacement increments under static conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories CROSS-REFERENCE INFORMATION This function calls: LoadFactorControl LOADFACTORCONTROL determine load factor increment under load control strategy LoadFactorIncrement LOADFACTORINCREMENT load factor increment(s) for given load histories StateDetermination STATEDETERMINATION structure state determination under static conditions This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Increment"},{"location":"FEDEASLab/Solution_Library/Initialize/","text":"Description of Initialize Home > Solution_Library > Initialize.m Initialize PURPOSE INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT SYNOPSIS function [State,SolStrat] = Initialize (Model,ElemData,Loading,State,SolStrat) DESCRIPTION INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT [STATE,SOLSTRAT] = INITIALIZE(MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function initializes analysis variables in STATE and load control parameters in SOLSTRAT (only if IncrStrat.LFCtrl = 'yes'; the function returns updated data structures STATE and SOLSTRAT: MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories; specifically the function adds the following fields to STATE STATE lamda = row vector of current load factors Pi = initial force vector (for load sequences) Time = pseudo-or real time counter the function also adds the field HIST to SOLSTRAT with subfields Sp0 and sgnK0 for adjusting the load factor under load incrementation, if IncrStrat.LFCtrl='yes' CROSS-REFERENCE INFORMATION This function calls: LoadFactorControl LOADFACTORCONTROL determine load factor increment under load control strategy This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Initialize"},{"location":"FEDEASLab/Utilities/FEDEASLab/","text":"Master index Index for Utilities Index for Utilities Matlab files in this directory: CleanStart CLEANSTART initializes workspace for new analysis Create_DispCyclewN CREATE_DISPCYCLEwN generate time and value pairs of a displacement cycle with normal force Create_LoadHistory CREATE_LOADHIST generate time and value pairs of a displacement cycle with normal force Create_MultDispCycleswN CREATE_MULTDISPCYCLESwN sequence of full, half or quarter displacement cycles with axial force D_index D_INDEX cell array of indices into structure arrays for non-zero element deformations H_index H_INDEX cell array of indices into structure arrays for continuous element deformations Print_PDFile PRINT_PDFILE sends the current figure to file SIUnits % Script file for common unit definition with SI units as default Units % Script file for common unit definition with Imperial units as default Other Matlab-specific files in this directory: Create_DispCyclewN.p Create_LoadHistory.p Create_MultDispCycleswN.p D_index.p H_index.p Print_PDFile.p Subsequent directories: Interpolation Plotting PostProcessing PreProcessing Quadrature Generated on Wed 22-Jan-2020 08:42:47 by m2html \u00a9 2005","title":"FEDEASLab"},{"location":"_archive/FEDEASLab/","text":"Matlab Index Matlab Directories Basic Dynamics Element_Library General Material_Library Section_Library Solution_Library Utilities Utilities\\Interpolation Utilities\\Plotting Utilities\\PostProcessing Utilities\\PreProcessing Utilities\\Quadrature Matlab Files found in these Directories AISC_Section Create_RectBarGrid Hermite Plot_2dMomntDistr A_matrix Create_RectOutline HermiteN Plot_AxialForces AccelerationIntegral Create_RectPatch HomoCircSecw1dMat Plot_BounCond Add_Bars2Section Create_RectShape HomoRectSecw1dMat Plot_DeformedStructure Add_Brace2Frame Create_RectwCovOutline HomoWFSecw1dMat Plot_DispPath Add_Damping2State Create_SSecOutline Increment Plot_EQRecord Add_GravityColumn2Frame Create_ShapewMat Inel2dFrm_wLHNMYS Plot_ElemLoading Add_Mass2Model Create_SimpleModel Inel2dFrm_wLPPM Plot_ForcDistr Add_OpenPHIndx2Post Create_TSecOutline Inel2dFrm_wOneComp Plot_Hinge4Elem Add_Shape2Section Create_Window Inel2dFrm_wTwoComp Plot_IPVarDistr Aj_matrix D_index InelJ2PwLH3dMat Plot_LoadHistory Animate_EventSequence DefGeom_2dFrm InelLPwLH1dMat Plot_Mesh4Circ Animate_ResponsewHngHist DefGeom_3dFrm InelSDOF_Newmark Plot_Mesh4MultRectShape B_matrix DeformShape2dFrm InelTruss Plot_Model BbariBbarx_matrix DeformShape2dFrm_wCurvIntp Initialize Plot_NodalForces BilinElastic1dMat DeformShape2dFrm_wDispIntp Initialize_SolStrat Plot_OpenPlasticHinges BilinHyst1dMat Dinel2dFrm_EBwDF Initialize_State Plot_PlasticHinges BilinInel1dMat Dinel2dFrm_EBwFF Iterate Plot_Releases BilinOrOr1dMat Draw_3dAxisCross Ks_matrix Plot_SectionGeometry BilinPkOr1dMat Draw_Arrow LE2dFrm Plot_StoryDistr Check3dFrmAxes Draw_AxisCross LE2dFrm_wPdelta Plot_XYData CircLayer2Bar Draw_Cube LE3dFrm Print_PDFile CleanStart EigenMode LETruss Q0_vector Complete_QV ElasticResponseSpectrum LSDOF_LinearWilson Q2Post Condense_MV ElemData2Qpl LSDOF_Newmark ReCircSecw1dMat Create_BoxOutline ElemData4SteelBraces Label_2dMoments ReRectSecw1dMat Create_BoxwOvhOutline ElemData4SteelFrame Label_AxialForces Readme Create_CSecOutline ElementLoading Label_Model Rectangle2Fiber Create_CircBarGrid ElmLenOr Lagrange SIUnits Create_Damping Event2Event_NLAnalysis LagrangeN S_Check_Global3dEQ Create_DispCyclewN ExtrReshu Large2du2v_Frm S_DisplMethod Create_FrameSections Extract_BasicEl2SecState Large3du2v_Frm S_ForceMethod Create_IPMesh4Circ Extract_El2MatState LineProp4PlotSection SectionWrapper Create_IPMesh4MultRectShape Extract_El2SecState LinearStep Simpson Create_IPMesh4Rect Extract_Sec2MatState LoadFactorControl StateDetermination Create_IPMesh4WFShape Extract_Str2ElState LoadFactorIncrement Structure Create_ISecOutline FiberElemData4SteelBraces Lobatto SubIncr4ElemntSD Create_JntOffsets FiberElemData4SteelFrame Localize TimeIntegrationConstants Create_LSecOutline FontProp4PlotSection MP1dInt4Circ TranJnt Create_Load4Frame Fs_matrix MP2dInt4Circ TransientIncrement Create_LoadHistory GMP1dMat ManderConcr1dMat TransientInitialize Create_Loading GPYS MaterialWrapper TransientIterate Create_MPMesh4Circ Gauss Midpoint TransientStateDetermination Create_MRFrame GeomTran_2dFrm ModalAnalysis Trap Create_Mass4Frame GeomTran_3dFrm ModeDecomposition Units Create_Model GeomTran_Truss MultRectSecw1dMat Update_State Create_MultDispCycleswN Get_HFlrTrans OneIteration Update_TransientState Create_MultRectShape Get_HngPos4DefoElem OneTransientIteration V0_vector Create_NodalForces Get_ModelScale PlasticAnalysis kg_2dFrm Create_NodalMass Get_RIStDrift PlasticAnalysis_wLBT kg_3dFrm Create_PlastLimSurface Get_StShear PlasticAnalysis_wUBT kg_Truss Create_PwForces H_index Plot_2dCurvDistr Generated on Wed 22-Jan-2020 08:42:47 by m2html \u00a9 2005","title":"FEDEASLab"},{"location":"_archive/Functions/","text":"Function index FEDEASLab includes several MATLAB functions organized as follows: Basics . These functions implement the CNN computational blocks that can be combined either manually or using one of the provided wrappers to construct CNNs. Element Library . SimpleNN is a lightweight wrapper implementing CNNs that are linear chains of computational blocks. Material Library . DagNN is an object-oriented wrapper supporting more complex network topologies. Other functions . These helper functions are used to initialize and compile MatConvNet. There is no general training function as training depends on the dataset and problem. Look at the examples subdirectory for code showing how to train CNNs. Basics vl_nnbnorm Batch normalization. vl_nnbilinearsampler Bilinear Sampler. vl_nnconv Linear convolution by a filter. vl_nnconcat Concatenation. vl_nnconvt Convolution transpose. vl_nncrop Cropping. vl_nndropout Dropout. vl_nnloss Classification log-loss. vl_nnnoffset Norm-dependent offset. vl_nnnormalize Local Response Normalization (LRN). vl_nnpdist Pairwise distances. vl_nnpool Max and sum pooling. vl_nnrelu Rectified Linear Unit. vl_nnroipool Region of interest pooling. vl_nnsigmoid Sigmoid. vl_nnsoftmax Channel soft-max. vl_nnsoftmaxloss Deprecated vl_nnspnorm Spatial normalization. SimpleCNN wrapper vl_simplenn A lightweight wrapper for CNNs with a linear topology. vl_simplenn_tidy Upgrade or otherwise fix a CNN. vi_simplenn_display Print information about the CNN architecture. vl_simplenn_move Move the CNN between CPU and GPU. DagNN wrapper DagNN An object-oriented wrapper for CNN with complex topologies Other functions vl_argparse A helper function to parse optional arguments. vl_compilenn Compile the MEX fields in the toolbox. vl_contrib Download, compile, and setup third-party modules. vl_rootnn Return the path to the MatConvNet toolbox installation. vl_setpunn Setup MatConvNet for use in MATLAB. vl_imreadjpeg Quickly load a batch of JPEG images. vl_taccum Accumulate tensors operating in-place when possible. vl_tmove Exchange tensors between MATLAB processes and GPUs. vl_tshow Show a tensor on screen.","title":"Function index"},{"location":"_archive/Functions/#function-index","text":"FEDEASLab includes several MATLAB functions organized as follows: Basics . These functions implement the CNN computational blocks that can be combined either manually or using one of the provided wrappers to construct CNNs. Element Library . SimpleNN is a lightweight wrapper implementing CNNs that are linear chains of computational blocks. Material Library . DagNN is an object-oriented wrapper supporting more complex network topologies. Other functions . These helper functions are used to initialize and compile MatConvNet. There is no general training function as training depends on the dataset and problem. Look at the examples subdirectory for code showing how to train CNNs.","title":"Function index"},{"location":"_archive/Functions/#basics","text":"vl_nnbnorm Batch normalization. vl_nnbilinearsampler Bilinear Sampler. vl_nnconv Linear convolution by a filter. vl_nnconcat Concatenation. vl_nnconvt Convolution transpose. vl_nncrop Cropping. vl_nndropout Dropout. vl_nnloss Classification log-loss. vl_nnnoffset Norm-dependent offset. vl_nnnormalize Local Response Normalization (LRN). vl_nnpdist Pairwise distances. vl_nnpool Max and sum pooling. vl_nnrelu Rectified Linear Unit. vl_nnroipool Region of interest pooling. vl_nnsigmoid Sigmoid. vl_nnsoftmax Channel soft-max. vl_nnsoftmaxloss Deprecated vl_nnspnorm Spatial normalization.","title":"Basics"},{"location":"_archive/Functions/#simplecnn-wrapper","text":"vl_simplenn A lightweight wrapper for CNNs with a linear topology. vl_simplenn_tidy Upgrade or otherwise fix a CNN. vi_simplenn_display Print information about the CNN architecture. vl_simplenn_move Move the CNN between CPU and GPU.","title":"SimpleCNN wrapper"},{"location":"_archive/Functions/#dagnn-wrapper","text":"DagNN An object-oriented wrapper for CNN with complex topologies","title":"DagNN wrapper"},{"location":"_archive/Functions/#other-functions","text":"vl_argparse A helper function to parse optional arguments. vl_compilenn Compile the MEX fields in the toolbox. vl_contrib Download, compile, and setup third-party modules. vl_rootnn Return the path to the MatConvNet toolbox installation. vl_setpunn Setup MatConvNet for use in MATLAB. vl_imreadjpeg Quickly load a batch of JPEG images. vl_taccum Accumulate tensors operating in-place when possible. vl_tmove Exchange tensors between MATLAB processes and GPUs. vl_tshow Show a tensor on screen.","title":"Other functions"},{"location":"api/","text":"Index CleanStart InelLPwLH1dMat S_InitialStep Simple_PanelZone_Test Create_MRFrame InelPanelZone S_MultiStep Units Create_PanelZone InelTruss S_MultiStep_wLoadHist shape2d GMP1dMat LE2dFrm S_MultiStep_wLoadHistwSD Gauss2d LEIso2dMat S_Transient_MultiStep Gaussq Plot_SingularModes S_Transient_MultiStepwSD InelJ2PwLH3dMat SIUnits Set_PlastCond","title":"Index"},{"location":"api/src/Element_Library/","text":"Index for src\\Element_Library InelTruss INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry LE2dFrm LE2dFRM 2d LE frame element under linear or nonlinear geometry Other Matlab-specific files in this directory: Check3dFrmAxes.p DefGeom_2dFrm.p DefGeom_3dFrm.p DeformShape2dFrm.p DeformShape2dFrm_wCurvIntp.p DeformShape2dFrm_wDispIntp.p Dinel2dFrm_EBwDF.p Dinel2dFrm_EBwFF.p ElementLoading.p ExtrReshu.p Extract_BasicEl2SecState.p Extract_El2MatState.p Extract_El2SecState.p GPYS.p GeomTran_2dFrm.p GeomTran_3dFrm.p GeomTran_Truss.p Inel2dFrm_wLHNMYS.p Inel2dFrm_wLPPM.p Inel2dFrm_wOneComp.p Inel2dFrm_wTwoComp.p LE2dFrm_wPdelta.p LE3dFrm.p LETruss.p Large2du2v_Frm.p Large3du2v_Frm.p MaterialWrapper.p SectionWrapper.p TranJnt.p kg_2dFrm.p kg_3dFrm.p kg_Truss.p","title":"Index"},{"location":"api/src/Element_Library/#index-for-srcelement_library","text":"InelTruss INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry LE2dFrm LE2dFRM 2d LE frame element under linear or nonlinear geometry","title":"Index for src\\Element_Library"},{"location":"api/src/Element_Library/#other-matlab-specific-files-in-this-directory","text":"Check3dFrmAxes.p DefGeom_2dFrm.p DefGeom_3dFrm.p DeformShape2dFrm.p DeformShape2dFrm_wCurvIntp.p DeformShape2dFrm_wDispIntp.p Dinel2dFrm_EBwDF.p Dinel2dFrm_EBwFF.p ElementLoading.p ExtrReshu.p Extract_BasicEl2SecState.p Extract_El2MatState.p Extract_El2SecState.p GPYS.p GeomTran_2dFrm.p GeomTran_3dFrm.p GeomTran_Truss.p Inel2dFrm_wLHNMYS.p Inel2dFrm_wLPPM.p Inel2dFrm_wOneComp.p Inel2dFrm_wTwoComp.p LE2dFrm_wPdelta.p LE3dFrm.p LETruss.p Large2du2v_Frm.p Large3du2v_Frm.p MaterialWrapper.p SectionWrapper.p TranJnt.p kg_2dFrm.p kg_3dFrm.p kg_Truss.p","title":"Other Matlab-specific files in this directory:"},{"location":"api/src/Element_Library/InelTruss/","text":"InelTruss Purpose INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry Synopsis function ElemResp = InelTruss (action,el_no,xyz,ElemData,ElemState) Description INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry ELEMRESP = INELTRUSS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d/3d inelastic truss element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area MatName = function for material stress-strain response MatData = material property data s0 = initial force (default = 0) e0 = initial deformation (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Mat = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: This function is called by:","title":"InelTruss"},{"location":"api/src/Element_Library/InelTruss/#ineltruss","text":"","title":"InelTruss"},{"location":"api/src/Element_Library/InelTruss/#purpose","text":"INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry","title":"Purpose"},{"location":"api/src/Element_Library/InelTruss/#synopsis","text":"function ElemResp = InelTruss (action,el_no,xyz,ElemData,ElemState)","title":"Synopsis"},{"location":"api/src/Element_Library/InelTruss/#description","text":"INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry ELEMRESP = INELTRUSS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d/3d inelastic truss element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area MatName = function for material stress-strain response MatData = material property data s0 = initial force (default = 0) e0 = initial deformation (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Mat = material response information for post-processing (see material function with MatName)","title":"Description"},{"location":"api/src/Element_Library/InelTruss/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Element_Library/LE2dFrm/","text":"LE2dFrm Purpose LE2dFRM 2d LE frame element under linear or nonlinear geometry Synopsis function ElemResp = LE2dFrm (action,el_no,xyz,ElemData,ElemState) Description LE2dFRM 2d LE frame element under linear or nonlinear geometry ELEMRESP = LE2dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = FunHandle for action = 'defo' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) e0 = initial deformations (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j Release = axial and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: This function is called by:","title":"LE2dFrm"},{"location":"api/src/Element_Library/LE2dFrm/#le2dfrm","text":"","title":"LE2dFrm"},{"location":"api/src/Element_Library/LE2dFrm/#purpose","text":"LE2dFRM 2d LE frame element under linear or nonlinear geometry","title":"Purpose"},{"location":"api/src/Element_Library/LE2dFrm/#synopsis","text":"function ElemResp = LE2dFrm (action,el_no,xyz,ElemData,ElemState)","title":"Synopsis"},{"location":"api/src/Element_Library/LE2dFrm/#description","text":"LE2dFRM 2d LE frame element under linear or nonlinear geometry ELEMRESP = LE2dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = FunHandle for action = 'defo' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) e0 = initial deformations (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j Release = axial and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces","title":"Description"},{"location":"api/src/Element_Library/LE2dFrm/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Material_Library/","text":"Index for src\\Material_Library GMP1dMat GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material InelJ2PwLH3dMat INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening InelLPwLH1dMat INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening LEIso2dMat LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions Other Matlab-specific files in this directory: BilinElastic1dMat.p BilinHyst1dMat.p BilinInel1dMat.p BilinOrOr1dMat.p BilinPkOr1dMat.p ManderConcr1dMat.p","title":"Index"},{"location":"api/src/Material_Library/#index-for-srcmaterial_library","text":"GMP1dMat GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material InelJ2PwLH3dMat INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening InelLPwLH1dMat INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening LEIso2dMat LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions","title":"Index for src\\Material_Library"},{"location":"api/src/Material_Library/#other-matlab-specific-files-in-this-directory","text":"BilinElastic1dMat.p BilinHyst1dMat.p BilinInel1dMat.p BilinOrOr1dMat.p BilinPkOr1dMat.p ManderConcr1dMat.p","title":"Other Matlab-specific files in this directory:"},{"location":"api/src/Material_Library/GMP1dMat/","text":"GMP1dMat Purpose GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material Synopsis function MatResp = GMP1dMat (action,MatNo,MatData,MatState) Description GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material MATRESP = GMP1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields E = initial modulus fy = yield strength b = strain hardening ratio R0 = exp transition elastic-plastic (default value 20) cR1 = coefficient for variation of R0 (default value 0.925) cR2 = coefficient for variation of R0 (default value 0.15) a1 = isotropic hardening (IH) coefficient in compression (default value 0) a2 = trigger strain ductility for IH in compression (default value 0) a3 = isotropic hardening (IH) coefficient in tension (default value 0) a4 = trigger strain ductility for IH in tension (default value 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"GMP1dMat"},{"location":"api/src/Material_Library/GMP1dMat/#gmp1dmat","text":"","title":"GMP1dMat"},{"location":"api/src/Material_Library/GMP1dMat/#purpose","text":"GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material","title":"Purpose"},{"location":"api/src/Material_Library/GMP1dMat/#synopsis","text":"function MatResp = GMP1dMat (action,MatNo,MatData,MatState)","title":"Synopsis"},{"location":"api/src/Material_Library/GMP1dMat/#description","text":"GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material MATRESP = GMP1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields E = initial modulus fy = yield strength b = strain hardening ratio R0 = exp transition elastic-plastic (default value 20) cR1 = coefficient for variation of R0 (default value 0.925) cR2 = coefficient for variation of R0 (default value 0.15) a1 = isotropic hardening (IH) coefficient in compression (default value 0) a2 = trigger strain ductility for IH in compression (default value 0) a3 = isotropic hardening (IH) coefficient in tension (default value 0) a4 = trigger strain ductility for IH in tension (default value 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress","title":"Description"},{"location":"api/src/Material_Library/GMP1dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Material_Library/InelJ2PwLH3dMat/","text":"InelJ2PwLH3dMat Purpose INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Synopsis function MatResp = InelJ2PwLH3dMat (action,MatNo,MatData,MatState) Description INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening MATRESP = INELJ2PwLH3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material model based on J2 plasticity with isotropic and kinematic hardening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio (default = 0) Hk = kinematic hardening modulus (default = 0) Hi = isotropic hardening modulus (default = 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: This function is called by:","title":"InelJ2PwLH3dMat"},{"location":"api/src/Material_Library/InelJ2PwLH3dMat/#inelj2pwlh3dmat","text":"","title":"InelJ2PwLH3dMat"},{"location":"api/src/Material_Library/InelJ2PwLH3dMat/#purpose","text":"INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening","title":"Purpose"},{"location":"api/src/Material_Library/InelJ2PwLH3dMat/#synopsis","text":"function MatResp = InelJ2PwLH3dMat (action,MatNo,MatData,MatState)","title":"Synopsis"},{"location":"api/src/Material_Library/InelJ2PwLH3dMat/#description","text":"INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening MATRESP = INELJ2PwLH3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material model based on J2 plasticity with isotropic and kinematic hardening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio (default = 0) Hk = kinematic hardening modulus (default = 0) Hi = isotropic hardening modulus (default = 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23","title":"Description"},{"location":"api/src/Material_Library/InelJ2PwLH3dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Material_Library/InelLPwLH1dMat/","text":"InelLPwLH1dMat Purpose INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening Synopsis function MatResp = InelLPwLH1dMat (action,MatNo,MatData,MatState) Description INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening MATRESP = INELLPwLH1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Reference: JC Simo and TJR Hughes, Computational Inelasticity, pp. 43-45 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): eps_p = plastic strain alpha = isotropic hardening variable sig_b = back stress (for kinematic hardening) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Hi = isotropic plastic modulus Hk = kinematic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress eps_p = plastic strain Cross-Reference Information This function calls: This function is called by:","title":"InelLPwLH1dMat"},{"location":"api/src/Material_Library/InelLPwLH1dMat/#inellpwlh1dmat","text":"","title":"InelLPwLH1dMat"},{"location":"api/src/Material_Library/InelLPwLH1dMat/#purpose","text":"INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening","title":"Purpose"},{"location":"api/src/Material_Library/InelLPwLH1dMat/#synopsis","text":"function MatResp = InelLPwLH1dMat (action,MatNo,MatData,MatState)","title":"Synopsis"},{"location":"api/src/Material_Library/InelLPwLH1dMat/#description","text":"INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening MATRESP = INELLPwLH1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Reference: JC Simo and TJR Hughes, Computational Inelasticity, pp. 43-45 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): eps_p = plastic strain alpha = isotropic hardening variable sig_b = back stress (for kinematic hardening) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Hi = isotropic plastic modulus Hk = kinematic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress eps_p = plastic strain","title":"Description"},{"location":"api/src/Material_Library/InelLPwLH1dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Material_Library/LEIso2dMat/","text":"LEIso2dMat Purpose LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions Synopsis function MatResp = LEIso2dMat (action,MatNo,MatData,MatState) Description LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions MATRESP = LEISO2dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the response of a linear elastic, isotropic material under general plane stress or strain conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 4x1 vector form in the order 11, 22, 33, 12 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 4x1 vector form in the order 11, 22, 33, 12 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 4x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus nu = Poisson ratio eps0 = initial strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig0 = initial stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Case = 'stress' or 'strain' irs = stress or strain components to be retained depending on Case ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig = stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Cross-Reference Information This function calls: This function is called by:","title":"LEIso2dMat"},{"location":"api/src/Material_Library/LEIso2dMat/#leiso2dmat","text":"","title":"LEIso2dMat"},{"location":"api/src/Material_Library/LEIso2dMat/#purpose","text":"LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions","title":"Purpose"},{"location":"api/src/Material_Library/LEIso2dMat/#synopsis","text":"function MatResp = LEIso2dMat (action,MatNo,MatData,MatState)","title":"Synopsis"},{"location":"api/src/Material_Library/LEIso2dMat/#description","text":"LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions MATRESP = LEISO2dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the response of a linear elastic, isotropic material under general plane stress or strain conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 4x1 vector form in the order 11, 22, 33, 12 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 4x1 vector form in the order 11, 22, 33, 12 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 4x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus nu = Poisson ratio eps0 = initial strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig0 = initial stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Case = 'stress' or 'strain' irs = stress or strain components to be retained depending on Case ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig = stress tensor in 4x1 vector form in the order 11, 22, 33, 12","title":"Description"},{"location":"api/src/Material_Library/LEIso2dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Other/","text":"Index for src\\Other Create_PanelZone % Clear memory and close any open windows InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material Plot_SingularModes Set_PlastCond separate truss and frame elements Simple_PanelZone_Test % shape2d SHAPE2D shape functions for 4-9 node quadrilateral element","title":"Index"},{"location":"api/src/Other/#index-for-srcother","text":"Create_PanelZone % Clear memory and close any open windows InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material Plot_SingularModes Set_PlastCond separate truss and frame elements Simple_PanelZone_Test % shape2d SHAPE2D shape functions for 4-9 node quadrilateral element","title":"Index for src\\Other"},{"location":"api/src/Other/Create_PanelZone/","text":"Create_PanelZone Purpose % Clear memory and close any open windows Synopsis This is a script file. Description % Clear memory and close any open windows Cross-Reference Information This function calls: CleanStart CLEANSTART initializes workspace for new analysis Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Units % Script file for common unit definition with Imperial units as default This function is called by:","title":"Create PanelZone"},{"location":"api/src/Other/Create_PanelZone/#create_panelzone","text":"","title":"Create_PanelZone"},{"location":"api/src/Other/Create_PanelZone/#purpose","text":"% Clear memory and close any open windows","title":"Purpose"},{"location":"api/src/Other/Create_PanelZone/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Other/Create_PanelZone/#description","text":"% Clear memory and close any open windows","title":"Description"},{"location":"api/src/Other/Create_PanelZone/#cross-reference-information","text":"This function calls: CleanStart CLEANSTART initializes workspace for new analysis Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Units % Script file for common unit definition with Imperial units as default This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Other/InelPanelZone/","text":"InelPanelZone Purpose INELPANELZONE 4-node panel zone element with inelastic material Synopsis function ElemResp = InelPanelZone (action,el_no,xyz,ElemData,ElemState) Description INELPANELZONE 4-node panel zone element with inelastic material ELEMRESP = INELPANELZONE (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 4-node panel zone element with inelastic material; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields t = element thickness (default t=1) nIP = number of integration points (default nIP=2) MatName = function name for material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: shape2d SHAPE2D shape functions for 4-9 node quadrilateral element Gauss2d GAUSS2D Gauss integration rule in two dimensions This function is called by:","title":"InelPanelZone"},{"location":"api/src/Other/InelPanelZone/#inelpanelzone","text":"","title":"InelPanelZone"},{"location":"api/src/Other/InelPanelZone/#purpose","text":"INELPANELZONE 4-node panel zone element with inelastic material","title":"Purpose"},{"location":"api/src/Other/InelPanelZone/#synopsis","text":"function ElemResp = InelPanelZone (action,el_no,xyz,ElemData,ElemState)","title":"Synopsis"},{"location":"api/src/Other/InelPanelZone/#description","text":"INELPANELZONE 4-node panel zone element with inelastic material ELEMRESP = INELPANELZONE (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 4-node panel zone element with inelastic material; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields t = element thickness (default t=1) nIP = number of integration points (default nIP=2) MatName = function name for material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses","title":"Description"},{"location":"api/src/Other/InelPanelZone/#cross-reference-information","text":"This function calls: shape2d SHAPE2D shape functions for 4-9 node quadrilateral element Gauss2d GAUSS2D Gauss integration rule in two dimensions This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Other/Plot_SingularModes/","text":"Plot_SingularModes Purpose Synopsis This is a script file. Description Cross-Reference Information This function calls: This function is called by:","title":"Plot SingularModes"},{"location":"api/src/Other/Plot_SingularModes/#plot_singularmodes","text":"","title":"Plot_SingularModes"},{"location":"api/src/Other/Plot_SingularModes/#purpose","text":"","title":"Purpose"},{"location":"api/src/Other/Plot_SingularModes/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Other/Plot_SingularModes/#description","text":"","title":"Description"},{"location":"api/src/Other/Plot_SingularModes/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Other/Set_PlastCond/","text":"Set_PlastCond Purpose separate truss and frame elements Synopsis function Ain = Set_PlastCond (Model,ElemData) Description separate truss and frame elements Cross-Reference Information This function calls: This function is called by:","title":"Set PlastCond"},{"location":"api/src/Other/Set_PlastCond/#set_plastcond","text":"","title":"Set_PlastCond"},{"location":"api/src/Other/Set_PlastCond/#purpose","text":"separate truss and frame elements","title":"Purpose"},{"location":"api/src/Other/Set_PlastCond/#synopsis","text":"function Ain = Set_PlastCond (Model,ElemData)","title":"Synopsis"},{"location":"api/src/Other/Set_PlastCond/#description","text":"separate truss and frame elements","title":"Description"},{"location":"api/src/Other/Set_PlastCond/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Other/Simple_PanelZone_Test/","text":"Simple_PanelZone_Test Purpose % Synopsis This is a script file. Description % Cross-Reference Information This function calls: CleanStart CLEANSTART initializes workspace for new analysis This function is called by:","title":"Simple PanelZone Test"},{"location":"api/src/Other/Simple_PanelZone_Test/#simple_panelzone_test","text":"","title":"Simple_PanelZone_Test"},{"location":"api/src/Other/Simple_PanelZone_Test/#purpose","text":"%","title":"Purpose"},{"location":"api/src/Other/Simple_PanelZone_Test/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Other/Simple_PanelZone_Test/#description","text":"%","title":"Description"},{"location":"api/src/Other/Simple_PanelZone_Test/#cross-reference-information","text":"This function calls: CleanStart CLEANSTART initializes workspace for new analysis This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Other/shape2d/","text":"shape2d Purpose SHAPE2D shape functions for 4-9 node quadrilateral element Synopsis function [N,dNdx,J] = shape2d (nat,xyz,nodix) Description SHAPE2D shape functions for 4-9 node quadrilateral element [N, dNdx, J] = SHAPE2D (NAT,XYZ,NODIX) shape functions for 4-9 node quadrilateral element % Input Parameters ---------------- nat = [ xi eta ] natural coordinates of point of interest xyz = nodal coordinates for element (row i for node i) nodix = node index, e.g. [1:4 7 8] if nodes 1 through 4 (always), if 7 and 8 are present ---------------- Return Variables ---------------- N = shape function values for point of interest dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Reference: T.J.R. Hughes, The Finite Element Method, pp. 135 Cross-Reference Information This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Shape2d"},{"location":"api/src/Other/shape2d/#shape2d","text":"","title":"shape2d"},{"location":"api/src/Other/shape2d/#purpose","text":"SHAPE2D shape functions for 4-9 node quadrilateral element","title":"Purpose"},{"location":"api/src/Other/shape2d/#synopsis","text":"function [N,dNdx,J] = shape2d (nat,xyz,nodix)","title":"Synopsis"},{"location":"api/src/Other/shape2d/#description","text":"SHAPE2D shape functions for 4-9 node quadrilateral element [N, dNdx, J] = SHAPE2D (NAT,XYZ,NODIX) shape functions for 4-9 node quadrilateral element % Input Parameters ---------------- nat = [ xi eta ] natural coordinates of point of interest xyz = nodal coordinates for element (row i for node i) nodix = node index, e.g. [1:4 7 8] if nodes 1 through 4 (always), if 7 and 8 are present ---------------- Return Variables ---------------- N = shape function values for point of interest dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Reference: T.J.R. Hughes, The Finite Element Method, pp. 135","title":"Description"},{"location":"api/src/Other/shape2d/#cross-reference-information","text":"This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Cross-Reference Information"},{"location":"api/src/Solution_Scripts/","text":"Index for src\\Solution_Scripts S_InitialStep % S_INITIALSTEP : script for initial step of incremental analysis S_MultiStep % S_MULTISTEP : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization S_Transient_MultiStep % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization","title":"Index"},{"location":"api/src/Solution_Scripts/#index-for-srcsolution_scripts","text":"S_InitialStep % S_INITIALSTEP : script for initial step of incremental analysis S_MultiStep % S_MULTISTEP : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization S_Transient_MultiStep % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization","title":"Index for src\\Solution_Scripts"},{"location":"api/src/Solution_Scripts/S_InitialStep/","text":"S_InitialStep Purpose % S_INITIALSTEP : script for initial step of incremental analysis Synopsis This is a script file. Description % S_INITIALSTEP : script for initial step of incremental analysis ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S InitialStep"},{"location":"api/src/Solution_Scripts/S_InitialStep/#s_initialstep","text":"","title":"S_InitialStep"},{"location":"api/src/Solution_Scripts/S_InitialStep/#purpose","text":"% S_INITIALSTEP : script for initial step of incremental analysis","title":"Purpose"},{"location":"api/src/Solution_Scripts/S_InitialStep/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Solution_Scripts/S_InitialStep/#description","text":"% S_INITIALSTEP : script for initial step of incremental analysis ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"api/src/Solution_Scripts/S_InitialStep/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Solution_Scripts/S_MultiStep/","text":"S_MultiStep Purpose % S_MULTISTEP : script for multi-step incremental analysis including initialization Synopsis This is a script file. Description % S_MULTISTEP : script for multi-step incremental analysis including initialization ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S MultiStep"},{"location":"api/src/Solution_Scripts/S_MultiStep/#s_multistep","text":"","title":"S_MultiStep"},{"location":"api/src/Solution_Scripts/S_MultiStep/#purpose","text":"% S_MULTISTEP : script for multi-step incremental analysis including initialization","title":"Purpose"},{"location":"api/src/Solution_Scripts/S_MultiStep/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Solution_Scripts/S_MultiStep/#description","text":"% S_MULTISTEP : script for multi-step incremental analysis including initialization ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"api/src/Solution_Scripts/S_MultiStep/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHist/","text":"S_MultiStep_wLoadHist Purpose % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization Synopsis This is a script file. Description % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S MultiStep wLoadHist"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHist/#s_multistep_wloadhist","text":"","title":"S_MultiStep_wLoadHist"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHist/#purpose","text":"% S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization","title":"Purpose"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHist/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHist/#description","text":"% S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHist/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/","text":"S_MultiStep_wLoadHistwSD Purpose % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization Synopsis This is a script file. Description % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S MultiStep wLoadHistwSD"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/#s_multistep_wloadhistwsd","text":"","title":"S_MultiStep_wLoadHistwSD"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/#purpose","text":"% S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization","title":"Purpose"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/#description","text":"% S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"api/src/Solution_Scripts/S_MultiStep_wLoadHistwSD/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStep/","text":"S_Transient_MultiStep Purpose % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization Synopsis This is a script file. Description % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S Transient MultiStep"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStep/#s_transient_multistep","text":"","title":"S_Transient_MultiStep"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStep/#purpose","text":"% S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization","title":"Purpose"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStep/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStep/#description","text":"% S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStep/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStepwSD/","text":"S_Transient_MultiStepwSD Purpose % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization Synopsis This is a script file. Description % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S Transient MultiStepwSD"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStepwSD/#s_transient_multistepwsd","text":"","title":"S_Transient_MultiStepwSD"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStepwSD/#purpose","text":"% S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization","title":"Purpose"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStepwSD/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStepwSD/#description","text":"% S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"api/src/Solution_Scripts/S_Transient_MultiStepwSD/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Utilities/","text":"Index for src\\Utilities CleanStart CLEANSTART initializes workspace for new analysis SIUnits % Script file for common unit definition with SI units as default Units % Script file for common unit definition with Imperial units as default Other Matlab-specific files in this directory: Create_DispCyclewN.p Create_LoadHistory.p Create_MultDispCycleswN.p D_index.p H_index.p Print_PDFile.p Subsequent directories: Interpolation Plotting PostProcessing PreProcessing Quadrature","title":"Index"},{"location":"api/src/Utilities/#index-for-srcutilities","text":"CleanStart CLEANSTART initializes workspace for new analysis SIUnits % Script file for common unit definition with SI units as default Units % Script file for common unit definition with Imperial units as default","title":"Index for src\\Utilities"},{"location":"api/src/Utilities/#other-matlab-specific-files-in-this-directory","text":"Create_DispCyclewN.p Create_LoadHistory.p Create_MultDispCycleswN.p D_index.p H_index.p Print_PDFile.p","title":"Other Matlab-specific files in this directory:"},{"location":"api/src/Utilities/CleanStart/","text":"CleanStart Purpose CLEANSTART initializes workspace for new analysis Synopsis This is a script file. Description CLEANSTART initializes workspace for new analysis Cross-Reference Information This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows Simple_PanelZone_Test %","title":"CleanStart"},{"location":"api/src/Utilities/CleanStart/#cleanstart","text":"","title":"CleanStart"},{"location":"api/src/Utilities/CleanStart/#purpose","text":"CLEANSTART initializes workspace for new analysis","title":"Purpose"},{"location":"api/src/Utilities/CleanStart/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Utilities/CleanStart/#description","text":"CLEANSTART initializes workspace for new analysis","title":"Description"},{"location":"api/src/Utilities/CleanStart/#cross-reference-information","text":"This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows Simple_PanelZone_Test %","title":"Cross-Reference Information"},{"location":"api/src/Utilities/SIUnits/","text":"SIUnits Purpose % Script file for common unit definition with SI units as default Synopsis This is a script file. Description % Script file for common unit definition with SI units as default Cross-Reference Information This function calls: This function is called by:","title":"SIUnits"},{"location":"api/src/Utilities/SIUnits/#siunits","text":"","title":"SIUnits"},{"location":"api/src/Utilities/SIUnits/#purpose","text":"% Script file for common unit definition with SI units as default","title":"Purpose"},{"location":"api/src/Utilities/SIUnits/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Utilities/SIUnits/#description","text":"% Script file for common unit definition with SI units as default","title":"Description"},{"location":"api/src/Utilities/SIUnits/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"api/src/Utilities/Units/","text":"Units Purpose % Script file for common unit definition with Imperial units as default Synopsis This is a script file. Description % Script file for common unit definition with Imperial units as default Cross-Reference Information This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Units"},{"location":"api/src/Utilities/Units/#units","text":"","title":"Units"},{"location":"api/src/Utilities/Units/#purpose","text":"% Script file for common unit definition with Imperial units as default","title":"Purpose"},{"location":"api/src/Utilities/Units/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"api/src/Utilities/Units/#description","text":"% Script file for common unit definition with Imperial units as default","title":"Description"},{"location":"api/src/Utilities/Units/#cross-reference-information","text":"This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Cross-Reference Information"},{"location":"api/src/Utilities/PreProcessing/","text":"Index for src\\Utilities\\PreProcessing Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Other Matlab-specific files in this directory: AISC_Sections.mat AISC_Section.p Add_Bars2Section.p Add_Brace2Frame.p Add_GravityColumn2Frame.p Add_Shape2Section.p CircLayer2Bar.p Create_BoxOutline.p Create_BoxwOvhOutline.p Create_CSecOutline.p Create_CircBarGrid.p Create_FrameSections.p Create_IPMesh4Circ.p Create_IPMesh4MultRectShape.p Create_IPMesh4Rect.p Create_IPMesh4WFShape.p Create_ISecOutline.p Create_JntOffsets.p Create_LSecOutline.p Create_Load4Frame.p Create_MPMesh4Circ.p Create_MRFrame.p Create_Mass4Frame.p Create_MultRectShape.p Create_RectBarGrid.p Create_RectOutline.p Create_RectPatch.p Create_RectShape.p Create_RectwCovOutline.p Create_SSecOutline.p Create_ShapewMat.p Create_TSecOutline.p ElemData2Qpl.p ElemData4SteelBraces.p ElemData4SteelFrame.p FiberElemData4SteelBraces.p FiberElemData4SteelFrame.p MP1dInt4Circ.p MP2dInt4Circ.p Rectangle2Fiber.p","title":"Index"},{"location":"api/src/Utilities/PreProcessing/#index-for-srcutilitiespreprocessing","text":"Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame","title":"Index for src\\Utilities\\PreProcessing"},{"location":"api/src/Utilities/PreProcessing/#other-matlab-specific-files-in-this-directory","text":"AISC_Sections.mat AISC_Section.p Add_Bars2Section.p Add_Brace2Frame.p Add_GravityColumn2Frame.p Add_Shape2Section.p CircLayer2Bar.p Create_BoxOutline.p Create_BoxwOvhOutline.p Create_CSecOutline.p Create_CircBarGrid.p Create_FrameSections.p Create_IPMesh4Circ.p Create_IPMesh4MultRectShape.p Create_IPMesh4Rect.p Create_IPMesh4WFShape.p Create_ISecOutline.p Create_JntOffsets.p Create_LSecOutline.p Create_Load4Frame.p Create_MPMesh4Circ.p Create_MRFrame.p Create_Mass4Frame.p Create_MultRectShape.p Create_RectBarGrid.p Create_RectOutline.p Create_RectPatch.p Create_RectShape.p Create_RectwCovOutline.p Create_SSecOutline.p Create_ShapewMat.p Create_TSecOutline.p ElemData2Qpl.p ElemData4SteelBraces.p ElemData4SteelFrame.p FiberElemData4SteelBraces.p FiberElemData4SteelFrame.p MP1dInt4Circ.p MP2dInt4Circ.p Rectangle2Fiber.p","title":"Other Matlab-specific files in this directory:"},{"location":"api/src/Utilities/PreProcessing/Create_MRFrame/","text":"Create_MRFrame Purpose CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Synopsis function Frame = Create_MRFrame (Lbv,Hsv,nsub) Description CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame FRAME = CREATE_MRFRAME (LBV,HSV,NSUB) function generates the node coordinates XYZ and element connectivity CON for a regular N-story, M-bay frame with bay spans in row vector LBV and story heights in row vector HSV; the optional row vector NSUB specifies the number of subelements for each frame girder the function returns the generated information in data structure FRAME with fields XYZ (node coordinates), CON (element connectivity), CINDX (column index by story), GINDX (girder index by floor), NBY (no of bays), NST (no of stories), NC (no of columns), NG (no of girders) NN (no of nodes), NE (no of elements) Cross-Reference Information This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Create MRFrame"},{"location":"api/src/Utilities/PreProcessing/Create_MRFrame/#create_mrframe","text":"","title":"Create_MRFrame"},{"location":"api/src/Utilities/PreProcessing/Create_MRFrame/#purpose","text":"CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame","title":"Purpose"},{"location":"api/src/Utilities/PreProcessing/Create_MRFrame/#synopsis","text":"function Frame = Create_MRFrame (Lbv,Hsv,nsub)","title":"Synopsis"},{"location":"api/src/Utilities/PreProcessing/Create_MRFrame/#description","text":"CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame FRAME = CREATE_MRFRAME (LBV,HSV,NSUB) function generates the node coordinates XYZ and element connectivity CON for a regular N-story, M-bay frame with bay spans in row vector LBV and story heights in row vector HSV; the optional row vector NSUB specifies the number of subelements for each frame girder the function returns the generated information in data structure FRAME with fields XYZ (node coordinates), CON (element connectivity), CINDX (column index by story), GINDX (girder index by floor), NBY (no of bays), NST (no of stories), NC (no of columns), NG (no of girders) NN (no of nodes), NE (no of elements)","title":"Description"},{"location":"api/src/Utilities/PreProcessing/Create_MRFrame/#cross-reference-information","text":"This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Cross-Reference Information"},{"location":"api/src/Utilities/Quadrature/","text":"Index for src\\Utilities\\Quadrature Gauss2d GAUSS2D Gauss integration rule in two dimensions Gaussq returns the locations y_i and weights w_i for Gauss quadrature of order n Other Matlab-specific files in this directory: Gauss.p Lobatto.p Midpoint.p Simpson.p Trap.p","title":"Index"},{"location":"api/src/Utilities/Quadrature/#index-for-srcutilitiesquadrature","text":"Gauss2d GAUSS2D Gauss integration rule in two dimensions Gaussq returns the locations y_i and weights w_i for Gauss quadrature of order n","title":"Index for src\\Utilities\\Quadrature"},{"location":"api/src/Utilities/Quadrature/#other-matlab-specific-files-in-this-directory","text":"Gauss.p Lobatto.p Midpoint.p Simpson.p Trap.p","title":"Other Matlab-specific files in this directory:"},{"location":"api/src/Utilities/Quadrature/Gauss2d/","text":"Gauss2d Purpose GAUSS2D Gauss integration rule in two dimensions Synopsis function [xIP,wIP] = Gauss2d (nIP) Description GAUSS2D Gauss integration rule in two dimensions [XIP,WIP] = GAUSS2D (NIP) locations and weights of 2d Gauss-Legendre integration scheme the function determines the locations in the intervals -1<xi<1, -1<eta<1, and the weights of the Gauss-Legendre integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP Cross-Reference Information This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Gauss2d"},{"location":"api/src/Utilities/Quadrature/Gauss2d/#gauss2d","text":"","title":"Gauss2d"},{"location":"api/src/Utilities/Quadrature/Gauss2d/#purpose","text":"GAUSS2D Gauss integration rule in two dimensions","title":"Purpose"},{"location":"api/src/Utilities/Quadrature/Gauss2d/#synopsis","text":"function [xIP,wIP] = Gauss2d (nIP)","title":"Synopsis"},{"location":"api/src/Utilities/Quadrature/Gauss2d/#description","text":"GAUSS2D Gauss integration rule in two dimensions [XIP,WIP] = GAUSS2D (NIP) locations and weights of 2d Gauss-Legendre integration scheme the function determines the locations in the intervals -1<xi<1, -1<eta<1, and the weights of the Gauss-Legendre integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP","title":"Description"},{"location":"api/src/Utilities/Quadrature/Gauss2d/#cross-reference-information","text":"This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Cross-Reference Information"},{"location":"api/src/Utilities/Quadrature/Gaussq/","text":"Gaussq Purpose returns the locations y_i and weights w_i for Gauss quadrature of order n Synopsis function [yi,wi] = Gaussq (n) Description returns the locations y_i and weights w_i for Gauss quadrature of order n Requirements: n \\in N Cross-Reference Information This function calls: This function is called by:","title":"Gaussq"},{"location":"api/src/Utilities/Quadrature/Gaussq/#gaussq","text":"","title":"Gaussq"},{"location":"api/src/Utilities/Quadrature/Gaussq/#purpose","text":"returns the locations y_i and weights w_i for Gauss quadrature of order n","title":"Purpose"},{"location":"api/src/Utilities/Quadrature/Gaussq/#synopsis","text":"function [yi,wi] = Gaussq (n)","title":"Synopsis"},{"location":"api/src/Utilities/Quadrature/Gaussq/#description","text":"returns the locations y_i and weights w_i for Gauss quadrature of order n Requirements: n \\in N","title":"Description"},{"location":"api/src/Utilities/Quadrature/Gaussq/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"dat/","text":"README Top-level Schemas Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json Untitled schema \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.1/schemas/math.schema.json Other Schemas Objects ElemPost \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/ElemPost MatPost \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/MatPost MatPost \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/1/items/properties/Mat MatPost \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/0/properties/Mat SecPost \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/SecPost Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/Sec Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1 Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/0 Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/1/items Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/Sec/properties/Mat/items Arrays BOUN \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/BOUN ElemName \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/ElemName Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/ndf/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/XYZ/items/anyOf/2/items Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/CON/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/nen/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/XYZ/items/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/BOUN/items/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/DOF Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/DOF/items/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/XYZ/items/anyOf/2 Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/Sec/properties/Mat Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Uddot Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0 Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/v Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/q Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Udot Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/Sec/properties/e Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/Sec/properties/s Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/v Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/q Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/0/properties/e Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/0/properties/s Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/1 Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/1/items/properties/e Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/1/items/properties/s Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/ve Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/vp Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/lamda/anyOf/1 Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/U Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Pr Untitled array in undefined \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.1/schemas/math.schema.json#tensor#/properties/tensor/properties/shape XYZ \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/XYZ","title":"Schemas"},{"location":"dat/#readme","text":"","title":"README"},{"location":"dat/#top-level-schemas","text":"Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json Untitled schema \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.1/schemas/math.schema.json","title":"Top-level Schemas"},{"location":"dat/#other-schemas","text":"","title":"Other Schemas"},{"location":"dat/#objects","text":"ElemPost \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/ElemPost MatPost \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/MatPost MatPost \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/1/items/properties/Mat MatPost \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/0/properties/Mat SecPost \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/SecPost Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/Sec Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1 Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/0 Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/1/items Untitled object in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/Sec/properties/Mat/items","title":"Objects"},{"location":"dat/#arrays","text":"BOUN \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/BOUN ElemName \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/ElemName Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/ndf/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/XYZ/items/anyOf/2/items Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/CON/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/nen/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/XYZ/items/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/BOUN/items/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/DOF Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/DOF/items/anyOf/1 Untitled array in Model \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/XYZ/items/anyOf/2 Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/Sec/properties/Mat Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Uddot Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0 Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/v Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/q Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Udot Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/Sec/properties/e Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/0/items/properties/Sec/properties/s Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/v Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/q Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/0/properties/e Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/0/properties/s Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/1 Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/1/items/properties/e Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/Sec/anyOf/1/items/properties/s Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/ve Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Elem/anyOf/1/properties/vp Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/lamda/anyOf/1 Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/U Untitled array in Post \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/items/properties/Pr Untitled array in undefined \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.1/schemas/math.schema.json#tensor#/properties/tensor/properties/shape XYZ \u2013 https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/properties/XYZ","title":"Arrays"},{"location":"dat/math-properties-tensor-properties-shape/","text":"shape Type array","title":"Math properties tensor properties shape"},{"location":"dat/math-properties-tensor-properties-shape/#shape-type","text":"array","title":"shape Type"},{"location":"dat/math-properties-tensor-properties/","text":"properties Type unknown","title":"Math properties tensor properties"},{"location":"dat/math-properties-tensor-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/math-properties-tensor/","text":"tensor Type unknown ( tensor ) tensor Properties Property Type Required Nullable Defined by shape array Optional cannot be null Untitled schema shape shape is optional Type: array cannot be null defined in: Untitled schema shape Type array","title":"Math properties tensor"},{"location":"dat/math-properties-tensor/#tensor-type","text":"unknown ( tensor )","title":"tensor Type"},{"location":"dat/math-properties-tensor/#tensor-properties","text":"Property Type Required Nullable Defined by shape array Optional cannot be null Untitled schema","title":"tensor Properties"},{"location":"dat/math-properties-tensor/#shape","text":"shape is optional Type: array cannot be null defined in: Untitled schema","title":"shape"},{"location":"dat/math-properties-tensor/#shape-type","text":"array","title":"shape Type"},{"location":"dat/math-properties/","text":"properties Type unknown","title":"Math properties"},{"location":"dat/math-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/math/","text":"Untitled schema Type unknown undefined Properties Property Type Required Nullable Defined by tensor Not specified Optional cannot be null Untitled schema tensor tensor is optional Type: unknown ( tensor ) cannot be null defined in: Untitled schema tensor Type unknown ( tensor )","title":"Math"},{"location":"dat/math/#untitled-schema-type","text":"unknown","title":"Untitled schema Type"},{"location":"dat/math/#undefined-properties","text":"Property Type Required Nullable Defined by tensor Not specified Optional cannot be null Untitled schema","title":"undefined Properties"},{"location":"dat/math/#tensor","text":"tensor is optional Type: unknown ( tensor ) cannot be null defined in: Untitled schema","title":"tensor"},{"location":"dat/math/#tensor-type","text":"unknown ( tensor )","title":"tensor Type"},{"location":"dat/model-properties-boun-items-anyof-0/","text":"0 Type integer","title":"Model properties boun items anyof 0"},{"location":"dat/model-properties-boun-items-anyof-0/#0-type","text":"integer","title":"0 Type"},{"location":"dat/model-properties-boun-items-anyof-1-items/","text":"items Type integer","title":"Model properties boun items anyof 1 items"},{"location":"dat/model-properties-boun-items-anyof-1-items/#items-type","text":"integer","title":"items Type"},{"location":"dat/model-properties-boun-items-anyof-1/","text":"1 Type integer[]","title":"Model properties boun items anyof 1"},{"location":"dat/model-properties-boun-items-anyof-1/#1-type","text":"integer[]","title":"1 Type"},{"location":"dat/model-properties-boun-items/","text":"items Type merged type ( Details ) any of Untitled integer in Model Untitled array in Model","title":"Model properties boun items"},{"location":"dat/model-properties-boun-items/#items-type","text":"merged type ( Details ) any of Untitled integer in Model Untitled array in Model","title":"items Type"},{"location":"dat/model-properties-boun/","text":"BOUN Type an array of merged types ( Details )","title":"Model properties boun"},{"location":"dat/model-properties-boun/#boun-type","text":"an array of merged types ( Details )","title":"BOUN Type"},{"location":"dat/model-properties-con-anyof-0/","text":"0 Type integer","title":"Model properties con anyof 0"},{"location":"dat/model-properties-con-anyof-0/#0-type","text":"integer","title":"0 Type"},{"location":"dat/model-properties-con-anyof-1-items/","text":"items Type integer","title":"Model properties con anyof 1 items"},{"location":"dat/model-properties-con-anyof-1-items/#items-type","text":"integer","title":"items Type"},{"location":"dat/model-properties-con-anyof-1/","text":"1 Type integer[]","title":"Model properties con anyof 1"},{"location":"dat/model-properties-con-anyof-1/#1-type","text":"integer[]","title":"1 Type"},{"location":"dat/model-properties-con/","text":"CON Type merged type ( CON ) any of Untitled integer in Model Untitled array in Model","title":"Model properties con"},{"location":"dat/model-properties-con/#con-type","text":"merged type ( CON ) any of Untitled integer in Model Untitled array in Model","title":"CON Type"},{"location":"dat/model-properties-dof-items-anyof-0/","text":"0 Type integer","title":"Model properties dof items anyof 0"},{"location":"dat/model-properties-dof-items-anyof-0/#0-type","text":"integer","title":"0 Type"},{"location":"dat/model-properties-dof-items-anyof-1-items/","text":"items Type integer","title":"Model properties dof items anyof 1 items"},{"location":"dat/model-properties-dof-items-anyof-1-items/#items-type","text":"integer","title":"items Type"},{"location":"dat/model-properties-dof-items-anyof-1/","text":"1 Type integer[]","title":"Model properties dof items anyof 1"},{"location":"dat/model-properties-dof-items-anyof-1/#1-type","text":"integer[]","title":"1 Type"},{"location":"dat/model-properties-dof-items/","text":"items Type merged type ( Details ) any of Untitled integer in Model Untitled array in Model","title":"Model properties dof items"},{"location":"dat/model-properties-dof-items/#items-type","text":"merged type ( Details ) any of Untitled integer in Model Untitled array in Model","title":"items Type"},{"location":"dat/model-properties-dof/","text":"DOF Type an array of merged types ( Details )","title":"Model properties dof"},{"location":"dat/model-properties-dof/#dof-type","text":"an array of merged types ( Details )","title":"DOF Type"},{"location":"dat/model-properties-elemname-items/","text":"items Type string","title":"Model properties elemname items"},{"location":"dat/model-properties-elemname-items/#items-type","text":"string","title":"items Type"},{"location":"dat/model-properties-elemname/","text":"ElemName Type string[]","title":"Model properties elemname"},{"location":"dat/model-properties-elemname/#elemname-type","text":"string[]","title":"ElemName Type"},{"location":"dat/model-properties-ndf-anyof-0/","text":"0 Type integer","title":"Model properties ndf anyof 0"},{"location":"dat/model-properties-ndf-anyof-0/#0-type","text":"integer","title":"0 Type"},{"location":"dat/model-properties-ndf-anyof-1-items/","text":"items Type integer","title":"Model properties ndf anyof 1 items"},{"location":"dat/model-properties-ndf-anyof-1-items/#items-type","text":"integer","title":"items Type"},{"location":"dat/model-properties-ndf-anyof-1/","text":"1 Type integer[]","title":"Model properties ndf anyof 1"},{"location":"dat/model-properties-ndf-anyof-1/#1-type","text":"integer[]","title":"1 Type"},{"location":"dat/model-properties-ndf/","text":"ndf Type merged type ( Details ) any of Untitled integer in Model Untitled array in Model","title":"Model properties ndf"},{"location":"dat/model-properties-ndf/#ndf-type","text":"merged type ( Details ) any of Untitled integer in Model Untitled array in Model","title":"ndf Type"},{"location":"dat/model-properties-ndm/","text":"ndm Type integer ( ndm )","title":"Model properties ndm"},{"location":"dat/model-properties-ndm/#ndm-type","text":"integer ( ndm )","title":"ndm Type"},{"location":"dat/model-properties-ne/","text":"ne Type integer","title":"Model properties ne"},{"location":"dat/model-properties-ne/#ne-type","text":"integer","title":"ne Type"},{"location":"dat/model-properties-nen-anyof-0/","text":"0 Type integer","title":"Model properties nen anyof 0"},{"location":"dat/model-properties-nen-anyof-0/#0-type","text":"integer","title":"0 Type"},{"location":"dat/model-properties-nen-anyof-1-items/","text":"items Type integer","title":"Model properties nen anyof 1 items"},{"location":"dat/model-properties-nen-anyof-1-items/#items-type","text":"integer","title":"items Type"},{"location":"dat/model-properties-nen-anyof-1/","text":"1 Type integer[]","title":"Model properties nen anyof 1"},{"location":"dat/model-properties-nen-anyof-1/#1-type","text":"integer[]","title":"1 Type"},{"location":"dat/model-properties-nen/","text":"nen Type merged type ( Details ) any of Untitled integer in Model Untitled array in Model","title":"Model properties nen"},{"location":"dat/model-properties-nen/#nen-type","text":"merged type ( Details ) any of Untitled integer in Model Untitled array in Model","title":"nen Type"},{"location":"dat/model-properties-nf/","text":"nf Type integer ( nf )","title":"Model properties nf"},{"location":"dat/model-properties-nf/#nf-type","text":"integer ( nf )","title":"nf Type"},{"location":"dat/model-properties-nn/","text":"nn Type integer ( nn )","title":"Model properties nn"},{"location":"dat/model-properties-nn/#nn-type","text":"integer ( nn )","title":"nn Type"},{"location":"dat/model-properties-nq/","text":"nq Type integer","title":"Model properties nq"},{"location":"dat/model-properties-nq/#nq-type","text":"integer","title":"nq Type"},{"location":"dat/model-properties-nt/","text":"nt Type integer ( nt )","title":"Model properties nt"},{"location":"dat/model-properties-nt/#nt-type","text":"integer ( nt )","title":"nt Type"},{"location":"dat/model-properties-ntrm/","text":"ntrm Type integer","title":"Model properties ntrm"},{"location":"dat/model-properties-ntrm/#ntrm-type","text":"integer","title":"ntrm Type"},{"location":"dat/model-properties-xyz-items-anyof-0/","text":"0 Type number","title":"Model properties xyz items anyof 0"},{"location":"dat/model-properties-xyz-items-anyof-0/#0-type","text":"number","title":"0 Type"},{"location":"dat/model-properties-xyz-items-anyof-1-items/","text":"items Type number","title":"Model properties xyz items anyof 1 items"},{"location":"dat/model-properties-xyz-items-anyof-1-items/#items-type","text":"number","title":"items Type"},{"location":"dat/model-properties-xyz-items-anyof-1/","text":"1 Type number[]","title":"Model properties xyz items anyof 1"},{"location":"dat/model-properties-xyz-items-anyof-1/#1-type","text":"number[]","title":"1 Type"},{"location":"dat/model-properties-xyz-items-anyof-2-items-items/","text":"items Type number","title":"Model properties xyz items anyof 2 items items"},{"location":"dat/model-properties-xyz-items-anyof-2-items-items/#items-type","text":"number","title":"items Type"},{"location":"dat/model-properties-xyz-items-anyof-2-items/","text":"items Type number[]","title":"Model properties xyz items anyof 2 items"},{"location":"dat/model-properties-xyz-items-anyof-2-items/#items-type","text":"number[]","title":"items Type"},{"location":"dat/model-properties-xyz-items-anyof-2/","text":"2 Type number[][]","title":"Model properties xyz items anyof 2"},{"location":"dat/model-properties-xyz-items-anyof-2/#2-type","text":"number[][]","title":"2 Type"},{"location":"dat/model-properties-xyz-items/","text":"items Type merged type ( Details ) any of Untitled number in Model Untitled array in Model Untitled array in Model","title":"Model properties xyz items"},{"location":"dat/model-properties-xyz-items/#items-type","text":"merged type ( Details ) any of Untitled number in Model Untitled array in Model Untitled array in Model","title":"items Type"},{"location":"dat/model-properties-xyz/","text":"XYZ Type an array of merged types ( Details )","title":"Model properties xyz"},{"location":"dat/model-properties-xyz/#xyz-type","text":"an array of merged types ( Details )","title":"XYZ Type"},{"location":"dat/model-properties/","text":"properties Type unknown","title":"Model properties"},{"location":"dat/model-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/model/","text":"Model Type object ( Model ) Model Properties Property Type Required Nullable Defined by nn integer Required cannot be null Model ndm integer Required cannot be null Model XYZ array Required cannot be null Model ne integer Required cannot be null Model CON Merged Required cannot be null Model nen Merged Required cannot be null Model ndf Merged Required cannot be null Model ElemName array Required cannot be null Model DOF array Required cannot be null Model nt integer Required cannot be null Model BOUN array Required cannot be null Model nf integer Required cannot be null Model ntrm integer Required cannot be null Model nq integer Optional cannot be null Model nn number of nodes in structural model nn is required Type: integer ( nn ) cannot be null defined in: Model description: number of nodes in structural model nn Type integer ( nn ) ndm dimension of structural model ndm is required Type: integer ( ndm ) cannot be null defined in: Model description: dimension of structural model ndm Type integer ( ndm ) XYZ array holding spacial coordinates of model nodes. XYZ is required Type: an array of merged types ( Details ) cannot be null defined in: Model description: array holding spacial coordinates of model nodes. XYZ Type an array of merged types ( Details ) ne number of elements in model. ne is required Type: integer cannot be null defined in: Model description: number of elements in model. ne Type integer CON CON is required Type: merged type ( CON ) cannot be null defined in: Model CON Type merged type ( CON ) any of Untitled integer in Model Untitled array in Model nen nen is required Type: merged type ( Details ) cannot be null defined in: Model nen Type merged type ( Details ) any of Untitled integer in Model Untitled array in Model ndf ndf is required Type: merged type ( Details ) cannot be null defined in: Model ndf Type merged type ( Details ) any of Untitled integer in Model Untitled array in Model ElemName ElemName is required Type: string[] cannot be null defined in: Model ElemName Type string[] DOF array with degree of freedom numbering DOF is required Type: an array of merged types ( Details ) cannot be null defined in: Model description: array with degree of freedom numbering DOF Type an array of merged types ( Details ) nt nt is required Type: integer ( nt ) cannot be null defined in: Model nt Type integer ( nt ) BOUN BOUN is required Type: an array of merged types ( Details ) cannot be null defined in: Model BOUN Type an array of merged types ( Details ) nf number of free degrees of freedom nf is required Type: integer ( nf ) cannot be null defined in: Model description: number of free degrees of freedom nf Type integer ( nf ) ntrm ntrm is required Type: integer cannot be null defined in: Model ntrm Type integer nq nq is optional Type: integer cannot be null defined in: Model nq Type integer","title":"Model"},{"location":"dat/model/#model-type","text":"object ( Model )","title":"Model Type"},{"location":"dat/model/#model-properties","text":"Property Type Required Nullable Defined by nn integer Required cannot be null Model ndm integer Required cannot be null Model XYZ array Required cannot be null Model ne integer Required cannot be null Model CON Merged Required cannot be null Model nen Merged Required cannot be null Model ndf Merged Required cannot be null Model ElemName array Required cannot be null Model DOF array Required cannot be null Model nt integer Required cannot be null Model BOUN array Required cannot be null Model nf integer Required cannot be null Model ntrm integer Required cannot be null Model nq integer Optional cannot be null Model","title":"Model Properties"},{"location":"dat/model/#nn","text":"number of nodes in structural model nn is required Type: integer ( nn ) cannot be null defined in: Model description: number of nodes in structural model","title":"nn"},{"location":"dat/model/#nn-type","text":"integer ( nn )","title":"nn Type"},{"location":"dat/model/#ndm","text":"dimension of structural model ndm is required Type: integer ( ndm ) cannot be null defined in: Model description: dimension of structural model","title":"ndm"},{"location":"dat/model/#ndm-type","text":"integer ( ndm )","title":"ndm Type"},{"location":"dat/model/#xyz","text":"array holding spacial coordinates of model nodes. XYZ is required Type: an array of merged types ( Details ) cannot be null defined in: Model description: array holding spacial coordinates of model nodes.","title":"XYZ"},{"location":"dat/model/#xyz-type","text":"an array of merged types ( Details )","title":"XYZ Type"},{"location":"dat/model/#ne","text":"number of elements in model. ne is required Type: integer cannot be null defined in: Model description: number of elements in model.","title":"ne"},{"location":"dat/model/#ne-type","text":"integer","title":"ne Type"},{"location":"dat/model/#con","text":"CON is required Type: merged type ( CON ) cannot be null defined in: Model","title":"CON"},{"location":"dat/model/#con-type","text":"merged type ( CON ) any of Untitled integer in Model Untitled array in Model","title":"CON Type"},{"location":"dat/model/#nen","text":"nen is required Type: merged type ( Details ) cannot be null defined in: Model","title":"nen"},{"location":"dat/model/#nen-type","text":"merged type ( Details ) any of Untitled integer in Model Untitled array in Model","title":"nen Type"},{"location":"dat/model/#ndf","text":"ndf is required Type: merged type ( Details ) cannot be null defined in: Model","title":"ndf"},{"location":"dat/model/#ndf-type","text":"merged type ( Details ) any of Untitled integer in Model Untitled array in Model","title":"ndf Type"},{"location":"dat/model/#elemname","text":"ElemName is required Type: string[] cannot be null defined in: Model","title":"ElemName"},{"location":"dat/model/#elemname-type","text":"string[]","title":"ElemName Type"},{"location":"dat/model/#dof","text":"array with degree of freedom numbering DOF is required Type: an array of merged types ( Details ) cannot be null defined in: Model description: array with degree of freedom numbering","title":"DOF"},{"location":"dat/model/#dof-type","text":"an array of merged types ( Details )","title":"DOF Type"},{"location":"dat/model/#nt","text":"nt is required Type: integer ( nt ) cannot be null defined in: Model","title":"nt"},{"location":"dat/model/#nt-type","text":"integer ( nt )","title":"nt Type"},{"location":"dat/model/#boun","text":"BOUN is required Type: an array of merged types ( Details ) cannot be null defined in: Model","title":"BOUN"},{"location":"dat/model/#boun-type","text":"an array of merged types ( Details )","title":"BOUN Type"},{"location":"dat/model/#nf","text":"number of free degrees of freedom nf is required Type: integer ( nf ) cannot be null defined in: Model description: number of free degrees of freedom","title":"nf"},{"location":"dat/model/#nf-type","text":"integer ( nf )","title":"nf Type"},{"location":"dat/model/#ntrm","text":"ntrm is required Type: integer cannot be null defined in: Model","title":"ntrm"},{"location":"dat/model/#ntrm-type","text":"integer","title":"ntrm Type"},{"location":"dat/model/#nq","text":"nq is optional Type: integer cannot be null defined in: Model","title":"nq"},{"location":"dat/model/#nq-type","text":"integer","title":"nq Type"},{"location":"dat/post-definitions-elempost/","text":"ElemPost Type object ( ElemPost )","title":"Post definitions elempost"},{"location":"dat/post-definitions-elempost/#elempost-type","text":"object ( ElemPost )","title":"ElemPost Type"},{"location":"dat/post-definitions-matpost/","text":"Mat Type object ( MatPost )","title":"Post definitions matpost"},{"location":"dat/post-definitions-matpost/#mat-type","text":"object ( MatPost )","title":"Mat Type"},{"location":"dat/post-definitions-secpost/","text":"SecPost Type object ( SecPost )","title":"Post definitions secpost"},{"location":"dat/post-definitions-secpost/#secpost-type","text":"object ( SecPost )","title":"SecPost Type"},{"location":"dat/post-definitions/","text":"definitions Type unknown","title":"Post definitions"},{"location":"dat/post-definitions/#definitions-type","text":"unknown","title":"definitions Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-q-items/","text":"items Type number","title":"Post items properties elem anyof 0 items properties q items"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-q-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-q/","text":"q Type number[]","title":"Post items properties elem anyof 0 items properties q"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-q/#q-type","text":"number[]","title":"q Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-e-items/","text":"items Type number","title":"Post items properties elem anyof 0 items properties sec properties e items"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-e-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-e/","text":"e Type number[]","title":"Post items properties elem anyof 0 items properties sec properties e"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-e/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items-properties-eps/","text":"eps Type number","title":"Post items properties elem anyof 0 items properties sec properties mat items properties eps"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items-properties-eps/#eps-type","text":"number","title":"eps Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items-properties-eps_p/","text":"eps_p Type number","title":"Post items properties elem anyof 0 items properties sec properties mat items properties eps p"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items-properties-eps_p/#eps_p-type","text":"number","title":"eps_p Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items-properties-sig/","text":"sig Type number","title":"Post items properties elem anyof 0 items properties sec properties mat items properties sig"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items-properties-sig/#sig-type","text":"number","title":"sig Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items-properties/","text":"properties Type unknown","title":"Post items properties elem anyof 0 items properties sec properties mat items properties"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items/","text":"items Type object ( Details ) undefined Properties Property Type Required Nullable Defined by eps number Required cannot be null Post sig number Required cannot be null Post eps_p number Required cannot be null Post eps eps is required Type: number cannot be null defined in: Post eps Type number sig sig is required Type: number cannot be null defined in: Post sig Type number eps_p eps_p is required Type: number cannot be null defined in: Post eps_p Type number","title":"Post items properties elem anyof 0 items properties sec properties mat items"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items/#items-type","text":"object ( Details )","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items/#undefined-properties","text":"Property Type Required Nullable Defined by eps number Required cannot be null Post sig number Required cannot be null Post eps_p number Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items/#eps","text":"eps is required Type: number cannot be null defined in: Post","title":"eps"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items/#eps-type","text":"number","title":"eps Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items/#sig","text":"sig is required Type: number cannot be null defined in: Post","title":"sig"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items/#sig-type","text":"number","title":"sig Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items/#eps_p","text":"eps_p is required Type: number cannot be null defined in: Post","title":"eps_p"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat-items/#eps_p-type","text":"number","title":"eps_p Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat/","text":"Mat Type object[] ( Details )","title":"Post items properties elem anyof 0 items properties sec properties mat"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-mat/#mat-type","text":"object[] ( Details )","title":"Mat Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-s-items/","text":"items Type number","title":"Post items properties elem anyof 0 items properties sec properties s items"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-s-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-s/","text":"s Type number[]","title":"Post items properties elem anyof 0 items properties sec properties s"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties-s/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties/","text":"properties Type unknown","title":"Post items properties elem anyof 0 items properties sec properties"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec/","text":"Sec Type object ( Details ) undefined Properties Property Type Required Nullable Defined by Mat array Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post Mat Mat is required Type: object[] ( Details ) cannot be null defined in: Post Mat Type object[] ( Details ) e e is required Type: number[] cannot be null defined in: Post e Type number[] s s is required Type: number[] cannot be null defined in: Post s Type number[]","title":"Post items properties elem anyof 0 items properties sec"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec/#sec-type","text":"object ( Details )","title":"Sec Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec/#undefined-properties","text":"Property Type Required Nullable Defined by Mat array Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec/#mat","text":"Mat is required Type: object[] ( Details ) cannot be null defined in: Post","title":"Mat"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec/#mat-type","text":"object[] ( Details )","title":"Mat Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec/#e","text":"e is required Type: number[] cannot be null defined in: Post","title":"e"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec/#s","text":"s is required Type: number[] cannot be null defined in: Post","title":"s"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-sec/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-v-items/","text":"items Type number","title":"Post items properties elem anyof 0 items properties v items"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-v-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-v/","text":"v Type number[]","title":"Post items properties elem anyof 0 items properties v"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties-v/#v-type","text":"number[]","title":"v Type"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties/","text":"properties Type unknown","title":"Post items properties elem anyof 0 items properties"},{"location":"dat/post-items-properties-elem-anyof-0-items-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elem-anyof-0-items/","text":"items Type object ( Details ) undefined Properties Property Type Required Nullable Defined by v array Required cannot be null Post q array Required cannot be null Post Sec object Required cannot be null Post v v is required Type: number[] cannot be null defined in: Post v Type number[] q q is required Type: number[] cannot be null defined in: Post q Type number[] Sec Sec is required Type: object ( Details ) cannot be null defined in: Post Sec Type object ( Details )","title":"Post items properties elem anyof 0 items"},{"location":"dat/post-items-properties-elem-anyof-0-items/#items-type","text":"object ( Details )","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-0-items/#undefined-properties","text":"Property Type Required Nullable Defined by v array Required cannot be null Post q array Required cannot be null Post Sec object Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elem-anyof-0-items/#v","text":"v is required Type: number[] cannot be null defined in: Post","title":"v"},{"location":"dat/post-items-properties-elem-anyof-0-items/#v-type","text":"number[]","title":"v Type"},{"location":"dat/post-items-properties-elem-anyof-0-items/#q","text":"q is required Type: number[] cannot be null defined in: Post","title":"q"},{"location":"dat/post-items-properties-elem-anyof-0-items/#q-type","text":"number[]","title":"q Type"},{"location":"dat/post-items-properties-elem-anyof-0-items/#sec","text":"Sec is required Type: object ( Details ) cannot be null defined in: Post","title":"Sec"},{"location":"dat/post-items-properties-elem-anyof-0-items/#sec-type","text":"object ( Details )","title":"Sec Type"},{"location":"dat/post-items-properties-elem-anyof-0/","text":"0 Type object[] ( Details )","title":"Post items properties elem anyof 0"},{"location":"dat/post-items-properties-elem-anyof-0/#0-type","text":"object[] ( Details )","title":"0 Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-q-items/","text":"items Type number","title":"Post items properties elem anyof 1 properties q items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-q-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-q/","text":"q Type number[]","title":"Post items properties elem anyof 1 properties q"},{"location":"dat/post-items-properties-elem-anyof-1-properties-q/#q-type","text":"number[]","title":"q Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-e-items/","text":"items Type number","title":"Post items properties elem anyof 1 properties sec anyof 0 properties e items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-e-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-e/","text":"e Type number[]","title":"Post items properties elem anyof 1 properties sec anyof 0 properties e"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-e/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items-properties-eps/","text":"eps Type number","title":"Post items properties elem anyof 1 properties sec anyof 0 properties mat items properties eps"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items-properties-eps/#eps-type","text":"number","title":"eps Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items-properties-eps_p/","text":"eps_p Type number","title":"Post items properties elem anyof 1 properties sec anyof 0 properties mat items properties eps p"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items-properties-eps_p/#eps_p-type","text":"number","title":"eps_p Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items-properties-sig/","text":"sig Type number","title":"Post items properties elem anyof 1 properties sec anyof 0 properties mat items properties sig"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items-properties-sig/#sig-type","text":"number","title":"sig Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items-properties/","text":"properties Type unknown","title":"Post items properties elem anyof 1 properties sec anyof 0 properties mat items properties"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items/","text":"items Type object ( Details ) undefined Properties Property Type Required Nullable Defined by eps number Required cannot be null Post sig number Required cannot be null Post eps_p number Required cannot be null Post eps eps is required Type: number cannot be null defined in: Post eps Type number sig sig is required Type: number cannot be null defined in: Post sig Type number eps_p eps_p is required Type: number cannot be null defined in: Post eps_p Type number","title":"Post items properties elem anyof 1 properties sec anyof 0 properties mat items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items/#items-type","text":"object ( Details )","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items/#undefined-properties","text":"Property Type Required Nullable Defined by eps number Required cannot be null Post sig number Required cannot be null Post eps_p number Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items/#eps","text":"eps is required Type: number cannot be null defined in: Post","title":"eps"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items/#eps-type","text":"number","title":"eps Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items/#sig","text":"sig is required Type: number cannot be null defined in: Post","title":"sig"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items/#sig-type","text":"number","title":"sig Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items/#eps_p","text":"eps_p is required Type: number cannot be null defined in: Post","title":"eps_p"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat-items/#eps_p-type","text":"number","title":"eps_p Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat/","text":"Mat Type object[] ( Details )","title":"Post items properties elem anyof 1 properties sec anyof 0 properties mat"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-mat/#mat-type","text":"object[] ( Details )","title":"Mat Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-s-items/","text":"items Type number","title":"Post items properties elem anyof 1 properties sec anyof 0 properties s items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-s-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-s/","text":"s Type number[]","title":"Post items properties elem anyof 1 properties sec anyof 0 properties s"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties-s/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties/","text":"properties Type unknown","title":"Post items properties elem anyof 1 properties sec anyof 0 properties"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0/","text":"0 Type object ( Details ) undefined Properties Property Type Required Nullable Defined by Mat array Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post Mat Mat is required Type: object[] ( Details ) cannot be null defined in: Post Mat Type object[] ( Details ) e e is required Type: number[] cannot be null defined in: Post e Type number[] s s is required Type: number[] cannot be null defined in: Post s Type number[]","title":"Post items properties elem anyof 1 properties sec anyof 0"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0/#0-type","text":"object ( Details )","title":"0 Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0/#undefined-properties","text":"Property Type Required Nullable Defined by Mat array Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0/#mat","text":"Mat is required Type: object[] ( Details ) cannot be null defined in: Post","title":"Mat"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0/#mat-type","text":"object[] ( Details )","title":"Mat Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0/#e","text":"e is required Type: number[] cannot be null defined in: Post","title":"e"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0/#s","text":"s is required Type: number[] cannot be null defined in: Post","title":"s"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-0/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-e-items/","text":"items Type number","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties e items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-e-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-e/","text":"e Type number[]","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties e"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-e/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties-alpha/","text":"alpha Type number","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties mat items properties alpha"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties-alpha/#alpha-type","text":"number","title":"alpha Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties-eps/","text":"eps Type number","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties mat items properties eps"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties-eps/#eps-type","text":"number","title":"eps Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties-eps_p/","text":"eps_p Type number","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties mat items properties eps p"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties-eps_p/#eps_p-type","text":"number","title":"eps_p Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties-sig/","text":"sig Type number","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties mat items properties sig"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties-sig/#sig-type","text":"number","title":"sig Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties-sig_b/","text":"sig_b Type number","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties mat items properties sig b"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties-sig_b/#sig_b-type","text":"number","title":"sig_b Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties/","text":"properties Type unknown","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties mat items properties"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/","text":"items Type object ( Details ) undefined Properties Property Type Required Nullable Defined by eps number Required cannot be null Post sig number Required cannot be null Post eps_p number Required cannot be null Post sig_b number Required cannot be null Post alpha number Required cannot be null Post eps eps is required Type: number cannot be null defined in: Post eps Type number sig sig is required Type: number cannot be null defined in: Post sig Type number eps_p eps_p is required Type: number cannot be null defined in: Post eps_p Type number sig_b sig_b is required Type: number cannot be null defined in: Post sig_b Type number alpha alpha is required Type: number cannot be null defined in: Post alpha Type number","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties mat items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#items-type","text":"object ( Details )","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#undefined-properties","text":"Property Type Required Nullable Defined by eps number Required cannot be null Post sig number Required cannot be null Post eps_p number Required cannot be null Post sig_b number Required cannot be null Post alpha number Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#eps","text":"eps is required Type: number cannot be null defined in: Post","title":"eps"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#eps-type","text":"number","title":"eps Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#sig","text":"sig is required Type: number cannot be null defined in: Post","title":"sig"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#sig-type","text":"number","title":"sig Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#eps_p","text":"eps_p is required Type: number cannot be null defined in: Post","title":"eps_p"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#eps_p-type","text":"number","title":"eps_p Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#sig_b","text":"sig_b is required Type: number cannot be null defined in: Post","title":"sig_b"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#sig_b-type","text":"number","title":"sig_b Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#alpha","text":"alpha is required Type: number cannot be null defined in: Post","title":"alpha"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat-items/#alpha-type","text":"number","title":"alpha Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat/","text":"Mat Type object[] ( Details )","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties mat"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-mat/#mat-type","text":"object[] ( Details )","title":"Mat Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-s-items/","text":"items Type number","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties s items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-s-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-s/","text":"s Type number[]","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties s"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties-s/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties/","text":"properties Type unknown","title":"Post items properties elem anyof 1 properties sec anyof 1 items properties"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items/","text":"items Type object ( Details ) undefined Properties Property Type Required Nullable Defined by Mat array Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post Mat Mat is required Type: object[] ( Details ) cannot be null defined in: Post Mat Type object[] ( Details ) e e is required Type: number[] cannot be null defined in: Post e Type number[] s s is required Type: number[] cannot be null defined in: Post s Type number[]","title":"Post items properties elem anyof 1 properties sec anyof 1 items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items/#items-type","text":"object ( Details )","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items/#undefined-properties","text":"Property Type Required Nullable Defined by Mat array Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items/#mat","text":"Mat is required Type: object[] ( Details ) cannot be null defined in: Post","title":"Mat"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items/#mat-type","text":"object[] ( Details )","title":"Mat Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items/#e","text":"e is required Type: number[] cannot be null defined in: Post","title":"e"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items/#s","text":"s is required Type: number[] cannot be null defined in: Post","title":"s"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1-items/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1/","text":"1 Type object[] ( Details )","title":"Post items properties elem anyof 1 properties sec anyof 1"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec-anyof-1/#1-type","text":"object[] ( Details )","title":"1 Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec/","text":"Sec Type merged type ( Details ) any of Untitled object in Post Untitled array in Post","title":"Post items properties elem anyof 1 properties sec"},{"location":"dat/post-items-properties-elem-anyof-1-properties-sec/#sec-type","text":"merged type ( Details ) any of Untitled object in Post Untitled array in Post","title":"Sec Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-v-items/","text":"items Type number","title":"Post items properties elem anyof 1 properties v items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-v-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-v/","text":"v Type number[]","title":"Post items properties elem anyof 1 properties v"},{"location":"dat/post-items-properties-elem-anyof-1-properties-v/#v-type","text":"number[]","title":"v Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-ve-items/","text":"items Type number","title":"Post items properties elem anyof 1 properties ve items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-ve-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-ve/","text":"ve Type number[]","title":"Post items properties elem anyof 1 properties ve"},{"location":"dat/post-items-properties-elem-anyof-1-properties-ve/#ve-type","text":"number[]","title":"ve Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-vp-items/","text":"items Type number","title":"Post items properties elem anyof 1 properties vp items"},{"location":"dat/post-items-properties-elem-anyof-1-properties-vp-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties-vp/","text":"vp Type number[]","title":"Post items properties elem anyof 1 properties vp"},{"location":"dat/post-items-properties-elem-anyof-1-properties-vp/#vp-type","text":"number[]","title":"vp Type"},{"location":"dat/post-items-properties-elem-anyof-1-properties/","text":"properties Type unknown","title":"Post items properties elem anyof 1 properties"},{"location":"dat/post-items-properties-elem-anyof-1-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elem-anyof-1/","text":"1 Type object ( Details ) undefined Properties Property Type Required Nullable Defined by v array Required cannot be null Post q array Required cannot be null Post Sec Merged Optional cannot be null Post ve array Optional cannot be null Post vp array Optional cannot be null Post v v is required Type: number[] cannot be null defined in: Post v Type number[] q q is required Type: number[] cannot be null defined in: Post q Type number[] Sec Sec is optional Type: merged type ( Details ) cannot be null defined in: Post Sec Type merged type ( Details ) any of Untitled object in Post Untitled array in Post ve ve is optional Type: number[] cannot be null defined in: Post ve Type number[] vp vp is optional Type: number[] cannot be null defined in: Post vp Type number[]","title":"Post items properties elem anyof 1"},{"location":"dat/post-items-properties-elem-anyof-1/#1-type","text":"object ( Details )","title":"1 Type"},{"location":"dat/post-items-properties-elem-anyof-1/#undefined-properties","text":"Property Type Required Nullable Defined by v array Required cannot be null Post q array Required cannot be null Post Sec Merged Optional cannot be null Post ve array Optional cannot be null Post vp array Optional cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elem-anyof-1/#v","text":"v is required Type: number[] cannot be null defined in: Post","title":"v"},{"location":"dat/post-items-properties-elem-anyof-1/#v-type","text":"number[]","title":"v Type"},{"location":"dat/post-items-properties-elem-anyof-1/#q","text":"q is required Type: number[] cannot be null defined in: Post","title":"q"},{"location":"dat/post-items-properties-elem-anyof-1/#q-type","text":"number[]","title":"q Type"},{"location":"dat/post-items-properties-elem-anyof-1/#sec","text":"Sec is optional Type: merged type ( Details ) cannot be null defined in: Post","title":"Sec"},{"location":"dat/post-items-properties-elem-anyof-1/#sec-type","text":"merged type ( Details ) any of Untitled object in Post Untitled array in Post","title":"Sec Type"},{"location":"dat/post-items-properties-elem-anyof-1/#ve","text":"ve is optional Type: number[] cannot be null defined in: Post","title":"ve"},{"location":"dat/post-items-properties-elem-anyof-1/#ve-type","text":"number[]","title":"ve Type"},{"location":"dat/post-items-properties-elem-anyof-1/#vp","text":"vp is optional Type: number[] cannot be null defined in: Post","title":"vp"},{"location":"dat/post-items-properties-elem-anyof-1/#vp-type","text":"number[]","title":"vp Type"},{"location":"dat/post-items-properties-elem/","text":"Elem Type merged type ( Details ) any of Untitled array in Post Untitled object in Post","title":"Post items properties elem"},{"location":"dat/post-items-properties-elem/#elem-type","text":"merged type ( Details ) any of Untitled array in Post Untitled object in Post","title":"Elem Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-q-items/","text":"items Type number","title":"Post items properties elempost anyof 0 items properties q items"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-q-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-q/","text":"q Type number[]","title":"Post items properties elempost anyof 0 items properties q"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-q/#q-type","text":"number[]","title":"q Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-e-items/","text":"items Type number","title":"Post items properties elempost anyof 0 items properties sec properties e items"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-e-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-e/","text":"e Type number[]","title":"Post items properties elempost anyof 0 items properties sec properties e"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-e/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items-properties-eps/","text":"eps Type number","title":"Post items properties elempost anyof 0 items properties sec properties mat items properties eps"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items-properties-eps/#eps-type","text":"number","title":"eps Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items-properties-eps_p/","text":"eps_p Type number","title":"Post items properties elempost anyof 0 items properties sec properties mat items properties eps p"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items-properties-eps_p/#eps_p-type","text":"number","title":"eps_p Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items-properties-sig/","text":"sig Type number","title":"Post items properties elempost anyof 0 items properties sec properties mat items properties sig"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items-properties-sig/#sig-type","text":"number","title":"sig Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items-properties/","text":"properties Type unknown","title":"Post items properties elempost anyof 0 items properties sec properties mat items properties"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items/","text":"items Type object ( Details ) undefined Properties Property Type Required Nullable Defined by eps number Required cannot be null Post sig number Required cannot be null Post eps_p number Required cannot be null Post eps eps is required Type: number cannot be null defined in: Post eps Type number sig sig is required Type: number cannot be null defined in: Post sig Type number eps_p eps_p is required Type: number cannot be null defined in: Post eps_p Type number","title":"Post items properties elempost anyof 0 items properties sec properties mat items"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items/#items-type","text":"object ( Details )","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items/#undefined-properties","text":"Property Type Required Nullable Defined by eps number Required cannot be null Post sig number Required cannot be null Post eps_p number Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items/#eps","text":"eps is required Type: number cannot be null defined in: Post","title":"eps"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items/#eps-type","text":"number","title":"eps Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items/#sig","text":"sig is required Type: number cannot be null defined in: Post","title":"sig"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items/#sig-type","text":"number","title":"sig Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items/#eps_p","text":"eps_p is required Type: number cannot be null defined in: Post","title":"eps_p"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat-items/#eps_p-type","text":"number","title":"eps_p Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat/","text":"Mat Type object[] ( Details )","title":"Post items properties elempost anyof 0 items properties sec properties mat"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-mat/#mat-type","text":"object[] ( Details )","title":"Mat Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-s-items/","text":"items Type number","title":"Post items properties elempost anyof 0 items properties sec properties s items"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-s-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-s/","text":"s Type number[]","title":"Post items properties elempost anyof 0 items properties sec properties s"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties-s/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties/","text":"properties Type unknown","title":"Post items properties elempost anyof 0 items properties sec properties"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec/","text":"Sec Type object ( Details ) undefined Properties Property Type Required Nullable Defined by Mat array Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post Mat Mat is required Type: object[] ( Details ) cannot be null defined in: Post Mat Type object[] ( Details ) e e is required Type: number[] cannot be null defined in: Post e Type number[] s s is required Type: number[] cannot be null defined in: Post s Type number[]","title":"Post items properties elempost anyof 0 items properties sec"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec/#sec-type","text":"object ( Details )","title":"Sec Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec/#undefined-properties","text":"Property Type Required Nullable Defined by Mat array Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec/#mat","text":"Mat is required Type: object[] ( Details ) cannot be null defined in: Post","title":"Mat"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec/#mat-type","text":"object[] ( Details )","title":"Mat Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec/#e","text":"e is required Type: number[] cannot be null defined in: Post","title":"e"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec/#s","text":"s is required Type: number[] cannot be null defined in: Post","title":"s"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-sec/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-v-items/","text":"items Type number","title":"Post items properties elempost anyof 0 items properties v items"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-v-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-v/","text":"v Type number[]","title":"Post items properties elempost anyof 0 items properties v"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties-v/#v-type","text":"number[]","title":"v Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties/","text":"properties Type unknown","title":"Post items properties elempost anyof 0 items properties"},{"location":"dat/post-items-properties-elempost-anyof-0-items-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items/","text":"items Type object ( Details ) undefined Properties Property Type Required Nullable Defined by v array Required cannot be null Post q array Required cannot be null Post Sec object Required cannot be null Post v v is required Type: number[] cannot be null defined in: Post v Type number[] q q is required Type: number[] cannot be null defined in: Post q Type number[] Sec Sec is required Type: object ( Details ) cannot be null defined in: Post Sec Type object ( Details )","title":"Post items properties elempost anyof 0 items"},{"location":"dat/post-items-properties-elempost-anyof-0-items/#items-type","text":"object ( Details )","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items/#undefined-properties","text":"Property Type Required Nullable Defined by v array Required cannot be null Post q array Required cannot be null Post Sec object Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elempost-anyof-0-items/#v","text":"v is required Type: number[] cannot be null defined in: Post","title":"v"},{"location":"dat/post-items-properties-elempost-anyof-0-items/#v-type","text":"number[]","title":"v Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items/#q","text":"q is required Type: number[] cannot be null defined in: Post","title":"q"},{"location":"dat/post-items-properties-elempost-anyof-0-items/#q-type","text":"number[]","title":"q Type"},{"location":"dat/post-items-properties-elempost-anyof-0-items/#sec","text":"Sec is required Type: object ( Details ) cannot be null defined in: Post","title":"Sec"},{"location":"dat/post-items-properties-elempost-anyof-0-items/#sec-type","text":"object ( Details )","title":"Sec Type"},{"location":"dat/post-items-properties-elempost-anyof-0/","text":"0 Type object[] ( Details )","title":"Post items properties elempost anyof 0"},{"location":"dat/post-items-properties-elempost-anyof-0/#0-type","text":"object[] ( Details )","title":"0 Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-q-items/","text":"items Type number","title":"Post items properties elempost anyof 1 properties q items"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-q-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-q/","text":"q Type number[]","title":"Post items properties elempost anyof 1 properties q"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-q/#q-type","text":"number[]","title":"q Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0-properties-e-items/","text":"items Type number","title":"Post items properties elempost anyof 1 properties secpost anyof 0 properties e items"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0-properties-e-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0-properties-e/","text":"e Type number[]","title":"Post items properties elempost anyof 1 properties secpost anyof 0 properties e"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0-properties-e/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0-properties-s-items/","text":"items Type number","title":"Post items properties elempost anyof 1 properties secpost anyof 0 properties s items"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0-properties-s-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0-properties-s/","text":"s Type number[]","title":"Post items properties elempost anyof 1 properties secpost anyof 0 properties s"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0-properties-s/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0-properties/","text":"properties Type unknown","title":"Post items properties elempost anyof 1 properties secpost anyof 0 properties"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0/","text":"0 Type object ( Details ) undefined Properties Property Type Required Nullable Defined by Mat object Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post Mat Mat is required Type: object ( MatPost ) cannot be null defined in: Post Mat Type object ( MatPost ) e e is required Type: number[] cannot be null defined in: Post e Type number[] s s is required Type: number[] cannot be null defined in: Post s Type number[]","title":"Post items properties elempost anyof 1 properties secpost anyof 0"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0/#0-type","text":"object ( Details )","title":"0 Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0/#undefined-properties","text":"Property Type Required Nullable Defined by Mat object Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0/#mat","text":"Mat is required Type: object ( MatPost ) cannot be null defined in: Post","title":"Mat"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0/#mat-type","text":"object ( MatPost )","title":"Mat Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0/#e","text":"e is required Type: number[] cannot be null defined in: Post","title":"e"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0/#s","text":"s is required Type: number[] cannot be null defined in: Post","title":"s"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-0/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items-properties-e-items/","text":"items Type number","title":"Post items properties elempost anyof 1 properties secpost anyof 1 items properties e items"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items-properties-e-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items-properties-e/","text":"e Type number[]","title":"Post items properties elempost anyof 1 properties secpost anyof 1 items properties e"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items-properties-e/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items-properties-s-items/","text":"items Type number","title":"Post items properties elempost anyof 1 properties secpost anyof 1 items properties s items"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items-properties-s-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items-properties-s/","text":"s Type number[]","title":"Post items properties elempost anyof 1 properties secpost anyof 1 items properties s"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items-properties-s/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items-properties/","text":"properties Type unknown","title":"Post items properties elempost anyof 1 properties secpost anyof 1 items properties"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items/","text":"items Type object ( Details ) undefined Properties Property Type Required Nullable Defined by Mat object Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post Mat Mat is required Type: object ( MatPost ) cannot be null defined in: Post Mat Type object ( MatPost ) e e is required Type: number[] cannot be null defined in: Post e Type number[] s s is required Type: number[] cannot be null defined in: Post s Type number[]","title":"Post items properties elempost anyof 1 properties secpost anyof 1 items"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items/#items-type","text":"object ( Details )","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items/#undefined-properties","text":"Property Type Required Nullable Defined by Mat object Required cannot be null Post e array Required cannot be null Post s array Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items/#mat","text":"Mat is required Type: object ( MatPost ) cannot be null defined in: Post","title":"Mat"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items/#mat-type","text":"object ( MatPost )","title":"Mat Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items/#e","text":"e is required Type: number[] cannot be null defined in: Post","title":"e"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items/#e-type","text":"number[]","title":"e Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items/#s","text":"s is required Type: number[] cannot be null defined in: Post","title":"s"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1-items/#s-type","text":"number[]","title":"s Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1/","text":"1 Type object[] ( Details )","title":"Post items properties elempost anyof 1 properties secpost anyof 1"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost-anyof-1/#1-type","text":"object[] ( Details )","title":"1 Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost/","text":"Sec Type merged type ( SecPost ) any of Untitled object in Post Untitled array in Post","title":"Post items properties elempost anyof 1 properties secpost"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-secpost/#sec-type","text":"merged type ( SecPost ) any of Untitled object in Post Untitled array in Post","title":"Sec Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-v-items/","text":"items Type number","title":"Post items properties elempost anyof 1 properties v items"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-v-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-v/","text":"v Type number[]","title":"Post items properties elempost anyof 1 properties v"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-v/#v-type","text":"number[]","title":"v Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-ve-items/","text":"items Type number","title":"Post items properties elempost anyof 1 properties ve items"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-ve-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-ve/","text":"ve Type number[]","title":"Post items properties elempost anyof 1 properties ve"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-ve/#ve-type","text":"number[]","title":"ve Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-vp-items/","text":"items Type number","title":"Post items properties elempost anyof 1 properties vp items"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-vp-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-vp/","text":"vp Type number[]","title":"Post items properties elempost anyof 1 properties vp"},{"location":"dat/post-items-properties-elempost-anyof-1-properties-vp/#vp-type","text":"number[]","title":"vp Type"},{"location":"dat/post-items-properties-elempost-anyof-1-properties/","text":"properties Type unknown","title":"Post items properties elempost anyof 1 properties"},{"location":"dat/post-items-properties-elempost-anyof-1-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items-properties-elempost-anyof-1/","text":"1 Type object ( Details ) undefined Properties Property Type Required Nullable Defined by v array Required cannot be null Post q array Required cannot be null Post Sec Merged Optional cannot be null Post ve array Optional cannot be null Post vp array Optional cannot be null Post v v is required Type: number[] cannot be null defined in: Post v Type number[] q q is required Type: number[] cannot be null defined in: Post q Type number[] Sec Sec is optional Type: merged type ( SecPost ) cannot be null defined in: Post Sec Type merged type ( SecPost ) any of Untitled object in Post Untitled array in Post ve ve is optional Type: number[] cannot be null defined in: Post ve Type number[] vp vp is optional Type: number[] cannot be null defined in: Post vp Type number[]","title":"Post items properties elempost anyof 1"},{"location":"dat/post-items-properties-elempost-anyof-1/#1-type","text":"object ( Details )","title":"1 Type"},{"location":"dat/post-items-properties-elempost-anyof-1/#undefined-properties","text":"Property Type Required Nullable Defined by v array Required cannot be null Post q array Required cannot be null Post Sec Merged Optional cannot be null Post ve array Optional cannot be null Post vp array Optional cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items-properties-elempost-anyof-1/#v","text":"v is required Type: number[] cannot be null defined in: Post","title":"v"},{"location":"dat/post-items-properties-elempost-anyof-1/#v-type","text":"number[]","title":"v Type"},{"location":"dat/post-items-properties-elempost-anyof-1/#q","text":"q is required Type: number[] cannot be null defined in: Post","title":"q"},{"location":"dat/post-items-properties-elempost-anyof-1/#q-type","text":"number[]","title":"q Type"},{"location":"dat/post-items-properties-elempost-anyof-1/#sec","text":"Sec is optional Type: merged type ( SecPost ) cannot be null defined in: Post","title":"Sec"},{"location":"dat/post-items-properties-elempost-anyof-1/#sec-type","text":"merged type ( SecPost ) any of Untitled object in Post Untitled array in Post","title":"Sec Type"},{"location":"dat/post-items-properties-elempost-anyof-1/#ve","text":"ve is optional Type: number[] cannot be null defined in: Post","title":"ve"},{"location":"dat/post-items-properties-elempost-anyof-1/#ve-type","text":"number[]","title":"ve Type"},{"location":"dat/post-items-properties-elempost-anyof-1/#vp","text":"vp is optional Type: number[] cannot be null defined in: Post","title":"vp"},{"location":"dat/post-items-properties-elempost-anyof-1/#vp-type","text":"number[]","title":"vp Type"},{"location":"dat/post-items-properties-elempost/","text":"Elem Type merged type ( ElemPost ) any of Untitled array in Post Untitled object in Post","title":"Post items properties elempost"},{"location":"dat/post-items-properties-elempost/#elem-type","text":"merged type ( ElemPost ) any of Untitled array in Post Untitled object in Post","title":"Elem Type"},{"location":"dat/post-items-properties-lamda-anyof-0/","text":"0 Type number","title":"Post items properties lamda anyof 0"},{"location":"dat/post-items-properties-lamda-anyof-0/#0-type","text":"number","title":"0 Type"},{"location":"dat/post-items-properties-lamda-anyof-1-items/","text":"items Type number","title":"Post items properties lamda anyof 1 items"},{"location":"dat/post-items-properties-lamda-anyof-1-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-lamda-anyof-1/","text":"1 Type number[]","title":"Post items properties lamda anyof 1"},{"location":"dat/post-items-properties-lamda-anyof-1/#1-type","text":"number[]","title":"1 Type"},{"location":"dat/post-items-properties-lamda/","text":"lamda Type merged type ( lamda ) any of Untitled number in Post Untitled array in Post","title":"Post items properties lamda"},{"location":"dat/post-items-properties-lamda/#lamda-type","text":"merged type ( lamda ) any of Untitled number in Post Untitled array in Post","title":"lamda Type"},{"location":"dat/post-items-properties-pr-items/","text":"items Type number","title":"Post items properties pr items"},{"location":"dat/post-items-properties-pr-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-pr/","text":"Pr Type number[]","title":"Post items properties pr"},{"location":"dat/post-items-properties-pr/#pr-type","text":"number[]","title":"Pr Type"},{"location":"dat/post-items-properties-time/","text":"Time Type number ( Time )","title":"Post items properties time"},{"location":"dat/post-items-properties-time/#time-type","text":"number ( Time )","title":"Time Type"},{"location":"dat/post-items-properties-u-items/","text":"items Type number","title":"Post items properties u items"},{"location":"dat/post-items-properties-u-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-u/","text":"U Type number[]","title":"Post items properties u"},{"location":"dat/post-items-properties-u/#u-type","text":"number[]","title":"U Type"},{"location":"dat/post-items-properties-uddot-items/","text":"items Type number","title":"Post items properties uddot items"},{"location":"dat/post-items-properties-uddot-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-uddot/","text":"Uddot Type number[]","title":"Post items properties uddot"},{"location":"dat/post-items-properties-uddot/#uddot-type","text":"number[]","title":"Uddot Type"},{"location":"dat/post-items-properties-udot-items/","text":"items Type number","title":"Post items properties udot items"},{"location":"dat/post-items-properties-udot-items/#items-type","text":"number","title":"items Type"},{"location":"dat/post-items-properties-udot/","text":"Udot Type number[]","title":"Post items properties udot"},{"location":"dat/post-items-properties-udot/#udot-type","text":"number[]","title":"Udot Type"},{"location":"dat/post-items-properties/","text":"properties Type unknown","title":"Post items properties"},{"location":"dat/post-items-properties/#properties-type","text":"unknown","title":"properties Type"},{"location":"dat/post-items/","text":"items Type object ( Details ) undefined Properties Property Type Required Nullable Defined by Elem Merged Required cannot be null Post lamda Merged Required cannot be null Post U array Required cannot be null Post Pr array Required cannot be null Post Udot array Required cannot be null Post Uddot array Required cannot be null Post Time number Required cannot be null Post Elem Elem is required Type: merged type ( ElemPost ) cannot be null defined in: Post Elem Type merged type ( ElemPost ) any of Untitled array in Post Untitled object in Post lamda lamda is required Type: merged type ( lamda ) cannot be null defined in: Post lamda Type merged type ( lamda ) any of Untitled number in Post Untitled array in Post U U is required Type: number[] cannot be null defined in: Post U Type number[] Pr Pr is required Type: number[] cannot be null defined in: Post Pr Type number[] Udot Udot is required Type: number[] cannot be null defined in: Post Udot Type number[] Uddot Uddot is required Type: number[] cannot be null defined in: Post Uddot Type number[] Time Time is required Type: number ( Time ) cannot be null defined in: Post Time Type number ( Time )","title":"Post items"},{"location":"dat/post-items/#items-type","text":"object ( Details )","title":"items Type"},{"location":"dat/post-items/#undefined-properties","text":"Property Type Required Nullable Defined by Elem Merged Required cannot be null Post lamda Merged Required cannot be null Post U array Required cannot be null Post Pr array Required cannot be null Post Udot array Required cannot be null Post Uddot array Required cannot be null Post Time number Required cannot be null Post","title":"undefined Properties"},{"location":"dat/post-items/#elem","text":"Elem is required Type: merged type ( ElemPost ) cannot be null defined in: Post","title":"Elem"},{"location":"dat/post-items/#elem-type","text":"merged type ( ElemPost ) any of Untitled array in Post Untitled object in Post","title":"Elem Type"},{"location":"dat/post-items/#lamda","text":"lamda is required Type: merged type ( lamda ) cannot be null defined in: Post","title":"lamda"},{"location":"dat/post-items/#lamda-type","text":"merged type ( lamda ) any of Untitled number in Post Untitled array in Post","title":"lamda Type"},{"location":"dat/post-items/#u","text":"U is required Type: number[] cannot be null defined in: Post","title":"U"},{"location":"dat/post-items/#u-type","text":"number[]","title":"U Type"},{"location":"dat/post-items/#pr","text":"Pr is required Type: number[] cannot be null defined in: Post","title":"Pr"},{"location":"dat/post-items/#pr-type","text":"number[]","title":"Pr Type"},{"location":"dat/post-items/#udot","text":"Udot is required Type: number[] cannot be null defined in: Post","title":"Udot"},{"location":"dat/post-items/#udot-type","text":"number[]","title":"Udot Type"},{"location":"dat/post-items/#uddot","text":"Uddot is required Type: number[] cannot be null defined in: Post","title":"Uddot"},{"location":"dat/post-items/#uddot-type","text":"number[]","title":"Uddot Type"},{"location":"dat/post-items/#time","text":"Time is required Type: number ( Time ) cannot be null defined in: Post","title":"Time"},{"location":"dat/post-items/#time-type","text":"number ( Time )","title":"Time Type"},{"location":"dat/post/","text":"Post Type object[] ( Details ) Post Definitions Definitions group MatPost Reference this group by using {\"$ref\":\"https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/MatPost\"} MatPost is optional Type: object ( MatPost ) cannot be null defined in: Post MatPost Type object ( MatPost ) Definitions group SecPost Reference this group by using {\"$ref\":\"https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/SecPost\"} SecPost is optional Type: object ( SecPost ) cannot be null defined in: Post SecPost Type object ( SecPost ) Definitions group ElemPost Reference this group by using {\"$ref\":\"https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/ElemPost\"} ElemPost is optional Type: object ( ElemPost ) cannot be null defined in: Post ElemPost Type object ( ElemPost )","title":"Post"},{"location":"dat/post/#post-type","text":"object[] ( Details )","title":"Post Type"},{"location":"dat/post/#post-definitions","text":"","title":"Post Definitions"},{"location":"dat/post/#definitions-group-matpost","text":"Reference this group by using {\"$ref\":\"https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/MatPost\"} MatPost is optional Type: object ( MatPost ) cannot be null defined in: Post","title":"Definitions group MatPost"},{"location":"dat/post/#matpost-type","text":"object ( MatPost )","title":"MatPost Type"},{"location":"dat/post/#definitions-group-secpost","text":"Reference this group by using {\"$ref\":\"https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/SecPost\"} SecPost is optional Type: object ( SecPost ) cannot be null defined in: Post","title":"Definitions group SecPost"},{"location":"dat/post/#secpost-type","text":"object ( SecPost )","title":"SecPost Type"},{"location":"dat/post/#definitions-group-elempost","text":"Reference this group by using {\"$ref\":\"https://raw.githubusercontent.com/claudioperez/FedeasAPI/v0.0.0/schemas/model.schema.json#/definitions/ElemPost\"} ElemPost is optional Type: object ( ElemPost ) cannot be null defined in: Post","title":"Definitions group ElemPost"},{"location":"dat/post/#elempost-type","text":"object ( ElemPost )","title":"ElemPost Type"},{"location":"examples/","text":"Examples General Yield surface evolution Plastic Analysis Applications of linear programming to perfectly plastic structures. Plastic analysis with section interaction Finite Element Analysis Tapered cantilever","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#general","text":"Yield surface evolution","title":"General"},{"location":"examples/#plastic-analysis","text":"Applications of linear programming to perfectly plastic structures. Plastic analysis with section interaction","title":"Plastic Analysis"},{"location":"examples/#finite-element-analysis","text":"Tapered cantilever","title":"Finite Element Analysis"},{"location":"examples/lim_evol/","text":"Yield Surface Evolution This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward. Formulation We seek to define a surface, F_\\tau , at instant \\tau by the following set of moment-axial force ordered pairs: \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} where \\Phi is satisfied when M and P are resultants of a stress distribution, \\sigma , meeting the condition (\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})] for material behavior with only one component. In this condition, \\mathbf{x} \\in \\Omega denotes a point in the cross section, and \\sigma_{y,\\tau} is the limit stress at time \\tau . For the case of perfect plasticity without hardening, the dependence of \\sigma_y on \\mathbf{x} and \\tau is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into n_{IP} integration points, the aforementioned condition is restated approximately as follows: \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y where N is the set of integration point indices \\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\} and x_i is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\hat{\\mathbf{x}} , of n_{IP} integration point locations, and a vector of corresponding stresses, \\mathbf{y}_\\tau at instant \\tau , find the following set, Y , of admissible stress vectors, \\mathbf{y} : Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ]\\} which is the set of all discrete stress vectors, \\mathbf{y} , such that there exists an admissible strain increment \\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x} which will produce the elastic stress increment \\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon , and there exists an element, y_i , in \\mathbf{y} that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field. Implementation The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size (n_{IP},2) . Each ordinate, XY(i,2) , corresponds to the stress y_i \\in \\mathbf{y}_\\tau at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval [+1, -1] . The function iterates over every integration point in the set N , carrying out 4 separate nested iterations over the remaining integration points indices, \\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\} . This is a very computationally expensive procedure that grows quickly with n_{IP} . The return variable, Y_lim , is a subset of the piecewise continuous set Y_\\tau with column vectors Y_lim(:,k) defining points of discontinuity. Examples The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors y_k (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: ```{include=surf_ex_2.m .matlab} ``` Example 1 - Path O-A-B-O' ( LoadOpt=3 ) Example 2 - Path O-A-B-C-O' ( LoadOpt=4 ) This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C. Source Code lim_clip plot_evol","title":"Yield surface evolution"},{"location":"examples/lim_evol/#yield-surface-evolution","text":"This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward.","title":"Yield Surface Evolution"},{"location":"examples/lim_evol/#formulation","text":"We seek to define a surface, F_\\tau , at instant \\tau by the following set of moment-axial force ordered pairs: \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} where \\Phi is satisfied when M and P are resultants of a stress distribution, \\sigma , meeting the condition (\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})] for material behavior with only one component. In this condition, \\mathbf{x} \\in \\Omega denotes a point in the cross section, and \\sigma_{y,\\tau} is the limit stress at time \\tau . For the case of perfect plasticity without hardening, the dependence of \\sigma_y on \\mathbf{x} and \\tau is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into n_{IP} integration points, the aforementioned condition is restated approximately as follows: \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y where N is the set of integration point indices \\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\} and x_i is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\hat{\\mathbf{x}} , of n_{IP} integration point locations, and a vector of corresponding stresses, \\mathbf{y}_\\tau at instant \\tau , find the following set, Y , of admissible stress vectors, \\mathbf{y} : Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ]\\} which is the set of all discrete stress vectors, \\mathbf{y} , such that there exists an admissible strain increment \\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x} which will produce the elastic stress increment \\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon , and there exists an element, y_i , in \\mathbf{y} that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field.","title":"Formulation"},{"location":"examples/lim_evol/#implementation","text":"The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size (n_{IP},2) . Each ordinate, XY(i,2) , corresponds to the stress y_i \\in \\mathbf{y}_\\tau at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval [+1, -1] . The function iterates over every integration point in the set N , carrying out 4 separate nested iterations over the remaining integration points indices, \\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\} . This is a very computationally expensive procedure that grows quickly with n_{IP} . The return variable, Y_lim , is a subset of the piecewise continuous set Y_\\tau with column vectors Y_lim(:,k) defining points of discontinuity.","title":"Implementation"},{"location":"examples/lim_evol/#examples","text":"The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors y_k (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: ```{include=surf_ex_2.m .matlab} ```","title":"Examples"},{"location":"examples/lim_evol/#example-1-path-o-a-b-o-loadopt3","text":"","title":"Example 1 - Path O-A-B-O' (LoadOpt=3)"},{"location":"examples/lim_evol/#example-2-path-o-a-b-c-o-loadopt4","text":"This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C.","title":"Example 2 - Path O-A-B-C-O' (LoadOpt=4)"},{"location":"examples/lim_evol/#source-code","text":"","title":"Source Code"},{"location":"examples/lim_evol/#lim_clip","text":"","title":"lim_clip"},{"location":"examples/lim_evol/#plot_evol","text":"","title":"plot_evol"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/","text":"HW-3 Problem 3 The purpose of the structural model in Fig. 3(a) is the study of the risk of a mid-rise building forming a soft first-story collapse mechanism under the combined action of a total gravity load P_{v} and a lateral load. The latter is assumed to be linearly distributed over the height of the building with a resultant P_{h} located at a distance H above the first floor. The building has a single bay of length L and the height of the first story is 12 feet. The ratio of (H-h)/ L is 4 . The first story columns consist of \\mathrm{W} 14 \\mathrm{x} 426 steel sections with Grade 50 Steel and are pinned at the foundation. The first story columns can be assumed restrained against rotation at the top, since they frame into a girder that can be assumed to be infinitely rigid in flexure. The girder and columns can be assumed to be inextensible. 3.1 - AISC H2 Verify the maximum lateral force P_{h} that the first story can resist for an ultimate load factor \\lambda=2.0 under the assumption that the gravity load P_{v} is negligible relative to the lateral load P_{h} using the diamond shaped plastic limit surface in Fig. 4.6 of the course reader (AISC Equation H2-1). CleanStart LimEqn = 'AISC-H2'; beta = 0; Ph = 217.67; [lamc,Qc] = hw3p3(beta,LimEqn,Ph,true); lamc Optimal solution found. lamc = 2.0000 3.2 - AISC H1 How much can the maximum lateral force P_{h} be increased by using the N -M plastic limit surface of the AISC specification in equation 4.7 of the course reader? CleanStart LimEqn = 'AISC-H1'; beta = 0; Ph = 236.64; [lamc,Qc] = hw3p3(beta,LimEqn,Ph); lamc Optimal solution found. lamc = 2.0000 3.3 - Vertical Load Repeat the preceding questions for the case that the gravity load P_{v} is equal to 50 \\% of the lateral load P_{h} under the assumption that it remains constant during the application of the lateral load and is, therefore, assigned an ultimate load factor of 1.2. 3.3.1 CleanStart LimEqn = 'AISC-H2'; beta = 1/2; Ph = 217.67; [lamc,Qc] = hw3p3(beta,LimEqn,Ph); lamc Optimal solution found. lamc = 2.0000","title":"HW-3 Problem 3"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/#hw-3-problem-3","text":"The purpose of the structural model in Fig. 3(a) is the study of the risk of a mid-rise building forming a soft first-story collapse mechanism under the combined action of a total gravity load P_{v} and a lateral load. The latter is assumed to be linearly distributed over the height of the building with a resultant P_{h} located at a distance H above the first floor. The building has a single bay of length L and the height of the first story is 12 feet. The ratio of (H-h)/ L is 4 . The first story columns consist of \\mathrm{W} 14 \\mathrm{x} 426 steel sections with Grade 50 Steel and are pinned at the foundation. The first story columns can be assumed restrained against rotation at the top, since they frame into a girder that can be assumed to be infinitely rigid in flexure. The girder and columns can be assumed to be inextensible.","title":"HW-3 Problem 3"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/#31-aisc-h2","text":"Verify the maximum lateral force P_{h} that the first story can resist for an ultimate load factor \\lambda=2.0 under the assumption that the gravity load P_{v} is negligible relative to the lateral load P_{h} using the diamond shaped plastic limit surface in Fig. 4.6 of the course reader (AISC Equation H2-1). CleanStart LimEqn = 'AISC-H2'; beta = 0; Ph = 217.67; [lamc,Qc] = hw3p3(beta,LimEqn,Ph,true); lamc Optimal solution found. lamc = 2.0000","title":"3.1 - AISC H2"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/#32-aisc-h1","text":"How much can the maximum lateral force P_{h} be increased by using the N -M plastic limit surface of the AISC specification in equation 4.7 of the course reader? CleanStart LimEqn = 'AISC-H1'; beta = 0; Ph = 236.64; [lamc,Qc] = hw3p3(beta,LimEqn,Ph); lamc Optimal solution found. lamc = 2.0000","title":"3.2 - AISC H1"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/#33-vertical-load","text":"Repeat the preceding questions for the case that the gravity load P_{v} is equal to 50 \\% of the lateral load P_{h} under the assumption that it remains constant during the application of the lateral load and is, therefore, assigned an ultimate load factor of 1.2.","title":"3.3 - Vertical Load"},{"location":"examples/221_HW03_P3/Test_HW03_P3m/#331","text":"CleanStart LimEqn = 'AISC-H2'; beta = 1/2; Ph = 217.67; [lamc,Qc] = hw3p3(beta,LimEqn,Ph); lamc Optimal solution found. lamc = 2.0000","title":"3.3.1"},{"location":"examples/222_HW04_P2/222_HW04_P2/","text":"Problem 2 LoadFedeas('222'); format compact idx = 1; n = 10; m = 2; bc = 'a'; % Output{idx}.Case = strcat(num2str(n),'-',num2str(m),'-',bc); Output{idx} = CE222_Hw4P2(10,2,'a'); ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 4.687351e-12 Elapsed time is 0.187344 seconds. Tip displacement 20x4 idx = 2; n = 20; m = 4; bc = 'a'; Output{idx} = CE222_Hw4P2(n,m,bc,false); ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 1.110270e-11 Elapsed time is 0.333585 seconds. 40x4 idx = 3; n = 40; m = 4; bc = 'a'; % CleanStart % Output{idx}.Case = strcat(num2str(n),'-',num2str(m),'-',bc); Output{idx} = CE222_Hw4P2(n,m,bc); ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 2.614496e-11 Elapsed time is 0.618235 seconds. Tip displacement % Output{4}.Case = strcat(num2str(2),'-',num2str(2),'-','a'); Output{4} = CE222_Hw4P2(2,2,'a',false); ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 3.292876e-12 Elapsed time is 0.013195 seconds. format compact figure, hold on for jdx=[1:4] out = Output{jdx}; plot(out.State.x,out.State.Ux,'DisplayName',Output{jdx}.Case) end hold off title('Displacements along x at y = d/2') legend() This plot indicates that the displacements of this problem are very insensitive to mesh resolution. m=[ 2, 2, 4, 4, 6, 6]; n=[10,20,10,20,20,40]; bc = 'a' for idx=[1:6] bc lx = 100/n(idx); ly = 30/m(idx); h = sqrt(lx^2 + ly^2) OutputA{idx} = CE222_Hw4P2( n(idx), m(idx),bc,false); OutputA{idx}.h = h OutputA{idx}.lbl = strcat('n:',num2str(n(idx)),' m:',num2str(m(idx))); end bc = 'b' for idx=[1:6] bc lx = 100/n(idx); ly = 30/m(idx); h = sqrt(lx^2 + ly^2) OutputB{idx} = CE222_Hw4P2( n(idx), m(idx),bc,false); OutputB{idx}.h = h OutputB{idx}.lbl = strcat('n:',num2str(n(idx)),' m:',num2str(m(idx))); end bc = 'a' bc = 'a' h = 18.0278 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 4.687351e-12 Elapsed time is 0.087388 seconds. OutputA = 1x1 cell array {1x1 struct} bc = 'a' h = 15.8114 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 6.116751e-12 Elapsed time is 0.126509 seconds. OutputA = 1x2 cell array {1x1 struct} {1x1 struct} bc = 'a' h = 12.5000 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 7.092050e-12 Elapsed time is 0.106591 seconds. OutputA = 1x3 cell array {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 9.0139 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 1.110270e-11 Elapsed time is 0.215658 seconds. OutputA = 1x4 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 7.0711 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.095864e-11 Elapsed time is 0.994828 seconds. OutputA = 1x5 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 5.5902 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.718144e-11 Elapsed time is 1.036072 seconds. OutputA = 1x6 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' bc = 'b' h = 18.0278 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 5.166162e-12 Elapsed time is 0.068224 seconds. OutputB = 1x1 cell array {1x1 struct} bc = 'b' h = 15.8114 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 7.603279e-12 Elapsed time is 0.110418 seconds. OutputB = 1x2 cell array {1x1 struct} {1x1 struct} bc = 'b' h = 12.5000 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 7.842500e-12 Elapsed time is 0.126853 seconds. OutputB = 1x3 cell array {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 9.0139 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 9.996352e-12 Elapsed time is 0.720517 seconds. OutputB = 1x4 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 7.0711 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.183556e-11 Elapsed time is 0.431673 seconds. OutputB = 1x5 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 5.5902 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.960940e-11 Elapsed time is 0.719019 seconds. OutputB = 1x6 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} % clear ha,hb,Fb,Fa figure, hold on for jdx=[1:6] ha(jdx) = OutputA{jdx}.h; Fa(jdx) = max(OutputA{jdx}.F); lbl{jdx} = OutputA{jdx}.lbl; end plot(ha,Fa,'DisplayName','a') for jdx=[1:6] hb(jdx) = OutputB{jdx}.h; Fb(jdx) = max(OutputB{jdx}.F); end plot(hb,Fb,'o','DisplayName','b') text(hb+0.75,Fb+25,lbl) hold off title('Max force vs h') legend('Location','east') There is a lot that this plot is showing. The change in maximum force is generally decreasing as the representative element size, h , decreases, indicating convergence. However, this convergence is seemingly orthogonal to changes in lengthwise subdivisions, n . Additionally, models with the a and b boundary conditions behave exactly the same in this regard. % clear ha,hb,Fb,Fa figure, hold on for jdx=[1:6] out = OutputA{jdx}; lbl{jdx} = strcat('a: ',out.lbl); plot(out.State.x,out.State.Ux,':','DisplayName',lbl{jdx}) end for jdx=[1:6] out = OutputB{jdx}; lbl{jdx} = strcat('b: ',out.lbl); plot(out.State.x,out.State.Ux,':','DisplayName',lbl{jdx}) end hold off title('Displacements along x at y = d/2') legend('Location','east') This plot further shows the invariance of this particular problem to boundary conditions.","title":"Problem 2"},{"location":"examples/222_HW04_P2/222_HW04_P2/#problem-2","text":"LoadFedeas('222'); format compact idx = 1; n = 10; m = 2; bc = 'a'; % Output{idx}.Case = strcat(num2str(n),'-',num2str(m),'-',bc); Output{idx} = CE222_Hw4P2(10,2,'a'); ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 4.687351e-12 Elapsed time is 0.187344 seconds. Tip displacement","title":"Problem 2"},{"location":"examples/222_HW04_P2/222_HW04_P2/#20x4","text":"idx = 2; n = 20; m = 4; bc = 'a'; Output{idx} = CE222_Hw4P2(n,m,bc,false); ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 1.110270e-11 Elapsed time is 0.333585 seconds.","title":"20x4"},{"location":"examples/222_HW04_P2/222_HW04_P2/#40x4","text":"idx = 3; n = 40; m = 4; bc = 'a'; % CleanStart % Output{idx}.Case = strcat(num2str(n),'-',num2str(m),'-',bc); Output{idx} = CE222_Hw4P2(n,m,bc); ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 2.614496e-11 Elapsed time is 0.618235 seconds. Tip displacement % Output{4}.Case = strcat(num2str(2),'-',num2str(2),'-','a'); Output{4} = CE222_Hw4P2(2,2,'a',false); ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 3.292876e-12 Elapsed time is 0.013195 seconds. format compact figure, hold on for jdx=[1:4] out = Output{jdx}; plot(out.State.x,out.State.Ux,'DisplayName',Output{jdx}.Case) end hold off title('Displacements along x at y = d/2') legend() This plot indicates that the displacements of this problem are very insensitive to mesh resolution. m=[ 2, 2, 4, 4, 6, 6]; n=[10,20,10,20,20,40]; bc = 'a' for idx=[1:6] bc lx = 100/n(idx); ly = 30/m(idx); h = sqrt(lx^2 + ly^2) OutputA{idx} = CE222_Hw4P2( n(idx), m(idx),bc,false); OutputA{idx}.h = h OutputA{idx}.lbl = strcat('n:',num2str(n(idx)),' m:',num2str(m(idx))); end bc = 'b' for idx=[1:6] bc lx = 100/n(idx); ly = 30/m(idx); h = sqrt(lx^2 + ly^2) OutputB{idx} = CE222_Hw4P2( n(idx), m(idx),bc,false); OutputB{idx}.h = h OutputB{idx}.lbl = strcat('n:',num2str(n(idx)),' m:',num2str(m(idx))); end bc = 'a' bc = 'a' h = 18.0278 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 4.687351e-12 Elapsed time is 0.087388 seconds. OutputA = 1x1 cell array {1x1 struct} bc = 'a' h = 15.8114 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 6.116751e-12 Elapsed time is 0.126509 seconds. OutputA = 1x2 cell array {1x1 struct} {1x1 struct} bc = 'a' h = 12.5000 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 7.092050e-12 Elapsed time is 0.106591 seconds. OutputA = 1x3 cell array {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 9.0139 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 1.110270e-11 Elapsed time is 0.215658 seconds. OutputA = 1x4 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 7.0711 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.095864e-11 Elapsed time is 0.994828 seconds. OutputA = 1x5 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'a' h = 5.5902 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.718144e-11 Elapsed time is 1.036072 seconds. OutputA = 1x6 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' bc = 'b' h = 18.0278 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 5.166162e-12 Elapsed time is 0.068224 seconds. OutputB = 1x1 cell array {1x1 struct} bc = 'b' h = 15.8114 ans = 250.0000 500.0000 250.0000 Norm of equilibrium error = 7.603279e-12 Elapsed time is 0.110418 seconds. OutputB = 1x2 cell array {1x1 struct} {1x1 struct} bc = 'b' h = 12.5000 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 7.842500e-12 Elapsed time is 0.126853 seconds. OutputB = 1x3 cell array {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 9.0139 ans = 125.0000 250.0000 250.0000 250.0000 125.0000 Norm of equilibrium error = 9.996352e-12 Elapsed time is 0.720517 seconds. OutputB = 1x4 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 7.0711 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.183556e-11 Elapsed time is 0.431673 seconds. OutputB = 1x5 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} bc = 'b' h = 5.5902 ans = 83.3333 166.6667 166.6667 166.6667 166.6667 166.6667 83.3333 Norm of equilibrium error = 1.960940e-11 Elapsed time is 0.719019 seconds. OutputB = 1x6 cell array {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} {1x1 struct} % clear ha,hb,Fb,Fa figure, hold on for jdx=[1:6] ha(jdx) = OutputA{jdx}.h; Fa(jdx) = max(OutputA{jdx}.F); lbl{jdx} = OutputA{jdx}.lbl; end plot(ha,Fa,'DisplayName','a') for jdx=[1:6] hb(jdx) = OutputB{jdx}.h; Fb(jdx) = max(OutputB{jdx}.F); end plot(hb,Fb,'o','DisplayName','b') text(hb+0.75,Fb+25,lbl) hold off title('Max force vs h') legend('Location','east') There is a lot that this plot is showing. The change in maximum force is generally decreasing as the representative element size, h , decreases, indicating convergence. However, this convergence is seemingly orthogonal to changes in lengthwise subdivisions, n . Additionally, models with the a and b boundary conditions behave exactly the same in this regard. % clear ha,hb,Fb,Fa figure, hold on for jdx=[1:6] out = OutputA{jdx}; lbl{jdx} = strcat('a: ',out.lbl); plot(out.State.x,out.State.Ux,':','DisplayName',lbl{jdx}) end for jdx=[1:6] out = OutputB{jdx}; lbl{jdx} = strcat('b: ',out.lbl); plot(out.State.x,out.State.Ux,':','DisplayName',lbl{jdx}) end hold off title('Displacements along x at y = d/2') legend('Location','east') This plot further shows the invariance of this particular problem to boundary conditions.","title":"40x4"},{"location":"examples/A-short-walk/","text":"Inelasticity in Frame Sections In this section, the response of a nonlinear cross section is analyzed, which is assumed to represent a thin slice of a frame member, for which fiber strains can be considered constant. Part A: T-Section Output = Hw12P1A(nft, nwl, SIntTyp, Hk, yc, N_Np, Tmax, LoadOpt) Solution stability under perfect plasticity {#fig:mc1} fig. 1 presents the moment-curvature response for the first two cases, which utilize perfectly-pastic and effectively plastic ( H_k = 10^{-9} ) materials, respectively. Additionally, this figure tracks the movement of the neutral axis location throughout the moment curvature analysis for runs \\ref{run:P1-0} {=tex} and \\ref{run:P1-1} {=tex}. At each load step, this location is calculated according to the following relation: y_{NA} = \\dfrac{\\epsilon_{ref, i}}{\\kappa_i} - y_{ref} Where \\epsilon_{ref, i} is the axial strain measured at the current reference axis location, y_{ref} . Effects of axial force Cyclic loading 4 {#fig:mc4} 5 {#fig:mc5} 6 Part B: Rectangular Section This problem was used to study some possible applications of automatic differentiation to inelastic section analysis. Using a differentiable programming framework, a return-mapping algorithm was implemented which accounts for linear or nonlinear isotropic hardening, and basic kinematic hardening. This algorithm is called to evaluate cross sectional forces for a given strain distribution, and this procedure is differentiated with forward-mode automatic differentiation to yield the tangent stiffness of the cross section. plastic surface Experiment I: O-A-B-O {width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {#fig:ssh-oabo} Experiment II: O-A-B-C-O {width=\"60%,\" height=\"60%\"} {width=60%,height=\"60%\"} {#fig:ssh-oabco} Inelasticity in Frame Members Output = Hw12P2A( Elem, Hkr , ) Output = Hw12P2B( EIntType, Hkr, SIntTyp,nfl,nwl,nIP) Concentrated plasticity {#fig:cpcol} The cyclic response of two concentrated plasticity elements is compared in fig. 1. Under the conditions of this analysis, the LHNMYS element appears to very closely approximate the true plastic limit capacity of the cross section, shown in red in fig. 1 (a). However, it should be noted that the \"exact\" surface which is depicted here is only representative of a single cross section slice, and not neccessarily the full column. The lack of any axial-moment interaction in the OneComp element is very evident in from plots. The additional computational time required by the LHNMYS element appears to be considerable, but it remains to be seen how this time demand will scale to larger models. Distributed inelasticity Nonlinear Static Analysis A nonlinear static analysis of an 8-story framed structure is performed useing a function with the following handle: Output = Hw12P3(Geom, Column, Dlam0, nostep, Hkr) In this function, Geom specifies the frame element geometric stiffness ( linear , PDelta or corotational ). The argument Column is used to specify the finite element formulation used in the vertical elements of the model. For the purpose of this study, and that of sec. \u00bfsec:4-nta? \\ref{sec:4-nta} {=tex} ,all girders are modeled using the Inel2dFrm_wOneComp formulation. Inelastic without interaction {#fig:lr1} The pushover curves for two cases are presented in fig. 1, which consider two different concentrated plasticity elements. The zoomed field indicates that the curves are essentially identical. 2 The pushover curves for all prescribed transient analysis cases are presented above. The legend indicates the element name, along with the length of time required by the analysis to conclude. Nonlinear Transient Analysis [output,Model] = Hw12P4(Geom, Column, Factor) Inelastic without interaction 2 3 4 Other","title":"Index"},{"location":"examples/A-short-walk/#inelasticity-in-frame-sections","text":"In this section, the response of a nonlinear cross section is analyzed, which is assumed to represent a thin slice of a frame member, for which fiber strains can be considered constant.","title":"Inelasticity in Frame Sections"},{"location":"examples/A-short-walk/#part-a-t-section","text":"Output = Hw12P1A(nft, nwl, SIntTyp, Hk, yc, N_Np, Tmax, LoadOpt)","title":"Part A: T-Section"},{"location":"examples/A-short-walk/#solution-stability-under-perfect-plasticity","text":"{#fig:mc1} fig. 1 presents the moment-curvature response for the first two cases, which utilize perfectly-pastic and effectively plastic ( H_k = 10^{-9} ) materials, respectively. Additionally, this figure tracks the movement of the neutral axis location throughout the moment curvature analysis for runs \\ref{run:P1-0} {=tex} and \\ref{run:P1-1} {=tex}. At each load step, this location is calculated according to the following relation: y_{NA} = \\dfrac{\\epsilon_{ref, i}}{\\kappa_i} - y_{ref} Where \\epsilon_{ref, i} is the axial strain measured at the current reference axis location, y_{ref} .","title":"Solution stability under perfect plasticity"},{"location":"examples/A-short-walk/#effects-of-axial-force","text":"","title":"Effects of axial force"},{"location":"examples/A-short-walk/#cyclic-loading","text":"","title":"Cyclic loading"},{"location":"examples/A-short-walk/#4","text":"{#fig:mc4}","title":"4"},{"location":"examples/A-short-walk/#5","text":"{#fig:mc5}","title":"5"},{"location":"examples/A-short-walk/#6","text":"","title":"6"},{"location":"examples/A-short-walk/#part-b-rectangular-section","text":"This problem was used to study some possible applications of automatic differentiation to inelastic section analysis. Using a differentiable programming framework, a return-mapping algorithm was implemented which accounts for linear or nonlinear isotropic hardening, and basic kinematic hardening. This algorithm is called to evaluate cross sectional forces for a given strain distribution, and this procedure is differentiated with forward-mode automatic differentiation to yield the tangent stiffness of the cross section. plastic surface","title":"Part B: Rectangular Section"},{"location":"examples/A-short-walk/#experiment-i-o-a-b-o","text":"{width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {#fig:ssh-oabo}","title":"Experiment I: O-A-B-O"},{"location":"examples/A-short-walk/#experiment-ii-o-a-b-c-o","text":"{width=\"60%,\" height=\"60%\"} {width=60%,height=\"60%\"} {#fig:ssh-oabco}","title":"Experiment II: O-A-B-C-O"},{"location":"examples/A-short-walk/#inelasticity-in-frame-members","text":"Output = Hw12P2A( Elem, Hkr , ) Output = Hw12P2B( EIntType, Hkr, SIntTyp,nfl,nwl,nIP)","title":"Inelasticity in Frame Members"},{"location":"examples/A-short-walk/#concentrated-plasticity","text":"{#fig:cpcol} The cyclic response of two concentrated plasticity elements is compared in fig. 1. Under the conditions of this analysis, the LHNMYS element appears to very closely approximate the true plastic limit capacity of the cross section, shown in red in fig. 1 (a). However, it should be noted that the \"exact\" surface which is depicted here is only representative of a single cross section slice, and not neccessarily the full column. The lack of any axial-moment interaction in the OneComp element is very evident in from plots. The additional computational time required by the LHNMYS element appears to be considerable, but it remains to be seen how this time demand will scale to larger models.","title":"Concentrated plasticity"},{"location":"examples/A-short-walk/#distributed-inelasticity","text":"","title":"Distributed inelasticity"},{"location":"examples/A-short-walk/#nonlinear-static-analysis","text":"A nonlinear static analysis of an 8-story framed structure is performed useing a function with the following handle: Output = Hw12P3(Geom, Column, Dlam0, nostep, Hkr) In this function, Geom specifies the frame element geometric stiffness ( linear , PDelta or corotational ). The argument Column is used to specify the finite element formulation used in the vertical elements of the model. For the purpose of this study, and that of sec. \u00bfsec:4-nta? \\ref{sec:4-nta} {=tex} ,all girders are modeled using the Inel2dFrm_wOneComp formulation.","title":"Nonlinear Static Analysis"},{"location":"examples/A-short-walk/#inelastic-without-interaction","text":"{#fig:lr1} The pushover curves for two cases are presented in fig. 1, which consider two different concentrated plasticity elements. The zoomed field indicates that the curves are essentially identical.","title":"Inelastic without interaction"},{"location":"examples/A-short-walk/#2","text":"The pushover curves for all prescribed transient analysis cases are presented above. The legend indicates the element name, along with the length of time required by the analysis to conclude.","title":"2"},{"location":"examples/A-short-walk/#nonlinear-transient-analysis","text":"[output,Model] = Hw12P4(Geom, Column, Factor)","title":"Nonlinear Transient Analysis"},{"location":"examples/A-short-walk/#inelastic-without-interaction_1","text":"","title":"Inelastic without interaction"},{"location":"examples/A-short-walk/#2_1","text":"","title":"2"},{"location":"examples/A-short-walk/#3","text":"","title":"3"},{"location":"examples/A-short-walk/#4_1","text":"","title":"4"},{"location":"examples/A-short-walk/#other","text":"","title":"Other"},{"location":"examples/A-short-walk/Part-1a/","text":"Inelasticity in Frame Sections In this section, the response of a nonlinear cross section is analyzed, which is assumed to represent a thin slice of a frame member, for which fiber strains can be considered constant. Part A: T-Section Output = Hw12P1A(nft, nwl, SIntTyp, Hk, yc, N_Np, Tmax, LoadOpt) Solution stability under perfect plasticity {#fig:mc1} fig. 1 presents the moment-curvature response for the first two cases, which utilize perfectly-pastic and effectively plastic ( H_k = 10^{-9} ) materials, respectively. Additionally, this figure tracks the movement of the neutral axis location throughout the moment curvature analysis for runs \\ref{run:P1-0} {=tex} and \\ref{run:P1-1} {=tex}. At each load step, this location is calculated according to the following relation: y_{NA} = \\dfrac{\\epsilon_{ref, i}}{\\kappa_i} - y_{ref} Where \\epsilon_{ref, i} is the axial strain measured at the current reference axis location, y_{ref} . Effects of axial force Cyclic loading 4 {#fig:mc4} 5 {#fig:mc5} 6","title":"Part 1a"},{"location":"examples/A-short-walk/Part-1a/#inelasticity-in-frame-sections","text":"In this section, the response of a nonlinear cross section is analyzed, which is assumed to represent a thin slice of a frame member, for which fiber strains can be considered constant.","title":"Inelasticity in Frame Sections"},{"location":"examples/A-short-walk/Part-1a/#part-a-t-section","text":"Output = Hw12P1A(nft, nwl, SIntTyp, Hk, yc, N_Np, Tmax, LoadOpt)","title":"Part A: T-Section"},{"location":"examples/A-short-walk/Part-1a/#solution-stability-under-perfect-plasticity","text":"{#fig:mc1} fig. 1 presents the moment-curvature response for the first two cases, which utilize perfectly-pastic and effectively plastic ( H_k = 10^{-9} ) materials, respectively. Additionally, this figure tracks the movement of the neutral axis location throughout the moment curvature analysis for runs \\ref{run:P1-0} {=tex} and \\ref{run:P1-1} {=tex}. At each load step, this location is calculated according to the following relation: y_{NA} = \\dfrac{\\epsilon_{ref, i}}{\\kappa_i} - y_{ref} Where \\epsilon_{ref, i} is the axial strain measured at the current reference axis location, y_{ref} .","title":"Solution stability under perfect plasticity"},{"location":"examples/A-short-walk/Part-1a/#effects-of-axial-force","text":"","title":"Effects of axial force"},{"location":"examples/A-short-walk/Part-1a/#cyclic-loading","text":"","title":"Cyclic loading"},{"location":"examples/A-short-walk/Part-1a/#4","text":"{#fig:mc4}","title":"4"},{"location":"examples/A-short-walk/Part-1a/#5","text":"{#fig:mc5}","title":"5"},{"location":"examples/A-short-walk/Part-1a/#6","text":"","title":"6"},{"location":"examples/A-short-walk/Part-1b/","text":"Part B: Rectangular Section This problem was used to study some possible applications of automatic differentiation to inelastic section analysis. Using a differentiable programming framework, a return-mapping algorithm was implemented which accounts for linear or nonlinear isotropic hardening, and basic kinematic hardening. This algorithm is called to evaluate cross sectional forces for a given strain distribution, and this procedure is differentiated with forward-mode automatic differentiation to yield the tangent stiffness of the cross section. plastic surface Experiment I: O-A-B-O {width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {=html} <!-- ![Strain and stiffness history for load path O-A-B-O](docs/img/p1/strain-stiffness-1-4.png){#fig:ssh-oabo} --> Experiment II: O-A-B-C-O {width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {#fig:ssh-oabco}","title":"Part 1b"},{"location":"examples/A-short-walk/Part-1b/#part-b-rectangular-section","text":"This problem was used to study some possible applications of automatic differentiation to inelastic section analysis. Using a differentiable programming framework, a return-mapping algorithm was implemented which accounts for linear or nonlinear isotropic hardening, and basic kinematic hardening. This algorithm is called to evaluate cross sectional forces for a given strain distribution, and this procedure is differentiated with forward-mode automatic differentiation to yield the tangent stiffness of the cross section. plastic surface","title":"Part B: Rectangular Section"},{"location":"examples/A-short-walk/Part-1b/#experiment-i-o-a-b-o","text":"{width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {=html} <!-- ![Strain and stiffness history for load path O-A-B-O](docs/img/p1/strain-stiffness-1-4.png){#fig:ssh-oabo} -->","title":"Experiment I: O-A-B-O"},{"location":"examples/A-short-walk/Part-1b/#experiment-ii-o-a-b-c-o","text":"{width=\"60%,\" height=\"60%\"} {width=\"60%,\" height=\"60%\"} {#fig:ssh-oabco}","title":"Experiment II: O-A-B-C-O"},{"location":"examples/A-short-walk/Part-2/","text":"Inelasticity in Frame Members Output = Hw12P2A( Elem, Hkr , ) Output = Hw12P2B( EIntType, Hkr, SIntTyp,nfl,nwl,nIP) Concentrated plasticity {#fig:cpcol} The cyclic response of two concentrated plasticity elements is compared in fig. 1. Under the conditions of this analysis, the LHNMYS element appears to very closely approximate the true plastic limit capacity of the cross section, shown in red in fig. 1 (a). However, it should be noted that the \"exact\" surface which is depicted here is only representative of a single cross section slice, and not neccessarily the full column. The lack of any axial-moment interaction in the OneComp element is very evident in from plots. The additional computational time required by the LHNMYS element appears to be considerable, but it remains to be seen how this time demand will scale to larger models. Distributed inelasticity","title":"Part 2"},{"location":"examples/A-short-walk/Part-2/#inelasticity-in-frame-members","text":"Output = Hw12P2A( Elem, Hkr , ) Output = Hw12P2B( EIntType, Hkr, SIntTyp,nfl,nwl,nIP)","title":"Inelasticity in Frame Members"},{"location":"examples/A-short-walk/Part-2/#concentrated-plasticity","text":"{#fig:cpcol} The cyclic response of two concentrated plasticity elements is compared in fig. 1. Under the conditions of this analysis, the LHNMYS element appears to very closely approximate the true plastic limit capacity of the cross section, shown in red in fig. 1 (a). However, it should be noted that the \"exact\" surface which is depicted here is only representative of a single cross section slice, and not neccessarily the full column. The lack of any axial-moment interaction in the OneComp element is very evident in from plots. The additional computational time required by the LHNMYS element appears to be considerable, but it remains to be seen how this time demand will scale to larger models.","title":"Concentrated plasticity"},{"location":"examples/A-short-walk/Part-2/#distributed-inelasticity","text":"","title":"Distributed inelasticity"},{"location":"examples/A-short-walk/Part-3/","text":"Nonlinear Static Analysis {#sec:nsa} A nonlinear static analysis of an 8-story framed structure is performed useing a function with the following handle: Output = Hw12P3(Geom, Column, Dlam0, nostep, Hkr) In this function, Geom specifies the frame element geometric stiffness ( linear , PDelta or corotational ). The argument Column is used to specify the finite element formulation used in the vertical elements of the model. For the purpose of this study, and that of sec. \u00bfsec:4-nta? \\ref{sec:4-nta} {=tex} ,all girders are modeled using the Inel2dFrm_wOneComp formulation. Inelastic without interaction {#fig:lr1} The pushover curves for two cases are presented in fig. 1, which consider two different concentrated plasticity elements. The zoomed field indicates that the curves are essentially identical. 2 The pushover curves for all prescribed transient analysis cases are presented above. The legend indicates the element name, along with the length of time required by the analysis to conclude.","title":"Part 3"},{"location":"examples/A-short-walk/Part-3/#nonlinear-static-analysis-secnsa","text":"A nonlinear static analysis of an 8-story framed structure is performed useing a function with the following handle: Output = Hw12P3(Geom, Column, Dlam0, nostep, Hkr) In this function, Geom specifies the frame element geometric stiffness ( linear , PDelta or corotational ). The argument Column is used to specify the finite element formulation used in the vertical elements of the model. For the purpose of this study, and that of sec. \u00bfsec:4-nta? \\ref{sec:4-nta} {=tex} ,all girders are modeled using the Inel2dFrm_wOneComp formulation.","title":"Nonlinear Static Analysis {#sec:nsa}"},{"location":"examples/A-short-walk/Part-3/#inelastic-without-interaction","text":"{#fig:lr1} The pushover curves for two cases are presented in fig. 1, which consider two different concentrated plasticity elements. The zoomed field indicates that the curves are essentially identical.","title":"Inelastic without interaction"},{"location":"examples/A-short-walk/Part-3/#2","text":"The pushover curves for all prescribed transient analysis cases are presented above. The legend indicates the element name, along with the length of time required by the analysis to conclude.","title":"2"},{"location":"examples/A-short-walk/Part-4/","text":"Nonlinear Transient Analysis {#sec:4-nta} [output,Model] = Hw12P4(Geom, Column, Factor) Inelastic without interaction Figure \\ref{fig:c1-1} {=tex} 2 3 4 Other","title":"Part 4"},{"location":"examples/A-short-walk/Part-4/#nonlinear-transient-analysis-sec4-nta","text":"[output,Model] = Hw12P4(Geom, Column, Factor)","title":"Nonlinear Transient Analysis {#sec:4-nta}"},{"location":"examples/A-short-walk/Part-4/#inelastic-without-interaction","text":"Figure \\ref{fig:c1-1} {=tex}","title":"Inelastic without interaction"},{"location":"examples/A-short-walk/Part-4/#2","text":"","title":"2"},{"location":"examples/A-short-walk/Part-4/#3","text":"","title":"3"},{"location":"examples/A-short-walk/Part-4/#4","text":"","title":"4"},{"location":"examples/A-short-walk/Part-4/#other","text":"","title":"Other"},{"location":"sch/","text":"Post Expand all Collapse all Type: array of object Each item of this array must be: Type: object Elem Required Any of Option 1 Option 2 Type: array of object Each item of this array must be: Type: object v Required Type: array of number Each item of this array must be: Type: number q Required Type: array of number Each item of this array must be: Type: number Sec Required Type: object Mat Required Type: array of object Each item of this array must be: Type: object eps Required Type: number sig Required Type: number eps_p Required Type: number e Required Type: array of number Each item of this array must be: Type: number s Required Type: array of number Each item of this array must be: Type: number Type: object v Required Type: array of number Each item of this array must be: Type: number q Required Type: array of number Each item of this array must be: Type: number Sec Any of Option 1 Option 2 Type: object Mat Required Type: object e Required Type: array of number Each item of this array must be: Type: number s Required Type: array of number Each item of this array must be: Type: number Type: array of object Each item of this array must be: Type: object Mat Required Same definition as items_Elem_anyOf_i1_Sec_anyOf_i0_Mat e Required Type: array of number Each item of this array must be: Type: number s Required Type: array of number Each item of this array must be: Type: number ve Type: array of number Each item of this array must be: Type: number vp Type: array of number Each item of this array must be: Type: number lamda Required Any of Option 1 Option 2 Type: number Type: array of number Each item of this array must be: Type: number U Required Type: array of number Each item of this array must be: Type: number Pr Required Type: array of number Each item of this array must be: Type: number Udot Required Type: array of number Each item of this array must be: Type: number Uddot Required Type: array of number Each item of this array must be: Type: number Time Required Type: number","title":"Post"},{"location":"sch/_index/","text":"Model Expand all Collapse all Type: object nn Required Type: integer number of nodes in structural model ndm Required Type: integer dimension of structural model XYZ Required Type: array array holding spacial coordinates of model nodes. Each item of this array must be: Any of Option 1 Option 2 Option 3 Type: number Type: array of number Each item of this array must be: Type: number <span class=\"badge badge-dark v Each item of this array must be: Type: array of number Each item of this array must be: Type: number ne Required Type: integer number of elements in model. CON Required Any of Option 1 Option 2 Type: integer Type: array of integer Each item of this array must be: Type: integer nen Required Any of Option 1 Option 2 Type: integer Type: array of integer Each item of this array must be: Type: integer ndf Required Any of Option 1 Option 2 Type: integer Type: array of integer Each item of this array must be: Type: integer ElemName Required Type: array of string Each item of this array must be: Type: string DOF Required Type: array array with degree of freedom numbering Each item of this array must be: Any of Option 1 Option 2 Type: integer Type: array of integer Each item of this array must be: Type: integer nt Required Type: integer BOUN Required Type: array Each item of this array must be: Any of Option 1 Option 2 Type: integer Type: array of integer Each item of this array must be: Type: integer nf Required Type: integer number of free degrees of freedom ntrm Required Type: integer nq Type: integer","title":"Model Schema"},{"location":"sch/model/","text":"Model Expand all Collapse all Type: object nn Required Type: integer number of nodes in structural model ndm Required Type: integer dimension of structural model XYZ Required Type: array array holding spacial coordinates of model nodes. Each item of this array must be: Any of Option 1 Option 2 Option 3 Type: number Type: array of number Each item of this array must be: Type: number Type: array of array Each item of this array must be: Type: array of number Each item of this array must be: Type: number ne Required Type: integer number of elements in model. CON Required Any of Option 1 Option 2 Type: integer Type: array of integer Each item of this array must be: Type: integer nen Required Any of Option 1 Option 2 Type: integer Type: array of integer Each item of this array must be: Type: integer ndf Required Any of Option 1 Option 2 Type: integer Type: array of integer Each item of this array must be: Type: integer ElemName Required Type: array of string Each item of this array must be: Type: string DOF Required Type: array array with degree of freedom numbering Each item of this array must be: Any of Option 1 Option 2 Type: integer Type: array of integer Each item of this array must be: Type: integer nt Required Type: integer BOUN Required Type: array Each item of this array must be: Any of Option 1 Option 2 Type: integer Type: array of integer Each item of this array must be: Type: integer nf Required Type: integer number of free degrees of freedom ntrm Required Type: integer nq Type: integer","title":"Model"}]}