{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u03a6\u03b5\u03b9\u03b4\u03b9\u03b1\u03c2 FEDEASLab is a modular framework for teaching and research on the simulation of nonlinear structural response under static and dynamic loads, with a reference implementation in Matlab\u00a9 . Get Started Guides View guides that explain the concepts and components of FEDEASLab . Function Index Peruse a comprehensive list of functions provided by FEDEASLab , with detailed explanations of their interfaces. Examples Walk through some examples of the various analysis procedures that FEDEASLab provides. Rapid Development FEDEASLab functions interact through a consistent API that allows users to rapidly implement and explore new finite element and material models. Developer's Manual Post-Processing FEDEASLab provides a powerful post-processing module that is integrated with Matlab's state-of-the art visualization tools. This module is built on top of a simple, unified data model that can be leveraged by users to build insightful illustrations of responses at the model, element, and material level, at any point in a model's lifecycle. Library","title":"Home"},{"location":"FAQ/","text":"Frequently Asked Questions Error using optimoptions. Invalid solver specified. Provide a solver name or handle (such as 'fmincon' or @fminunc). Type DOC OPTIMOPTIONS for a list of solvers. The Matlab user group reports this error for older versions of Matlab or for missing the global optimization toolbox in a more recent version. If you believe that you are using Matlab 2019b make sure that the following directories are on your path - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\optim\\optim - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\optim - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\optim\\optimdemos - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\optim\\problemdef - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\globaloptim - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\globaloptim\\globaloptim - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\globaloptim\\globaloptimdemos in Matlab 2019b (by typing \u201cpath\u201d at the command prompt).","title":"Frequently Asked Questions"},{"location":"elements/","text":"Finite elements This page briefly presents some important families of finite elements. Mixed-Field Elements Beams 3-Field Primal Field Elements Elements in this family are formulated in terms of an unknown displacement field from the total potential energy functional. Lagrange Tensor Product Quad LE4to9nodeQuad Lagrange Serendipity Quad LE4to9nodeQuad Lagrange Hierarchical Quad Lagrange Standard Simplex Lagrange Hierarchical Simplex","title":"Finite elements"},{"location":"terms/","text":"Disclaimer Copyright Copyright \u00a9 2020 The Regents of the University of California. This website and its content (including without limitation the text, computer code, artwork, photographs, images, music, audio material, video material and audio-visual material on this website) is owned by the The Regents of the University of California. Any redistribution or reproduction of part or all of the contents in any form is prohibited other than the following: - You may view this website and the material on this website on a computer or mobile device via a web browser; - You may copy and store this website and the material on this website in your web browser cache memory; - You may print pages from this website for your own use. You may not distribute or commercially exploit the content. Nor may you transmit it or store it in any other website or other form of electronic retrieval system. The automated and/or systematic collection of data from this website is prohibited.","title":"Terms"},{"location":"About/","text":"About FEDEASLab FEDEASLab is a modular Matlab\u00a9 toolbox for the simulation of the nonlinear structural response under static and dynamic loads. The names stands for Finite Elements for Design, Evaluation and Analysis of Structures and pays homage to \u03a6\u03f5\u03b9\u03b4\u03b9\u03b1\u03c2, the creator of the magnificent sculptures for the Parthenon during the golden age of Athens under Pericles. and has been used successfully for the development of new elements and material models, as well as for the simulation of the response of small and large structural models in research and instruction. The toolbox consists of several functions grouped in categories. These functions operate on five basic data structures which represent the model, the loading, the element properties, the state of the structural response, and the parameters of the solution strategy. A sixth data structure is optional and carries post-processing information that can be used for response interpretation and visualization. The process of performing the nonlinear response analysis of a structure under static or transient conditions is broken down into logical steps. Each step is represented by a separate function. With this approach the definition of the model, the element properties and the loading as well as the analysis of the model under the given loading is accomplished with scripts that invoke the individual functions. Alternative solution strategies can be readily explored. Moreover, the user can easily exchange a function to provide additional capabilities. It is equally easy to access the data objects and enhance the information stored in them. A common task is the addition of element and material models. This task is simplified by the consistent function interface used throughout the toolbox. Acknowledgements License","title":"About"},{"location":"About/acknowledgements/","text":"Acknowledgements","title":"Acknowledgements"},{"location":"Functions/","text":"Index A_matrix Fs_matrix InelTruss PlasticAnalysis_wUBT B_matrix GMP1dMat Ks_matrix Q0_vector BbariBbarx_matrix Gauss2d LE2dFrm V0_vector Create_MRFrame H_index LEIso2dMat shape2d Draw_Arrow InelJ2PwLH3dMat Localize ElmLenOr InelLPwLH1dMat PlasticAnalysis_wLBT","title":"Index"},{"location":"Functions/_index/","text":"Index A_matrix Dinel2dFrm_EBwDF InelTruss ReCircSecw1dMat AccelerationIntegral Dinel2dFrm_EBwFF Initialize ReRectSecw1dMat Add_Damping2State Draw_Arrow Initialize_SolStrat S_Check_Global3dEQ Add_Mass2Model Draw_Cube Initialize_State S_DisplMethod Aj_matrix EigenMode Iterate S_ForceMethod BInel2dFrm_wEPLHM ElasticResponseSpectrum Ks_matrix S_InitialStep BInel2dFrm_wEPLHNMYS ElementLoading LE2dFrm S_MomCurvAnalysis B_matrix Event2Event_NLAnalysis LE2dFrm_wPdelta S_MultiStep BbariBbarx_matrix ExtrReshu LE3dFrm S_MultiStep_wLoadHist BilinElastic1dMat Extract_BasicEl2SecState LETruss S_MultiStep_wLoadHistwSD BilinHyst1dMat Extract_El2MatState LSDOF_CentralDifference S_NMAnalysis BilinInel1dMat Extract_El2SecState LSDOF_LinearWilson S_NMAnalysiswSepLoadHist BilinOrOr1dMat Extract_Sec2MatState LSDOF_Newmark S_Transient_MultiStep BilinPkOr1dMat Extract_Str2ElState Label_Model S_Transient_MultiStepwSD CleanStart Fs_matrix Large2du2v_Frm SectionWrapper Condense_MV GMP1dMat Large3du2v_Frm StateDetermination Create_Damping GPYS LinearStep Structure Create_DispCyclewN GeomTran_2dFrm LoadFactorControl SubIncr4ElemntSD Create_LoadHistory GeomTran_3dFrm LoadFactorIncrement TimeIntegrationConstants Create_Loading GeomTran_Truss Localize TranJnt Create_Model Get_HngPos4DefoElem ManderConcr1dMat TransientIncrement Create_MultDispCycleswN Get_ModelScale MaterialWrapper TransientInitialize Create_NodalForces H_index ModalAnalysis TransientIterate Create_NodalMass HomoCircSecw1dMat ModeDecomposition TransientStateDetermination Create_PwForces HomoRectSecw1dMat MultRectSecw1dMat Update_State Create_SimpleModel HomoWFSecw1dMat OneIteration Update_TransientState Create_Units Increment OneTransientIteration V0_vector Create_Window Inel2dFrm PlasticAnalysis kg_2dFrm D_index InelJ2PwLH3dMat Plot_BounCond kg_3dFrm DefGeom_2dFrm InelLPwLH1dMat Print_PDFile kg_Truss DefGeom_3dFrm InelSDOF_Newmark Q0_vector","title":" index"},{"location":"Functions/latest/","text":"FEDEASLab Modules","title":"Release Summary"},{"location":"Functions/latest/Analysis_Functions/","text":"Analysis Functions","title":"Analysis Functions"},{"location":"Functions/latest/Analysis_Functions/Dynamic/","text":"Dynamic Analysis","title":"Dynamic Analysis"},{"location":"Functions/latest/Analysis_Functions/Dynamic/AccelerationIntegral/","text":"latest > Analysis_Functions > Dynamic > AccelerationIntegral Purpose ACCELERATIONINTEGRAL determines displacement and velocity history for given acceleration history Synopsis function [u,udot] = AccelerationIntegral (uddot,Deltat,nstep,u0,udot0) Description ACCELERATIONINTEGRAL determines displacement and velocity history for given acceleration history [U,UDOT] = ACCELERATIONINTEGRAL (UDDOT,DELTAT,NSTEP,U0,UDOT0) function integrates the acceleration history(ies) in array UDDOT to obtain the displacement history(ies) in array U and velocity history(ies) in array UDOT; the time step of the acceleration record is DELTAT and the total number of steps is NSTEP (default=no of acceleration values) the initial displacement is supplied in row vector U0 and the initial velocity in row vector UDOT0 (default=0); histories are arranged columnwise in arrays UDDOT, U and UDOT (column no=history no); the displacement and velocity histories are corrected for zero end values Cross-Reference Information This function calls: This function is called by:","title":"AccelerationIntegral"},{"location":"Functions/latest/Analysis_Functions/Dynamic/EigenMode/","text":"latest > Analysis_Functions > Dynamic > EigenMode Purpose EIGENMODE determines eigenfrequencies and eigenmodes of structural model Synopsis function [omega,Ueig] = EigenMode (Kf,M,nmod) Description EIGENMODE determines eigenfrequencies and eigenmodes of structural model [OMEGA UEIG] = EIGENMODE(KF,M,NMOD) function determines the lowest NMOD (default=all) eigenfrequencies in row vector OMEGA and corresponding eigenmodes in array UEIG for a structure with free dof stiffness matrix KF and free dof lumped mass vector or consistent mass matrix M; the eigenmodes in array UEIG are arranged columnwise (column no=mode no) Cross-Reference Information This function calls: Condense_MV CONDENSE_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom This function is called by: ModalAnalysis MODALANALYSIS determines modal response history for given transient loading Create_Damping CREATE_DAMPING setup damping matrix of structural model","title":"EigenMode"},{"location":"Functions/latest/Analysis_Functions/Dynamic/ElasticResponseSpectrum/","text":"latest > Analysis_Functions > Dynamic > ElasticResponseSpectrum Purpose ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history Synopsis function [D,Psv,Psa] = ElasticResponseSpectrum (Acceleration,T,zeta) Description ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history [D,PSV,PSA] = ELASTICRESPONSESPECTRUM (ACCELERATION,T,ZETA) the function determines the elastic response spectrum for a given acceleration history in data structure ACCELERATION with fields Deltat (time step size) and Value (acceleration value); the periods for the spectrum are specified in row vector T ( default= [0.001 0.1:0.1:5] ); the row vector ZETA contains the damping ratio(s) ( default=0 ); the response spectrum values for the periods in row vector T are returned in arrays D for displacement, PSV for pseudo-velocity, and PSA for pseudo-acceleration with the row number corresponding to the period and the column number to the damping ratio Cross-Reference Information This function calls: LSDOF_LinearWilson LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation This function is called by:","title":"ElasticResponseSpectrum"},{"location":"Functions/latest/Analysis_Functions/Dynamic/InelSDOF_Newmark/","text":"latest > Analysis_Functions > Dynamic > InelSDOF_Newmark Purpose INELSDOF_NEWMARK inelastic response of SDOF system to acceleration history with Newmark\u2019s method Synopsis function [u,udot,uddot,pr] = InelSDOF_Newmark (Deltat,omega,p,InelSDFData,zeta,u0,udot0) Description INELSDOF_NEWMARK inelastic response of SDOF system to acceleration history with Newmark's method [U,UDOT,UDDOT,PR] = INELSDOF_NEWMARK (DELT,OMEGA,P,INELSDFDATA,ZETA,U0,UDOT0) the function determines the transient response history of an inelastic SDOF system to the acceleration history (force/mass) in vector P with Newmark's constant average acceleration method (1959) with time step of integration DELTAT; row vector OMEGA contains the eigenfrequency(ies) of the SDOF system, and row vector ZETA the optional damping ratio(s) (default = 0); the optional initial conditions are specified in row vectors U0 for the displacement and UDOT0 for the velocity (default values for both = 0); INELSDFDATA carries the force-deformation properties for the inelastic SDOF system: MatName = function name for 1d relation (default = InelLPwLH1dMat) uy = yield displacement (default = 1) eta = post-yield stiffness ratio (default = 0) the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT, the acceleration history(ies) in array UDDOT, and the resisting force history(ies) in array PR (also in the form force/mass!); these arrays are arranged columnwise (column no=frequency no) Cross-Reference Information This function calls: This function is called by:","title":"InelSDOF_Newmark"},{"location":"Functions/latest/Analysis_Functions/Dynamic/LSDOF_CentralDifference/","text":"latest > Analysis_Functions > Dynamic > LSDOF_CentralDifference Purpose LSDOF_CENTRALDIFFERENCE determines the response of linear SDOF system to acceleration history with central difference method Synopsis function [u,udot,uddot] = LSDOF_CentralDifference (Deltat,omega,p,zeta,u0,udot0) Description LSDOF_CENTRALDIFFERENCE determines the response of linear SDOF system to acceleration history with central difference method [U,UDOT,UDDOT] = LSDOF_CENTRALDIFFERENCE (DELTAT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of linear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; the central difference method is used for the numerical integration of the equations of motion; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT and the acceleration history(ies) in array UDDOT arranged columnwise (column no=frequency no); Reference: A.K.Chopra, Dynamics of Structures, 2nd edition, pp. 171-174 Cross-Reference Information This function calls: This function is called by:","title":"LSDOF_CentralDifference"},{"location":"Functions/latest/Analysis_Functions/Dynamic/LSDOF_LinearWilson/","text":"latest > Analysis_Functions > Dynamic > LSDOF_LinearWilson Purpose LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation Synopsis function [u,udot,uddot] = LSDOF_LinearWilson (Deltat,omega,p,zeta,u0,udot0) Description LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation [U,UDOT,UDDOT] = LSDOF_LINEARWILSON (DELTAT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of linear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; the function integrates exactly the equations of motion for piecewise linear interpolation of excitation; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT and the acceleration history(ies) in array UDDOT arranged columnwise (column no=frequency no); Reference: A.K.Chopra, Dynamics of Structures, 2nd edition, pp. 167-171 Cross-Reference Information This function calls: This function is called by: ElasticResponseSpectrum ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history ModalAnalysis MODALANALYSIS determines modal response history for given transient loading","title":"LSDOF_LinearWilson"},{"location":"Functions/latest/Analysis_Functions/Dynamic/LSDOF_Newmark/","text":"latest > Analysis_Functions > Dynamic > LSDOF_Newmark Purpose LSDOF_NEWMARK determines the response of linear SDOF system to acceleration history with Newmark\u2019s method Synopsis function [u,udot,uddot] = LSDOF_Newmark (Deltat,omega,p,zeta,u0,udot0) Description LSDOF_NEWMARK determines the response of linear SDOF system to acceleration history with Newmark's method [U,UDOT,UDDOT] = LSDOF_NEWMARK (DELTAT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of linear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; N.M. Newmark's method from 1959 is used for the numerical integration of the equations of motion; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT and the acceleration history(ies) in array UDDOT arranged columnwise (column no=frequency no); Reference: A.K.Chopra, Dynamics of Structures, 2nd edition, pp. 174-180 Cross-Reference Information This function calls: This function is called by:","title":"LSDOF_Newmark"},{"location":"Functions/latest/Analysis_Functions/Dynamic/ModalAnalysis/","text":"latest > Analysis_Functions > Dynamic > ModalAnalysis Purpose MODALANALYSIS determines modal response history for given transient loading Synopsis function [omega,Ueig,Y_t,Ydot_t,Yddot_t] = ModalAnalysis (option,Kf,M,Loading,Deltat,zeta,nmod) Description MODALANALYSIS determines modal response history for given transient loading [OMEGA,UEIG,Y_T,YDOT_T,YDDOT_T] = MODALANALYSIS (OPTION,KF,M,LOADING,DELTAT,ZETA,NMOD) the function determines the response history of a multi-dof structural model with stiffness matrix at free dofs KF and consistent mass matrix or lumped mass vector M under given transient loading in data structure LOADING for the lowest NMOD (default=all) eigenmodes or NMOD Ritz vectors with damping ratios in row vector ZETA (default=0); the time step of integration is DELTAT; OPTION = 'eig' uses nmod eigenvectors, while OPTION = 'Ritz' uses nmod Ritz vectors in the modal analysis; the function returns NMOD eigenfrequencies of the structural model in row vector OMEGA, the eigenmode or Ritz vector shapes in array UEIG arranged columnwise (column no=mode no), and the response history of each eigenmode or Ritz vector in array Y_T arranged columnwise (column no=mode no), the velocity history of each eigenmode or Ritz vector in array YDOT_t, and the acceleration history of each eigenmode or Ritz vector in array YDDOT_t the data structure LOADING has the following fields LOADING.Uddref = vector of reference acceleration values at model dofs Pref = vector of reference load values at model dofs U0 = vector of initial displacement values at model dofs Udot0 = vector of initial velocity values at model dofs FrcHst = force time history in field Value AccHst = acceleration time history in field Value Cross-Reference Information This function calls: EigenMode EIGENMODE determines eigenfrequencies and eigenmodes of structural model LSDOF_LinearWilson LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation ModeDecomposition MODEDECOMPOSITION determines eigenmode participation factors of given vector V This function is called by:","title":"ModalAnalysis"},{"location":"Functions/latest/Analysis_Functions/Dynamic/ModeDecomposition/","text":"latest > Analysis_Functions > Dynamic > ModeDecomposition Purpose MODEDECOMPOSITION determines eigenmode participation factors of given vector V Synopsis function [Mmod,Ymod,Vmod] = ModeDecomposition (M,Ueig,V) Description MODEDECOMPOSITION determines eigenmode participation factors of given vector V [MMOD,YMOD,VMOD] = MODEDECOMPOSITION (M,UEIG,V) the function determines the mode participation factors of vector V for a structural model with free dof consistent mass matrix or lumped mass vector M for the modes in array UEIG arranged columnwise (column no=mode no); the function returns the modal mass terms in row vector MMOD, the mode participation factors in row vector YMOD and the inertial force decomposition vectors in array VMOD arranged columwise the size of the consistent mass matrix or the length of lumped mass vector M, the length of vector V and the number of rows of arrays UEIG and VMOD is equal to the number of free dofs of the structural model; the length of row vectors MMOD and YMOD is equal to the number of non-zero mass terms in the lumped mass vector M or the number of free dofs of the structural model for the case of consistent mass matrix M Cross-Reference Information This function calls: This function is called by: ModalAnalysis MODALANALYSIS determines modal response history for given transient loading","title":"ModeDecomposition"},{"location":"Functions/latest/Analysis_Functions/Dynamic/OneTransientIteration/","text":"latest > Analysis_Functions > Dynamic > OneTransientIteration Purpose ONETRANSIENTITERATION single equilibrium iteration under transient conditions Synopsis function [State,SolStrat] = OneTransientIteration (Model,ElemData,Loading,State,SolStrat) Description ONETRANSIENTITERATION single equilibrium iteration under transient conditions [STATE,SOLSTRAT] = ONETRANSIENTITERATION (MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function performs a single equilibrium iteration under the applied loading and determines the corresponding displacement increments under transient conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories Cross-Reference Information This function calls: TimeIntegrationConstants TIMEINTEGRATIONCONSTANTS constants of time integration strategy TransientStateDetermination TRANSIENTSTATEDETERMINATION structure state determination under transient conditions This function is called by: TransientIterate TRANSIENTITERATE equilibrium iterations until convergence under transient conditions","title":"OneTransientIteration"},{"location":"Functions/latest/Analysis_Functions/Dynamic/TimeIntegrationConstants/","text":"latest > Analysis_Functions > Dynamic > TimeIntegrationConstants Purpose TIMEINTEGRATIONCONSTANTS constants of time integration strategy Synopsis function Int_Constants = TimeIntegrationConstants (TimeStrat,option) Description TIMEINTEGRATIONCONSTANTS constants of time integration strategy INT_CONSTANTS = TIMEINTEGRATIONCONSTANTS (TIMESTRAT) the function determines the constants of the time integration strategy speficied in field Type of data structure TIMESTRAT and returns them in vector INT_CONSTRANTS the data structure TIMESTRAT contains information about the integration strategy in fiels DELTAT = time step (scalar) TYPE = name of integration method (character variable) PARAM = parameters of integration method (vector) Cross-Reference Information This function calls: This function is called by: OneTransientIteration ONETRANSIENTITERATION single equilibrium iteration under transient conditions TransientIncrement TRANSIENTINCREMENT load incrementation and state advance under transient conditions Update_TransientState UPDATE_TRANSIENTSTATE final state determination under transient conditions, reset increments and history","title":"TimeIntegrationConstants"},{"location":"Functions/latest/Analysis_Functions/Dynamic/TransientIncrement/","text":"latest > Analysis_Functions > Dynamic > TransientIncrement Purpose TRANSIENTINCREMENT load incrementation and state advance under transient conditions Synopsis function [State,SolStrat] = TransientIncrement(Model,ElemData,Loading,State,SolStrat) Description TRANSIENTINCREMENT load incrementation and state advance under transient conditions [STATE,SOLSTRAT] = TRANSIENTINCREMENT(MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function increments the applied loading and determines the corresponding displacement increments under transient conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories Cross-Reference Information This function calls: TimeIntegrationConstants TIMEINTEGRATIONCONSTANTS constants of time integration strategy TransientStateDetermination TRANSIENTSTATEDETERMINATION structure state determination under transient conditions LoadFactorIncrement LOADFACTORINCREMENT load factor increment(s) for given load histories This function is called by: S_Transient_MultiStep % S_TRANSIENT_MULTISTEP script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD script for multi-step transient analysis under given load history(ies)","title":"TransientIncrement"},{"location":"Functions/latest/Analysis_Functions/Dynamic/TransientInitialize/","text":"latest > Analysis_Functions > Dynamic > TransientInitialize Purpose TRANSIENTINITIALIZE initialize State variables for transient response analysis Synopsis function State = TransientInitialize (Model,ElemData,Loading,State) Description TRANSIENTINITIALIZE initialize State variables for transient response analysis STATE = TRANSIENTINITIALIZE(MODEL,ELEMDATA,LOADING,STATE) the function initializes variables in STATE relevant for transient response analysis and returns an updated data structure STATE; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force, imposed displacement, and imposed acceleration patterns with corresponding load histories; specifically the function adds the following fields to STATE needed for transient analysis STATE lamda = row vector of current load factors Pi = initial force vector (for load sequences) Time = pseudo-or real time counter Ugddot = support acceleration vector C = damping matrix Cross-Reference Information This function calls: This function is called by: S_Transient_MultiStep % S_TRANSIENT_MULTISTEP script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD script for multi-step transient analysis under given load history(ies)","title":"TransientInitialize"},{"location":"Functions/latest/Analysis_Functions/Dynamic/TransientIterate/","text":"latest > Analysis_Functions > Dynamic > TransientIterate Purpose TRANSIENTITERATE equilibrium iterations until convergence under transient conditions Synopsis function [State,SolStrat] = TransientIterate (Model,ElemData,Loading,State,SolStrat) Description TRANSIENTITERATE equilibrium iterations until convergence under transient conditions [STATE,SOLSTRAT] = TRANSIENTITERATE (MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function performs equilibrium iterations until convergence under the applied loading and determines the corresponding displacement increments under transient conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories Cross-Reference Information This function calls: OneTransientIteration ONETRANSIENTITERATION single equilibrium iteration under transient conditions This function is called by: S_Transient_MultiStep % S_TRANSIENT_MULTISTEP script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD script for multi-step transient analysis under given load history(ies)","title":"TransientIterate"},{"location":"Functions/latest/Analysis_Functions/Dynamic/TransientStateDetermination/","text":"latest > Analysis_Functions > Dynamic > TransientStateDetermination Purpose TRANSIENTSTATEDETERMINATION structure state determination under transient conditions Synopsis function State = TransientStateDetermination (StifUpdt,Model,ElemData,State,Int_Constants) Description TRANSIENTSTATEDETERMINATION structure state determination under transient conditions STATE = TRANSIENTSTATEDETERMINATION (STIFUPDT,MODEL,ELEMDATA,STATE) the function updates the structure resisting force vector in STATE for the current state of the structure as described by the displacement vector and its increments as as well as by the history variables in STATE; the effective resisting force and tangent stiffness matrix depend on integration constants in cell array INT_CONSTANTS depending on the value of character variable STIFUPDT the function also updates the tangent stiffness matrix in STATE MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties Cross-Reference Information This function calls: Structure STRUCTURE performs requested action on group of elements This function is called by: OneTransientIteration ONETRANSIENTITERATION single equilibrium iteration under transient conditions TransientIncrement TRANSIENTINCREMENT load incrementation and state advance under transient conditions","title":"TransientStateDetermination"},{"location":"Functions/latest/Analysis_Functions/Dynamic/Update_TransientState/","text":"latest > Analysis_Functions > Dynamic > Update_TransientState Purpose UPDATE_TRANSIENTSTATE final state determination under transient conditions, reset increments and history Synopsis function State = Update_TransientState (Model,ElemData,State,SolStrat) Description UPDATE_TRANSIENTSTATE final state determination under transient conditions, reset increments and history STATE = UPDATE_TRANSIENTSTATE (MODEL,ELEMDATA,STATE,SOLSTRAT) the function performs a final state determination for the current state of the structure as described by the displacement vector and its increments as well as by the history variables in STATE; it then updates the structure resisting forces, and history variables as well as the nodal velocities and accelerations in STATE and then sets the displacement increments in STATE to zero data structure SOLSTRAT carries information about the time integration scheme in field TimeStrat Cross-Reference Information This function calls: TimeIntegrationConstants TIMEINTEGRATIONCONSTANTS constants of time integration strategy Structure STRUCTURE performs requested action on group of elements This function is called by: S_Transient_MultiStep % S_TRANSIENT_MULTISTEP script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD script for multi-step transient analysis under given load history(ies)","title":"Update_TransientState"},{"location":"Functions/latest/Analysis_Functions/Static/","text":"Static Analysis","title":"Static Analysis"},{"location":"Functions/latest/Analysis_Functions/Static/Event2Event_NLAnalysis/","text":"latest > Analysis_Functions > Static > Event2Event_NLAnalysis Purpose EVENT2EVENT_NLANALYSIS event-to-event incremental analysis with linear or P-DELTA geometry Synopsis function [lamdah,Qh,Ufh,Vph,Iph] = Event2Event_NLAnalysis (opt,Model,ElemData,Loading,ConvPar) Description EVENT2EVENT_NLANALYSIS event-to-event incremental analysis with linear or P-DELTA geometry [LAMDAH,QH,UFH,VPH,IPH] = EVENT2EVENT_NLANALYSIS (OPT,MODEL,ELEMDATA,LOADING) the function determines the load factor history LAMDAH of a structural model for an event-to-event analysis under loading information in data structure LOADING; the latter should have two fields, Pref for the load pattern to be factored, and Pcf for the load pattern to remain constant; each row of the load factor history vector corresponds to a different event; OPT is a character variable with values of LG for linear, or NG for nonlinear geometry the data structure MODEL contains information about the structural model, and element property information is provided in cell array ELEMDATA the function returns the load factor history for each event in row vector LAMDAH, the basic force history in array QH, the free global dof displacement history in array UFH, the plastic element deformation history in array VPH, and the history of the index of plastic hinge locations in array IPH; in the array UFH the row number corresponds to the degree of freedom number, while in the arrays QH, VPH, and IPH the row number corresponds to the basic force number; in the history arrays QH, UFH, VPH,and IPH the column number corresponds to the event number ----------------------------------------------------------------------------------------- developed by Chin-Long Lee using mixed-formulation and consistent Newton-Raphson 01/08 ----------------------------------------------------------------------------------------- Cross-Reference Information This function calls: A_matrix A_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements Aj_matrix AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements Localize LOCALIZE returns the node coordinates and id array of element Q0_vector Q0_VECTOR initial (fixed-end) force vector for structural model This function is called by:","title":"Event2Event_NLAnalysis"},{"location":"Functions/latest/Analysis_Functions/Static/Increment/","text":"latest > Analysis_Functions > Static > Increment Purpose INCREMENT load incrementation and state advance under static conditions Synopsis function [State,SolStrat] = Increment(Model,ElemData,Loading,State,SolStrat) Description INCREMENT load incrementation and state advance under static conditions [STATE,SOLSTRAT] = INCREMENT(MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function increments the applied loading and determines the corresponding displacement increments under static conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories Cross-Reference Information This function calls: LoadFactorControl LOADFACTORCONTROL determine load factor increment under load control strategy LoadFactorIncrement LOADFACTORINCREMENT load factor increment(s) for given load histories StateDetermination STATEDETERMINATION structure state determination under static conditions This function is called by: S_InitialStep % S_INITIALSTEP script for initial step of incremental analysis S_MultiStep % S_MULTISTEP script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD script for multi-step incremental analysis under given load history(ies)","title":"Increment"},{"location":"Functions/latest/Analysis_Functions/Static/Initialize/","text":"latest > Analysis_Functions > Static > Initialize Purpose INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT Synopsis function [State,SolStrat] = Initialize (Model,ElemData,Loading,State,SolStrat) Description INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT [STATE,SOLSTRAT] = INITIALIZE(MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function initializes analysis variables in STATE and load control parameters in SOLSTRAT (only if IncrStrat.LFCtrl = 'yes'); the function returns updated data structures STATE and SOLSTRAT: MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories; specifically the function adds the following fields to STATE STATE lamda = row vector of current load factors Pi = initial force vector (for load sequences) Time = pseudo-or real time counter the function also adds the field HIST to SOLSTRAT with subfields Sp0 and sgnK0 for adjusting the load factor under load incrementation, if IncrStrat.LFCtrl='yes' Cross-Reference Information This function calls: LoadFactorControl LOADFACTORCONTROL determine load factor increment under load control strategy Structure STRUCTURE performs requested action on group of elements This function is called by: S_InitialStep % S_INITIALSTEP script for initial step of incremental analysis S_MultiStep % S_MULTISTEP script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD script for multi-step incremental analysis under given load history(ies)","title":"Initialize"},{"location":"Functions/latest/Analysis_Functions/Static/Initialize_SolStrat/","text":"latest > Analysis_Functions > Static > Initialize_SolStrat Purpose INITIALIZE_SOLSTRAT default values for most solution strategy parameters Synopsis function SolStrat = Initialize_SolStrat Description INITIALIZE_SOLSTRAT default values for most solution strategy parameters SOLSTRAT = INITIALIZE_SOLSTRAT the function assigns default values to most solution strategy parameters and creates the data structure SOLSTRAT with corresponding information; SOLSTRAT contains three substructures: INCRSTRAT, ITERSTRAT and TIMESTRAT; these data structures contain the following fields INCRSTRAT Dlam0 = initial load factor increment(s) (row vector) Deltat = pseudo-time increment (scalar) StifUpdt = stiffness update (character variable) LFCtrl = load control (character variable) LCType = load control type gamma = exponent of current stiffness parameter method of load control ITERSTRAT StifUpdt = stiffness update (character variable) Type = 'NR', 'ModNR', 'Krylov', 'LnSrch' LFCtrl = load control (character variable) LCType = load control type LCParam = load control parameters maxiter = maximum number of iterations for equilibrium (scalar) tol = tolerance for satifaction of equilibrium equations (scalar) TIMESTRAT Delta = time step of transient analysis (scalar) Type = type of numerical integration (character variable) Param = parameters of numerical time integration scheme (row vector) Cross-Reference Information This function calls: This function is called by: S_MomCurvAnalysis % S_MOMCURVANALYSIS script for moment-curvature analysis under constant axial force S_NMAnalysis % S_NMANALYSIS script for incremental application of N-M pair on section S_NMAnalysiswSepLoadHist % S_NMANALYSISwSEPLOADHIST script for application N and M with separate load histories","title":"Initialize_SolStrat"},{"location":"Functions/latest/Analysis_Functions/Static/Initialize_State/","text":"latest > Analysis_Functions > Static > Initialize_State Purpose INITIALIZE_STATE initialize state variables of structural model and create STATE Synopsis function State = Initialize_State (Model,ElemData) Description INITIALIZE_STATE initialize state variables of structural model and create STATE INITIALIZE_STATE (MODEL,ELEMDATA) function initializes the displacement, velocity and acceleration vectors for the structural model with information in data structure MODEL; the cell array ELEMDATA supplies the element property data for element history initialization; the function returns data structure STATE with the following fields STATE.U = global dof total displacement vector DU = global dof displacement increments from last convergence DDU = global dof displacement increments from last iteration Udot = global dof velocity vector Udotdot = global dof acceleration vector Past = data structure of last element history variables in cell array Elem Pres = data structure of current element history variables in cell array Elem Cross-Reference Information This function calls: Structure STRUCTURE performs requested action on group of elements This function is called by: LinearStep LINEARSTEP sets up and solves the structure equilibrium equations for single load step S_InitialStep % S_INITIALSTEP script for initial step of incremental analysis S_MultiStep % S_MULTISTEP script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD script for multi-step incremental analysis under given load history(ies) S_Transient_MultiStep % S_TRANSIENT_MULTISTEP script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD script for multi-step transient analysis under given load history(ies)","title":"Initialize_State"},{"location":"Functions/latest/Analysis_Functions/Static/Iterate/","text":"latest > Analysis_Functions > Static > Iterate Purpose ITERATE equilibrium iterations until convergence under static conditions Synopsis function [State,SolStrat] = Iterate (Model,ElemData,Loading,State,SolStrat) Description ITERATE equilibrium iterations until convergence under static conditions [STATE,SOLSTRAT] = ITERATE(MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function performs equilibrium iterations until convergence under the applied loading and determines the corresponding displacement increments under static conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories Cross-Reference Information This function calls: OneIteration ONEITERATION single equilibrium iteration under static conditions This function is called by: S_InitialStep % S_INITIALSTEP script for initial step of incremental analysis S_MultiStep % S_MULTISTEP script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD script for multi-step incremental analysis under given load history(ies)","title":"Iterate"},{"location":"Functions/latest/Analysis_Functions/Static/LinearStep/","text":"latest > Analysis_Functions > Static > LinearStep Purpose LINEARSTEP sets up and solves the structure equilibrium equations for single load step Synopsis function State = LinearStep (Model,ElemData,Loading) Description LINEARSTEP sets up and solves the structure equilibrium equations for single load step STATE = LINEARSTEP (MODEL,ELEMDATA,LOADING) function sets up and solves the structure equilibrium equations for single load step by direct assembly of element stiffness matrices; the structural response is contained in data structure STATE with fields U for the global dof displacement vector, Pr for the resisting force vector and Kf for the stiffness matrix at the free dofs of the structure; information about the structural model is supplied in data structure MODEL, the element properties are supplied in cell array ELEMDATA and loading information is given in data structure LOADING with fields Pref and Uref for a single applied force and a single imposed displacement vector, respectively Cross-Reference Information This function calls: Initialize_State INITIALIZE_STATE initialize state variables of structural model and create STATE Structure STRUCTURE performs requested action on group of elements This function is called by:","title":"LinearStep"},{"location":"Functions/latest/Analysis_Functions/Static/LoadFactorControl/","text":"latest > Analysis_Functions > Static > LoadFactorControl Purpose LOADFACTORCONTROL determine load factor increment under load control strategy Synopsis function SolStrat = LoadFactorControl (action,SolStrat,detKf,Pref,Ut,DUr) Description LOADFACTORCONTROL determine load factor increment under load control strategy SOLSTRAT = LOADFACTORCONTROL(ACTION,SOLSTRAT,KL,KU,PREF,UT,DUR) the function determines the load factor increment in field DLAM of data structure SOLSTRAT under the specified load control strategy in field LCTYPE of SOLSTRAT; ACTION is a character variable that distinguishes various load control stages, i.e. initialization, incrementation and iteration; accordingly, the choices are ACTION = 'init': initialization of load control parameters in field HIST of SOLSTRAT ACTION = 'incr': determination of DLAM during load incrementation; parameter update in HIST ACTION = 'iter': determination of DLAM during equilibrium iteration (the following load control methods are currently supported: 'MinDispNorm' and 'KeyDOF' KL and KU are the lower and upper diagonal LU components of the tangent stiffness matrix, PREF is the reference force vector and UT the corresponding displacement vector under PREF, DUR is the vector of displacement increments under the current unbalance force vector Cross-Reference Information This function calls: This function is called by: Increment INCREMENT load incrementation and state advance under static conditions Initialize INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT OneIteration ONEITERATION single equilibrium iteration under static conditions","title":"LoadFactorControl"},{"location":"Functions/latest/Analysis_Functions/Static/LoadFactorIncrement/","text":"latest > Analysis_Functions > Static > LoadFactorIncrement Purpose LOADFACTORINCREMENT load factor increment(s) for given load histories Synopsis function Dlam = LoadFactorIncrement (History,Time,Deltat) Description LOADFACTORINCREMENT load factor increment(s) for given load histories DLAM = LOADFACTORINCREMENT(HISTORY,TIME,DELTAT) the function determines the load factor increment(s) in vector DLAM for the number of time histories in data structure HISTORY with fields TIME and VALUE; linear interpolation with current time TIME and time step DELTAT gives the load factor increment(s) Cross-Reference Information This function calls: This function is called by: TransientIncrement TRANSIENTINCREMENT load incrementation and state advance under transient conditions Increment INCREMENT load incrementation and state advance under static conditions","title":"LoadFactorIncrement"},{"location":"Functions/latest/Analysis_Functions/Static/OneIteration/","text":"latest > Analysis_Functions > Static > OneIteration Purpose ONEITERATION single equilibrium iteration under static conditions Synopsis function [State,SolStrat] = OneIteration (Model,ElemData,Loading,State,SolStrat) Description ONEITERATION single equilibrium iteration under static conditions [STATE,SOLSTRAT] = ONEITERATION (MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function performs a single equilibrium iteration under the applied loading and determines the corresponding displacement increments under static conditions; information about the state of the structure is updated in STATE and information about the parameters of the solution strategy is updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns with corresponding load histories Cross-Reference Information This function calls: LoadFactorControl LOADFACTORCONTROL determine load factor increment under load control strategy StateDetermination STATEDETERMINATION structure state determination under static conditions This function is called by: Iterate ITERATE equilibrium iterations until convergence under static conditions","title":"OneIteration"},{"location":"Functions/latest/Analysis_Functions/Static/PlasticAnalysis/","text":"latest > Analysis_Functions > Static > PlasticAnalysis Purpose PLASTICANALYSIS collapse load factor, basic forces, and collapse mechanism by plastic analysis Synopsis function [lamdac,Qc,DUf,DVpl] = PlasticAnalysis (Model,ElemData,Loading,LPOpt) Description PLASTICANALYSIS collapse load factor, basic forces, and collapse mechanism by plastic analysis [LAMDAC,QC,DUF,DVPL] = PLASTICANALYSIS (MODEL,ELEMDATA,LOADING,LPOPT) the function determines the collapse load factor LAMDAC of a structural model under loading information in data structure LOADING; the latter should have the field PREF for the load pattern to be factored, and may include a field Pcf for the load pattern to remain constant; the data structure MODEL contains information about the structural model, and element property information is provided in cell array ELEMDATA; the function also returns the basic forces at incipient collapse in vector QC, the displacement increments of the collapse mechanism in vector DUF, and the plastic deformation increments of the collapse mechanism in vector DVPL LPOPT is an optional data structure for selecting options of the linear programming algorithm; these options are discussed in the Matlab manual pages for the linprog function the function uses 'dual-simplex' and 'LargeScale' by default; the tolerance variable tol refers to OptimalityTolerance of the dual-simplex algorithm with default value 1e-7 Cross-Reference Information This function calls: A_matrix A_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements Aj_matrix AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements Localize LOCALIZE returns the node coordinates and id array of element This function is called by:","title":"PlasticAnalysis"},{"location":"Functions/latest/Analysis_Functions/Static/StateDetermination/","text":"latest > Analysis_Functions > Static > StateDetermination Purpose STATEDETERMINATION structure state determination under static conditions Synopsis function State = StateDetermination (StifUpdt,Model,ElemData,State) Description STATEDETERMINATION structure state determination under static conditions STATE = STATEDETERMINATION (STIFUPDT,MODEL,ELEMDATA,STATE) the function updates the structure resisting force vector in STATE for the current state of the structure as described by the displacement vector and its increments as as well as by the history variables in STATE; depending on the value of character variable STIFUPDT the function also updates the tangent stiffness matrix in STATE MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties Cross-Reference Information This function calls: Structure STRUCTURE performs requested action on group of elements This function is called by: Increment INCREMENT load incrementation and state advance under static conditions OneIteration ONEITERATION single equilibrium iteration under static conditions","title":"StateDetermination"},{"location":"Functions/latest/Analysis_Functions/Static/Update_State/","text":"latest > Analysis_Functions > Static > Update_State Purpose UPDATE_STATE final state determination under static conditions, reset increments and history Synopsis function State = Update_State (Model,ElemData,State) Description UPDATE_STATE final state determination under static conditions, reset increments and history STATE = UPDATE_STATE (MODEL,ELEMDATA,STATE) the function performs a final state determination for the current state of the structure as described by the displacement vector and its increments as well as by the history variables in STATE; it then updates the structure resisting forces and history variables in STATE and then sets the displacement increments in STATE to zero Cross-Reference Information This function calls: Structure STRUCTURE performs requested action on group of elements This function is called by: S_InitialStep % S_INITIALSTEP script for initial step of incremental analysis S_MultiStep % S_MULTISTEP script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD script for multi-step incremental analysis under given load history(ies)","title":"Update_State"},{"location":"Functions/latest/Element_Library/","text":"Element Library","title":"Element Library"},{"location":"Functions/latest/Element_Library/BInel2dFrm_wEPLHM/","text":"latest > Element_Library > BInel2dFrm_wEPLHM Purpose BINELP2dFRM_WEPLHM 2d elasto-plastic, linear hardening basic frame element with hinge offsets Synopsis function BElemResp = BInel2dFrm_wEPLHM (action,L,BElemData,BElemState) Description BINELP2dFRM_WEPLHM 2d elasto-plastic, linear hardening basic frame element with hinge offsets BELEMRESP = BINELP2dFRM_WEPLHM (ACTION,L,BELEMDATA,BELEMSTATE) the function determines the 2d response of an elasto-plastic basic frame element of length L with linear elastic axial response and elasto-plasic flexural response with linear isotropic and kinematic hardening at two plastic hinges that may be offset from the element ends (series model) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in BELEMRESP: ACTION = 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report basic element forces 'stif': report basic element stiffness matrix and basic element forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure BELEMRESP stands for the following data object(s) for each ACTION: BELEMRESP = BELEMDATA for action = 'chec' BELEMRESP = BELEMSTATE for action = 'init' BELEMRESP = BELEMSTATE for action = 'stif' BELEMRESP = BELEMSTATE for action = 'forc' BELEMRESP = BELEMPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BELEMDATA is a data structure with basic element property information; it has the fields E = Young's Modulus A = cross-sectional area I = moment of inertia Mp = plastic moment capacity at plastic hinges near ends i, j ( Mp = [Mpi , Mpj] ) Hir = isotropic plastic modulus ratio Hkr = kinematic modulus ratio w = uniformly distributed element load [wx;wy]; YFtol = yield criterion tolerance (default = 1e-12) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BELEMSTATE is a data structure with the current basic element state; it has the fields v = vector of total element deformations ke = basic element stiffness matrix; updated under ACTION = 'stif' q = basic element forces; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables the element history variables of this element are ehp = plastic hinge deformations (2x1 array) vp = plastic element deformations (3x1 array) qbk = flexural back forces (2x1 array) alpha = isotropic hardening variable (2x1 array) Cross-Reference Information This function calls: ElementLoading ELEMENTLOADING determines current distributed element load value This function is called by:","title":"BInel2dFrm_wEPLHM"},{"location":"Functions/latest/Element_Library/BInel2dFrm_wEPLHNMYS/","text":"latest > Element_Library > BInel2dFrm_wEPLHNMYS Purpose BINELP2dFRM_WEPLHNMYS 2d elasto-plastic, linear hardening basic frame element Synopsis function BElemResp = BInel2dFrm_wEPLHNMYS (action,L,BElemData,BElemState) Description BINELP2dFRM_WEPLHNMYS 2d elasto-plastic, linear hardening basic frame element BELEMRESP = BINELP2dFRM_WEPLHNMYS (ACTION,L,BELEMDATA,BELEMSTATE) the function determines the 2d response of an elasto-plastic basic frame element of length L with elasto-plastic behavior with linear isotropic and kinematic hardening under axial force (N) - bending moment (M) interaction at two plastic hinges at ends i and j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in BELEMRESP: ACTION = 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report basic element forces 'stif': report basic element stiffness matrix and basic element forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure BELEMRESP stands for the following data object(s) for each ACTION: BELEMRESP = BELEMDATA for action = 'chec' BELEMRESP = BELEMSTATE for action = 'init' BELEMRESP = BELEMSTATE for action = 'stif' BELEMRESP = BELEMSTATE for action = 'forc' BELEMRESP = BELEMPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BELEMDATA is a data structure with basic element property information; it has the fields E = Young's Modulus A = cross-sectional area I = moment of inertia Np = plastic axial capacity Nb = axial force at balance point (default = 0) Mp = plastic moment capacity at plastic hinges near ends i, j ( Mp = [Mpi , Mpj] ) Hir = isotropic plastic modulus ratio (default = [ 0 0 ] ) Hkr = kinematic modulus ratio (default = [ 0 0 0 ] ) w = uniformly distributed element load [wx;wy] (default = [ 0 0 ] ) GPYSC = coefficients for polynomial yield surface (default = [ 1.2 2 0 ; 1 0 2 ; 3.5 2 2 ; -1 0 0 ] ) YFtol = yield criterion tolerance (default = 1e-12) Wtol = work tolerance for return map algorithm (default = 1e-16) MaxIter = max no of iterations for return map algorithm (default = 15) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BELEMSTATE is a data structure with the current basic element state; it has the fields v = vector of total element deformations ke = basic element stiffness matrix; updated under ACTION = 'stif' q = basic element forces; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables the element history variables of this element are ehp = plastic hinge deformations (2x2 array) vp = plastic element deformations (3x1 array) qbk = element back forces (3x1 array) alpha = isotropic hardening variable (2x1 array) Cross-Reference Information This function calls: ElementLoading ELEMENTLOADING determines current distributed element load value GPYS GPYS function value, gradient and Hessian of polynomial yield surface This function is called by:","title":"BInel2dFrm_wEPLHNMYS"},{"location":"Functions/latest/Element_Library/DefGeom_2dFrm/","text":"latest > Element_Library > DefGeom_2dFrm Purpose DEFGEOM_2dFRM determines current length and corotational diad of 2-node, 2d frame element Synopsis function [L,T] = DefGeom_2dFrm (xyz) Description DEFGEOM_2dFRM determines current length and corotational diad of 2-node, 2d frame element [L,T] = DEFGEOM_2dFRM (XYZ); the function determines the length L and the corotational diad T of a 2d frame element in the current configuration from the end node coordinates XYZ (column 1 for node i, column 2 for node j); the corotational diad is given in matrix T whose columns correspond to axes x and y, resp. Cross-Reference Information This function calls: This function is called by:","title":"DefGeom_2dFrm"},{"location":"Functions/latest/Element_Library/DefGeom_3dFrm/","text":"latest > Element_Library > DefGeom_3dFrm Purpose DEFGEOM_3dFRM determines current length and corotational triad of 2-node, 3d frame element Synopsis function [L,T] = DefGeom_3dFrm (xyz,GeomData,u) Description DEFGEOM_3dFRM determines current length and corotational triad of 2-node, 3d frame element [L,T] = DEFGEOM_3dFRM (XYZ,GEOMDATA,U); the function determines the length L and corotational triad T of a 2-node, 3d frame element in the current configuration from the end node coordinates XYZ (column 1 for node i, column 2 for node j) and the end displacement vector U (optional); the corotational triad is given in matrix T whose columns correspond to axes x,y,z resp. Cross-Reference Information This function calls: This function is called by: GeomTran_3dFrm GEOMTRAN_3dFRM kinematic matrices and deformations for a 2-node 3d frame element Large3du2v_Frm LARGE3DU2V_FRM determine 3d frame element deformations from end displacements","title":"DefGeom_3dFrm"},{"location":"Functions/latest/Element_Library/Dinel2dFrm_EBwDF/","text":"latest > Element_Library > Dinel2dFrm_EBwDF Purpose DINEL2dFRM_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Synopsis function ElemResp = Dinel2dFrm_EBwDF (action,el_no,xyz,ElemData,ElemState) Description DINEL2dFRM_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) ELEMRESP = DINEL2dFRM_EBwDF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) function determines the response of 2d frame element with distributed inelasticity for any type of section and material under linear and nonlinear geometry; displacement formulation with small deformations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j nIP = number of integration points IntTyp = function name for element integration SecName = function name for section s-e response SecData{i} = section property data at integration point i (see function with SecName) LdIdx = load history no for element loading in x-direction LdIdy = load history no for element loading in y-direction ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Sec{i}= section response information at integration point i (see function with SecName) Cross-Reference Information This function calls: ElementLoading ELEMENTLOADING determines current distributed element load value ExtrReshu EXTRRESHU extracts displacements and increments from State and reshapes into array Extract_BasicEl2SecState EXTRACT_BASICEL2SECSTATE extract section state from basic element state GeomTran_2dFrm GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm KG_2dFRM geometric stiffness matrix for 2-node 2d frame element for different options This function is called by:","title":"Dinel2dFrm_EBwDF"},{"location":"Functions/latest/Element_Library/Dinel2dFrm_EBwFF/","text":"latest > Element_Library > Dinel2dFrm_EBwFF Purpose DINEL2dFRM_EBwFF 2d-frame element with distributed inelasticity (force formulation) Synopsis function ElemResp = Dinel2dFrm_EBwFF (action,el_no,xyz,ElemData,ElemState) Description DINEL2dFRM_EBwFF 2d-frame element with distributed inelasticity (force formulation) ELEMRESP = DINEL2dFRM_EBwFF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) function determines the response of 2d frame element with distributed inelasticity for any type of section and material under linear and nonlinear geometry; iterative or non-iterative force formulation with small deformations reference: Spacone/Filippou/Taucer IJSDEE, Vol.25, No.7, July 1996, pp. 711-725 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) MR = moment release code (0=cont,1=hinge) (default=[0;0]) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j nIP = number of integration points IntTyp = function name for element integration Tol = relative tolerance for convergence of state determination (10^-16) MaxIter = maximum number of iterations for state convergence (15) SubDivNo= number of element deformation subdivisions (5) SecName = function name for section s-e response SecData{i} = section property data at integration point i (see function with SecName) LdIdx = load history no for element loading in x-direction LdIdy = load history no for element loading in y-direction ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Sec{i}= section response information at integration point i (see function with SecName) Cross-Reference Information This function calls: ElementLoading ELEMENTLOADING determines current distributed element load value ExtrReshu EXTRRESHU extracts displacements and increments from State and reshapes into array GeomTran_2dFrm GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm KG_2dFRM geometric stiffness matrix for 2-node 2d frame element for different options This function is called by:","title":"Dinel2dFrm_EBwFF"},{"location":"Functions/latest/Element_Library/ElementLoading/","text":"latest > Element_Library > ElementLoading Purpose ELEMENTLOADING determines current distributed element load value Synopsis function wC = ElementLoading (w0,lamda,LdId) Description ELEMENTLOADING determines current distributed element load value WC = ELEMENTLOADING (w0,LAMDA,LDID); function determines the current distributed element load values as the product of the user specified reference values in vector W0 and the current load factor(s) in row vector LAMDA; the load history ID for distributed element loads is specified in row vector LDID Cross-Reference Information This function calls: This function is called by: BInel2dFrm_wEPLHM BINELP2dFRM_WEPLHM 2d elasto-plastic, linear hardening basic frame element with hinge offsets BInel2dFrm_wEPLHNMYS BINELP2dFRM_WEPLHNMYS 2d elasto-plastic, linear hardening basic frame element Dinel2dFrm_EBwDF DINEL2dFRM_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF DINEL2dFRM_EBwFF 2d-frame element with distributed inelasticity (force formulation) Inel2dFrm INEL2dFRM inelastic 2d frame element with different basic element types","title":"ElementLoading"},{"location":"Functions/latest/Element_Library/ExtrReshu/","text":"latest > Element_Library > ExtrReshu Purpose EXTRRESHU extracts displacements and increments from State and reshapes into array Synopsis function [u,Du,DDu] = ExtrReshu (State,ndf,nen) Description EXTRRESHU extracts displacements and increments from State and reshapes into array [U,DU,DDU] = EXTRRESHU (STATE,NDF,NEN) the function extracts the displacements and their increments from State and reshapes these into an NDF x NEN array, where NDF is no of dofs/node and NEN number of end nodes for element Cross-Reference Information This function calls: This function is called by: Dinel2dFrm_EBwDF DINEL2dFRM_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF DINEL2dFRM_EBwFF 2d-frame element with distributed inelasticity (force formulation) Inel2dFrm INEL2dFRM inelastic 2d frame element with different basic element types InelTruss INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry LE2dFrm LE2dFRM 2d LE frame element under linear or nonlinear geometry LE2dFrm_wPdelta LE2dFRM 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry LE3dFrm LE3dFRM 3d linear frame element under linear or nonlinear geometry LETruss LETRUSS 2d/3d linear truss element under linear or nonlinear geometry","title":"ExtrReshu"},{"location":"Functions/latest/Element_Library/Extract_BasicEl2SecState/","text":"latest > Element_Library > Extract_BasicEl2SecState Purpose EXTRACT_BASICEL2SECSTATE extract section state from basic element state Synopsis function SecState = Extract_BasicEl2SecState (sec,ae,ElState) Description EXTRACT_BASICEL2SECSTATE extract section state from basic element state SECSTATE = EXTRACT_BASICEL2SECSTATE (SEC,AE,ELSTATE) function extracts from data structure ELSTATE the necessary information for section SEC, and returns it in data structure SECSTATE; it needs compatibility array AE to determine section from element deformations Cross-Reference Information This function calls: This function is called by: Dinel2dFrm_EBwDF DINEL2dFRM_EBwDF 2d-frame element with distributed inelasticity (displacement formulation)","title":"Extract_BasicEl2SecState"},{"location":"Functions/latest/Element_Library/Extract_El2MatState/","text":"latest > Element_Library > Extract_El2MatState Purpose EXTRACT_EL2MATSTATE extract material state from element state Synopsis function MatState = Extract_El2MatState (mat,aeps,ElState,rd) Description EXTRACT_EL2MATSTATE extract material state from element state MATSTATE = EXTRACT_EL2MATSTATE (MAT,AEPS,ELSTATE,RD) function extracts from data structure ELSTATE the necessary information for the element material, and returns it in data structure MATSTATE; it needs compatibility array AEPS to determine material strains from element displacements RD identifies the displacement DOFs to extract (default = all) Cross-Reference Information This function calls: This function is called by: MaterialWrapper MATERIALWRAPPER wrapper element that passes on arguments to the material state determination","title":"Extract_El2MatState"},{"location":"Functions/latest/Element_Library/Extract_El2SecState/","text":"latest > Element_Library > Extract_El2SecState Purpose EXTRACT_EL2SECSTATE extract section state from element state Synopsis function SecState = Extract_El2SecState (sec,ae,ElemState) Description EXTRACT_EL2SECSTATE extract section state from element state SECSTATE = EXTRACT_EL2SECSTATE (SEC,AE,ELSTATE) function extracts from data structure ELSTATE the necessary information for section SEC, and returns it in data structure SECSTATE; it needs compatibility array AE to determine section from element deformations Cross-Reference Information This function calls: This function is called by: SectionWrapper SECTIONWRAPPER wrapper element that passes on arguments to the section state determination","title":"Extract_El2SecState"},{"location":"Functions/latest/Element_Library/GPYS/","text":"latest > Element_Library > GPYS Purpose GPYS function value, gradient and Hessian of polynomial yield surface Synopsis function [f,g,h] = GPYS (GPYSC,xyz,ScVec) Description GPYS function value, gradient and Hessian of polynomial yield surface [F,G,H] = GPYS (GPYSC,XYZ,SCVEC) the function determines the value F(X,Y,Z), the gradient G(X,Y,Z), and the Hessian matrix (2nd derivative) H(X,Y,Z) of F at a point XYZ for a general polynomial yield surface with coefficients GPYSC SCVEC is a scale vector for the variables X, Y, and Z G = the gradient (normal) of the yield surface = [dF/dX; dF/dY; dF/dZ] H = the Hessian (2nd deriv) of the yield surface = dG/dXYZ = [d2(F)/d(X)^2 d2(F)/d(X)d(Y) d2(F)/d(X)d(Z); d2(F)/d(Y)d(X) d2(F)/d(Y)^2 d2(F)/d(Y)d(Z); d2(F)/d(Z)d(X) d2(F)/d(Z)d(Y) d2(F)/d(Z)^2] The coefficients of the polynomial yield surface are specified as follows general 3d case GPYSC = [d1 a1 b1 c1; d2 a2 b2 c2; d3 a3 b3 c3; ...] for F = Sum_i (di*(X^ai)*(Y^bi)*(Z^ci)) general 2d case GPYSC = [c1 a1 b1; c2 a2 b2; c3 a3 b3; ...] for F = Sum_i (ci*(X^ai)*(Y^bi)) Cross-Reference Information This function calls: This function is called by: BInel2dFrm_wEPLHNMYS BINELP2dFRM_WEPLHNMYS 2d elasto-plastic, linear hardening basic frame element","title":"GPYS"},{"location":"Functions/latest/Element_Library/GeomTran_2dFrm/","text":"latest > Element_Library > GeomTran_2dFrm Purpose GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element Synopsis function [ag,bg,ab,v,Dv,DDv] = GeomTran_2dFrm (option,xyz,GeomData,u,Du,DDu) Description GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element [AG,BG,AB,V,DV,DDV] = GEOMTRAN_2dFRM (OPTION,XYZ,GEOMDATA,U,DU,DDU) the function determines the kinematic matrix AG from the global to the basic reference system, the static matrix BG from the basic to the global reference system, and the kinematic matrix AB from the global to the local reference system as well as the element deformation vector V and its increments DV and DDV from the node displacement array U and its increments DU and DDU for a 2-node 2d frame element with end node coordinates XYZ; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. GEOMDATA is a data structure with information about rigid joint offsets in field JNTOFF, (first column for node i, second column for node j) Cross-Reference Information This function calls: Large2du2v_Frm LARGE2DU2V_FRM determine 2d frame element deformations from end displacements TranJnt TRANJNT sets up transformation matrix for finite size joints This function is called by: Dinel2dFrm_EBwDF DINEL2dFRM_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF DINEL2dFRM_EBwFF 2d-frame element with distributed inelasticity (force formulation) Inel2dFrm INEL2dFRM inelastic 2d frame element with different basic element types LE2dFrm LE2dFRM 2d LE frame element under linear or nonlinear geometry LE2dFrm_wPdelta LE2dFRM 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry","title":"GeomTran_2dFrm"},{"location":"Functions/latest/Element_Library/GeomTran_3dFrm/","text":"latest > Element_Library > GeomTran_3dFrm Purpose GEOMTRAN_3dFRM kinematic matrices and deformations for a 2-node 3d frame element Synopsis function [ag,bg,ab,v,Dv,DDv] = GeomTran_3dFrm (option,xyz,GeomData,u,Du,DDu) Description GEOMTRAN_3dFRM kinematic matrices and deformations for a 2-node 3d frame element [AG,BG,AB,V,DV,DDV] = GEOMTRAN_3dFRM (OPTION,XYZ,GEOMDATA,U,DU,DDU) the function determines the kinematic matrix AG from the global to the basic reference system, the static matrix BG from the basic to the global reference system, and the kinematic matrix AB from the global to the local reference system as well as the element deformation vector V and its increments DV and DDV from the node displacement array U and its increments DU and DDU for a 2-node 3d frame element with end node coordinates XYZ; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. GEOMDATA is a data structure with information about rigid joint offsets in field JNTOFF (first column for node i, second column for node j), and orientation (direction cosines) of the local y-axis in vector YORNT Cross-Reference Information This function calls: DefGeom_3dFrm DEFGEOM_3dFRM determines current length and corotational triad of 2-node, 3d frame element Large3du2v_Frm LARGE3DU2V_FRM determine 3d frame element deformations from end displacements TranJnt TRANJNT sets up transformation matrix for finite size joints This function is called by: LE3dFrm LE3dFRM 3d linear frame element under linear or nonlinear geometry","title":"GeomTran_3dFrm"},{"location":"Functions/latest/Element_Library/GeomTran_Truss/","text":"latest > Element_Library > GeomTran_Truss Purpose GEOMTRAN_TRUSS kinematic matrices and deformations for a 2-node truss element Synopsis function [ag,bg,v,Dv,DDv] = GeomTran_Truss (option,xyz,u,Du,DDu) Description GEOMTRAN_TRUSS kinematic matrices and deformations for a 2-node truss element [AG,BG,V,DV,DDV] = GEOMTRAN_TRUSS (NDF,XYZ,GEOMDATA,U,DU,DDU) the function determines the kinematic matrix AG from the global to the basic reference system, and the static matrix BG from the basic to the global reference system as well as the element deformation vector V and its increments DV and DDV from the end displacement vector U and its increments DU and DDU for a 2-node truss element with end node coordinates XYZ and NDF dofs/node; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. Cross-Reference Information This function calls: This function is called by: InelTruss INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry LETruss LETRUSS 2d/3d linear truss element under linear or nonlinear geometry","title":"GeomTran_Truss"},{"location":"Functions/latest/Element_Library/Inel2dFrm/","text":"latest > Element_Library > Inel2dFrm Purpose INEL2dFRM inelastic 2d frame element with different basic element types Synopsis function ElemResp = Inel2dFrm (action,el_no,xyz,ElemData,ElemState) Description INEL2dFRM inelastic 2d frame element with different basic element types ELEMRESP = INEL2dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of inelastic 2d frame element with different basic element types ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information; it has the fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) LdIdx = load history no for element loading in x-direction LdIdy = load history no for element loading in y-direction JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j HngOff = offsets of plastic hinge location at element ends ([0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations vp = plastic deformations q = element basic forces Cross-Reference Information This function calls: ElementLoading ELEMENTLOADING determines current distributed element load value ExtrReshu EXTRRESHU extracts displacements and increments from State and reshapes into array GeomTran_2dFrm GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm KG_2dFRM geometric stiffness matrix for 2-node 2d frame element for different options This function is called by:","title":"Inel2dFrm"},{"location":"Functions/latest/Element_Library/InelTruss/","text":"latest > Element_Library > InelTruss Purpose INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry Synopsis function ElemResp = InelTruss (action,el_no,xyz,ElemData,ElemState) Description INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry ELEMRESP = INELTRUSS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d/3d inelastic truss element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area MatName = function for material stress-strain response MatData = material property data s0 = initial force (default = 0) e0 = initial deformation (default = 0) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Mat = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: ExtrReshu EXTRRESHU extracts displacements and increments from State and reshapes into array GeomTran_Truss GEOMTRAN_TRUSS kinematic matrices and deformations for a 2-node truss element kg_Truss KG_TRUSS geometric stiffness matrix for 2d/3d 2-node truss element for different options This function is called by:","title":"InelTruss"},{"location":"Functions/latest/Element_Library/LE2dFrm/","text":"latest > Element_Library > LE2dFrm Purpose LE2dFRM 2d LE frame element under linear or nonlinear geometry Synopsis function ElemResp = LE2dFrm (action,el_no,xyz,ElemData,ElemState) Description LE2dFRM 2d LE frame element under linear or nonlinear geometry ELEMRESP = LE2dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) e0 = initial deformations (default = 0) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j Release = axial and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: ExtrReshu EXTRRESHU extracts displacements and increments from State and reshapes into array GeomTran_2dFrm GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm KG_2dFRM geometric stiffness matrix for 2-node 2d frame element for different options This function is called by:","title":"LE2dFrm"},{"location":"Functions/latest/Element_Library/LE2dFrm_wPdelta/","text":"latest > Element_Library > LE2dFrm_wPdelta Purpose LE2dFRM 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry Synopsis function ElemResp = LE2dFrm_wPdelta (action,el_no,xyz,ElemData,ElemState) Description LE2dFRM 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry ELEMRESP = LE2dFRM_wPDELTA (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element with P-delta effects; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia rho = mass density JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: ExtrReshu EXTRRESHU extracts displacements and increments from State and reshapes into array GeomTran_2dFrm GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm KG_2dFRM geometric stiffness matrix for 2-node 2d frame element for different options This function is called by:","title":"LE2dFrm_wPdelta"},{"location":"Functions/latest/Element_Library/LE3dFrm/","text":"latest > Element_Library > LE3dFrm Purpose LE3dFRM 3d linear frame element under linear or nonlinear geometry Synopsis function ElemResp = LE3dFrm (action,el_no,xyz,ElemData,ElemState) Description LE3dFRM 3d linear frame element under linear or nonlinear geometry ELEMRESP = LE3dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 3d linear frame element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information; it has the fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) E = modulus of elasticity G = shear modulus rho = mass density A = cross sectional area Iy = moment of inertia about y-axis Iz = moment of inertia about z-axis J = polar moment of inertia yornt = local y-axis orientation in global reference system (column vector) JntOff = rigid joint offsets in global X, Y, Z at element ends; column 1 for node i, column 2 for node j w = uniform element load ( w(1) = longitudinal, w(2),w(3) = transverse in y and z, resp.) e0 = initial deformations ( e(1) = axial strain, e(2),e(3) = curvature about y and z, resp.) Release = axial, torsional and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0;0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: ExtrReshu EXTRRESHU extracts displacements and increments from State and reshapes into array GeomTran_3dFrm GEOMTRAN_3dFRM kinematic matrices and deformations for a 2-node 3d frame element kg_3dFrm KG_3dFRM geometric stiffness matrix for 2-node 3d frame element different options This function is called by:","title":"LE3dFrm"},{"location":"Functions/latest/Element_Library/LETruss/","text":"latest > Element_Library > LETruss Purpose LETRUSS 2d/3d linear truss element under linear or nonlinear geometry Synopsis function ElemResp = LETruss (action,el_no,xyz,ElemData,ElemState) Description LETRUSS 2d/3d linear truss element under linear or nonlinear geometry ELEMRESP = LETRUSS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d/3d linear elastic truss element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity rho = mass density s0 = initial force (default = 0) e0 = initial deformation (default = 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: ExtrReshu EXTRRESHU extracts displacements and increments from State and reshapes into array GeomTran_Truss GEOMTRAN_TRUSS kinematic matrices and deformations for a 2-node truss element kg_Truss KG_TRUSS geometric stiffness matrix for 2d/3d 2-node truss element for different options This function is called by:","title":"LETruss"},{"location":"Functions/latest/Element_Library/Large2du2v_Frm/","text":"latest > Element_Library > Large2du2v_Frm Purpose LARGE2DU2V_FRM determine 2d frame element deformations from end displacements Synopsis function v = Large2du2v_Frm (xyz,u) Description LARGE2DU2V_FRM determine 2d frame element deformations from end displacements V = LARGE2DU2V_FRM (XYZ,U) the function determines the deformations V of a 2-node, 2d frame element with end node coordinates XYZ under large end node displacements U Cross-Reference Information This function calls: This function is called by: GeomTran_2dFrm GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element","title":"Large2du2v_Frm"},{"location":"Functions/latest/Element_Library/Large3du2v_Frm/","text":"latest > Element_Library > Large3du2v_Frm Purpose LARGE3DU2V_FRM determine 3d frame element deformations from end displacements Synopsis function [v,vthetaI,vthetaJ] = Large3du2v_Frm (xyz,GeomData,u) Description LARGE3DU2V_FRM determine 3d frame element deformations from end displacements [V,VTHETAI,VTHETAJ] = LARGE3DU2V_FRM(XYZ,GEOMDATA,U) the function determines the deformations V and the relative pseudo-rotation vectors VTHETAI and VTHETAJ at nodes I and J of a 2-node, 3d frame element with end node coordinates XYZ under large end node displacements U; the data structure GEOMDATA carries information about the joint offsets for the element Cross-Reference Information This function calls: DefGeom_3dFrm DEFGEOM_3dFRM determines current length and corotational triad of 2-node, 3d frame element This function is called by: GeomTran_3dFrm GEOMTRAN_3dFRM kinematic matrices and deformations for a 2-node 3d frame element","title":"Large3du2v_Frm"},{"location":"Functions/latest/Element_Library/MaterialWrapper/","text":"latest > Element_Library > MaterialWrapper Purpose MATERIALWRAPPER wrapper element that passes on arguments to the material state determination Synopsis function ElemResp = MaterialWrapper (action,el_no,xyz,ElemData,ElemState) Description MATERIALWRAPPER wrapper element that passes on arguments to the material state determination ELEMRESP = MATERIALWRAPPER (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) the function determines the response of the material MATNAME in ELEMDATA ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'size' function reports size of element arrays in variable ARSZ 'chec' function checks element property data for omissions and returns default values in ELEMDATA 'init' function returns element history variables in ELEMSTATE 'forc' function returns element resisting forces in ELEMSTATE 'stif' function returns element stiffness matrix and resisting forces in ELEMSTATE 'post' function returns data structure ELEMPOST with post-processing information depending on value of character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO and end node coordinates XYZ; the data structure ELEMDATA supplies the element property data. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure ELEMRESP stands for the following data object depending on value of ACTION ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = eps = material strains q = sig = material stresses Cross-Reference Information This function calls: Extract_El2MatState EXTRACT_EL2MATSTATE extract material state from element state This function is called by:","title":"MaterialWrapper"},{"location":"Functions/latest/Element_Library/SectionWrapper/","text":"latest > Element_Library > SectionWrapper Purpose SECTIONWRAPPER wrapper element that passes on arguments to the section state determination Synopsis function ElemResp = SectionWrapper (action,el_no,xyz,ElemData,ElemState) Description SECTIONWRAPPER wrapper element that passes on arguments to the section state determination ELEMRESP = SECTIONWRAPPER (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) the function determines the response of the section SECNAME in ELEMDATA ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = e = section deformations q = s = section forces Cross-Reference Information This function calls: Extract_El2SecState EXTRACT_EL2SECSTATE extract section state from element state This function is called by:","title":"SectionWrapper"},{"location":"Functions/latest/Element_Library/TranJnt/","text":"latest > Element_Library > TranJnt Purpose TRANJNT sets up transformation matrix for finite size joints Synopsis function aj = TranJnt (JntOff) Description TRANJNT sets up transformation matrix for finite size joints AJ = TRANJNT (JNTOFF) the function sets up the transformation matrix AJ for finite size joints of 2d and 3d frame elements; the rigid joint offsets at the element ends are specified in array JNTOFF with the first column corresponding to node i and the second column to node j Cross-Reference Information This function calls: This function is called by: GeomTran_2dFrm GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element GeomTran_3dFrm GEOMTRAN_3dFRM kinematic matrices and deformations for a 2-node 3d frame element Aj_matrix AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements","title":"TranJnt"},{"location":"Functions/latest/Element_Library/kg_2dFrm/","text":"latest > Element_Library > kg_2dFrm Purpose KG_2dFRM geometric stiffness matrix for 2-node 2d frame element for different options Synopsis function kg = kg_2dFrm (option,xyz,u,q) Description KG_2dFRM geometric stiffness matrix for 2-node 2d frame element for different options KG = KG_2dFRM (OPTION,XYZ,U,Q) the function determines the geometric stiffness matrix KG of a 2-node 2d frame element with end coordinates in array XYZ (node i corresponds to first column and node j to second); the geometric stiffness matrix depends on the node displacement values in array U (ndfx2) in the global reference system and on the basic force vector Q; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. Cross-Reference Information This function calls: This function is called by: Dinel2dFrm_EBwDF DINEL2dFRM_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF DINEL2dFRM_EBwFF 2d-frame element with distributed inelasticity (force formulation) Inel2dFrm INEL2dFRM inelastic 2d frame element with different basic element types LE2dFrm LE2dFRM 2d LE frame element under linear or nonlinear geometry LE2dFrm_wPdelta LE2dFRM 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry","title":"kg_2dFrm"},{"location":"Functions/latest/Element_Library/kg_3dFrm/","text":"latest > Element_Library > kg_3dFrm Purpose KG_3dFRM geometric stiffness matrix for 2-node 3d frame element different options Synopsis function kg = kg_3dFrm (option,xyz,GeomData,u,q,ElLoad) Description KG_3dFRM geometric stiffness matrix for 2-node 3d frame element different options KG = KG_3dFRM (OPTION,XYZ,GEOMDATA,U,Q,ELLOAD) the function determines the geometric stiffness matrix KG of a 2-node element with end coordinates in array XYZ (node i corresponds to first column and node j to second); the geometric stiffness matrix depends on the node displacement values in array U (ndfx2) in the global reference system and on the basic force vector Q; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. Cross-Reference Information This function calls: This function is called by: LE3dFrm LE3dFRM 3d linear frame element under linear or nonlinear geometry","title":"kg_3dFrm"},{"location":"Functions/latest/Element_Library/kg_Truss/","text":"latest > Element_Library > kg_Truss Purpose KG_TRUSS geometric stiffness matrix for 2d/3d 2-node truss element for different options Synopsis function kg = kg_Truss (option,xyz,u,q) Description KG_TRUSS geometric stiffness matrix for 2d/3d 2-node truss element for different options KG = KG_TRUSS (OPTION,XYZ,U,Q) the function determines the geometric stiffness matrix KG of a 2-node 2d/3d truss element with end coordinates in array XYZ (node i corresponds to first column and node j to second); the geometric stiffness matrix depends on the node displacement values in array U (ndmx2) in the global reference system and on the basic force vector Q; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. Cross-Reference Information This function calls: This function is called by: InelTruss INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry LETruss LETRUSS 2d/3d linear truss element under linear or nonlinear geometry","title":"kg_Truss"},{"location":"Functions/latest/General_Functions/","text":"General Functions","title":"General Functions"},{"location":"Functions/latest/General_Functions/A_matrix/","text":"latest > General_Functions > A_matrix Purpose A_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements Synopsis function A = A_matrix (Model) Description A_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements A = A_MATRIX (MODEL) the function forms the kinematic matrix A for all degrees of freedom (DOFs) and all element deformations of the structural model specified in data structure MODEL; this version is limited to 2d/3d truss and 2d frame elements Cross-Reference Information This function calls: Localize LOCALIZE returns the node coordinates and id array of element This function is called by: Event2Event_NLAnalysis EVENT2EVENT_NLANALYSIS event-to-event incremental analysis with linear or P-DELTA geometry PlasticAnalysis PLASTICANALYSIS collapse load factor, basic forces, and collapse mechanism by plastic analysis S_DisplMethod % S_DISPLMETHOD script for displacement method of structural analysis","title":"A_matrix"},{"location":"Functions/latest/General_Functions/Add_Damping2State/","text":"latest > General_Functions > Add_Damping2State Purpose ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE Synopsis function State = Add_Damping2State (type,Model,State,zeta,mode) Description ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE STATE = ADD_DAMPING2STATE (TYPE,MODEL,STATE,ZETA,MODE) function sets up structural damping matrix C according to character variable TYPE as field of data structure STATE; the free dof stiffness matrix is field Kf of STATE and the free dof lumped mass vector is field Ml of MODEL; the damping matrix is calibrated so that the mode numbers in row vector MODE have damping ratios as specified in row vector ZETA; character variable TYPE should be either 'StifProp' or 'Caughey' Note: Caughey with one mode reduces to mass proportional damping matrix and with two modes reduces to Rayleigh damping Cross-Reference Information This function calls: Create_Damping CREATE_DAMPING setup damping matrix of structural model This function is called by:","title":"Add_Damping2State"},{"location":"Functions/latest/General_Functions/Add_Mass2Model/","text":"latest > General_Functions > Add_Mass2Model Purpose ADD_MASS2MODEL sets up lumped or consistent mass in Model.M Synopsis function Model = Add_Mass2Model (Model,Me,ElemData,option) Description ADD_MASS2MODEL sets up lumped or consistent mass in Model.M MODEL = ADD_MASS2MODEL (MODEL,ME,ELEMDATA,OPTION) the function adds the field M to the data structure Model, which carries information about the structural model; M is either a nfx1 column vector for the lumped mass or, a nfxnf array for the consistent mass of the model, where nf is the number of free DOFs; this depends on the presence ELEMDATA in the argument list and on the character variable OPTION; the following cases are possible: (1) without ELEMDATA the function takes the nodal lumped mass values in array ME where row=node no and column=dof no and assigns them to the column vector M with the row corresponding to the DOF number; Example: ME(5,:) = [20 20 0]; lumped mass value in X and Y at node 5; no rotary inertia (2) if ELEMDATA is present in the argument list the function calculates the lumped and consistent mass contribution of each element in the structural model that supports this feature; it adds the element lumped mass to the nodal lumped mass and returns the lumped mass in column vector M (3) if ELEMDATA is present and OPTION='CONSISTENT' the function returns the consistent mass matrix M after adding the nodal lumped mass on its diagonal if the Model was generated with Create_Model and supports sparse DOF indexing then M is a sparse column vector or matrix; if the Model was generated with Create_SimpleModel then the column vector or matrix are full Cross-Reference Information This function calls: Create_NodalMass CREATE_NODALMASS free dof lumped mass vector for structural model Structure STRUCTURE performs requested action on group of elements This function is called by:","title":"Add_Mass2Model"},{"location":"Functions/latest/General_Functions/Aj_matrix/","text":"latest > General_Functions > Aj_matrix Purpose AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements Synopsis function Aj = Aj_matrix (Model) Description AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements AJ = AJ_MATRIX (MODEL) the function forms the kinematic matrix AJ for all degrees of freedom (DOFs) and all element deformations of the structural model specified in data structure MODEL; the kinematic matrix AJ includes the effect of joint offsets for the elements; the function is currently limited to 2d/3d truss and 2d frame elements Cross-Reference Information This function calls: TranJnt TRANJNT sets up transformation matrix for finite size joints Localize LOCALIZE returns the node coordinates and id array of element This function is called by: Event2Event_NLAnalysis EVENT2EVENT_NLANALYSIS event-to-event incremental analysis with linear or P-DELTA geometry PlasticAnalysis PLASTICANALYSIS collapse load factor, basic forces, and collapse mechanism by plastic analysis","title":"Aj_matrix"},{"location":"Functions/latest/General_Functions/B_matrix/","text":"latest > General_Functions > B_matrix Purpose B_MATRIX equilibrium matrix of structural model with 2d/3d truss and 2d frame elements Synopsis function B = B_matrix (Model) Description B_MATRIX equilibrium matrix of structural model with 2d/3d truss and 2d frame elements B = B_MATRIX (MODEL) the function forms the equilibrium matrix B for all degrees of freedom (DOFs) and all basic forces of the structural model specified in data structure MODEL; this version is limited to 2d/3d truss and 2d frame elements Cross-Reference Information This function calls: Localize LOCALIZE returns the node coordinates and id array of element This function is called by: S_ForceMethod % S_FORCEMETHOD script for force method of structural analysis","title":"B_matrix"},{"location":"Functions/latest/General_Functions/BbariBbarx_matrix/","text":"latest > General_Functions > BbariBbarx_matrix Purpose BBARIBBARX_MATRIX force influence matrices of primary structure from equilibrium matrix Bf Synopsis function [Bbari,Bbarx,ind_x] = BbariBbarx_matrix (Bf,ind_r,ind_rng) Description BBARIBBARX_MATRIX force influence matrices of primary structure from equilibrium matrix Bf [BBARI,BBARX,IND_X] = BBARIBBARX_MATRIX (BF,IND_R,IND_RNG) the function determines the force influence matrices BBARI and BBARX of the primary structure from the equilibrium matrix BF; the optional argument IND_R specifies the index for the selected redundant basic forces; the optional argument IND_RNG selects the redundant basic forces among those in the group; BBARI is the force influence matrix for the applied forces at the free dofs, and BBARX is the force influence matrix for the redundant basic forces; IND_X is the redundant force index vector into the basic forces of the structure Cross-Reference Information This function calls: This function is called by: S_ForceMethod % S_FORCEMETHOD script for force method of structural analysis","title":"BbariBbarx_matrix"},{"location":"Functions/latest/General_Functions/Condense_MV/","text":"latest > General_Functions > Condense_MV Purpose CONDENSE_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom Synopsis function [Kfc,Pfc] = Condense_MV (Kf,idr,Pf) Description CONDENSE_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom [KFC,PFC] = CONDENSE_MV (KF,IDR,PF) function condenses free dof stiffness matrix KF and applied force vector PF to a reduced set of dofs as specified in list or row vector IDR; the condensed stiffness matrix is KFC and the initial force vector is PFC Cross-Reference Information This function calls: This function is called by: EigenMode EIGENMODE determines eigenfrequencies and eigenmodes of structural model","title":"Condense_MV"},{"location":"Functions/latest/General_Functions/Create_Damping/","text":"latest > General_Functions > Create_Damping Purpose CREATE_DAMPING setup damping matrix of structural model Synopsis function C = Create_Damping (type,Kf,Ml,zeta,mode) Description CREATE_DAMPING setup damping matrix of structural model C = CREATE_DAMPING (TYPE,KF,ML,ZETA,MODE) function sets up damping matrix C according to character variable TYPE for a structure with free dof stiffness matrix KF and free dof lumped mass vector ML; the damping matrix is calibrated so that the mode numbers in row vector MODE have damping ratios as specified in row vector ZETA; character variable TYPE should be either 'StifProp', 'Caughey' or 'Modal' Note: Caughey with one mode reduces to mass proportional damping matrix and with two modes reduces to Rayleigh damping; for more than 2 modes Caughey damping works only if Ml is fully populated; Modal damping refers to the method of superposing modal damping matrices Reference: Chopra, Dynamics of Structures, 2nd edition, pp. 455-463 Cross-Reference Information This function calls: EigenMode EIGENMODE determines eigenfrequencies and eigenmodes of structural model This function is called by: Add_Damping2State ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE","title":"Create_Damping"},{"location":"Functions/latest/General_Functions/Create_Loading/","text":"latest > General_Functions > Create_Loading Purpose CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements Synopsis function Loading = Create_Loading (Model,Pe,Ue) Description CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements LOADING = CREATE_LOADING (MODEL,PE,UE) the function sets up the data structure LOADING with the array of applied force patterns at the free dofs of the model in field Pref and the array of imposed displacement patterns at the restrained dofs of the model in field Uref; model information is specified in data structure MODEL and the applied forces and imposed displacements are specified in arrays PE and UE, respectively; in arrays PE and UE rows correspond to node numbers and columns to dof direction Example: PE(3,:,1) = [10 0 50]; applied forces at node 3 in X,Y and Z direction for force pattern 1 UE(5,2,3) = 0.02; imposed displacement in Y-direction at node 5 for displacement pattern 3 Cross-Reference Information This function calls: This function is called by: S_MomCurvAnalysis % S_MOMCURVANALYSIS script for moment-curvature analysis under constant axial force S_NMAnalysis % S_NMANALYSIS script for incremental application of N-M pair on section S_NMAnalysiswSepLoadHist % S_NMANALYSISwSEPLOADHIST script for application N and M with separate load histories","title":"Create_Loading"},{"location":"Functions/latest/General_Functions/Create_Model/","text":"latest > General_Functions > Create_Model Purpose CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions Synopsis function Model = Create_Model (XYZ,CON,BOUN,ElemName) Description CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_MODEL (XYZ,CON,BOUN,ELEMNAME) function creates data structure MODEL with model information from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss data structure MODEL has the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = node connectivity array DOF = array with degree of freedom numbering, nodes are stored columnwise ndf(el) = no of dofs/node for element el nen(el) = no of nodes for element el ElemName = cell array of element names Cross-Reference Information This function calls: This function is called by: S_MomCurvAnalysis % S_MOMCURVANALYSIS script for moment-curvature analysis under constant axial force S_NMAnalysis % S_NMANALYSIS script for incremental application of N-M pair on section S_NMAnalysiswSepLoadHist % S_NMANALYSISwSEPLOADHIST script for application N and M with separate load histories","title":"Create_Model"},{"location":"Functions/latest/General_Functions/Create_NodalForces/","text":"latest > General_Functions > Create_NodalForces Purpose CREATE_NODALFORCES set up reference vector of applied forces Synopsis function Pref = Create_NodalForces (Model,Pe) Description CREATE_NODALFORCES set up reference vector of applied forces PREF = CREATE_NODALFORCES (MODEL,PE) the function sets up the vector of applied forces PREF at the free dofs of the model; model information is supplied in data structure MODEL and the applied forces in array PE; in array PE rows correspond to node numbers and columns to dofs Example: PE(3,:) = [10 0 50] means applied forces at node 3 in X,Y and Z direction Cross-Reference Information This function calls: This function is called by:","title":"Create_NodalForces"},{"location":"Functions/latest/General_Functions/Create_NodalMass/","text":"latest > General_Functions > Create_NodalMass Purpose CREATE_NODALMASS free dof lumped mass vector for structural model Synopsis function Ml = Create_NodalMass (Model,Me) Description CREATE_NODALMASS free dof lumped mass vector for structural model ML = CREATE_NODALMASS (MODEL,ME) the function sets up the free dof lumped mass vector ML for the structural model specified in data structure MODEL from the specified nodal lumped mass values in array ME in which rows correspond to node numbers and columns to dof direction Example: ME(5,:) = [20 20 0]; lumped mass value in X and Y at node 5; no rotary inertia Cross-Reference Information This function calls: This function is called by: Add_Mass2Model ADD_MASS2MODEL sets up lumped or consistent mass in Model.M","title":"Create_NodalMass"},{"location":"Functions/latest/General_Functions/Create_PwForces/","text":"latest > General_Functions > Create_PwForces Purpose CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w Synopsis function Pw = Create_PwForces (Model,ElemData) Description CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w PW = CREATE_PWFORCES (MODEL,ELEMDATA) the function sets up the vector of equivalent nodal forces PW due to uniform element loading w; model information is supplied in data structure MODEL, and the magnitude of w is supplied for each element in field W of ELEMDATA Cross-Reference Information This function calls: Localize LOCALIZE returns the node coordinates and id array of element This function is called by: S_DisplMethod % S_DISPLMETHOD script for displacement method of structural analysis S_ForceMethod % S_FORCEMETHOD script for force method of structural analysis","title":"Create_PwForces"},{"location":"Functions/latest/General_Functions/Create_SimpleModel/","text":"latest > General_Functions > Create_SimpleModel Purpose CREATE_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions Synopsis function Model = Create_SimpleModel (XYZ,CON,BOUN,ElemName) Description CREATE_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_SIMPLEMODEL (XYZ,CON,BOUN,ELEMNAME) the function creates the data structure MODEL from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the numerical or cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON (4,:) = [ 6 7] : element 4 connects nodes 6 and 7, or CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss the data structure MODEL contains information about the structural model in the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = cell array of node connectivity DOF = array with degree of freedom numbering, nodes are stored rowwise ndf(el) = no of dofs/node for element el nq (el) = no of basic forces for element el nen(el) = no of nodes for element el ElemName = cell array of element names Cross-Reference Information This function calls: This function is called by:","title":"Create_SimpleModel"},{"location":"Functions/latest/General_Functions/Extract_Str2ElState/","text":"latest > General_Functions > Extract_Str2ElState Purpose EXTRACT_STR2ELSTATE extract element state from structure state Synopsis function ElemState = Extract_Str2ElState (el,id,State) Description EXTRACT_STR2ELSTATE extract element state from structure state ELEMSTATE = EXTRACT_STR2ELSTATE(EL,ID,STATE) the function extracts from the data structure STATE the necessary state information for element EL, with id-array ID, and returns it in data structure ELEMSTATE; when STATE is numeric, it is assumed to represent the global dof displacement vector and the function extracts only the element dof displacements in ELEMSTATE.U Cross-Reference Information This function calls: This function is called by: Structure STRUCTURE performs requested action on group of elements","title":"Extract_Str2ElState"},{"location":"Functions/latest/General_Functions/Fs_matrix/","text":"latest > General_Functions > Fs_matrix Purpose FS_MATRIX block diagonal matrix of element flexibity matrices for structural model Synopsis function Fs = Fs_matrix (Model,ElemData,Roption) Description FS_MATRIX block diagonal matrix of element flexibity matrices for structural model FS = FS_MATRIX (MODEL,ELEMDATA,ROPTION) the function sets up the block diagonal matrix of element flexibility matrices FS for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA; if ROPTION=0 the element release information is not accounted for in setting up Fs (default=1) Cross-Reference Information This function calls: Localize LOCALIZE returns the node coordinates and id array of element This function is called by: S_ForceMethod % S_FORCEMETHOD script for force method of structural analysis","title":"Fs_matrix"},{"location":"Functions/latest/General_Functions/Ks_matrix/","text":"latest > General_Functions > Ks_matrix Purpose KS_MATRIX block diagonal matrix of basic element stiffness matrices for structural model Synopsis function Ks = Ks_matrix (Model,ElemData) Description KS_MATRIX block diagonal matrix of basic element stiffness matrices for structural model KS = KS_MATRIX (MODEL,ELEMDATA) the function sets up the block diagonal matrix of basic element stiffness matrices KS for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA Cross-Reference Information This function calls: Localize LOCALIZE returns the node coordinates and id array of element This function is called by: S_DisplMethod % S_DISPLMETHOD script for displacement method of structural analysis","title":"Ks_matrix"},{"location":"Functions/latest/General_Functions/Localize/","text":"latest > General_Functions > Localize Purpose LOCALIZE returns the node coordinates and id array of element Synopsis function [xyz,id] = Localize (Model,el) Description LOCALIZE returns the node coordinates and id array of element [XYZ,ID] = LOCALIZE (MODEL,EL) the function returns the node coordinates XYZ and the id array ID of the element with number EL for the structural model specified in data structure MODEL Cross-Reference Information This function calls: This function is called by: Event2Event_NLAnalysis EVENT2EVENT_NLANALYSIS event-to-event incremental analysis with linear or P-DELTA geometry PlasticAnalysis PLASTICANALYSIS collapse load factor, basic forces, and collapse mechanism by plastic analysis A_matrix A_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements Aj_matrix AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements B_matrix B_MATRIX equilibrium matrix of structural model with 2d/3d truss and 2d frame elements Create_PwForces CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w Fs_matrix FS_MATRIX block diagonal matrix of element flexibity matrices for structural model Ks_matrix KS_MATRIX block diagonal matrix of basic element stiffness matrices for structural model Q0_vector Q0_VECTOR initial (fixed-end) force vector for structural model Structure STRUCTURE performs requested action on group of elements V0_vector V0_VECTOR initial element deformation vector for the structural model","title":"Localize"},{"location":"Functions/latest/General_Functions/Q0_vector/","text":"latest > General_Functions > Q0_vector Purpose Q0_VECTOR initial (fixed-end) force vector for structural model Synopsis function Q0 = Q0_vector (Model,ElemData) Description Q0_VECTOR initial (fixed-end) force vector for structural model Q0 = Q0_VECTOR (MODEL,ELEMDATA) the function sets up the initial (fixed-end) force vector Q0 for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA Cross-Reference Information This function calls: Localize LOCALIZE returns the node coordinates and id array of element This function is called by: Event2Event_NLAnalysis EVENT2EVENT_NLANALYSIS event-to-event incremental analysis with linear or P-DELTA geometry S_DisplMethod % S_DISPLMETHOD script for displacement method of structural analysis","title":"Q0_vector"},{"location":"Functions/latest/General_Functions/Structure/","text":"latest > General_Functions > Structure Purpose STRUCTURE performs requested action on group of elements Synopsis function Resp = Structure (action,Model,ElemData,State,ElemList) Description STRUCTURE performs requested action on group of elements RESP = STRUCTURE (ACTION,MODEL,ELEMDATA,STATE,ELEMLIST) response of some or all elements in the structural model, as requested in ELEMLIST (default=all); depending on the value of the character variable ACTION, the function returns information in data structure RESP for the structural model with properties in MODEL; the cell array ELEMDATA contains the element properties; the optional data structure STATE contains current response state variables for the model. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in RESP: ACTION = 'chec' check element property data for omissions and assign default values 'init' initialize element history variables 'forc' report structure resisting forces 'stif' report structure stiffness matrix and resisting forces 'mass' report lumped mass vector and consistent mass matrix 'post' report post-processing information 'stre' nodal stress recovery with element least squares 'nstr' nodal stress recovery with direct nodal stress calculations 'spre' nodal stress recovery with superconvergent global patch (ZZ-method) (not implemented) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure RESP stands for the following data object(s) for each ACTION: RESP = ELEMDATA for action = 'chec' RESP = STATE for action = 'init' RESP = STATE for action = 'stif' RESP = STATE for action = 'forc' RESP = MASS for action = 'mass' RESP = POST for action = 'post' RESP = NDSTR for action = 'stre','nstr','spre' RESP is empty for unsupported keywords additional keywords can be added in the function ADD_ACTION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STATE is a data structure with information about the current response state of the model in fields lamda = row vector of current load factor(s) U = global dof total displacement vector DU = global dof displacement increments from last convergencey DDU = global dof displacement increments from last iteration Udot = global dof velocity vector Udotdot = global dof acceleration vector Kf = structure stiffness matrix at free dofs; returned along with U under action = 'stif' Kfd = structure stiffness matrix coupling free and restrained dofs Pr = structure resisting force vector; returned along with U under action = 'stif' or 'forc' Past = data structure of element history variables at last convergence in cell array Elem Pres = data structure of current element history variables in cell array Elem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MASS is a data structure with mass information in fields: Ml = lumped mass vector of free dofs of structural model Mc = consistent mass matrix of free dofs of structural model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ POST is a data structure with structure and element response information for post-processing in fields: lamda = row vector of current load factor(s) Elem{el} = cell array with post-processing information for each element U = global dof displacement vector Udot = global dof velocity vector (for transient analysis) Uddot = global dof acceleration vector (for transient analysis) Pr = structure resisting force vector Time = time ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ NDSTR is a data structure with nodal stress information in fields: SigNd = nodal stresses for plane and membrane finite elements MomNd = nodal moments for plate and shell finite elements ShrNd = nodal shears for plate and shell finite elements with shear deformations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMLIST = list of elements to which action applies (default=all elements in model) Cross-Reference Information This function calls: Extract_Str2ElState EXTRACT_STR2ELSTATE extract element state from structure state Localize LOCALIZE returns the node coordinates and id array of element SubIncr4ElemntSD SUBINCR4ELMNTSD element displacement increment subdivision for state determination This function is called by: TransientStateDetermination TRANSIENTSTATEDETERMINATION structure state determination under transient conditions Update_TransientState UPDATE_TRANSIENTSTATE final state determination under transient conditions, reset increments and history Initialize INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_State INITIALIZE_STATE initialize state variables of structural model and create STATE LinearStep LINEARSTEP sets up and solves the structure equilibrium equations for single load step StateDetermination STATEDETERMINATION structure state determination under static conditions Update_State UPDATE_STATE final state determination under static conditions, reset increments and history Add_Mass2Model ADD_MASS2MODEL sets up lumped or consistent mass in Model.M S_InitialStep % S_INITIALSTEP script for initial step of incremental analysis S_MultiStep % S_MULTISTEP script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD script for multi-step incremental analysis under given load history(ies) S_Transient_MultiStep % S_TRANSIENT_MULTISTEP script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD script for multi-step transient analysis under given load history(ies)","title":"Structure"},{"location":"Functions/latest/General_Functions/SubIncr4ElemntSD/","text":"latest > General_Functions > SubIncr4ElemntSD Purpose SUBINCR4ELMNTSD element displacement increment subdivision for state determination Synopsis function ElemState = SubIncr4ElemntSD (el,ElemName,xyz,ElemData,ElemState) Description SUBINCR4ELMNTSD element displacement increment subdivision for state determination ELEMSTATE = SUBINCR4ELMNTSD (EL,ELEMNAME,XYZ,ELEMDATA,ELEMSTATE) function calls the state determination function for all elements in the structural model with the option of subdividing the displacement increment in case of non-convergence; the latter case is represented by the logical variable CONVFLAG in ELEMSTATE; to activate the option of element displacement increment subdivision, the variable SUBDIVNO must be set in the element property data structure ELEMDATA Cross-Reference Information This function calls: This function is called by: Structure STRUCTURE performs requested action on group of elements","title":"SubIncr4ElemntSD"},{"location":"Functions/latest/General_Functions/V0_vector/","text":"latest > General_Functions > V0_vector Purpose V0_VECTOR initial element deformation vector for the structural model Synopsis function V0 = V0_vector (Model,ElemData,Roption) Description V0_VECTOR initial element deformation vector for the structural model V0 = V0_VECTOR (MODEL,ELEMDATA,ROPTION) the function sets up the initial element deformation vector V0 for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA if ROPTION=0, element release information is not accounted for in setting up V0 (default=1) Cross-Reference Information This function calls: Localize LOCALIZE returns the node coordinates and id array of element This function is called by: S_ForceMethod % S_FORCEMETHOD script for force method of structural analysis","title":"V0_vector"},{"location":"Functions/latest/Material_Library/","text":"Material Library","title":"Material Library"},{"location":"Functions/latest/Material_Library/BilinElastic1dMat/","text":"latest > Material_Library > BilinElastic1dMat Purpose BILINELASTIC1dMAT uniaxial stress-strain relation for a bilinear elastic material Synopsis function MatResp = BilinElastic1dMat (action,MatNo,MatData,MatState) Description BILINELASTIC1dMAT uniaxial stress-strain relation for a bilinear elastic material MATRESP = BILINELASTIC1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for a bilinear elastic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Eh = post-yield modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BilinElastic1dMat"},{"location":"Functions/latest/Material_Library/BilinHyst1dMat/","text":"latest > Material_Library > BilinHyst1dMat Purpose BILINHYST1dMAT bilinear hysteretic force-deformation relation with pinching Synopsis function MatResp = BilinHyst1dMat (action,MatNo,MatData,MatState) Description BILINHYST1dMAT bilinear hysteretic force-deformation relation with pinching MATRESP = BILINHYST1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function for bilinear hysteretic force-deformation relation with pinching ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields sig1p = positive stress at first transition eps1p = positive strain at first transition sig2p = ultimate positive stress eps2p = ultimate positive strain sig1n = negative stress at first transition eps1n = negative strain at first transition sig2n = ultimate negative stress eps2n = ultimate negative strain pnchx(+ve ; -ve) = x-pinching parameters under +ve and -ve deformation pnchy(+ve ; -ve) = y-pinching parameters under +ve and -ve deformation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BilinHyst1dMat"},{"location":"Functions/latest/Material_Library/BilinInel1dMat/","text":"latest > Material_Library > BilinInel1dMat Purpose BILININEL1dMAT uniaxial stress-strain relation for bilinear inelastic material Synopsis function MatResp = BilinInel1dMat (action,MatNo,MatData,MatState) Description BILININEL1dMAT uniaxial stress-strain relation for bilinear inelastic material MATRESP = BILININEL1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for bilinear inelastic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Eh = post-yield modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BilinInel1dMat"},{"location":"Functions/latest/Material_Library/BilinOrOr1dMat/","text":"latest > Material_Library > BilinOrOr1dMat Purpose BILINOROR1dMAT uniaxial stress-strain relation for bilinear origin-oriented material Synopsis function MatResp = BilinOrOr1dMat (action,MatNo,MatData,MatState) Description BILINOROR1dMAT uniaxial stress-strain relation for bilinear origin-oriented material MATRESP = BILINOROR1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for bilinear origin-oriented material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'data' function prints material properties in output file IOW 'hist' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for action = 'data' and for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Eh = post-yield modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BilinOrOr1dMat"},{"location":"Functions/latest/Material_Library/BilinPkOr1dMat/","text":"latest > Material_Library > BilinPkOr1dMat Purpose BILINPKOR1dMAT uniaxial stress-strain relation for bilinear origin-oriented material Synopsis function MatResp = BilinPkOr1dMat (action,MatNo,MatData,MatState) Description BILINPKOR1dMAT uniaxial stress-strain relation for bilinear origin-oriented material MATRESP = BILINPKOR1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for bilinear origin-oriented material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'data' function prints material properties in output file IOW 'hist' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for action = 'data' and for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Eh = post-yield modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BilinPkOr1dMat"},{"location":"Functions/latest/Material_Library/GMP1dMat/","text":"latest > Material_Library > GMP1dMat Purpose GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material Synopsis function MatResp = GMP1dMat (action,MatNo,MatData,MatState) Description GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material MATRESP = GMP1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields E = initial modulus fy = yield strength b = strain hardening ratio R0 = exp transition elastic-plastic (default value 20) cR1 = coefficient for variation of R0 (default value 0.925) cR2 = coefficient for variation of R0 (default value 0.15) a1 = isotropic hardening (IH) coefficient in compression (default value 0) a2 = trigger strain ductility for IH in compression (default value 0) a3 = isotropic hardening (IH) coefficient in tension (default value 0) a4 = trigger strain ductility for IH in tension (default value 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"GMP1dMat"},{"location":"Functions/latest/Material_Library/InelJ2PwLH3dMat/","text":"latest > Material_Library > InelJ2PwLH3dMat Purpose INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Synopsis function MatResp = InelJ2PwLH3dMat (action,MatNo,MatData,MatState) Description INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening MATRESP = INELJ2PwLH3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material model based on J2 plasticity with isotropic and kinematic hardening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio (default = 0) Hk = kinematic hardening modulus (default = 0) Hi = isotropic hardening modulus (default = 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: This function is called by:","title":"InelJ2PwLH3dMat"},{"location":"Functions/latest/Material_Library/InelLPwLH1dMat/","text":"latest > Material_Library > InelLPwLH1dMat Purpose INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening Synopsis function MatResp = InelLPwLH1dMat (action,MatNo,MatData,MatState) Description INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening MATRESP = INELLPwLH1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Reference: JC Simo and TJR Hughes, Computational Inelasticity, pp. 43-45 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): eps_p = plastic strain alpha = isotropic hardening variable sig_b = back stress (for kinematic hardening) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Hi = isotropic plastic modulus Hk = kinematic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress eps_p = plastic strain Cross-Reference Information This function calls: This function is called by:","title":"InelLPwLH1dMat"},{"location":"Functions/latest/Material_Library/ManderConcr1dMat/","text":"latest > Material_Library > ManderConcr1dMat Purpose MANDERCONCR1DMAT hysteretic concrete stress-strain relation after Mander Synopsis function MatResp = ManderConcr1dMat (action,MatNo,MatData,MatState) Description MANDERCONCR1DMAT hysteretic concrete stress-strain relation after Mander MATRESP = MANDERCONCR1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Mander material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields fc = compressive strength for unconfined concrete epc0 = strain at compressive strength for unconfined concrete Ec = initial modulus for unconfined concrete Kfc = ratio of confined to unconfined concrete strength ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"ManderConcr1dMat"},{"location":"Functions/latest/Material_Library/_index/","text":"latest\\Material_Library BilinElastic1dMat BILINELASTIC1dMAT uniaxial stress-strain relation for a bilinear elastic material BilinHyst1dMat BILINHYST1dMAT bilinear hysteretic force-deformation relation with pinching BilinInel1dMat BILININEL1dMAT uniaxial stress-strain relation for bilinear inelastic material BilinOrOr1dMat BILINOROR1dMAT uniaxial stress-strain relation for bilinear origin-oriented material BilinPkOr1dMat BILINPKOR1dMAT uniaxial stress-strain relation for bilinear origin-oriented material GMP1dMat GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material InelJ2PwLH3dMat INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening InelLPwLH1dMat INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening ManderConcr1dMat MANDERCONCR1DMAT hysteretic concrete stress-strain relation after Mander","title":" index"},{"location":"Functions/latest/Section_Library/","text":"Section Library Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state HomoCircSecw1dMat HOMOCIRCSECw1dMAT response of homogeneous circular section with uniaxial material HomoRectSecw1dMat HOMORECTSECw1dMAT response of homogeneous rectangular section with uniaxial material HomoWFSecw1dMat HOMOWFSECw1dMAT response of homogeneous wide flange (WF) section with uniaxial material MultRectSecw1dMat MULTRECTSECw1dMAT response for section of rectangular patches and bars with uniaxial material ReCircSecw1dMat RECIRCSECw1dMAT response of reinforced circular section with uniaxial materials ReRectSecw1dMat RERECTSECw1dMAT response of reinforced rectangular section with uniaxial materials","title":"Section Library"},{"location":"Functions/latest/Section_Library/Extract_Sec2MatState/","text":"latest > Section_Library > Extract_Sec2MatState Purpose EXTRACT_SEC2MATSTATE extract material state from section state Synopsis function MatState = Extract_Sec2MatState (m,as,SecState) Description EXTRACT_SEC2MATSTATE extract material state from section state MATSTATE = EXTRACT_SEC2MATSTATE (M,AS,SECSTATE) function extracts from data structure SECSTATE the necessary information for material point M, and returns it in data structure MATSTATE; it needs compatibility array AS to determine material strains from section deformations Cross-Reference Information This function calls: This function is called by: HomoCircSecw1dMat HOMOCIRCSECw1dMAT response of homogeneous circular section with uniaxial material HomoRectSecw1dMat HOMORECTSECw1dMAT response of homogeneous rectangular section with uniaxial material HomoWFSecw1dMat HOMOWFSECw1dMAT response of homogeneous wide flange (WF) section with uniaxial material MultRectSecw1dMat MULTRECTSECw1dMAT response for section of rectangular patches and bars with uniaxial material ReCircSecw1dMat RECIRCSECw1dMAT response of reinforced circular section with uniaxial materials ReRectSecw1dMat RERECTSECw1dMAT response of reinforced rectangular section with uniaxial materials","title":"Extract_Sec2MatState"},{"location":"Functions/latest/Section_Library/HomoCircSecw1dMat/","text":"latest > Section_Library > HomoCircSecw1dMat Purpose HOMOCIRCSECw1dMAT response of homogeneous circular section with uniaxial material Synopsis function SecResp = HomoCircSecw1dMat (action,SecNo,ndm,SecData,SecState) Description HOMOCIRCSECw1dMAT response of homogeneous circular section with uniaxial material SECRESP = HOMOCIRCSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a homogeneous circular section with uniaxial material by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields R(1:2) = outer radius and inner radius of section (default = R(1) only) nr = no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth = no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) Rdrat = ratio of inner to outer radius for switching to uniform dicretization IntTyp = function name for section integration ('Midpoint' or 'Cubature') MatName = function name for material uniaxial stress-strain relation MatData = data structure with material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by:","title":"HomoCircSecw1dMat"},{"location":"Functions/latest/Section_Library/HomoRectSecw1dMat/","text":"latest > Section_Library > HomoRectSecw1dMat Purpose HOMORECTSECw1dMAT response of homogeneous rectangular section with uniaxial material Synopsis function SecResp = HomoRectSecw1dMat (action,SecNo,ndm,SecData,SecState) Description HOMORECTSECw1dMAT response of homogeneous rectangular section with uniaxial material SECRESP = HOMORECTSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a homogeneous rectangular section with uniaxial material by integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields d = section depth b = section width ny = no of integration points (fibers) in y (default = 10) nz = no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) IntTyp = function name for section integration MatName = function name for material uniaxial stress-strain relation MatData = data structure with material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by:","title":"HomoRectSecw1dMat"},{"location":"Functions/latest/Section_Library/HomoWFSecw1dMat/","text":"latest > Section_Library > HomoWFSecw1dMat Purpose HOMOWFSECw1dMAT response of homogeneous wide flange (WF) section with uniaxial material Synopsis function SecResp = HomoWFSecw1dMat (action,SecNo,ndm,SecData,SecState) Description HOMOWFSECw1dMAT response of homogeneous wide flange (WF) section with uniaxial material SECRESP = HOMOWFSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of homogeneous wide flange (WF) section with uniaxial material by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) Coordinate system: y ^ | .----+----. | | | '--. | .--' | | | z <-----+ + | d |tw | .--' '--. | tf | '---------' bf Cross-Reference Information This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by:","title":"HomoWFSecw1dMat"},{"location":"Functions/latest/Section_Library/MultRectSecw1dMat/","text":"latest > Section_Library > MultRectSecw1dMat Purpose MULTRECTSECw1dMAT response for section of rectangular patches and bars with uniaxial material Synopsis function SecResp = MultRectSecw1dMat (action,SecNo,ndm,SecData,SecState) Description MULTRECTSECw1dMAT response for section of rectangular patches and bars with uniaxial material SECRESP = MULTRECTSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a section made up of rectangular patches and bars with uniaxial material by integration in y for 2d, and in y and z for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) Coordinate system: ^ y | |---+---------------| | | o o o o o | | | |-----------| z <---+---+ | | | | o o o | |-------- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information 'defo': report section displacements for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP = SECDISP for action = 'defo' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information in fields FibAyz(1:NF,3) = coordinates and area (weight) of NF IPs or fibers for contiguous shape FMatName{:} = cell array of material names for portions of contiguous shape FMatData{:} = cell array with material property data for portions of contiguous shape FMatID(1:NF) = array with material ID for NF fibers of contiguous shape BarAyz(1:NB,3) = coordinates and area (weight) of NB bars BMatName{:} = cell array of material names for bars BMatData{:} = cell array with material property data for bars BMatID(1:NB) = array with material ID for NB bars ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing in fields e = section deformations s = section force resultants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDISP is a data structure with the section displacements in fields ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by:","title":"MultRectSecw1dMat"},{"location":"Functions/latest/Section_Library/ReCircSecw1dMat/","text":"latest > Section_Library > ReCircSecw1dMat Purpose RECIRCSECw1dMAT response of reinforced circular section with uniaxial materials Synopsis function SecResp = ReCircSecw1dMat (action,SecNo,ndm,SecData,SecState) Description RECIRCSECw1dMAT response of reinforced circular section with uniaxial materials SECRESP = RECIRCSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a reinforced circular section with uniaxial materials by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields R(1:2) = outer radius and inner radius of section (default = R(1) only) cv(1:2) = outer/inner cover (default=[0,0]) nr = no of integration points (fibers) for core in radial direction (default=5)(thus 2 x nr across diameter) nth = no of integration points (fibers) for core in circumferential direction (used for 3d only),(default=12) nrc = no of integration points (fibers) for cover in radial direction (default=5) ntc = no of integration points (fibers) for cover in circumferential direction (default=12) MatName = cell array with function names for uniaxial stress-strain relations (1=core,2=cover) MatData = cell array with properties for uniaxial stress-strain relations (1=core,2=cover) BMatName = function name for uniaxial stress-strain relation of reinforcing bars BMatData = data structure with material property data for reinforcing bars BarAyz = array with y-z coordinates and area of each reinforcing bar; y-coordinate in first column, z-coordinate in second, area in third ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section force resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by:","title":"ReCircSecw1dMat"},{"location":"Functions/latest/Section_Library/ReRectSecw1dMat/","text":"latest > Section_Library > ReRectSecw1dMat Purpose RERECTSECw1dMAT response of reinforced rectangular section with uniaxial materials Synopsis function SecResp = ReRectSecw1dMat (action,SecNo,ndm,SecData,SecState) Description RERECTSECw1dMAT response of reinforced rectangular section with uniaxial materials SECRESP = RERECTSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a reinforced rectangular section with uniaxial materials by integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields d = section depth b = section width cv(1:2) = top/bottom and side cover (default=[0,0]) ny = no of integration points (fibers) in y (default = 10) nz = no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) ncl = no of integration points along cover (default = 10) nct = no of integration points across cover (default = 2) IntTyp = function name for section integration MatName = cell array with function names for uniaxial stress-strain relations (1=core,2=cover) MatData = cell array with properties for uniaxial stress-strain relations (1=core,2=cover) BMatName = function name for uniaxial stress-strain relation of reinforcing bars BMatData = data structure with material property data for reinforcing bars BarAyz = array with y-z coordinates and area of each reinforcing bar; y-coordinate in first column, z-coordinate in second, area in third ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by:","title":"ReRectSecw1dMat"},{"location":"Functions/latest/Solution_Scripts/","text":"Solution Scripts","title":"Solution scripts"},{"location":"Functions/latest/Solution_Scripts/S_Check_Global3dEQ/","text":"latest > Solution_Scripts > S_Check_Global3dEQ Purpose % S_CHECK_GLOBAL3dEQ general script for checking global equilibrium of 3d structural models Synopsis This is a script file. Description % S_CHECK_GLOBAL3dEQ general script for checking global equilibrium of 3d structural models the script uses the resisting forces in vector P or in State.Pr for checking the global force equilibrium of the structural model and the resisting forces along with the node coordinates in array Model.XYZ to set up the cross products for checking the moment equilibrium about the global X,Y,Z axes Cross-Reference Information This function calls: This function is called by:","title":"S_Check_Global3dEQ"},{"location":"Functions/latest/Solution_Scripts/S_DisplMethod/","text":"latest > Solution_Scripts > S_DisplMethod Purpose % S_DISPLMETHOD script for displacement method of structural analysis Synopsis This is a script file. Description % S_DISPLMETHOD script for displacement method of structural analysis the script contains the steps for the classical displacement method of structural analysis: (1) set up the kinematic matrix Af (2) set up the collection of element stiffness matrices Ks (3) set up the structure stiffness matrix Kf = Af'*Ks*Af (4) set up the equivalent nodal forces Pwf due to element loading (5) set up the initial element forces Q0 (6) set up the initial nodal forces P0 = Af'Q0 + Pwf (7) solve for the free global DOF displacements Uf from Pf-P0 = Kf*Uf (8) determine the element deformations V=Af*Uf (9) determine the basic element forces Q=Ks*V+Q0 Cross-Reference Information This function calls: A_matrix A_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements Create_PwForces CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w Ks_matrix KS_MATRIX block diagonal matrix of basic element stiffness matrices for structural model Q0_vector Q0_VECTOR initial (fixed-end) force vector for structural model H_index H_INDEX cell array of indices into structure arrays for continuous element deformations This function is called by:","title":"S_DisplMethod"},{"location":"Functions/latest/Solution_Scripts/S_ForceMethod/","text":"latest > Solution_Scripts > S_ForceMethod Purpose % S_FORCEMETHOD script for force method of structural analysis Synopsis This is a script file. Description % S_FORCEMETHOD script for force method of structural analysis the script contains the steps for the force method of structural analysis: (1) set up the equilibrium matrix Bf (2) set up the force influence matrices for the primary structure Bbari and Bbarx (3) set up the collection of element flexibility matrices Fs (4) set up the compatibility conditions and solve for the redundant basic forces Qx (5) determine the basic element forces Q=Qp+Bbarx*Qx (6) determine the element deformations Ve=Fs*Q+V0 (7) determine the free DOF displacements Uf=Bbari'*Ve Cross-Reference Information This function calls: B_matrix B_MATRIX equilibrium matrix of structural model with 2d/3d truss and 2d frame elements BbariBbarx_matrix BBARIBBARX_MATRIX force influence matrices of primary structure from equilibrium matrix Bf Create_PwForces CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w Fs_matrix FS_MATRIX block diagonal matrix of element flexibity matrices for structural model V0_vector V0_VECTOR initial element deformation vector for the structural model H_index H_INDEX cell array of indices into structure arrays for continuous element deformations This function is called by:","title":"S_ForceMethod"},{"location":"Functions/latest/Solution_Scripts/S_InitialStep/","text":"latest > Solution_Scripts > S_InitialStep Purpose % S_INITIALSTEP script for initial step of incremental analysis Synopsis This is a script file. Description % S_INITIALSTEP script for initial step of incremental analysis the script initializes the state of the structural model and sets up the necessary variables for the load factor evolution under the given load pattern; it starts the post-processing counter pc and saves the initial response state in Post; after this it performs a single load step of static analysis with the parameters in SolStrat Cross-Reference Information This function calls: Increment INCREMENT load incrementation and state advance under static conditions Initialize INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_State INITIALIZE_STATE initialize state variables of structural model and create STATE Iterate ITERATE equilibrium iterations until convergence under static conditions Update_State UPDATE_STATE final state determination under static conditions, reset increments and history Structure STRUCTURE performs requested action on group of elements This function is called by:","title":"S_InitialStep"},{"location":"Functions/latest/Solution_Scripts/S_MomCurvAnalysis/","text":"latest > Solution_Scripts > S_MomCurvAnalysis Purpose % S_MOMCURVANALYSIS script for moment-curvature analysis under constant axial force Synopsis This is a script file. Description % S_MOMCURVANALYSIS script for moment-curvature analysis under constant axial force Cross-Reference Information This function calls: Initialize_SolStrat INITIALIZE_SOLSTRAT default values for most solution strategy parameters Create_Loading CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements Create_Model CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) CleanStart CLEANSTART clear all variables from the base workspace and close any open windows This function is called by:","title":"S_MomCurvAnalysis"},{"location":"Functions/latest/Solution_Scripts/S_MultiStep/","text":"latest > Solution_Scripts > S_MultiStep Purpose % S_MULTISTEP script for multi-step incremental analysis after load factor initialization Synopsis This is a script file. Description % S_MULTISTEP script for multi-step incremental analysis after load factor initialization the script sets up the necessary variables for the load factor evolution under the the given load pattern; it initializes the state of the structural model, only if the variable State does not exist in the workspace; it is, therefore, useful for incremental analysis after a change in the load pattern; it initializes the counter pc only if it does not exist in the workspace and saves post-processing information of the first response state; it performs (nostep) load steps of static analysis with the parameters in SolStrat Cross-Reference Information This function calls: Increment INCREMENT load incrementation and state advance under static conditions Initialize INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_State INITIALIZE_STATE initialize state variables of structural model and create STATE Iterate ITERATE equilibrium iterations until convergence under static conditions Update_State UPDATE_STATE final state determination under static conditions, reset increments and history Structure STRUCTURE performs requested action on group of elements This function is called by: S_NMAnalysis % S_NMANALYSIS script for incremental application of N-M pair on section","title":"S_MultiStep"},{"location":"Functions/latest/Solution_Scripts/S_MultiStep_wLoadHist/","text":"latest > Solution_Scripts > S_MultiStep_wLoadHist Purpose % S_MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) Synopsis This is a script file. Description % S_MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) with load factor initialization the script sets up the necessary variables for the load factor evolution for the static analysis under one or more more load patterns with given load histories; it initializes the state of the structural model, only if the variable State does not exist; it is, therefore, useful both for the application of load patterns with load histories from the unstressed state or for the continuation of incremental analysis after a change of the load patterns or the load histories; it initializes the counter pc only if it does not exist in the workspace and saves post-processing information of the initial response state; it performs several load steps of static analysis with the parameters in SolStrat until the pseudo-time parameter Time in State exceeds the specified maximum time Tmax Cross-Reference Information This function calls: Increment INCREMENT load incrementation and state advance under static conditions Initialize INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_State INITIALIZE_STATE initialize state variables of structural model and create STATE Iterate ITERATE equilibrium iterations until convergence under static conditions Update_State UPDATE_STATE final state determination under static conditions, reset increments and history Structure STRUCTURE performs requested action on group of elements This function is called by: S_MomCurvAnalysis % S_MOMCURVANALYSIS script for moment-curvature analysis under constant axial force S_NMAnalysiswSepLoadHist % S_NMANALYSISwSEPLOADHIST script for application N and M with separate load histories","title":"S_MultiStep_wLoadHist"},{"location":"Functions/latest/Solution_Scripts/S_MultiStep_wLoadHistwSD/","text":"latest > Solution_Scripts > S_MultiStep_wLoadHistwSD Purpose % S_MULTISTEP_wLOADHISTwSD script for multi-step incremental analysis under given load history(ies) Synopsis This is a script file. Description % S_MULTISTEP_wLOADHISTwSD script for multi-step incremental analysis under given load history(ies) with load factor initialization, automatic step division and rescaling the script sets up the necessary variables for the load factor evolution for the static analysis under one or more more load patterns with given load histories; it initializes the state of the structural model, only if the variable State does not exist; it is, therefore, useful both for the application of load patterns with load histories from the unstressed state or for the continuation of incremental analysis after a change of the load patterns or the load histories; the script supports automatic load step subdivision and rescaling; it initializes the counter pc only if it does not exist in the workspace and saves post-processing information of the initial response state; it performs several load steps of static analysis with the parameters in SolStrat until the pseudo-time parameter Time in State exceeds the specified maximum time Tmax Cross-Reference Information This function calls: Increment INCREMENT load incrementation and state advance under static conditions Initialize INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_State INITIALIZE_STATE initialize state variables of structural model and create STATE Iterate ITERATE equilibrium iterations until convergence under static conditions Update_State UPDATE_STATE final state determination under static conditions, reset increments and history Structure STRUCTURE performs requested action on group of elements This function is called by:","title":"S_MultiStep_wLoadHistwSD"},{"location":"Functions/latest/Solution_Scripts/S_NMAnalysis/","text":"latest > Solution_Scripts > S_NMAnalysis Purpose % S_NMANALYSIS script for incremental application of N-M pair on section Synopsis This is a script file. Description % S_NMANALYSIS script for incremental application of N-M pair on section Cross-Reference Information This function calls: Initialize_SolStrat INITIALIZE_SOLSTRAT default values for most solution strategy parameters Create_Loading CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements Create_Model CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions S_MultiStep % S_MULTISTEP script for multi-step incremental analysis after load factor initialization CleanStart CLEANSTART clear all variables from the base workspace and close any open windows This function is called by:","title":"S_NMAnalysis"},{"location":"Functions/latest/Solution_Scripts/S_NMAnalysiswSepLoadHist/","text":"latest > Solution_Scripts > S_NMAnalysiswSepLoadHist Purpose % S_NMANALYSISwSEPLOADHIST script for application N and M with separate load histories Synopsis This is a script file. Description % S_NMANALYSISwSEPLOADHIST script for application N and M with separate load histories Cross-Reference Information This function calls: Initialize_SolStrat INITIALIZE_SOLSTRAT default values for most solution strategy parameters Create_Loading CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements Create_Model CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) CleanStart CLEANSTART clear all variables from the base workspace and close any open windows This function is called by:","title":"S_NMAnalysiswSepLoadHist"},{"location":"Functions/latest/Solution_Scripts/S_Transient_MultiStep/","text":"latest > Solution_Scripts > S_Transient_MultiStep Purpose % S_TRANSIENT_MULTISTEP script for multi-step transient analysis under given load history(ies) Synopsis This is a script file. Description % S_TRANSIENT_MULTISTEP script for multi-step transient analysis under given load history(ies) the script sets up the necessary variables for the load factor evolution for the transient analysis under one or more more load patterns with given load histories; it initializes the state of the structural model, only if the variable State does not exist; it is, therefore, useful both for the application of load patterns with load histories from the unstressed state or for the continuation of incremental analysis after a change of the load patterns or the load histories; it initializes the counter pc only if it does not exist in the workspace and saves post-processing information of the initial response state; it performs several load steps of static analysis with the parameters in SolStrat until the pseudo-time parameter Time in State exceeds the specified maximum time Tmax Cross-Reference Information This function calls: TransientIncrement TRANSIENTINCREMENT load incrementation and state advance under transient conditions TransientInitialize TRANSIENTINITIALIZE initialize State variables for transient response analysis TransientIterate TRANSIENTITERATE equilibrium iterations until convergence under transient conditions Update_TransientState UPDATE_TRANSIENTSTATE final state determination under transient conditions, reset increments and history Initialize_State INITIALIZE_STATE initialize state variables of structural model and create STATE Structure STRUCTURE performs requested action on group of elements This function is called by:","title":"S_Transient_MultiStep"},{"location":"Functions/latest/Solution_Scripts/S_Transient_MultiStepwSD/","text":"latest > Solution_Scripts > S_Transient_MultiStepwSD Purpose % S_TRANSIENT_MULTISTEPwSD script for multi-step transient analysis under given load history(ies) Synopsis This is a script file. Description % S_TRANSIENT_MULTISTEPwSD script for multi-step transient analysis under given load history(ies) with initialization, automatic time step division and rescaling the script sets up the necessary variables for the load factor evolution for the transient analysis under one or more more load patterns with given load histories; it initializes the state of the structural model, only if the variable State does not exist; it is, therefore, useful both for the application of load patterns with load histories from the unstressed state or for the continuation of transient analysis after a change of the load patterns or the load histories; the script supports automatic load step subdivision and rescaling; it initializes the counter pc only if it does not exist in the workspace and saves post-processing information of the initial response state; it performs several load steps of static analysis with the parameters in SolStrat until the pseudo-time parameter Time in State exceeds the specified maximum time Tmax Cross-Reference Information This function calls: TransientIncrement TRANSIENTINCREMENT load incrementation and state advance under transient conditions TransientInitialize TRANSIENTINITIALIZE initialize State variables for transient response analysis TransientIterate TRANSIENTITERATE equilibrium iterations until convergence under transient conditions Update_TransientState UPDATE_TRANSIENTSTATE final state determination under transient conditions, reset increments and history Initialize_State INITIALIZE_STATE initialize state variables of structural model and create STATE Structure STRUCTURE performs requested action on group of elements This function is called by:","title":"S_Transient_MultiStepwSD"},{"location":"Functions/latest/Utility_Functions/","text":"Utilities","title":"Utilities"},{"location":"Functions/latest/Utility_Functions/General/","text":"General Utilities","title":"General Utilities"},{"location":"Functions/latest/Utility_Functions/General/CleanStart/","text":"latest > Utility_Functions > General > CleanStart Purpose CLEANSTART clear all variables from the base workspace and close any open windows Synopsis function CleanStart Description CLEANSTART clear all variables from the base workspace and close any open windows CLEANSTART the function initializes the workspace for a new analysis by clearing all existing variables and closing any open windows Cross-Reference Information This function calls: This function is called by: S_MomCurvAnalysis % S_MOMCURVANALYSIS script for moment-curvature analysis under constant axial force S_NMAnalysis % S_NMANALYSIS script for incremental application of N-M pair on section S_NMAnalysiswSepLoadHist % S_NMANALYSISwSEPLOADHIST script for application N and M with separate load histories","title":"CleanStart"},{"location":"Functions/latest/Utility_Functions/General/Create_DispCyclewN/","text":"latest > Utility_Functions > General > Create_DispCyclewN Purpose CREATE_DISPCYCLEwN generate time and value pairs for a single displacement cycle with normal force Synopsis function [DspHst,FrcHst] = Create_DispCyclewN (DspPat,Options) Description CREATE_DISPCYCLEwN generate time and value pairs for a single displacement cycle with normal force [DSPHST,FRCHST] = CREATE_DISPCYCLEwN (DSPPAT,OPTIONS) the function generates the time and value pairs of a single displacement cycle for the pattern in DSPPAT under constant or variable normal force N; the function returns the displacement history in data structure array DSPHST with fields Time and Value and the axial force history in data structure FRCHST with fields Time and Value; the displacement history consists of unit values at reversals with zero values in between, while the force history consists of unit values for constant axial force +- the variable axial force ratio NRat relative to the constant axial force specified in OPTIONS; the structure array DSPHST has one entry for uniaxial and 2 entries for biaxial displacement patterns; FRCHST has only one entry; DSPPAT is a character variable for the displacement path with the following syntax: U means uniaxial and B biaxial, with the addition of V indicating a variable axial force; the supported patterns are: U1(UV1) : uniaxial displacement history in 1-direction U2(UV2) : uniaxial displacement history in 2-direction U3(UV3) : displacement history at specified ratio of values along axis 1 and 2 B1(BV1) : circular displacement pattern starting with axis 1 B2(BV2) : counter-clock wise clover leaf pattern B3(BV3) : diamond displacement pattern B4(BV4) : circular displacement pattern starting with axis 2 OPTIONS is an optional data structure with the following fields: .TrmpN = time interval for ramping up the application of the axial force N .TrmpU = time interval for ramping up or down the application of first U .Nsub = time subdivision for description of circular path (default = 100) .NRat = ratio for axial force variation relative to constant value .HCyc = true or false; if true the function returns a half cycle instead of full .QCyc = true or false; if true the function returns a quarter cycle instead of full Cross-Reference Information This function calls: This function is called by: Create_MultDispCycleswN CREATE_MULTDISPCYCLESwN sequence of full, half or quarter displacement cycles with axial force","title":"Create_DispCyclewN"},{"location":"Functions/latest/Utility_Functions/General/Create_LoadHistory/","text":"latest > Utility_Functions > General > Create_LoadHistory Purpose CREATE_LOADHIST generate time and value pairs of a displacement cycle with normal force Synopsis function LoadHist = Create_LoadHistory (RevVal,LHCase,T_Rev) Description CREATE_LOADHIST generate time and value pairs of a displacement cycle with normal force LOADHIST = CREATE_LOADHIST (REVVAL,LHCASE,T_REV) the function creates load history time and value pairs in fields Time and Value of the structure LOADHIST, respectively; the row vector REVVAL contains the load reversal values and the variable T_REV the period of reversals; the character variable LHCASE supports two cases: 'A' stands for the case that the Nth reversal occurs at N*T_REV, 'B' stands for the case that the reversal times are adjusted so that the rate of change for the load value is constant between reversals Cross-Reference Information This function calls: This function is called by:","title":"Create_LoadHistory"},{"location":"Functions/latest/Utility_Functions/General/Create_MultDispCycleswN/","text":"latest > Utility_Functions > General > Create_MultDispCycleswN Purpose CREATE_MULTDISPCYCLESwN sequence of full, half or quarter displacement cycles with axial force Synopsis function [DspHst,FrcHst] = Create_MultDispCycleswN (DspPat,Ucyc,Ncyc,TmStr,Options) Description CREATE_MULTDISPCYCLESwN sequence of full, half or quarter displacement cycles with axial force [DSPHST,FRCHST] = CREATE_MULTDISPCYCLESwN (DSPPAT,UCYC,NCYC,TMSTR,OPTIONS) the function generates a sequence of full, half or quarter displacement cycles after factoring each with the corresponding factor in array UCYC; the axial force factor of the correponding cycle is specified in the optional array NCYC; UCYC is an ND x NCYC array and NCYC is a 1 x NCYC row vector, where ND is the number of imposed displacements/forces (1=uniaxial, 2=biaxial) and NCYC is the number of cycles; if NCYC is not specified, it is assumed equal to ONES(1,NCYC); the function returns the displacement history in the data structure array DSPHST with the fields Time and Value and the axial force history in the data structure FRCHST with the fields Time and Value; the data structure array DSPHST has one entry for uniaxial and 2 entries for biaxial and 2 entries for biaxial displacement patterns; FRCHST has only one entry. DSPPAT is a character variable if the displacement pattern is the same for all cycles and a character cell array, if the displacement pattern varies from cycle to cycle; the character variable identifies the path of the displacement pattern with the syntax: U means uniaxial and B biaxial, with the addition of V indicating a variable axial force; the supported patterns are: U1(UV1) : uniaxial displacement history in 1-direction U2(UV2) : uniaxial displacement history in 2-direction U3(UV3) : displacement history at specified ratio of values along axis 1 and 2 B1(BV1) : circular displacement pattern starting with axis 1 B2(BV2) : counter-clock wise clover leaf pattern B3(BV3) : diamond displacement pattern B4(BV4) : circular displacement pattern starting with axis 2 the optional argument TMSTR is a logical variable (true or false) to indicate whether the the pseudo-time needs stretching/shortening to maintain equal displacement increment for each displacement reversal (default = true). OPTIONS(NCYC) is an optional structure array with the following fields: .TrmpN = time interval for ramping up the application of the axial force N .TrmpU = time interval for ramping up or down the application of the first displacement .Nsub = time subdivision for description of the circular path .NRat = ratio of axial force variation relative to constant value .HCyc = true or false; true for half cycle instead of full displacement cycle .QCyc = true or false; true for quarter cycle instead of full displacement cycle Cross-Reference Information This function calls: Create_DispCyclewN CREATE_DISPCYCLEwN generate time and value pairs for a single displacement cycle with normal force This function is called by:","title":"Create_MultDispCycleswN"},{"location":"Functions/latest/Utility_Functions/General/Create_Units/","text":"latest > Utility_Functions > General > Create_Units Purpose CREATE_UNITS create time, length, mass and force units Synopsis function Units = Create_Units (UnOption) Description CREATE_UNITS create time, length, mass and force units UNITS = CREATE_UNITS (UNOPTION) the function creates the data structure UNITS with time, length, mass and force units including the value of the acceleration of gravity g for both the SI and the U.S. system; the optional input argument UNOPTION specifies the unit system to select for unit values: UNOPTION = 'US' means that sec, in and kip have unit value for deriving the remaining units UNOPTION = 'SI' means that sec, m and kg have unit value for deriving the remaining units Cross-Reference Information This function calls: This function is called by:","title":"Create_Units"},{"location":"Functions/latest/Utility_Functions/General/D_index/","text":"latest > Utility_Functions > General > D_index Purpose D_INDEX cell array of indices into structure arrays for non-zero element deformations Synopsis function ied = D_index (Model) Description D_INDEX cell array of indices into structure arrays for non-zero element deformations IED = IDEF_INDEX (MODEL) the function sets up the cell array IED of indices for non-zero element deformations of the structural model in data structure MODEL; the list of inextensible elements is provided in field INEXTELIST of MODEL, and the list of inflexible elements in field INFLEXELIST of MODEL Cross-Reference Information This function calls: This function is called by:","title":"D_index"},{"location":"Functions/latest/Utility_Functions/General/H_index/","text":"latest > Utility_Functions > General > H_index Purpose H_INDEX cell array of indices into structure arrays for continuous element deformations Synopsis function iced = H_index (Model,ElemData) Description H_INDEX cell array of indices into structure arrays for continuous element deformations ICED = H_INDEX (MODEL,ELEMDATA) the function sets up the cell array ICED of indices for continuous element deformations based on release information for elements of the structural model in data structure MODEL; the location of element releases is specified in field RELEASE of cell array ELEMDATA ELEMDATA{2}.RELEASE = [0;1;0] : a flexural release is present at end i of element 2 ELEMDATA{3}.RELEASE = [1;0;1] : an axial and a flexural release at end j of element 3 the function supports only truss and 2d frame elements at present Cross-Reference Information This function calls: This function is called by: S_DisplMethod % S_DISPLMETHOD script for displacement method of structural analysis S_ForceMethod % S_FORCEMETHOD script for force method of structural analysis","title":"H_index"},{"location":"Functions/latest/Utility_Functions/General/Print_PDFile/","text":"latest > Utility_Functions > General > Print_PDFile Purpose PRINT_PDFILE sends the current figure to file Synopsis function Print_PDFile (FName,FigOpt,PrOpt) Description PRINT_PDFILE sends the current figure to file PRINT_PDFILE(FNAME,FIGOPT,PROPT) the function generates the FNAME.EXT file from the current figure; if FNAME is missing, it is replaced by 'PFile'; the optional arguments FIGOPT and PROPT are data structures with the following fields for controlling the display and the output: FIGOPT.Pos : position of figure relative to display (1x4 numeric array) .Ornt : figure orientation ('landscape' or 'portrait') PROPT.Format: file format (default=-dpdf for PDF file) .Reso : print resolution (default=-r600 for PDF file) Cross-Reference Information This function calls: This function is called by:","title":"Print_PDFile"},{"location":"Functions/latest/Utility_Functions/Interpolation/","text":"Interpolation","title":"Interpolation"},{"location":"Functions/latest/Utility_Functions/Plotting/","text":"Plotting","title":"Plotting"},{"location":"Functions/latest/Utility_Functions/Plotting/Create_Window/","text":"latest > Utility_Functions > Plotting > Create_Window Purpose CREATE_WINDOW creates new window with given dimensions Synopsis function FigH = Create_Window (dx,dy) Description CREATE_WINDOW creates new window with given dimensions FIGH = CREATE_WINDOW (DX,DY) the function creates a new window with figure handle FIGH and dimensions DX and DY as proportions of the screen size in the horizontal and vertical direction, respectively Cross-Reference Information This function calls: This function is called by:","title":"Create_Window"},{"location":"Functions/latest/Utility_Functions/Plotting/Draw_Arrow/","text":"latest > Utility_Functions > Plotting > Draw_Arrow Purpose DRAW_ARROW draws 2d or 3d arrow Synopsis function varargout = Draw_Arrow (Astr,Aend,Aln,PlotOpt) Description DRAW_ARROW draws 2d or 3d arrow AEND = DRAW_ARROW (ASTR,AEND,ALN,PLOTOPT) the function draws an arrow with starting point ASTR and end point AEND, if ALN is empty; if ALN is specified, then it represents the arrow length with AEND interpreted as the arrow direction; in this case the function returns the end point coordinates of the arrow in vector AEND PLOTOPT is a data structure for controlling the arrow display with the following fields: TipSF: scale factor for controlling the size of the arrow tip (default = 1); ArWth: line width of arrow shaft (default = 1); ArClr: color of arrow shaft and tip (default = 'k'); AbsSF: true or false to indicate absolute or relative to arrow length scaling Cross-Reference Information This function calls: This function is called by: Label_Model LABEL_MODEL displays element and node numbers and global axes in the current window","title":"Draw_Arrow"},{"location":"Functions/latest/Utility_Functions/Plotting/Draw_Cube/","text":"latest > Utility_Functions > Plotting > Draw_Cube Purpose DRAW_CUBE draws cube in current window Synopsis function Draw_Cube (XYZc,Size,Color) Description DRAW_CUBE draws cube in current window DRAW_CUBE (XYZC,SIZE,COLOR) the function draws a cube of size SIZE with center coordinates XYZc and assigns COLOR to cube faces and edges Cross-Reference Information This function calls: This function is called by:","title":"Draw_Cube"},{"location":"Functions/latest/Utility_Functions/Plotting/Get_HngPos4DefoElem/","text":"latest > Utility_Functions > Plotting > Get_HngPos4DefoElem Purpose GET_HNGPOS4DEFOELEM determine axial and flexural hinge position for deformed element Synopsis function [AxHngCoor,FlHngCoor] = Get_HngPos4DefoElem (XYiod,XYjod,xyd,HngOpt) Description GET_HNGPOS4DEFOELEM determine axial and flexural hinge position for deformed element [AXHNGCOOR,FLHNGCOOR] = GET_HNGPOS4DEFOELEM(XYIOD,XYJOD,XYD,HNGOPT) the function determines the axial hinge coordinates AXHNGCOOR and the flexural hinge coordinates FLHNGCOOR for a deformed truss or frame element from the end node coordinates XYIOD and XYJOD of the deformed configuration and the local deformed coordinates XYD of the deformed shape; the data structure HNGOPT has the fields HngSz for the hinge size and HngOf for the offset of the hinge location from the element end Cross-Reference Information This function calls: This function is called by:","title":"Get_HngPos4DefoElem"},{"location":"Functions/latest/Utility_Functions/Plotting/Get_ModelScale/","text":"latest > Utility_Functions > Plotting > Get_ModelScale Purpose GET_MODELSCALE determines maximum and minimum element length in Model Synopsis function [ModSc,maxL,minL] = Get_ModelScale (Model,Ratio) Description GET_MODELSCALE determines maximum and minimum element length in Model [MODSC,MAXL,MINL] = GET_MODELSCALE(MODEL,RATIO) the function determines a critical scale for the structural model in data structure MODEL from the maximum distance MAXL and the minimum distance MINL between nodes i and j of line elements; the maximum distance MAXL is divided by RATIO (default = 1.5-0.5*MINL/MAXL); depending on the value of RATIO the model scale is equal to the largest (RATIO<MAXL/MINL) or smallest distance (RATIO>MAXL/MINL) Cross-Reference Information This function calls: This function is called by: Label_Model LABEL_MODEL displays element and node numbers and global axes in the current window","title":"Get_ModelScale"},{"location":"Functions/latest/Utility_Functions/Plotting/Label_Model/","text":"latest > Utility_Functions > Plotting > Label_Model Purpose LABEL_MODEL displays element and node numbers and global axes in the current window Synopsis function Label_Model (Model,LblOpt) Description LABEL_MODEL displays element and node numbers and global axes in the current window LABEL_MODEL (MODEL,LBLOPT) the function displays in the current window labels for nodes and elements, and the global coordinate axes; LBLOPT is an optional data structure controlling the display; in its absense the function plots all items with default values; LBLOPT has the following fields (all optional) Item : character variable with values 'node','elem', 'axes' (default='all') FntSF: font magnification factor (default = 1) AxsSF: axis arrow length magnification factor (default = 1) LOfSF: node and element label offset magnification factor (default = 1) NList: list of nodes to label (default all nodes in the model) EList: list of elements to label (default all elements in the model) Cross-Reference Information This function calls: Draw_Arrow DRAW_ARROW draws 2d or 3d arrow Get_ModelScale GET_MODELSCALE determines maximum and minimum element length in Model This function is called by:","title":"Label_Model"},{"location":"Functions/latest/Utility_Functions/Plotting/Plot_BounCond/","text":"latest > Utility_Functions > Plotting > Plot_BounCond Purpose PLOT_BOUNCOND plots symbols for boundary conditions of structural model Synopsis function Plot_BounCond (XYZ,BOUN,BsClr,BsSz) Description PLOT_BOUNCOND plots symbols for boundary conditions of structural model PLOT_BOUNCOND (XYZ,BOUN,BSSZ) the function plots symbols for the boundary conditions of the structural model for the node coordinates in the array XYZ (undeformed or deformed configuration and the boundary conditions in the array BOUN; BSSZ gives the size of the node and boundary symbol Cross-Reference Information This function calls: This function is called by:","title":"Plot_BounCond"},{"location":"Functions/latest/Utility_Functions/Plotting/_index/","text":"latest\\Utility_Functions\\Plotting Create_Window CREATE_WINDOW creates new window with given dimensions Draw_Arrow DRAW_ARROW draws 2d or 3d arrow Draw_Cube DRAW_CUBE draws cube in current window Get_HngPos4DefoElem GET_HNGPOS4DEFOELEM determine axial and flexural hinge position for deformed element Get_ModelScale GET_MODELSCALE determines maximum and minimum element length in Model Label_Model LABEL_MODEL displays element and node numbers and global axes in the current window Plot_BounCond PLOT_BOUNCOND plots symbols for boundary conditions of structural model","title":" index"},{"location":"Functions/latest/Utility_Functions/PreProcessing/","text":"Pre-processing","title":"Pre-processing"},{"location":"Functions/latest/Utility_Functions/PreProcessing/Structure/","text":"Structure","title":"Structure"},{"location":"Functions/latest/Utility_Functions/Quadrature/","text":"Quadrature","title":"Quadrature"},{"location":"Gallery/","text":"Gallery","title":"Gallery"},{"location":"Gallery/BasicFrame/","text":"Analysis of 2-Story Steel Frame Download zip package The script files contain the geometry, the element properties and the loading of a 2-story, 1-bay steel frame. The description of the model is subdivided into the following scripts: Description of model geometry with boundary conditions in a file with prefix Model . Description of the element properties in a file with the suffix ElemData . LinearElemData.m specifies the properties for linear elastic frame elements, and SimpleInelElemData for simple inelastic elements that will be discussed in the course of this semester. Four scripts are provided for the following types of analysis: Linear elastic analysis under static loads (file S_LinearAnalysis.m ). Vibration periods and mode shapes (file S_PeriodNModes.m ). Transient analysis under ground acceleration with mode superposition (modal analysis) (file S_ModalAnalysis.m ). Determination of the collapse load factor, the basic forces at incipient collapse and the collapse mechanism by the lower and upper bound theorems of plastic analysis (file S_PlasticAnalysis.m ). All analysis scripts start with calls of A and B for the description of the model geometry and element properties. The first script then specifies the applied loading and use the function LinearStep.m to determine the linear static solution with the direct stiffness implementation of the displacement method of analysis. The post-processing of the results takes place in a separate script called Post_LinearAnalysis.m The second script specifies the lumped mass matrix of the model and uses the function EigenMode.m to determine the period and the shape of its eigenmodes. The third script specifies the influence vector at the free DOFs under horizontal support acceleration and the ground acceleration record. It then uses the function ModalAnalysis.m to determine the transient response of each mode to the support acceleration. The post-processing of the results takes place in a separate script called Post_ModalAnalysis.m . The fourth script specifies the reference load distribution and then uses the function PlasticAnalysis.m to determine the collapse load factor, the basic forces at incipient collapse and the plastic collapse mechanism. The post-processing of the results takes place in a separate script called Post_PlasticAnalysis.m .","title":"Analysis of 2-Story Steel Frame"},{"location":"Gallery/BasicLinear/","text":"FEDEASLab Basic Examples Scripts Ex4_1.m Static solution for determinate plane truss Model: Model_01 (1) Ex4_11.m Static solution for indeterminate braced frame with NOS=2 Ex4_12.m Static solution for cable stayed bridge under construction frame with NOS=2 Ex4_2.m Static solution for determinate space truss. Model: Model_02 (2) Ex4_3.m Static solution for determinate beam with overhang Model: Model_03 (3) Ex4_4.m Static solution for determinate beam with overhang under distributed loading Model: Model_03 (3) Ex4_5.m Static solution for determinate frame with inclined element. Model: Model_04 (4) Ex4_6.m Static solution for determinate three hinge portal frame under distributed loading. Model: Model_05 (5) Ex4_7.m Static solution for parabolic arch Model: Model_PlaneArch (7) Ex4_9.m Static solution for indeterminate plane truss with NOS=1 . Ex5_1.m Kinematic solution for statically determinate truss. Model: Model_06 (6) Ex5_2.m Kinematic solution for statically determinate beam with overhang. Model: Model_03 (3) Ex5_3.m Kinematic solution for statically determinate three hinge portal frame. Model: Model_05 (5) Ex5_4.m Kinematic solution for indeterminate plane truss with NOS=1 Model: Model_06 (6) Ex5_5.m Kinematic solution for indeterminate braced frame with NOS=2 . Ex8_1.m Force-displacement for statically determinate truss Ex8_2.m Force-displacement for simply supported girder with overhang Ex8_3.m Force-displacement for simply supported girder with overhang under distributed load Ex8_4.m Force-displacement for determinate braced frame Ex9_2.m Force method of analysis for braced frame with NOS=2 Models Model_01.m Determinate plane truss Model_02.m Determinate space truss. Model_03.m Determinate beam with overhang Model_04.m Statically determinate frame with inclined element Model_05.m Determinate three hinge portal frame under distributed loading Model_06.m Model_PlaneArch.m Note: This file was generated from a Makefile by executing the following terminal command: $ make pdf","title":"FEDEASLab Basic Examples"},{"location":"Gallery/fdlb-0011/","text":"Yield Surface Evolution This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward. Formulation We seek to define a surface, \\(F_\\tau\\) , at instant \\(\\tau\\) by the following set of moment-axial force ordered pairs: \\[ \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} \\] where \\(\\Phi\\) is satisfied when \\(M\\) and \\(P\\) are resultants of a stress distribution, \\(\\sigma\\) , meeting the condition \\((\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})]\\) for material behavior with only one component. In this condition, \\(\\mathbf{x} \\in \\Omega\\) denotes a point in the cross section, and \\(\\sigma_{y,\\tau}\\) is the limit stress at time \\(\\tau\\) . For the case of perfect plasticity without hardening, the dependence of \\(\\sigma_y\\) on \\(\\mathbf{x}\\) and \\(\\tau\\) is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into \\(n_{IP}\\) integration points, the aforementioned condition is restated approximately as follows: \\[ \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y \\] where N is the set of integration point indices \\(\\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\}\\) and \\(x_i\\) is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\(\\hat{\\mathbf{x}}\\) , of \\(n_{IP}\\) integration point locations, and a vector of corresponding stresses, \\(\\mathbf{y}_\\tau\\) at instant \\(\\tau\\) , find the following set, \\(Y\\) , of admissible stress vectors, \\(\\mathbf{y}\\) : \\[Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ]\\}\\] which is the set of all discrete stress vectors, \\(\\mathbf{y}\\) , such that there exists an admissible strain increment \\(\\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x}\\) which will produce the elastic stress increment \\(\\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon\\) , and there exists an element, \\(y_i\\) , in \\(\\mathbf{y}\\) that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field. Implementation The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size \\((n_{IP},2)\\) . Each ordinate, XY(i,2) , corresponds to the stress \\(y_i \\in \\mathbf{y}_\\tau\\) at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval \\([+1, -1]\\) . The function iterates over every integration point in the set \\(N\\) , carrying out 4 separate nested iterations over the remaining integration points indices, \\(\\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\}\\) . This is a very computationally expensive procedure that grows quickly with \\(n_{IP}\\) . The return variable, Y_lim , is a subset of the piecewise continuous set \\(Y_\\tau\\) with column vectors Y_lim(:,k) defining points of discontinuity. Examples The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors \\(y_k\\) (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: Example 1 - Path O-A-B-O\u2019 ( LoadOpt=3 ) Example 2 - Path O-A-B-C-O\u2019 ( LoadOpt=4 ) This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C. Source Code lim_clip plot_evol","title":"Yield surface evolution"},{"location":"Gallery/fdlb-0011/docs/","text":"Yield Surface Evolution This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward. Formulation We seek to define a surface, \\(F_\\tau\\) , at instant \\(\\tau\\) by the following set of moment-axial force ordered pairs: \\[ \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} \\] where \\(\\Phi\\) is satisfied when \\(M\\) and \\(P\\) are resultants of a stress distribution, \\(\\sigma\\) , meeting the condition \\((\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})]\\) for material behavior with only one component. In this condition, \\(\\mathbf{x} \\in \\Omega\\) denotes a point in the cross section, and \\(\\sigma_{y,\\tau}\\) is the limit stress at time \\(\\tau\\) . For the case of perfect plasticity without hardening, the dependence of \\(\\sigma_y\\) on \\(\\mathbf{x}\\) and \\(\\tau\\) is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into \\(n_{IP}\\) integration points, the aforementioned condition is restated approximately as follows: \\[ \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y \\] where N is the set of integration point indices \\(\\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\}\\) and \\(x_i\\) is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\(\\hat{\\mathbf{x}}\\) , of \\(n_{IP}\\) integration point locations, and a vector of corresponding stresses, \\(\\mathbf{y}_\\tau\\) at instant \\(\\tau\\) , find the following set, \\(Y\\) , of admissible stress vectors, \\(\\mathbf{y}\\) : \\[Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ] \\} \\] which is the set of all discrete stress vectors, \\(\\mathbf{y}\\) , such that there exists an admissible strain increment \\(\\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x}\\) which will produce the elastic stress increment \\(\\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon\\) , and there exists an element, \\(y_i\\) , in \\(\\mathbf{y}\\) that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field. Implementation The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size \\((n_{IP},2)\\) . Each ordinate, XY(i,2) , corresponds to the stress \\(y_i \\in \\mathbf{y}_\\tau\\) at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval \\([+1, -1]\\) . The function iterates over every integration point in the set \\(N\\) , carrying out 4 separate nested iterations over the remaining integration points indices, \\(\\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\}\\) . This is a very computationally expensive procedure that grows quickly with \\(n_{IP}\\) . The return variable, Y_lim , is a subset of the piecewise continuous set \\(Y_\\tau\\) with column vectors Y_lim(:,k) defining points of discontinuity. Examples The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors \\(y_k\\) (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: Example 1 - Path O-A-B-O\u2019 ( LoadOpt=3 ) Point A, 30 integration points. Point B, 30 integration points. Point O\u2019, 30 integration points. Example 2 - Path O-A-B-C-O\u2019 ( LoadOpt=4 ) This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C. Point C, 30 integration points. Point O\u2019, 30 integration points. Source Code lim_clip plot_evol","title":"Index"},{"location":"Gallery/fdlb-0011/docs/idx/","text":"Yield Surface Evolution This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward. Formulation We seek to define a surface, \\(F_\\tau\\) , at instant \\(\\tau\\) by the following set of moment-axial force ordered pairs: \\[ \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} \\] where \\(\\Phi\\) is satisfied when \\(M\\) and \\(P\\) are resultants of a stress distribution, \\(\\sigma\\) , meeting the condition \\((\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})]\\) for material behavior with only one component. In this condition, \\(\\mathbf{x} \\in \\Omega\\) denotes a point in the cross section, and \\(\\sigma_{y,\\tau}\\) is the limit stress at time \\(\\tau\\) . For the case of perfect plasticity without hardening, the dependence of \\(\\sigma_y\\) on \\(\\mathbf{x}\\) and \\(\\tau\\) is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into \\(n_{IP}\\) integration points, the aforementioned condition is restated approximately as follows: \\[ \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y \\] where N is the set of integration point indices \\(\\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\}\\) and \\(x_i\\) is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\(\\hat{\\mathbf{x}}\\) , of \\(n_{IP}\\) integration point locations, and a vector of corresponding stresses, \\(\\mathbf{y}_\\tau\\) at instant \\(\\tau\\) , find the following set, \\(Y\\) , of admissible stress vectors, \\(\\mathbf{y}\\) : \\[Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ]\\}\\] which is the set of all discrete stress vectors, \\(\\mathbf{y}\\) , such that there exists an admissible strain increment \\(\\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x}\\) which will produce the elastic stress increment \\(\\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon\\) , and there exists an element, \\(y_i\\) , in \\(\\mathbf{y}\\) that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field. Implementation The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size \\((n_{IP},2)\\) . Each ordinate, XY(i,2) , corresponds to the stress \\(y_i \\in \\mathbf{y}_\\tau\\) at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval \\([+1, -1]\\) . The function iterates over every integration point in the set \\(N\\) , carrying out 4 separate nested iterations over the remaining integration points indices, \\(\\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\}\\) . This is a very computationally expensive procedure that grows quickly with \\(n_{IP}\\) . The return variable, Y_lim , is a subset of the piecewise continuous set \\(Y_\\tau\\) with column vectors Y_lim(:,k) defining points of discontinuity. Examples The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors \\(y_k\\) (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: Example 1 - Path O-A-B-O\u2019 ( LoadOpt=3 ) Example 2 - Path O-A-B-C-O\u2019 ( LoadOpt=4 ) This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C. Source Code lim_clip plot_evol","title":"Yield surface evolution"},{"location":"Gallery/fdlb-0012/","text":"AIN_MATRIX Syntax AUB = AUB_MATRIX (MODEL,ELEMDATA) AUB = AUB_MATRIX (MODEL,ELEMDATA,ALPH) the function sets up the block diagonal matrix of element limit-surface equations, \\(A_{in}\\) , for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA. Options for parameter ALPH are specified below. Parameters Model : struct Contains structure data. ElemData : cell array Contains element property data. alph : (Optional) Char array or float array. Array. If an \\(n \\times 2\\) array is passed, \\(n\\) piecewise linear axial-moment interaction equations of the following form will be generated for each element: \\[a_n \\frac{|N|}{N_{pl}} + b_n\\left( \\frac{|M_z|}{M_{p,z}} + \\frac{|M_y|}{M_{p,y}}\\right) \\leq 1.0\\] If an \\(n \\times 3\\) array is passed, \\(n\\) piecewise linear axial-moment-shear interaction equations of the following form will be applied: \\[a_n \\frac{|N|}{N_{p}} + b_n \\frac{|M|}{M_{p}} + c_n \\frac{|V|}{V_{p}} \\leq 1.0\\] String. Alternatively, a char array may be passed indicating one of the following options: 'AISC-H2' (Default) 'AISC-H1' Empty. If no parameter is passed in the third position, the function will go to the NMOpt field of the cell ElemData for each element, which may also contain a string or an array. Elements with no such field will default to the AISC-H2 option. Formulation The matrix \\(A_{in}\\) forms the upper bound plastic conditions in the form \\[\\mathbf{A}_{in} \\mathbf{Q} \\leq \\mathbf{1}\\] for the lower bound linear programming problem expressed as follows: \\[\\begin{aligned} \\lambda_{c}=\\max \\lambda & \\\\ \\text { with } &\\left\\{\\begin{aligned} \\lambda P_{r e f}+P_{c f} &=\\mathbf{B}_{f} Q \\\\ \\mathbf{A}_{in} \\mathbf{Q} & \\leq \\mathbf{1} \\\\ \\end{aligned}\\right. \\end{aligned} \\] ### 2D Shear-moment-axial interaction Interaction between shear, moment, and axial forces is implemented with \\(n\\) piecewise linear equations of the following form: \\[a_n\\dfrac{|N|}{N_p} + b_n\\dfrac{|M|}{M_p} + c_n\\dfrac{|V|}{V_p} \\leq1.0\\] \\(N\\) , \\(M\\) , and \\(V\\) are substituted by \\(Q_1\\) , \\(Q_2\\) , and \\((Q_2 +Q_3)/L\\) respectively, and the equations are rearranged and implemented follows: \\[\\dfrac{a}{N_p}Q_1 + \\dfrac{b}{M_p}Q_2 + \\dfrac{ c}{LV_p}(Q_2+Q_3) \\leq1.0\\] \\[\\dfrac{a}{N_p}Q_1 + \\left(\\dfrac{b}{M_p}+\\dfrac{c}{LV_p}\\right)Q_2 + \\dfrac{c}{LV_p}Q_3 \\leq1.0\\]","title":"Generalized piecewise limit surface"},{"location":"Gallery/fdlb-0012/archive/Ain_matrix/","text":"AIN_MATRIX Syntax AUB = AUB_MATRIX (MODEL,ELEMDATA) AUB = AUB_MATRIX (MODEL,ELEMDATA,ALPH) the function sets up the block diagonal matrix of element limit-surface equations, \\(A_{in}\\) , for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA. Options for parameter ALPH are specified below. Parameters Model : struct Contains structure data. ElemData : cell array Contains element property data. alph : (Optional) Char array or float array. Array. If an \\(n \\times 2\\) array is passed, \\(n\\) piecewise linear axial-moment interaction equations of the following form will be generated for each element: \\[a_n \\frac{|N|}{N_{pl}} + b_n\\left( \\frac{|M_z|}{M_{p,z}} + \\frac{|M_y|}{M_{p,y}}\\right) \\leq 1.0\\] If an \\(n \\times 3\\) array is passed, \\(n\\) piecewise linear axial-moment-shear interaction equations of the following form will be applied: \\[a_n \\frac{|N|}{N_{p}} + b_n \\frac{|M|}{M_{p}} + c_n \\frac{|V|}{V_{p}} \\leq 1.0\\] String. Alternatively, a char array may be passed indicating one of the following options: 'AISC-H2' (Default) 'AISC-H1' Empty. If no parameter is passed in the third position, the function will go to the NMOpt field of the cell ElemData for each element, which may also contain a string or an array. Elements with no such field will default to the AISC-H2 option. Formulation The matrix \\(A_{in}\\) forms the upper bound plastic conditions in the form \\[\\mathbf{A}_{in} \\mathbf{Q} \\leq \\mathbf{1}\\] for the lower bound linear programming problem expressed as follows: \\[\\begin{aligned} \\lambda_{c}=\\max \\lambda & \\\\ \\text { with } &\\left\\{\\begin{aligned} \\lambda P_{r e f}+P_{c f} &=\\mathbf{B}_{f} Q \\\\ \\mathbf{A}_{in} \\mathbf{Q} & \\leq \\mathbf{1} \\\\ \\end{aligned}\\right. \\end{aligned} \\] ### 2D Shear-moment-axial interaction Interaction between shear, moment, and axial forces is implemented with \\(n\\) piecewise linear equations of the following form: \\[a_n\\dfrac{|N|}{N_p} + b_n\\dfrac{|M|}{M_p} + c_n\\dfrac{|V|}{V_p} \\leq1.0\\] \\(N\\) , \\(M\\) , and \\(V\\) are substituted by \\(Q_1\\) , \\(Q_2\\) , and \\((Q_2 +Q_3)/L\\) respectively, and the equations are rearranged and implemented follows: \\[\\dfrac{a}{N_p}Q_1 + \\dfrac{b}{M_p}Q_2 + \\dfrac{ c}{LV_p}(Q_2+Q_3) \\leq1.0\\] \\[\\dfrac{a}{N_p}Q_1 + \\left(\\dfrac{b}{M_p}+\\dfrac{c}{LV_p}\\right)Q_2 + \\dfrac{c}{LV_p}Q_3 \\leq1.0\\]","title":"AIN_MATRIX"},{"location":"Gallery/fdlb-0012/archive/tests/","text":"Tests for function Ain_matrix This short write up describes the various test cases developed to verify the function Ain_matrix . These tests are implemented by running the following scripts: Other files which these tests depend on are listed below: Test1_model.m cpPlasticAnalysis.m Hw3P3 This test runs the problem assigned as problem no. 3 from homework set no. 3 in CE-221. Test 0 - Input This test is used to validate the use of the function for various element data input formats. Case 1","title":"Tests for function `Ain_matrix`"},{"location":"Guides/","text":"Getting Started Download & Install The FEDEASLab Matlab Toolbox will soon be available for download as a zipped folder from here . Teaching Get Started Modeling Coming soon Developing Coming soon","title":"Getting Started"},{"location":"Guides/DataStructs/","text":"Data Structures Model Model contains\u2026 \u20138<\u2013 \u201cDataStructures/Model.md\u201d ElemData","title":"Data Structures"},{"location":"Guides/Data_Structures/","text":"","title":"Data Structures"},{"location":"Guides/Developing/","text":"Developer\u2019s Manual Coming soon.","title":"Developer's Manual"},{"location":"Guides/Teaching/","text":"FEDEASLab Basic Structural Analysis Functions Abstract FEDEASLab is a collection of Matlab functions for instruction and research in linear and nonlinear finite element analysis. These functions take advantage of the widespread use of Matlab in engineering curricula around the world, and the extensive set of built-in and customized Matlab functions for many branches of science and engineering. In parallel with the introduction of basic concepts in an introductory course on structural analysis,the initial set of functions is rather small. This report is limited to this initial set. As the complexity of structural analysis concepts and procedures grows, the number of functions grows rapidly under the following criteria: Maintain modularity by keeping the extent of each function focused on a specific task realizing that composite tasks can be accomplished by collecting functions into scripts or higher order functions. Maintain modularity by organizing the variables of the analysis process in a small set of data structures serving as input and output arguments of the different functions. The organization of structural analysis variables in data structures accommodates the subsequent growth in complexity of the structural analysis task with the addition of fields to the existing data structures. For the same reason general utility functions start out with input arguments of simple data types and subsequently expand to accommodate more complex data types while retaining the same interface","title":"FEDEASLab Basic Structural Analysis Functions"},{"location":"Guides/Teaching/chp_1/","text":"Basic Analysis Functions Table of Contents Introduction Function Organization Data Organization Data Structure Model General Utility Functions Function Localize Displacement Method of Analysis 2.10 Direct Stiffness Assembly Introduction FEDEASLab functions implement structural analysis concepts in parallel with their theoretical presentation in the introductory structural analysis course, thus illustrating the generality of the methods and their application to large scale and complex structural models. The intent is not only to reinforce the understanding of the structural response under different types and arrangements of loading, but also to facilitate system and parameter studies. Function Organization The basic structural analysis functions for the introductory course are organized in two folders: Basic and Utilities . The Basic folder contains 14 functions that directly implement the analysis concepts of the course in Matlab. Most functions in this folder are provided in open source form ( .m file format), so that interested readers can relate the implementation details with the theory presented in the course. They can be classified in the following categories: Functions for Structural Matrices and Vectors (8) : These are listed in Table 2.1. Analysis Functions and Scripts (4) : These are listed in Table 2.2. General Utility Functions (2) : Namely Localize and ElmLenOr which are not invoked directly, but are used by the functions in the first category. The user defines the geometry and properties of the structural model, and then specifies the structural analysis procedure(s) and the graphical post-processing of the results by selecting suitable functions from Table 2.1-Table 2.4 in a Matlab script file, as described in the following sections. Scripting affords extensive flexibility for the response determination and the presentation of the results, but puts the burden on the user to assemble the whole by understanding its parts. This supports the open-ended educational mission of FEDEASLab , as opposed to the black-box nature of commercial analysis software. The following sections describe the functions in Table 2.1-Table 2.4 with examples. The notation for function arguments and local variables agrees with the notation of the course reader, as summarized in Appendix RB2. The examples in this chapter correspond to examples of the course reader with the Matlab scripts for all examples available in the folder Examples of the basic FEDEASLab package. Data Organization The initial set of analysis functions for the concepts of an introductory course on structural analysis is built around two data structures: Model , for the geometric description of the structural model, and ElemData for the element and material properties and element loading, as is evident from the input argument list of the functions in Table 2.1-Table 2.4. The organization of structural model information in two data structures serves to emphasize the concept of the introductory structural analysis course that, under linear conditions, the governing static and kinematic relations depend only on the geometry of the structural model and not on any element properties. Accordingly, the functions Bmatrix for setting up the linear static matrix \\(B\\) and Amatrix for setting up the linear kinematic matrix \\(A\\) of the structure take as single input argument the data structure Model with model geometry information. Data Structure Model In FEDEASLab information about the structural model is collected in the data structure Model , which is set up by the function CreateSimpleModel from information supplied by the user. The function CreateSimpleModel is limited to models consisting of 2-node, 2d or 3d truss and frame elements. The function numbers the degrees of freedom (DOFs) of the structure, as discussed in the course reader, thus facilitating their identification for small structural models. With this degree of freedom (DOF) numbering the analysis functions set up full matrices that do not take advantage of the small number of non-zero terms in large structural models. The general model creation function CreateModel does not have limitations on element type and uses a DOF numbering scheme that minimizes the storage of structure matrices. The use of sparse matrices with minimum storage is essential for the analysis of large structural models with 2d and 3d finite elements. Fig. 2.1 shows the input data for the structure of Example R4.1 in the form of numerical arrays XYZ , BOUN , and CON . The rows of XYZ correspond to the nodes and the ndm columns to the node coordinates, where ndm is the dimension of the structural model. The rows of BOUN also correspond to the nodes and the ndf columns to node restraint switches, where ndf is the maximum number of DOFs per node for the model. The DOF order for each node is: 1 = force in \\(X\\) , 2 = force in \\(Y\\) , 3 = moment about \\(Z\\) (for 2d model), or force in \\(Z\\) (for 3d model), 4,5,6 = moment about \\(X\\) , \\(Y\\) and \\(Z\\) (for 3d model). The switch value 0 indicates a free and the value 1 a restrained DOF. CON can be a numerical array for a structural model with only 2-node elements. For finite element models with elements having a different number of nodes, CON needs to be specified as a cell array so that the row contents can vary from element to element. Each row of the numerical CON array contains the node numbers to which the corresponding element connects. Finally, ElemName is a cell array that accommodates element names with a different number of characters. The names 'Truss' and '2dFrm' suffice for tasks that do not require element and material properties. For tasks requiring element and material properties the element names need to be 'LinTruss' , 'Lin2dFrm' , and 'Lin3dFrm' for the 2d/3d truss, the 2d frame, and the 3d frame element, respectively. General Utility Functions Once the geometry and other relevant information about the structural model is collected in data structure Model by the function CreateSimpleModel , information about the geometry and the global DOF correspondence for a particular element can be extracted with the help of two general utility functions: Localize and ElmLenOr . All functions with input arguments Model and ElemData in Table 2.1 invoke these utility functions for setting up the corresponding structural matrices or vectors. Function Localize This function locates the element el in the Model and returns its end node coordinates in array xyz , and the local-global DOF correspondence in vector id . The first column of the two dimensional array xyz contains the coordinates of end i of the element and the second column those of end j . function [ xyz , id ] = Localize ( Model , el ) XYZ = Model . XYZ ; % node coordinates DOF = Model . DOF ; % array with dof numbers for all nodes CON = Model . CON { el } ; % extract connectivity array for element ndf = Model . ndf ( el ) ; % extract no of dofs /node for element % extract element coordinates into array xyz; % use CON array to extract appropriate rows of global XYZ array xyz = XYZ ( CON ( CON > 0 ) ,: ) '; % extract dof numbers into array id % use CON array to extract appropriate rows of DOF array id = DOF ( CON ( CON > 0 ) , 1 : ndf ) '; % reshape id array into vector id = id ( : ) ; Box 2.2: Syntax of function Localize with input arguments Model and el and output arguments xyz and id . Displacement Method of Analysis The steps of the displacement method of analysis are described in Section \\(\\mathrm{R} 10.3\\) and Section \\(\\mathrm{R} 10.4\\) A summary of these steps for implementation in FEDEASLab is: With the kinematic matrix \\(\\mathbf{A}_{f}\\) set up the stiffness matrix \\(\\mathbf{K}_{f}\\) and the initial force vector \\(\\boldsymbol{P}_{0}\\) \\[ \\mathbf{K}_{f}=\\mathbf{A}_{f}^{T} \\mathbf{K}_{s} \\mathbf{A}_{f} \\quad \\boldsymbol{P}_{0}=\\mathbf{A}_{J}^{T} \\boldsymbol{Q}_{0}+\\boldsymbol{P}_{w f} \\] Solve the equilibrium equations for the free DOF displacements \\(\\boldsymbol{U}_{f}\\) \\[ P_{f}=\\mathbf{K}_{f} \\boldsymbol{U}_{f}+\\boldsymbol{P}_{0} \\] Determine the element deformations \\(\\boldsymbol{V}\\) from the kinematic relations \\[ \\boldsymbol{V}=\\mathbf{A}_{f} \\boldsymbol{U}_{f} \\] Determine the basic forces \\(Q\\) from the collection of element force-deformation relations \\[ Q=\\mathbf{K}_{s} \\boldsymbol{V}+\\boldsymbol{Q}_{0} \\] Box 2.17 shows the implementation of these steps in the Matlab script file S_DisplMethod . As is the case with the script for the force method of analysis, the script S_DisplMethod depends on the definition of the structural model geometry in data structure Model , and on the specification of the element property and loading information in data structure ElemData . The specification of the nodal forces Pf and Pwf is optional with default, values equal to zero. The script uses the same auxiliary functions as the script for the force method to remove the rows of the kinematic matrix \\(\\mathbf{A}\\) with release deformations and pad the vector of basic forces \\(Q\\) from the displacement method of analysis with zero values at the releases, so that it can determine the element deformations \\(\\boldsymbol{V}_{\\varepsilon}\\) at the element ends with flexural releases and plot the deformed shape of the corresponding element, if required. 2.10 Direct Stiffness Assembly Section \\(\\mathrm{R} 10.6 .3\\) demonstrates the significant advantage of the displacement method over the force method of analysis: the direct assembly of the structure stiffness matrix \\(\\mathbf{K}_{f}\\) and the resisting forces \\(\\boldsymbol{P}_{r}\\) . We demonstrate briefly the ease of implementing the direct stiffness assembly in FEDEASLab by taking advantage of the array indexing capabilities of Matlab described in Appendix \\(\\mathrm{A}\\) and avoiding the multiplication by the Boolean array in Eq. \\(\\mathrm{R}(10.31) .\\) The latter approach is symbolically compact but computationally inefficient, because the Boolean matrix \\(\\mathbf{A}_{b}^{(e l)}\\) in Eq. \\(\\mathrm{R}(10.31)\\) contains only a few terms of one but mostly zeros. In the direct assembly process the element \\(i d\\) array serves as index of the element stiffness coefficients into the structure stiffness matrix \\(\\check{\\mathrm{K}} .\\) FEDEASLab function Kf_matrix.m assembles the complete stiffness matrix \\(\\check{\\mathrm{K}}\\) and then extracts the stiffness \\(\\mathbf{K}\\) at the free DOFs (in practice only the free dof stiffness \\(\\mathbf{K}\\) is assembled to save storage). K = zeros ( nt , nt ) ; for el = 1 : ne % locate element in Model and return end coordinates and id array [ xyz , id ] = Localize ( Model , el ) ; % form element stiffness matrix ke in global reference system ke = ke_matrix ( Model . ElemName { el } , ElemData { el } , xyz ) ; % assemble element stiffness matrix ke into structure matrix K K ( id , id ) = K ( id , id ) + ke ; end Kf = K ( 1 : nf , 1 : nf ) ; % extract stiffness matrix of free DOFs","title":"Basic Analysis Functions"},{"location":"Guides/Teaching/chp_2/","text":"Utilities Page under development.","title":"Utilities"}]}