{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u03a6\u03b5\u03b9\u03b4\u03b9\u03b1\u03c2 FEDEASLab is a modular framework for teaching and research on the simulation of nonlinear structural response under static and dynamic loads, with a reference implementation in Matlab\u00a9 . Get Started Guides View guides that explain the concepts and components of FEDEASLab . Function Index Peruse a comprehensive list of functions provided by FEDEASLab , with detailed explanations of their interfaces. Examples Walk through some examples of the various analysis procedures that FEDEASLab provides. Rapid Development FEDEASLab functions interact through a consistent API that allows users to rapidly implement and explore new finite element and material models. Developer's Manual Insight through Visualization FEDEASLab provides a powerful post-processing module that is integrated with Matlab's state-of-the art visualization tools. This module is built on top of a simple, unified data model that can be leveraged by users to build insightful illustrations of responses at the model, element, and material level, at any point in a model's lifecycle. Library Examples","title":"Home"},{"location":"elements/","text":"Finite elements This page briefly presents some important families of finite elements. Mixed-Field Elements Beams 3-Field Primal Field Elements Elements in this family are formulated in terms of an unknown displacement field from the total potential energy functional. Lagrange Tensor Product Quad LE4to9nodeQuad Lagrange Serendipity Quad LE4to9nodeQuad Lagrange Hierarchical Quad Lagrange Standard Simplex Lagrange Hierarchical Simplex","title":"Finite elements"},{"location":"elements/#finite-elements","text":"This page briefly presents some important families of finite elements.","title":"Finite elements"},{"location":"elements/#mixed-field-elements","text":"","title":"Mixed-Field Elements"},{"location":"elements/#beams","text":"","title":"Beams"},{"location":"elements/#3-field","text":"","title":"3-Field"},{"location":"elements/#primal-field-elements","text":"Elements in this family are formulated in terms of an unknown displacement field from the total potential energy functional.","title":"Primal Field Elements"},{"location":"elements/#lagrange-tensor-product-quad","text":"LE4to9nodeQuad","title":"Lagrange Tensor Product Quad"},{"location":"elements/#lagrange-serendipity-quad","text":"LE4to9nodeQuad","title":"Lagrange Serendipity Quad"},{"location":"elements/#lagrange-hierarchical-quad","text":"","title":"Lagrange Hierarchical Quad"},{"location":"elements/#lagrange-standard-simplex","text":"","title":"Lagrange Standard Simplex"},{"location":"elements/#lagrange-hierarchical-simplex","text":"","title":"Lagrange Hierarchical Simplex"},{"location":"terms/","text":"Disclaimer Copyright Copyright \u00a9 2020 The Regents of the University of California. This website and its content (including without limitation the text, computer code, artwork, photographs, images, music, audio material, video material and audio-visual material on this website) is owned by the The Regents of the University of California. Any redistribution or reproduction of part or all of the contents in any form is prohibited other than the following: - You may view this website and the material on this website on a computer or mobile device via a web browser; - You may copy and store this website and the material on this website in your web browser cache memory; - You may print pages from this website for your own use. You may not distribute or commercially exploit the content. Nor may you transmit it or store it in any other website or other form of electronic retrieval system. The automated and/or systematic collection of data from this website is prohibited.","title":"Terms"},{"location":"terms/#disclaimer","text":"","title":"Disclaimer"},{"location":"terms/#copyright","text":"Copyright \u00a9 2020 The Regents of the University of California. This website and its content (including without limitation the text, computer code, artwork, photographs, images, music, audio material, video material and audio-visual material on this website) is owned by the The Regents of the University of California. Any redistribution or reproduction of part or all of the contents in any form is prohibited other than the following: - You may view this website and the material on this website on a computer or mobile device via a web browser; - You may copy and store this website and the material on this website in your web browser cache memory; - You may print pages from this website for your own use. You may not distribute or commercially exploit the content. Nor may you transmit it or store it in any other website or other form of electronic retrieval system. The automated and/or systematic collection of data from this website is prohibited.","title":"Copyright"},{"location":"About/","text":"About FEDEASLab FEDEASLab is a modular Matlab\u00a9 toolbox for the simulation of the nonlinear structural response under static and dynamic loads. The names stands for Finite Elements for Design, Evaluation and Analysis of Structures and pays homage to \u03a6\u03f5\u03b9\u03b4\u03b9\u03b1\u03c2, the creator of the magnificent sculptures for the Parthenon during the golden age of Athens under Pericles. and has been used successfully for the development of new elements and material models, as well as for the simulation of the response of small and large structural models in research and instruction. The toolbox consists of several functions grouped in categories. These functions operate on five basic data structures which represent the model, the loading, the element properties, the state of the structural response, and the parameters of the solution strategy. A sixth data structure is optional and carries post-processing information that can be used for response interpretation and visualization. The process of performing the nonlinear response analysis of a structure under static or transient conditions is broken down into logical steps. Each step is represented by a separate function. With this approach the definition of the model, the element properties and the loading as well as the analysis of the model under the given loading is accomplished with scripts that invoke the individual functions. Alternative solution strategies can be readily explored. Moreover, the user can easily exchange a function to provide additional capabilities. It is equally easy to access the data objects and enhance the information stored in them. A common task is the addition of element and material models. This task is simplified by the consistent function interface used throughout the toolbox. Acknowledgements License","title":"About"},{"location":"About/#about-fedeaslab","text":"FEDEASLab is a modular Matlab\u00a9 toolbox for the simulation of the nonlinear structural response under static and dynamic loads. The names stands for Finite Elements for Design, Evaluation and Analysis of Structures and pays homage to \u03a6\u03f5\u03b9\u03b4\u03b9\u03b1\u03c2, the creator of the magnificent sculptures for the Parthenon during the golden age of Athens under Pericles. and has been used successfully for the development of new elements and material models, as well as for the simulation of the response of small and large structural models in research and instruction. The toolbox consists of several functions grouped in categories. These functions operate on five basic data structures which represent the model, the loading, the element properties, the state of the structural response, and the parameters of the solution strategy. A sixth data structure is optional and carries post-processing information that can be used for response interpretation and visualization. The process of performing the nonlinear response analysis of a structure under static or transient conditions is broken down into logical steps. Each step is represented by a separate function. With this approach the definition of the model, the element properties and the loading as well as the analysis of the model under the given loading is accomplished with scripts that invoke the individual functions. Alternative solution strategies can be readily explored. Moreover, the user can easily exchange a function to provide additional capabilities. It is equally easy to access the data objects and enhance the information stored in them. A common task is the addition of element and material models. This task is simplified by the consistent function interface used throughout the toolbox.","title":"About FEDEASLab"},{"location":"About/#acknowledgements","text":"","title":"Acknowledgements"},{"location":"About/#license","text":"","title":"License"},{"location":"About/acknowledgements/","text":"Acknowledgements","title":"Acknowledgements"},{"location":"About/acknowledgements/#acknowledgements","text":"","title":"Acknowledgements"},{"location":"Examples/","text":"Examples","title":"Examples"},{"location":"Examples/#examples","text":"","title":"Examples"},{"location":"Examples/fdlb-0001/","text":"FDLB-0001 Cyclic loading of an inelastic cantilever column using a one component series beam model.","title":"FDLB-0001"},{"location":"Examples/fdlb-0001/#fdlb-0001","text":"Cyclic loading of an inelastic cantilever column using a one component series beam model.","title":"FDLB-0001"},{"location":"Examples/fdlb-0002/","text":"FDLB-0002 Analysis of 2d section under axial force and bending moment (single reference load).","title":"FDLB-0002"},{"location":"Examples/fdlb-0002/#fdlb-0002","text":"Analysis of 2d section under axial force and bending moment (single reference load).","title":"FDLB-0002"},{"location":"Examples/fdlb-0003/","text":"FDLB-0003 Analysis of 2d section under axial force and bending moment with different load histories.","title":"FDLB-0003"},{"location":"Examples/fdlb-0003/#fdlb-0003","text":"Analysis of 2d section under axial force and bending moment with different load histories.","title":"FDLB-0003"},{"location":"Examples/fdlb-0004/","text":"FDLB-0001 Cyclic loading of an inelastic cantilever column using a one component series beam model.","title":"FDLB-0001"},{"location":"Examples/fdlb-0004/#fdlb-0001","text":"Cyclic loading of an inelastic cantilever column using a one component series beam model.","title":"FDLB-0001"},{"location":"Examples/fdlb-0004/AUTHORS/","text":"Authors Filip C. Filippou - filippou@berkeley.edu","title":"Authors"},{"location":"Examples/fdlb-0004/AUTHORS/#authors","text":"Filip C. Filippou - filippou@berkeley.edu","title":"Authors"},{"location":"Examples/fdlb-0005/","text":"FDLB-0005 ( Hw12P2B ) Cyclic Load Analysis of Cantilever Column with Fiber Beam-Column Element.","title":"FDLB-0005 (`Hw12P2B`)"},{"location":"Examples/fdlb-0005/#fdlb-0005-hw12p2b","text":"Cyclic Load Analysis of Cantilever Column with Fiber Beam-Column Element.","title":"FDLB-0005 (Hw12P2B)"},{"location":"Examples/fdlb-0006/","text":"FDLB-0006 ( Hw12P3 ) Incremental PushOver Analysis with load factor control allowing for strength loss under constant gravity loads and increasing lateral forces.","title":"FDLB-0006 (`Hw12P3`)"},{"location":"Examples/fdlb-0006/#fdlb-0006-hw12p3","text":"Incremental PushOver Analysis with load factor control allowing for strength loss under constant gravity loads and increasing lateral forces.","title":"FDLB-0006 (Hw12P3)"},{"location":"Examples/fdlb-0007/","text":"FDLB-0007 Nonlinear Time History Analysis under constant gravity loads.","title":"FDLB-0007"},{"location":"Examples/fdlb-0007/#fdlb-0007","text":"Nonlinear Time History Analysis under constant gravity loads.","title":"FDLB-0007"},{"location":"Examples/fdlb-0008/","text":"FDLB-0008 Built-up column.","title":"FDLB-0008"},{"location":"Examples/fdlb-0008/#fdlb-0008","text":"Built-up column.","title":"FDLB-0008"},{"location":"Examples/fdlb-0009/","text":"CreateMesh","title":"CreateMesh"},{"location":"Examples/fdlb-0009/#createmesh","text":"","title":"CreateMesh"},{"location":"Examples/fdlb-0010/","text":"FEDEASLab Basic Examples Scripts Ex4_1.m : Static solution for determinate plane truss : Model: Model_01 (@Model_01) Ex4_11.m : Static solution for indeterminate braced frame with NOS=2 Ex4_12.m : Static solution for cable stayed bridge under construction frame with NOS=2 Ex4_2.m : Static solution for determinate space truss. : Model: Model_02 (@Model_02) Ex4_3.m : Static solution for determinate beam with overhang : Model: Model_03 (@Model_03) Ex4_4.m : Static solution for determinate beam with overhang under distributed loading : Model: Model_03 (@Model_03) Ex4_5.m : Static solution for determinate frame with inclined element. : Model: Model_04 (@Model_04) Ex4_6.m : Static solution for determinate three hinge portal frame under distributed loading. : Model: Model_05 (@Model_05) Ex4_7.m : Static solution for parabolic arch : Model: Model_PlaneArch (@Model_PlaneArch) Ex4_9.m : Static solution for indeterminate plane truss with NOS=1 . Ex5_1.m : Kinematic solution for statically determinate truss. : Model: Model_06 (@Model_06) Ex5_2.m : Kinematic solution for statically determinate beam with overhang. : Model: Model_03 (@Model_03) Ex5_3.m : Kinematic solution for statically determinate three hinge portal frame. : Model: Model_05 (@Model_05) Ex5_4.m : Kinematic solution for indeterminate plane truss with NOS=1 : Model: Model_06 (@Model_06) Ex5_5.m : Kinematic solution for indeterminate braced frame with NOS=2 . Ex8_1.m : Force-displacement for statically determinate truss Ex8_2.m : Force-displacement for simply supported girder with overhang Ex8_3.m : Force-displacement for simply supported girder with overhang under distributed load Ex8_4.m : Force-displacement for determinate braced frame Ex9_2.m : Force method of analysis for braced frame with NOS=2 Models (@Model_01) Model_01.m Determinate plane truss (@Model_02) Model_02.m Determinate space truss. (@Model_03) Model_03.m Determinate beam with overhang (@Model_04) Model_04.m Statically determinate frame with inclined element (@Model_05) Model_05.m Determinate three hinge portal frame under distributed loading (@Model_06) Model_06.m (@Model_PlaneArch) Model_PlaneArch.m Note: This file was generated from a Makefile by executing the following terminal command: $ make pdf","title":"`FEDEASLab` Basic Examples"},{"location":"Examples/fdlb-0010/#fedeaslab-basic-examples","text":"","title":"FEDEASLab Basic Examples"},{"location":"Examples/fdlb-0010/#scripts","text":"Ex4_1.m : Static solution for determinate plane truss : Model: Model_01 (@Model_01) Ex4_11.m : Static solution for indeterminate braced frame with NOS=2 Ex4_12.m : Static solution for cable stayed bridge under construction frame with NOS=2 Ex4_2.m : Static solution for determinate space truss. : Model: Model_02 (@Model_02) Ex4_3.m : Static solution for determinate beam with overhang : Model: Model_03 (@Model_03) Ex4_4.m : Static solution for determinate beam with overhang under distributed loading : Model: Model_03 (@Model_03) Ex4_5.m : Static solution for determinate frame with inclined element. : Model: Model_04 (@Model_04) Ex4_6.m : Static solution for determinate three hinge portal frame under distributed loading. : Model: Model_05 (@Model_05) Ex4_7.m : Static solution for parabolic arch : Model: Model_PlaneArch (@Model_PlaneArch) Ex4_9.m : Static solution for indeterminate plane truss with NOS=1 . Ex5_1.m : Kinematic solution for statically determinate truss. : Model: Model_06 (@Model_06) Ex5_2.m : Kinematic solution for statically determinate beam with overhang. : Model: Model_03 (@Model_03) Ex5_3.m : Kinematic solution for statically determinate three hinge portal frame. : Model: Model_05 (@Model_05) Ex5_4.m : Kinematic solution for indeterminate plane truss with NOS=1 : Model: Model_06 (@Model_06) Ex5_5.m : Kinematic solution for indeterminate braced frame with NOS=2 . Ex8_1.m : Force-displacement for statically determinate truss Ex8_2.m : Force-displacement for simply supported girder with overhang Ex8_3.m : Force-displacement for simply supported girder with overhang under distributed load Ex8_4.m : Force-displacement for determinate braced frame Ex9_2.m : Force method of analysis for braced frame with NOS=2","title":"Scripts"},{"location":"Examples/fdlb-0010/#models","text":"(@Model_01) Model_01.m Determinate plane truss (@Model_02) Model_02.m Determinate space truss. (@Model_03) Model_03.m Determinate beam with overhang (@Model_04) Model_04.m Statically determinate frame with inclined element (@Model_05) Model_05.m Determinate three hinge portal frame under distributed loading (@Model_06) Model_06.m (@Model_PlaneArch) Model_PlaneArch.m Note: This file was generated from a Makefile by executing the following terminal command: $ make pdf","title":"Models"},{"location":"Examples/fdlb-0011/","text":"Yield Surface Evolution This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward. Formulation We seek to define a surface, F_\\tau , at instant \\tau by the following set of moment-axial force ordered pairs: \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} where \\Phi is satisfied when M and P are resultants of a stress distribution, \\sigma , meeting the condition (\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})] for material behavior with only one component. In this condition, \\mathbf{x} \\in \\Omega denotes a point in the cross section, and \\sigma_{y,\\tau} is the limit stress at time \\tau . For the case of perfect plasticity without hardening, the dependence of \\sigma_y on \\mathbf{x} and \\tau is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into n_{IP} integration points, the aforementioned condition is restated approximately as follows: \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y where N is the set of integration point indices \\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\} and x_i is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\hat{\\mathbf{x}} , of n_{IP} integration point locations, and a vector of corresponding stresses, \\mathbf{y}_\\tau at instant \\tau , find the following set, Y , of admissible stress vectors, \\mathbf{y} : Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ]\\} which is the set of all discrete stress vectors, \\mathbf{y} , such that there exists an admissible strain increment \\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x} which will produce the elastic stress increment \\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon , and there exists an element, y_i , in \\mathbf{y} that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field. Implementation The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size (n_{IP},2) . Each ordinate, XY(i,2) , corresponds to the stress y_i \\in \\mathbf{y}_\\tau at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval [+1, -1] . The function iterates over every integration point in the set N , carrying out 4 separate nested iterations over the remaining integration points indices, \\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\} . This is a very computationally expensive procedure that grows quickly with n_{IP} . The return variable, Y_lim , is a subset of the piecewise continuous set Y_\\tau with column vectors Y_lim(:,k) defining points of discontinuity. Examples The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors y_k (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: ```{include=surf_ex_2.m .matlab} ``` Example 1 - Path O-A-B-O' ( LoadOpt=3 ) Example 2 - Path O-A-B-C-O' ( LoadOpt=4 ) This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C. Source Code lim_clip plot_evol","title":"Yield surface evolution"},{"location":"Examples/fdlb-0011/#yield-surface-evolution","text":"This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward.","title":"Yield Surface Evolution"},{"location":"Examples/fdlb-0011/#formulation","text":"We seek to define a surface, F_\\tau , at instant \\tau by the following set of moment-axial force ordered pairs: \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} where \\Phi is satisfied when M and P are resultants of a stress distribution, \\sigma , meeting the condition (\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})] for material behavior with only one component. In this condition, \\mathbf{x} \\in \\Omega denotes a point in the cross section, and \\sigma_{y,\\tau} is the limit stress at time \\tau . For the case of perfect plasticity without hardening, the dependence of \\sigma_y on \\mathbf{x} and \\tau is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into n_{IP} integration points, the aforementioned condition is restated approximately as follows: \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y where N is the set of integration point indices \\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\} and x_i is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\hat{\\mathbf{x}} , of n_{IP} integration point locations, and a vector of corresponding stresses, \\mathbf{y}_\\tau at instant \\tau , find the following set, Y , of admissible stress vectors, \\mathbf{y} : Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ]\\} which is the set of all discrete stress vectors, \\mathbf{y} , such that there exists an admissible strain increment \\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x} which will produce the elastic stress increment \\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon , and there exists an element, y_i , in \\mathbf{y} that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field.","title":"Formulation"},{"location":"Examples/fdlb-0011/#implementation","text":"The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size (n_{IP},2) . Each ordinate, XY(i,2) , corresponds to the stress y_i \\in \\mathbf{y}_\\tau at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval [+1, -1] . The function iterates over every integration point in the set N , carrying out 4 separate nested iterations over the remaining integration points indices, \\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\} . This is a very computationally expensive procedure that grows quickly with n_{IP} . The return variable, Y_lim , is a subset of the piecewise continuous set Y_\\tau with column vectors Y_lim(:,k) defining points of discontinuity.","title":"Implementation"},{"location":"Examples/fdlb-0011/#examples","text":"The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors y_k (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: ```{include=surf_ex_2.m .matlab} ```","title":"Examples"},{"location":"Examples/fdlb-0011/#example-1-path-o-a-b-o-loadopt3","text":"","title":"Example 1 - Path O-A-B-O' (LoadOpt=3)"},{"location":"Examples/fdlb-0011/#example-2-path-o-a-b-c-o-loadopt4","text":"This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C.","title":"Example 2 - Path O-A-B-C-O' (LoadOpt=4)"},{"location":"Examples/fdlb-0011/#source-code","text":"","title":"Source Code"},{"location":"Examples/fdlb-0011/#lim_clip","text":"","title":"lim_clip"},{"location":"Examples/fdlb-0011/#plot_evol","text":"","title":"plot_evol"},{"location":"Examples/fdlb-0011/docs/","text":"Yield Surface Evolution This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward. Formulation We seek to define a surface, F_\\tau , at instant \\tau by the following set of moment-axial force ordered pairs: \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} where \\Phi is satisfied when M and P are resultants of a stress distribution, \\sigma , meeting the condition (\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})] for material behavior with only one component. In this condition, \\mathbf{x} \\in \\Omega denotes a point in the cross section, and \\sigma_{y,\\tau} is the limit stress at time \\tau . For the case of perfect plasticity without hardening, the dependence of \\sigma_y on \\mathbf{x} and \\tau is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into n_{IP} integration points, the aforementioned condition is restated approximately as follows: \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y where N is the set of integration point indices \\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\} and x_i is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\hat{\\mathbf{x}} , of n_{IP} integration point locations, and a vector of corresponding stresses, \\mathbf{y}_\\tau at instant \\tau , find the following set, Y , of admissible stress vectors, \\mathbf{y} : Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ] \\} which is the set of all discrete stress vectors, \\mathbf{y} , such that there exists an admissible strain increment \\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x} which will produce the elastic stress increment \\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon , and there exists an element, y_i , in \\mathbf{y} that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field. Implementation The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size (n_{IP},2) . Each ordinate, XY(i,2) , corresponds to the stress y_i \\in \\mathbf{y}_\\tau at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval [+1, -1] . The function iterates over every integration point in the set N , carrying out 4 separate nested iterations over the remaining integration points indices, \\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\} . This is a very computationally expensive procedure that grows quickly with n_{IP} . The return variable, Y_lim , is a subset of the piecewise continuous set Y_\\tau with column vectors Y_lim(:,k) defining points of discontinuity. Examples The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors y_k (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: ```{include=surf_ex_2.m .matlab} ### Example 1 - Path O-A-B-O' (`LoadOpt=3`) ![Point A, 30 integration points.](./oabo-a-30.png) ![Point B, 30 integration points.](./oabo-b-30.png) ![Point O', 30 integration points.](./oabo-o-30.png) ### Example 2 - Path O-A-B-C-O' (`LoadOpt=4`) This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C. ![Point C, 30 integration points.](./oabco-c-30.png) ![Point O', 30 integration points.](./oabco-o-30.png) ## Source Code ### `lim_clip` <script src=\"https://gist.github.com/claudioperez/c6e9c9f108fe3706ef18aecd6984444a.js?file=lim_clip.m\"></script> ```{include=lim_clip.m .matlab} plot_evol {include=plot_evol.m .matlab}","title":"Index"},{"location":"Examples/fdlb-0011/docs/#yield-surface-evolution","text":"This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward.","title":"Yield Surface Evolution"},{"location":"Examples/fdlb-0011/docs/#formulation","text":"We seek to define a surface, F_\\tau , at instant \\tau by the following set of moment-axial force ordered pairs: \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} where \\Phi is satisfied when M and P are resultants of a stress distribution, \\sigma , meeting the condition (\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})] for material behavior with only one component. In this condition, \\mathbf{x} \\in \\Omega denotes a point in the cross section, and \\sigma_{y,\\tau} is the limit stress at time \\tau . For the case of perfect plasticity without hardening, the dependence of \\sigma_y on \\mathbf{x} and \\tau is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into n_{IP} integration points, the aforementioned condition is restated approximately as follows: \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y where N is the set of integration point indices \\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\} and x_i is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\hat{\\mathbf{x}} , of n_{IP} integration point locations, and a vector of corresponding stresses, \\mathbf{y}_\\tau at instant \\tau , find the following set, Y , of admissible stress vectors, \\mathbf{y} : Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ] \\} which is the set of all discrete stress vectors, \\mathbf{y} , such that there exists an admissible strain increment \\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x} which will produce the elastic stress increment \\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon , and there exists an element, y_i , in \\mathbf{y} that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field.","title":"Formulation"},{"location":"Examples/fdlb-0011/docs/#implementation","text":"The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size (n_{IP},2) . Each ordinate, XY(i,2) , corresponds to the stress y_i \\in \\mathbf{y}_\\tau at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval [+1, -1] . The function iterates over every integration point in the set N , carrying out 4 separate nested iterations over the remaining integration points indices, \\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\} . This is a very computationally expensive procedure that grows quickly with n_{IP} . The return variable, Y_lim , is a subset of the piecewise continuous set Y_\\tau with column vectors Y_lim(:,k) defining points of discontinuity.","title":"Implementation"},{"location":"Examples/fdlb-0011/docs/#examples","text":"The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors y_k (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: ```{include=surf_ex_2.m .matlab} ### Example 1 - Path O-A-B-O' (`LoadOpt=3`) ![Point A, 30 integration points.](./oabo-a-30.png) ![Point B, 30 integration points.](./oabo-b-30.png) ![Point O', 30 integration points.](./oabo-o-30.png) ### Example 2 - Path O-A-B-C-O' (`LoadOpt=4`) This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C. ![Point C, 30 integration points.](./oabco-c-30.png) ![Point O', 30 integration points.](./oabco-o-30.png) ## Source Code ### `lim_clip` <script src=\"https://gist.github.com/claudioperez/c6e9c9f108fe3706ef18aecd6984444a.js?file=lim_clip.m\"></script> ```{include=lim_clip.m .matlab}","title":"Examples"},{"location":"Examples/fdlb-0011/docs/#plot_evol","text":"{include=plot_evol.m .matlab}","title":"plot_evol"},{"location":"Examples/fdlb-0011/docs/idx/","text":"Yield Surface Evolution This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward. Formulation We seek to define a surface, F_\\tau , at instant \\tau by the following set of moment-axial force ordered pairs: \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} where \\Phi is satisfied when M and P are resultants of a stress distribution, \\sigma , meeting the condition (\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})] for material behavior with only one component. In this condition, \\mathbf{x} \\in \\Omega denotes a point in the cross section, and \\sigma_{y,\\tau} is the limit stress at time \\tau . For the case of perfect plasticity without hardening, the dependence of \\sigma_y on \\mathbf{x} and \\tau is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into n_{IP} integration points, the aforementioned condition is restated approximately as follows: \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y where N is the set of integration point indices \\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\} and x_i is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\hat{\\mathbf{x}} , of n_{IP} integration point locations, and a vector of corresponding stresses, \\mathbf{y}_\\tau at instant \\tau , find the following set, Y , of admissible stress vectors, \\mathbf{y} : Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ]\\} which is the set of all discrete stress vectors, \\mathbf{y} , such that there exists an admissible strain increment \\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x} which will produce the elastic stress increment \\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon , and there exists an element, y_i , in \\mathbf{y} that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field. Implementation The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size (n_{IP},2) . Each ordinate, XY(i,2) , corresponds to the stress y_i \\in \\mathbf{y}_\\tau at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval [+1, -1] . The function iterates over every integration point in the set N , carrying out 4 separate nested iterations over the remaining integration points indices, \\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\} . This is a very computationally expensive procedure that grows quickly with n_{IP} . The return variable, Y_lim , is a subset of the piecewise continuous set Y_\\tau with column vectors Y_lim(:,k) defining points of discontinuity. Examples The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors y_k (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: ```{include=surf_ex_2.m .matlab} ``` Example 1 - Path O-A-B-O' ( LoadOpt=3 ) Example 2 - Path O-A-B-C-O' ( LoadOpt=4 ) This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C. Source Code lim_clip plot_evol","title":"Yield surface evolution"},{"location":"Examples/fdlb-0011/docs/idx/#yield-surface-evolution","text":"This note explores how the yield surface of certain cross sections evolve as they undergo combined flexural and axial loading into the inelastic range. The scope of the discussion is limited by the following assumptions: Shear interaction is negligible. Planar sections remain plane under deformation. For doubly symmetric sections, flexure occurs about a principal axis. For singly symmetric sections, flexure occurs about the asymmetric principal axis. An implementation is developed and examples are presented for a perfectly plastic rectangular homogeneous section, but the generalization of this case is relatively straight forward.","title":"Yield Surface Evolution"},{"location":"Examples/fdlb-0011/docs/idx/#formulation","text":"We seek to define a surface, F_\\tau , at instant \\tau by the following set of moment-axial force ordered pairs: \\{ \\left( M, P \\right) \\in \\mathbb{R} \\times \\mathbb{R} \\mid \\Phi(M,P) \\} where \\Phi is satisfied when M and P are resultants of a stress distribution, \\sigma , meeting the condition (\\exists \\mathbf{x} \\in \\Omega ) [\\sigma ( \\mathbf{x} ) = \\sigma_{y, \\tau }(\\mathbf{x})] for material behavior with only one component. In this condition, \\mathbf{x} \\in \\Omega denotes a point in the cross section, and \\sigma_{y,\\tau} is the limit stress at time \\tau . For the case of perfect plasticity without hardening, the dependence of \\sigma_y on \\mathbf{x} and \\tau is dropped. Additionally, for a singly symmetric homogenous section obeying the assumptions stated above, the stress and strain fields are constant along the flexural axis. After discretizing such a cross section into n_{IP} integration points, the aforementioned condition is restated approximately as follows: \\Phi(M,P) \\implies \\exists i \\in N \\mid \\sigma(x_i) = \\sigma_y where N is the set of integration point indices \\{i \\in\\mathbb{Z}^+ \\mid i \\le n_{IP} \\} and x_i is a scalar distance orthogonal to the flexural axis. The discrete problem may then be stated as follows: Given a vector, \\hat{\\mathbf{x}} , of n_{IP} integration point locations, and a vector of corresponding stresses, \\mathbf{y}_\\tau at instant \\tau , find the following set, Y , of admissible stress vectors, \\mathbf{y} : Y_\\tau = \\{ \\mathbf{y} \\in \\mathbb{R}^{n_{IP}} \\mid (\\exists a \\in \\mathbb{R})(\\exists m \\in \\mathbb{R})[\\mathbf{y} - \\mathbf{y}_\\tau = a + m\\hat{\\mathbf{x}}] \\text{ and } (\\exists i \\in N)[ y_i = \\sigma_y ]\\} which is the set of all discrete stress vectors, \\mathbf{y} , such that there exists an admissible strain increment \\Delta \\varepsilon = \\Delta\\varepsilon_a + \\Delta\\kappa \\mathbf{x} which will produce the elastic stress increment \\mathbf{y} - \\mathbf{y}_\\tau = E \\Delta\\varepsilon , and there exists an element, y_i , in \\mathbf{y} that is equal to the limit stress. Unlike similar discrete approximations of the plastic limit surface, the accuracy of this approximation for the elastic limit surface is dependent on the loading history. Furthermore, this dependence is very difficult to predict as it is related to the distance between integration points and extrema in the residual stress field.","title":"Formulation"},{"location":"Examples/fdlb-0011/docs/idx/#implementation","text":"The implementation of this problem is divided into two functions, plot_evol and lim_clip . The former is a wrapper to the latter. plot_evol extracts the section state and other parameters from the standard FEDEASLab data structures and normalizes the residual stress oridinates before calling lim_clip . The function lim_clip is formulated in terms of an arbitrary set of abscisssas and ordinates, which are supplied to the argument XY as an array of size (n_{IP},2) . Each ordinate, XY(i,2) , corresponds to the stress y_i \\in \\mathbf{y}_\\tau at integration point, i . The values supplied in XY should be normalized such that the codomain, XY(:,2) , is the interval [+1, -1] . The function iterates over every integration point in the set N , carrying out 4 separate nested iterations over the remaining integration points indices, \\{ j \\in\\mathbb{Z}^+ \\mid j \\le n_{IP}, j \\ne i\\} . This is a very computationally expensive procedure that grows quickly with n_{IP} . The return variable, Y_lim , is a subset of the piecewise continuous set Y_\\tau with column vectors Y_lim(:,k) defining points of discontinuity.","title":"Implementation"},{"location":"Examples/fdlb-0011/docs/idx/#examples","text":"The function plot_evol is used in these examples to produce a figure with two plots. The plot on the left shows the normalized stress vectors y_k (also Y_lim(:,k) ) that correspond to points in the normalized resultant plot on the right. It should be noted, however, that the stress distribution corresponding to the current stress distribution is not shown. Examples are executed using the following Matlab script: ```{include=surf_ex_2.m .matlab} ```","title":"Examples"},{"location":"Examples/fdlb-0011/docs/idx/#example-1-path-o-a-b-o-loadopt3","text":"","title":"Example 1 - Path O-A-B-O' (LoadOpt=3)"},{"location":"Examples/fdlb-0011/docs/idx/#example-2-path-o-a-b-c-o-loadopt4","text":"This example is identical to the previous up to point B, after which unloading occurs under a constant moment up to point C.","title":"Example 2 - Path O-A-B-C-O' (LoadOpt=4)"},{"location":"Examples/fdlb-0011/docs/idx/#source-code","text":"","title":"Source Code"},{"location":"Examples/fdlb-0011/docs/idx/#lim_clip","text":"","title":"lim_clip"},{"location":"Examples/fdlb-0011/docs/idx/#plot_evol","text":"","title":"plot_evol"},{"location":"Examples/fdlb-0012/","text":"AIN_MATRIX Syntax AUB = AUB_MATRIX (MODEL,ELEMDATA) AUB = AUB_MATRIX (MODEL,ELEMDATA,ALPH) the function sets up the block diagonal matrix of element limit-surface equations, A_{in} , for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA. Options for parameter ALPH are specified below. Parameters Model : struct\\ Contains structure data. ElemData : cell array\\ Contains element property data. alph : (Optional) Char array or float array. Array. If an n \\times 2 array is passed, n piecewise linear axial-moment interaction equations of the following form will be generated for each element: a_n \\frac{|N|}{N_{pl}} + b_n\\left( \\frac{|M_z|}{M_{p,z}} + \\frac{|M_y|}{M_{p,y}}\\right) \\leq 1.0 If an n \\times 3 array is passed, n piecewise linear axial-moment-shear interaction equations of the following form will be applied: a_n \\frac{|N|}{N_{p}} + b_n \\frac{|M|}{M_{p}} + c_n \\frac{|V|}{V_{p}} \\leq 1.0 String. Alternatively, a char array may be passed indicating one of the following options: 'AISC-H2' (Default) 'AISC-H1' Empty. If no parameter is passed in the third position, the function will go to the NMOpt field of the cell ElemData for each element, which may also contain a string or an array. Elements with no such field will default to the AISC-H2 option. Formulation The matrix A_{in} forms the upper bound plastic conditions in the form \\mathbf{A}_{in} \\mathbf{Q} \\leq \\mathbf{1} for the lower bound linear programming problem expressed as follows: \\begin{aligned} \\lambda_{c}=\\max \\lambda & \\\\ \\text { with } &\\left\\{\\begin{aligned} \\lambda P_{r e f}+P_{c f} &=\\mathbf{B}_{f} Q \\\\ \\mathbf{A}_{in} \\mathbf{Q} & \\leq \\mathbf{1} \\\\ \\end{aligned}\\right. \\end{aligned} 2D Shear-moment-axial interaction Interaction between shear, moment, and axial forces is implemented with n piecewise linear equations of the following form: a_n\\dfrac{|N|}{N_p} + b_n\\dfrac{|M|}{M_p} + c_n\\dfrac{|V|}{V_p} \\leq1.0 N , M , and V are substituted by Q_1 , Q_2 , and (Q_2 +Q_3)/L respectively, and the equations are rearranged and implemented follows: \\dfrac{a}{N_p}Q_1 + \\dfrac{b}{M_p}Q_2 + \\dfrac{ c}{LV_p}(Q_2+Q_3) \\leq1.0 \\dfrac{a}{N_p}Q_1 + \\left(\\dfrac{b}{M_p}+\\dfrac{c}{LV_p}\\right)Q_2 + \\dfrac{c}{LV_p}Q_3 \\leq1.0","title":"`AIN_MATRIX`"},{"location":"Examples/fdlb-0012/#ain_matrix","text":"","title":"AIN_MATRIX"},{"location":"Examples/fdlb-0012/#syntax","text":"AUB = AUB_MATRIX (MODEL,ELEMDATA) AUB = AUB_MATRIX (MODEL,ELEMDATA,ALPH) the function sets up the block diagonal matrix of element limit-surface equations, A_{in} , for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA. Options for parameter ALPH are specified below.","title":"Syntax"},{"location":"Examples/fdlb-0012/#parameters","text":"Model : struct\\ Contains structure data. ElemData : cell array\\ Contains element property data. alph : (Optional) Char array or float array. Array. If an n \\times 2 array is passed, n piecewise linear axial-moment interaction equations of the following form will be generated for each element: a_n \\frac{|N|}{N_{pl}} + b_n\\left( \\frac{|M_z|}{M_{p,z}} + \\frac{|M_y|}{M_{p,y}}\\right) \\leq 1.0 If an n \\times 3 array is passed, n piecewise linear axial-moment-shear interaction equations of the following form will be applied: a_n \\frac{|N|}{N_{p}} + b_n \\frac{|M|}{M_{p}} + c_n \\frac{|V|}{V_{p}} \\leq 1.0 String. Alternatively, a char array may be passed indicating one of the following options: 'AISC-H2' (Default) 'AISC-H1' Empty. If no parameter is passed in the third position, the function will go to the NMOpt field of the cell ElemData for each element, which may also contain a string or an array. Elements with no such field will default to the AISC-H2 option.","title":"Parameters"},{"location":"Examples/fdlb-0012/#formulation","text":"The matrix A_{in} forms the upper bound plastic conditions in the form \\mathbf{A}_{in} \\mathbf{Q} \\leq \\mathbf{1} for the lower bound linear programming problem expressed as follows: \\begin{aligned} \\lambda_{c}=\\max \\lambda & \\\\ \\text { with } &\\left\\{\\begin{aligned} \\lambda P_{r e f}+P_{c f} &=\\mathbf{B}_{f} Q \\\\ \\mathbf{A}_{in} \\mathbf{Q} & \\leq \\mathbf{1} \\\\ \\end{aligned}\\right. \\end{aligned}","title":"Formulation"},{"location":"Examples/fdlb-0012/#2d-shear-moment-axial-interaction","text":"Interaction between shear, moment, and axial forces is implemented with n piecewise linear equations of the following form: a_n\\dfrac{|N|}{N_p} + b_n\\dfrac{|M|}{M_p} + c_n\\dfrac{|V|}{V_p} \\leq1.0 N , M , and V are substituted by Q_1 , Q_2 , and (Q_2 +Q_3)/L respectively, and the equations are rearranged and implemented follows: \\dfrac{a}{N_p}Q_1 + \\dfrac{b}{M_p}Q_2 + \\dfrac{ c}{LV_p}(Q_2+Q_3) \\leq1.0 \\dfrac{a}{N_p}Q_1 + \\left(\\dfrac{b}{M_p}+\\dfrac{c}{LV_p}\\right)Q_2 + \\dfrac{c}{LV_p}Q_3 \\leq1.0","title":"2D Shear-moment-axial interaction"},{"location":"Examples/fdlb-0012/archive/Ain_matrix/","text":"AIN_MATRIX Syntax AUB = AUB_MATRIX (MODEL,ELEMDATA) AUB = AUB_MATRIX (MODEL,ELEMDATA,ALPH) the function sets up the block diagonal matrix of element limit-surface equations, A_{in} , for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA. Options for parameter ALPH are specified below. Parameters Model : struct\\ Contains structure data. ElemData : cell array\\ Contains element property data. alph : (Optional) Char array or float array. Array. If an n \\times 2 array is passed, n piecewise linear axial-moment interaction equations of the following form will be generated for each element: a_n \\frac{|N|}{N_{pl}} + b_n\\left( \\frac{|M_z|}{M_{p,z}} + \\frac{|M_y|}{M_{p,y}}\\right) \\leq 1.0 If an n \\times 3 array is passed, n piecewise linear axial-moment-shear interaction equations of the following form will be applied: a_n \\frac{|N|}{N_{p}} + b_n \\frac{|M|}{M_{p}} + c_n \\frac{|V|}{V_{p}} \\leq 1.0 String. Alternatively, a char array may be passed indicating one of the following options: 'AISC-H2' (Default) 'AISC-H1' Empty. If no parameter is passed in the third position, the function will go to the NMOpt field of the cell ElemData for each element, which may also contain a string or an array. Elements with no such field will default to the AISC-H2 option. Formulation The matrix A_{in} forms the upper bound plastic conditions in the form \\mathbf{A}_{in} \\mathbf{Q} \\leq \\mathbf{1} for the lower bound linear programming problem expressed as follows: \\begin{aligned} \\lambda_{c}=\\max \\lambda & \\\\ \\text { with } &\\left\\{\\begin{aligned} \\lambda P_{r e f}+P_{c f} &=\\mathbf{B}_{f} Q \\\\ \\mathbf{A}_{in} \\mathbf{Q} & \\leq \\mathbf{1} \\\\ \\end{aligned}\\right. \\end{aligned} 2D Shear-moment-axial interaction Interaction between shear, moment, and axial forces is implemented with n piecewise linear equations of the following form: a_n\\dfrac{|N|}{N_p} + b_n\\dfrac{|M|}{M_p} + c_n\\dfrac{|V|}{V_p} \\leq1.0 N , M , and V are substituted by Q_1 , Q_2 , and (Q_2 +Q_3)/L respectively, and the equations are rearranged and implemented follows: \\dfrac{a}{N_p}Q_1 + \\dfrac{b}{M_p}Q_2 + \\dfrac{ c}{LV_p}(Q_2+Q_3) \\leq1.0 \\dfrac{a}{N_p}Q_1 + \\left(\\dfrac{b}{M_p}+\\dfrac{c}{LV_p}\\right)Q_2 + \\dfrac{c}{LV_p}Q_3 \\leq1.0","title":"AIN_MATRIX"},{"location":"Examples/fdlb-0012/archive/Ain_matrix/#ain_matrix","text":"","title":"AIN_MATRIX"},{"location":"Examples/fdlb-0012/archive/Ain_matrix/#syntax","text":"AUB = AUB_MATRIX (MODEL,ELEMDATA) AUB = AUB_MATRIX (MODEL,ELEMDATA,ALPH) the function sets up the block diagonal matrix of element limit-surface equations, A_{in} , for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA. Options for parameter ALPH are specified below.","title":"Syntax"},{"location":"Examples/fdlb-0012/archive/Ain_matrix/#parameters","text":"Model : struct\\ Contains structure data. ElemData : cell array\\ Contains element property data. alph : (Optional) Char array or float array. Array. If an n \\times 2 array is passed, n piecewise linear axial-moment interaction equations of the following form will be generated for each element: a_n \\frac{|N|}{N_{pl}} + b_n\\left( \\frac{|M_z|}{M_{p,z}} + \\frac{|M_y|}{M_{p,y}}\\right) \\leq 1.0 If an n \\times 3 array is passed, n piecewise linear axial-moment-shear interaction equations of the following form will be applied: a_n \\frac{|N|}{N_{p}} + b_n \\frac{|M|}{M_{p}} + c_n \\frac{|V|}{V_{p}} \\leq 1.0 String. Alternatively, a char array may be passed indicating one of the following options: 'AISC-H2' (Default) 'AISC-H1' Empty. If no parameter is passed in the third position, the function will go to the NMOpt field of the cell ElemData for each element, which may also contain a string or an array. Elements with no such field will default to the AISC-H2 option.","title":"Parameters"},{"location":"Examples/fdlb-0012/archive/Ain_matrix/#formulation","text":"The matrix A_{in} forms the upper bound plastic conditions in the form \\mathbf{A}_{in} \\mathbf{Q} \\leq \\mathbf{1} for the lower bound linear programming problem expressed as follows: \\begin{aligned} \\lambda_{c}=\\max \\lambda & \\\\ \\text { with } &\\left\\{\\begin{aligned} \\lambda P_{r e f}+P_{c f} &=\\mathbf{B}_{f} Q \\\\ \\mathbf{A}_{in} \\mathbf{Q} & \\leq \\mathbf{1} \\\\ \\end{aligned}\\right. \\end{aligned}","title":"Formulation"},{"location":"Examples/fdlb-0012/archive/Ain_matrix/#2d-shear-moment-axial-interaction","text":"Interaction between shear, moment, and axial forces is implemented with n piecewise linear equations of the following form: a_n\\dfrac{|N|}{N_p} + b_n\\dfrac{|M|}{M_p} + c_n\\dfrac{|V|}{V_p} \\leq1.0 N , M , and V are substituted by Q_1 , Q_2 , and (Q_2 +Q_3)/L respectively, and the equations are rearranged and implemented follows: \\dfrac{a}{N_p}Q_1 + \\dfrac{b}{M_p}Q_2 + \\dfrac{ c}{LV_p}(Q_2+Q_3) \\leq1.0 \\dfrac{a}{N_p}Q_1 + \\left(\\dfrac{b}{M_p}+\\dfrac{c}{LV_p}\\right)Q_2 + \\dfrac{c}{LV_p}Q_3 \\leq1.0","title":"2D Shear-moment-axial interaction"},{"location":"Examples/fdlb-0012/archive/tests/","text":"Tests for function Ain_matrix This short write up describes the various test cases developed to verify the function Ain_matrix . These tests are implemented by running the following scripts: Other files which these tests depend on are listed below: Test1_model.m cpPlasticAnalysis.m Hw3P3 This test runs the problem assigned as problem no. 3 from homework set no. 3 in CE-221. Test 0 - Input This test is used to validate the use of the function for various element data input formats. Case 1","title":"Tests for function `Ain_matrix`"},{"location":"Examples/fdlb-0012/archive/tests/#tests-for-function-ain_matrix","text":"This short write up describes the various test cases developed to verify the function Ain_matrix . These tests are implemented by running the following scripts: Other files which these tests depend on are listed below: Test1_model.m cpPlasticAnalysis.m","title":"Tests for function Ain_matrix"},{"location":"Examples/fdlb-0012/archive/tests/#hw3p3","text":"This test runs the problem assigned as problem no. 3 from homework set no. 3 in CE-221.","title":"Hw3P3"},{"location":"Examples/fdlb-0012/archive/tests/#test-0-input","text":"This test is used to validate the use of the function for various element data input formats.","title":"Test 0 - Input"},{"location":"Examples/fdlb-0012/archive/tests/#case-1","text":"","title":"Case 1"},{"location":"Functions/latest/","text":"Index CleanStart InelLPwLH1dMat S_InitialStep Simple_PanelZone_Test Create_MRFrame InelPanelZone S_MultiStep Units Create_PanelZone InelTruss S_MultiStep_wLoadHist shape2d GMP1dMat LE2dFrm S_MultiStep_wLoadHistwSD Gauss2d LEIso2dMat S_Transient_MultiStep Gaussq Plot_SingularModes S_Transient_MultiStepwSD InelJ2PwLH3dMat SIUnits Set_PlastCond","title":"Index"},{"location":"Functions/latest/Modeling_Library/","text":"Modeling Libraries","title":"Modeling Libraries"},{"location":"Functions/latest/Modeling_Library/#modeling-libraries","text":"","title":"Modeling Libraries"},{"location":"Functions/latest/Modeling_Library/Element_Library/","text":"Element Library","title":"Element Library"},{"location":"Functions/latest/Modeling_Library/Element_Library/#element-library","text":"","title":"Element Library"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/","text":"Frame Collection # Element Description Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Inel2dFrm_wLHNMYS 2d linear elastic frame element with linear plastic hardening axial-flexure hinges Parameters rho : mass density A : cross sectional area I : moment of inertia E : modulus of elasticity Np : plastic axial capacity of element Mp : plastic moment capacity of element GPYSC : polynomial exponents for plastic surface (see help for function GPYS) Hir : isotropic hardening ratio for flexural end i and j Hkr : kinematic hardening ratio for axial, flexural end i and end j w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; LdIdx : load history no for element loading in x-direction LdIdy : load history no for element loading in y-direction Wtol : incremental work tolerance for state convergence MaxIter : maximum number of iterations for state convergence SubDivNo : number of element deformation subdivisions State Inel2dFrm_wLPPM 2d frame linear elastic element perfectly plastic flexural response Parameters State Inel2dFrm_wOneComp one component 2d frame element with rigid-linear hardening end hinges Parameters rho : mass density E : Young's modulus A : cross-sectional area I : moment of inertia Mp : plastic moment capacity at end nodes i & j ( Mp = [Mpi, Mpj] ) Hi : isotropic plastic modulus Hk : kinematic modulus w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State Inel2dFrm_wTwoComp two component 2d frame element (linear + linear-perfectly plastic) Parameters State LE2dFrm 2d LE frame element under linear or nonlinear geometry Parameters A : cross sectional area E : modulus of elasticity I : moment of inertia Mp : plastic moment capacity rho : mass density jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry Parameters State HomoCircSecw1dMat None Parameters R(1:2) : outer radius and inner radius of section (default = R(1) only) nr : no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth : no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) Rdrat : ratio of inner to outer radius for switching to uniform dicretization IntTyp : function name for section integration ('Midpoint' or 'Cubature') MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State HomoRectSecw1dMat None Parameters d : section depth b : section width ny : no of integration points (fibers) in y (default = 10) nz : no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) IntTyp : function name for section integration MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State e : vector of total section deformations De : vector of section deformation increments from last convergence DDe : vector of section deformation increments from last iteration edot : vector of section deformation rates ks : section stiffness matrix; returned under ACTION = 'stif' s : section resisting force vector; returned under ACTION = 'stif' or 'forc' Past : section history variables at last converged state Pres : current section history variables HomoWFSecw1dMat None Parameters State $(\"a[id^=show_]\").click(function(event) {$(\"#extra_\" + $(this).attr('id').substr(5)).slideToggle(\"fast\"); event.preventDefault();})","title":"Frame Elements"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/#frame-collection","text":"# Element Description Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) Parameters w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) Inel2dFrm_wLHNMYS 2d linear elastic frame element with linear plastic hardening axial-flexure hinges Parameters rho : mass density A : cross sectional area I : moment of inertia E : modulus of elasticity Np : plastic axial capacity of element Mp : plastic moment capacity of element GPYSC : polynomial exponents for plastic surface (see help for function GPYS) Hir : isotropic hardening ratio for flexural end i and j Hkr : kinematic hardening ratio for axial, flexural end i and end j w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; LdIdx : load history no for element loading in x-direction LdIdy : load history no for element loading in y-direction Wtol : incremental work tolerance for state convergence MaxIter : maximum number of iterations for state convergence SubDivNo : number of element deformation subdivisions State Inel2dFrm_wLPPM 2d frame linear elastic element perfectly plastic flexural response Parameters State Inel2dFrm_wOneComp one component 2d frame element with rigid-linear hardening end hinges Parameters rho : mass density E : Young's modulus A : cross-sectional area I : moment of inertia Mp : plastic moment capacity at end nodes i & j ( Mp = [Mpi, Mpj] ) Hi : isotropic plastic modulus Hk : kinematic modulus w : uniform element load ( w(1) = longitudinal, w(2) = transverse ) jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State Inel2dFrm_wTwoComp two component 2d frame element (linear + linear-perfectly plastic) Parameters State LE2dFrm 2d LE frame element under linear or nonlinear geometry Parameters A : cross sectional area E : modulus of elasticity I : moment of inertia Mp : plastic moment capacity rho : mass density jntoff : rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j State u : vector of total element displacements in global reference Du : vector of element displacement increments from last convergence DDu : vector of element displacement increments from last iteration ke : element stiffness matrix in global reference; updated under ACTION = 'stif' p : element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past : element history variables at last converged state Pres : current element history variables lamda : row vector of current load factor(s) LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry Parameters State HomoCircSecw1dMat None Parameters R(1:2) : outer radius and inner radius of section (default = R(1) only) nr : no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth : no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) Rdrat : ratio of inner to outer radius for switching to uniform dicretization IntTyp : function name for section integration ('Midpoint' or 'Cubature') MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State HomoRectSecw1dMat None Parameters d : section depth b : section width ny : no of integration points (fibers) in y (default = 10) nz : no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) IntTyp : function name for section integration MatName : function name for material uniaxial stress-strain relation MatData : data structure with material property data State e : vector of total section deformations De : vector of section deformation increments from last convergence DDe : vector of section deformation increments from last iteration edot : vector of section deformation rates ks : section stiffness matrix; returned under ACTION = 'stif' s : section resisting force vector; returned under ACTION = 'stif' or 'forc' Past : section history variables at last converged state Pres : current section history variables HomoWFSecw1dMat None Parameters State $(\"a[id^=show_]\").click(function(event) {$(\"#extra_\" + $(this).attr('id').substr(5)).slideToggle(\"fast\"); event.preventDefault();})","title":"Frame Collection"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/InelTruss/","text":"InelTruss Purpose INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry Synopsis function ElemResp = InelTruss (action,el_no,xyz,ElemData,ElemState) Description INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry ELEMRESP = INELTRUSS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d/3d inelastic truss element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area MatName = function for material stress-strain response MatData = material property data s0 = initial force (default = 0) e0 = initial deformation (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Mat = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: This function is called by:","title":"InelTruss"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/InelTruss/#ineltruss","text":"","title":"InelTruss"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/InelTruss/#purpose","text":"INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry","title":"Purpose"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/InelTruss/#synopsis","text":"function ElemResp = InelTruss (action,el_no,xyz,ElemData,ElemState)","title":"Synopsis"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/InelTruss/#description","text":"INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry ELEMRESP = INELTRUSS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d/3d inelastic truss element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area MatName = function for material stress-strain response MatData = material property data s0 = initial force (default = 0) e0 = initial deformation (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Mat = material response information for post-processing (see material function with MatName)","title":"Description"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/InelTruss/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/LE2dFrm/","text":"LE2dFrm Purpose LE2dFRM 2d LE frame element under linear or nonlinear geometry Synopsis function ElemResp = LE2dFrm (action,el_no,xyz,ElemData,ElemState) Description LE2dFRM 2d LE frame element under linear or nonlinear geometry ELEMRESP = LE2dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = FunHandle for action = 'defo' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) e0 = initial deformations (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j Release = axial and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: This function is called by:","title":"LE2dFrm"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/LE2dFrm/#le2dfrm","text":"","title":"LE2dFrm"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/LE2dFrm/#purpose","text":"LE2dFRM 2d LE frame element under linear or nonlinear geometry","title":"Purpose"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/LE2dFrm/#synopsis","text":"function ElemResp = LE2dFrm (action,el_no,xyz,ElemData,ElemState)","title":"Synopsis"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/LE2dFrm/#description","text":"LE2dFRM 2d LE frame element under linear or nonlinear geometry ELEMRESP = LE2dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = FunHandle for action = 'defo' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) e0 = initial deformations (default = 0) jntoff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j Release = axial and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces","title":"Description"},{"location":"Functions/latest/Modeling_Library/Element_Library/Frame_Elements/LE2dFrm/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Modeling_Library/Element_Library/Plane_Elements/","text":"","title":"Plane Elements"},{"location":"Functions/latest/Modeling_Library/Element_Library/Plane_Elements/Quad_Placeholder2/","text":"Quad_Placeholder2 Lorem Ipsum","title":"Quad_Placeholder2"},{"location":"Functions/latest/Modeling_Library/Element_Library/Plane_Elements/Quad_Placeholder2/#quad_placeholder2","text":"Lorem Ipsum","title":"Quad_Placeholder2"},{"location":"Functions/latest/Modeling_Library/Element_Library/Plane_Elements/Quad_test/","text":"Quad_Placeholder Lorem","title":"Quad_Placeholder"},{"location":"Functions/latest/Modeling_Library/Element_Library/Plane_Elements/Quad_test/#quad_placeholder","text":"Lorem","title":"Quad_Placeholder"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/","text":"Special Elements","title":"Special"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/#special-elements","text":"","title":"Special Elements"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/MaterialWrapper/","text":"[]{#_top} [Home](../FEDEASLab.html) > [Element\\_Library](FEDEASLab.html) > MaterialWrapper.m MaterialWrapper []{#_name}PURPOSE **MATERIALWRAPPER wrapper element that passes on arguments to the material state determination** []{#_synopsis}SYNOPSIS **function ElemResp = MaterialWrapper (action,el\\_no,xyz,ElemData,ElemState)** []{#_description}DESCRIPTION MATERIALWRAPPER wrapper element that passes on arguments to the material state determination ELEMRESP = MATERIALWRAPPER (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) the function determines the response of the material MATNAME in ELEMDATA ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'size' function reports size of element arrays in variable ARSZ 'chec' function checks element property data for omissions and returns default values in ELEMDATA 'init' function returns element history variables in ELEMSTATE 'forc' function returns element resisting forces in ELEMSTATE 'stif' function returns element stiffness matrix and resisting forces in ELEMSTATE 'post' function returns data structure ELEMPOST with post-processing information depending on value of character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO and end node coordinates XYZ; the data structure ELEMDATA supplies the element property data. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure ELEMRESP stands for the following data object depending on value of ACTION ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = eps = material strains q = sig = material stresses []{#_cross}CROSS-REFERENCE INFORMATION This function calls: Extract_El2MatState EXTRACT_EL2MATSTATE extract material state from element state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Description of MaterialWrapper"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/MaterialWrapper/#materialwrapper","text":"","title":"MaterialWrapper"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/MaterialWrapper/#_namepurpose","text":"**MATERIALWRAPPER wrapper element that passes on arguments to the material state determination**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/MaterialWrapper/#_synopsissynopsis","text":"**function ElemResp = MaterialWrapper (action,el\\_no,xyz,ElemData,ElemState)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/MaterialWrapper/#_descriptiondescription","text":"MATERIALWRAPPER wrapper element that passes on arguments to the material state determination ELEMRESP = MATERIALWRAPPER (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) the function determines the response of the material MATNAME in ELEMDATA ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'size' function reports size of element arrays in variable ARSZ 'chec' function checks element property data for omissions and returns default values in ELEMDATA 'init' function returns element history variables in ELEMSTATE 'forc' function returns element resisting forces in ELEMSTATE 'stif' function returns element stiffness matrix and resisting forces in ELEMSTATE 'post' function returns data structure ELEMPOST with post-processing information depending on value of character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO and end node coordinates XYZ; the data structure ELEMDATA supplies the element property data. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure ELEMRESP stands for the following data object depending on value of ACTION ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = eps = material strains q = sig = material stresses","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/MaterialWrapper/#_crosscross-reference-information","text":"This function calls: Extract_El2MatState EXTRACT_EL2MATSTATE extract material state from element state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/SectionWrapper/","text":"[]{#_top} [Home](../FEDEASLab.html) > [Element\\_Library](FEDEASLab.html) > SectionWrapper.m SectionWrapper []{#_name}PURPOSE **SECTIONWRAPPER wrapper element that passes on arguments to the section state determination** []{#_synopsis}SYNOPSIS **function ElemResp = SectionWrapper (action,el\\_no,xyz,ElemData,ElemState)** []{#_description}DESCRIPTION SECTIONWRAPPER wrapper element that passes on arguments to the section state determination ELEMRESP = SECTIONWRAPPER (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) the function determines the response of the section SECNAME in ELEMDATA ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = e = section deformations q = s = section forces []{#_cross}CROSS-REFERENCE INFORMATION This function calls: Extract_El2SecState EXTRACT_EL2SECSTATE extract section state from element state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"SectionWrapper"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/SectionWrapper/#sectionwrapper","text":"","title":"SectionWrapper"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/SectionWrapper/#_namepurpose","text":"**SECTIONWRAPPER wrapper element that passes on arguments to the section state determination**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/SectionWrapper/#_synopsissynopsis","text":"**function ElemResp = SectionWrapper (action,el\\_no,xyz,ElemData,ElemState)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/SectionWrapper/#_descriptiondescription","text":"SECTIONWRAPPER wrapper element that passes on arguments to the section state determination ELEMRESP = SECTIONWRAPPER (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) the function determines the response of the section SECNAME in ELEMDATA ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = e = section deformations q = s = section forces","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/Modeling_Library/Element_Library/Special/SectionWrapper/#_crosscross-reference-information","text":"This function calls: Extract_El2SecState EXTRACT_EL2SECSTATE extract section state from element state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/Modeling_Library/Material_Library/","text":"Material Library","title":"Material Library"},{"location":"Functions/latest/Modeling_Library/Material_Library/#material-library","text":"","title":"Material Library"},{"location":"Functions/latest/Modeling_Library/Material_Library/GMP1dMat/","text":"GMP1dMat Purpose GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material Synopsis function MatResp = GMP1dMat (action,MatNo,MatData,MatState) Description GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material MATRESP = GMP1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields E = initial modulus fy = yield strength b = strain hardening ratio R0 = exp transition elastic-plastic (default value 20) cR1 = coefficient for variation of R0 (default value 0.925) cR2 = coefficient for variation of R0 (default value 0.15) a1 = isotropic hardening (IH) coefficient in compression (default value 0) a2 = trigger strain ductility for IH in compression (default value 0) a3 = isotropic hardening (IH) coefficient in tension (default value 0) a4 = trigger strain ductility for IH in tension (default value 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"GMP1dMat"},{"location":"Functions/latest/Modeling_Library/Material_Library/GMP1dMat/#gmp1dmat","text":"","title":"GMP1dMat"},{"location":"Functions/latest/Modeling_Library/Material_Library/GMP1dMat/#purpose","text":"GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material","title":"Purpose"},{"location":"Functions/latest/Modeling_Library/Material_Library/GMP1dMat/#synopsis","text":"function MatResp = GMP1dMat (action,MatNo,MatData,MatState)","title":"Synopsis"},{"location":"Functions/latest/Modeling_Library/Material_Library/GMP1dMat/#description","text":"GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material MATRESP = GMP1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields E = initial modulus fy = yield strength b = strain hardening ratio R0 = exp transition elastic-plastic (default value 20) cR1 = coefficient for variation of R0 (default value 0.925) cR2 = coefficient for variation of R0 (default value 0.15) a1 = isotropic hardening (IH) coefficient in compression (default value 0) a2 = trigger strain ductility for IH in compression (default value 0) a3 = isotropic hardening (IH) coefficient in tension (default value 0) a4 = trigger strain ductility for IH in tension (default value 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress","title":"Description"},{"location":"Functions/latest/Modeling_Library/Material_Library/GMP1dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelJ2PwLH3dMat/","text":"InelJ2PwLH3dMat Purpose INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Synopsis function MatResp = InelJ2PwLH3dMat (action,MatNo,MatData,MatState) Description INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening MATRESP = INELJ2PwLH3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material model based on J2 plasticity with isotropic and kinematic hardening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio (default = 0) Hk = kinematic hardening modulus (default = 0) Hi = isotropic hardening modulus (default = 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: This function is called by:","title":"InelJ2PwLH3dMat"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelJ2PwLH3dMat/#inelj2pwlh3dmat","text":"","title":"InelJ2PwLH3dMat"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelJ2PwLH3dMat/#purpose","text":"INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening","title":"Purpose"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelJ2PwLH3dMat/#synopsis","text":"function MatResp = InelJ2PwLH3dMat (action,MatNo,MatData,MatState)","title":"Synopsis"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelJ2PwLH3dMat/#description","text":"INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening MATRESP = INELJ2PwLH3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material model based on J2 plasticity with isotropic and kinematic hardening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio (default = 0) Hk = kinematic hardening modulus (default = 0) Hi = isotropic hardening modulus (default = 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23","title":"Description"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelJ2PwLH3dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelLPwLH1dMat/","text":"InelLPwLH1dMat Purpose INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening Synopsis function MatResp = InelLPwLH1dMat (action,MatNo,MatData,MatState) Description INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening MATRESP = INELLPwLH1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Reference: JC Simo and TJR Hughes, Computational Inelasticity, pp. 43-45 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): eps_p = plastic strain alpha = isotropic hardening variable sig_b = back stress (for kinematic hardening) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Hi = isotropic plastic modulus Hk = kinematic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress eps_p = plastic strain Cross-Reference Information This function calls: This function is called by:","title":"InelLPwLH1dMat"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelLPwLH1dMat/#inellpwlh1dmat","text":"","title":"InelLPwLH1dMat"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelLPwLH1dMat/#purpose","text":"INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening","title":"Purpose"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelLPwLH1dMat/#synopsis","text":"function MatResp = InelLPwLH1dMat (action,MatNo,MatData,MatState)","title":"Synopsis"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelLPwLH1dMat/#description","text":"INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening MATRESP = INELLPwLH1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Reference: JC Simo and TJR Hughes, Computational Inelasticity, pp. 43-45 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): eps_p = plastic strain alpha = isotropic hardening variable sig_b = back stress (for kinematic hardening) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Hi = isotropic plastic modulus Hk = kinematic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress eps_p = plastic strain","title":"Description"},{"location":"Functions/latest/Modeling_Library/Material_Library/InelLPwLH1dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Modeling_Library/Material_Library/LEIso2dMat/","text":"LEIso2dMat Purpose LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions Synopsis function MatResp = LEIso2dMat (action,MatNo,MatData,MatState) Description LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions MATRESP = LEISO2dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the response of a linear elastic, isotropic material under general plane stress or strain conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 4x1 vector form in the order 11, 22, 33, 12 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 4x1 vector form in the order 11, 22, 33, 12 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 4x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus nu = Poisson ratio eps0 = initial strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig0 = initial stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Case = 'stress' or 'strain' irs = stress or strain components to be retained depending on Case ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig = stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Cross-Reference Information This function calls: This function is called by:","title":"LEIso2dMat"},{"location":"Functions/latest/Modeling_Library/Material_Library/LEIso2dMat/#leiso2dmat","text":"","title":"LEIso2dMat"},{"location":"Functions/latest/Modeling_Library/Material_Library/LEIso2dMat/#purpose","text":"LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions","title":"Purpose"},{"location":"Functions/latest/Modeling_Library/Material_Library/LEIso2dMat/#synopsis","text":"function MatResp = LEIso2dMat (action,MatNo,MatData,MatState)","title":"Synopsis"},{"location":"Functions/latest/Modeling_Library/Material_Library/LEIso2dMat/#description","text":"LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions MATRESP = LEISO2dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the response of a linear elastic, isotropic material under general plane stress or strain conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 4x1 vector form in the order 11, 22, 33, 12 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 4x1 vector form in the order 11, 22, 33, 12 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 4x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus nu = Poisson ratio eps0 = initial strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig0 = initial stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Case = 'stress' or 'strain' irs = stress or strain components to be retained depending on Case ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig = stress tensor in 4x1 vector form in the order 11, 22, 33, 12","title":"Description"},{"location":"Functions/latest/Modeling_Library/Material_Library/LEIso2dMat/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Modeling_Library/Section_Library/","text":"","title":"Section Library"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoCircSecw1dMat/","text":"[Home](../FEDEASLab.html) > [Section\\_Library](FEDEASLab.html) > HomoCircSecw1dMat.m HomoCircSecw1dMat []{#_name}PURPOSE **HOMOCIRCSECw1dMAT response of homogeneous circular section with uniaxial material** []{#_synopsis}SYNOPSIS **function SecResp = HomoCircSecw1dMat (action,SecNo,ndm,SecData,SecState)** []{#_description}DESCRIPTION HOMOCIRCSECw1dMAT response of homogeneous circular section with uniaxial material SECRESP = HOMOCIRCSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a homogeneous circular section with uniaxial material by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields R(1:2) = outer radius and inner radius of section (default = R(1) only) nr = no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth = no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) Rdrat = ratio of inner to outer radius for switching to uniform dicretization IntTyp = function name for section integration ('Midpoint' or 'Cubature') MatName = function name for material uniaxial stress-strain relation MatData = data structure with material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName) []{#_cross}CROSS-REFERENCE INFORMATION This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"HomoCircSecw1dMat"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoCircSecw1dMat/#homocircsecw1dmat","text":"","title":"HomoCircSecw1dMat"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoCircSecw1dMat/#_namepurpose","text":"**HOMOCIRCSECw1dMAT response of homogeneous circular section with uniaxial material**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoCircSecw1dMat/#_synopsissynopsis","text":"**function SecResp = HomoCircSecw1dMat (action,SecNo,ndm,SecData,SecState)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoCircSecw1dMat/#_descriptiondescription","text":"HOMOCIRCSECw1dMAT response of homogeneous circular section with uniaxial material SECRESP = HOMOCIRCSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a homogeneous circular section with uniaxial material by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields R(1:2) = outer radius and inner radius of section (default = R(1) only) nr = no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth = no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) Rdrat = ratio of inner to outer radius for switching to uniform dicretization IntTyp = function name for section integration ('Midpoint' or 'Cubature') MatName = function name for material uniaxial stress-strain relation MatData = data structure with material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName)","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoCircSecw1dMat/#_crosscross-reference-information","text":"This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoRectSecw1dMat/","text":"[]{#_top} [Home](../FEDEASLab.html) > [Section\\_Library](FEDEASLab.html) > HomoRectSecw1dMat.m HomoRectSecw1dMat []{#_name}PURPOSE **HOMORECTSECw1dMAT response of homogeneous rectangular section with uniaxial material** []{#_synopsis}SYNOPSIS **function SecResp = HomoRectSecw1dMat (action,SecNo,ndm,SecData,SecState)** []{#_description}DESCRIPTION HOMORECTSECw1dMAT response of homogeneous rectangular section with uniaxial material SECRESP = HOMORECTSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a homogeneous rectangular section with uniaxial material by integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields d = section depth b = section width ny = no of integration points (fibers) in y (default = 10) nz = no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) IntTyp = function name for section integration MatName = function name for material uniaxial stress-strain relation MatData = data structure with material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName) []{#_cross}CROSS-REFERENCE INFORMATION This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"HomoRectSecw1dMat"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoRectSecw1dMat/#homorectsecw1dmat","text":"","title":"HomoRectSecw1dMat"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoRectSecw1dMat/#_namepurpose","text":"**HOMORECTSECw1dMAT response of homogeneous rectangular section with uniaxial material**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoRectSecw1dMat/#_synopsissynopsis","text":"**function SecResp = HomoRectSecw1dMat (action,SecNo,ndm,SecData,SecState)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoRectSecw1dMat/#_descriptiondescription","text":"HOMORECTSECw1dMAT response of homogeneous rectangular section with uniaxial material SECRESP = HOMORECTSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a homogeneous rectangular section with uniaxial material by integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields d = section depth b = section width ny = no of integration points (fibers) in y (default = 10) nz = no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) IntTyp = function name for section integration MatName = function name for material uniaxial stress-strain relation MatData = data structure with material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName)","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoRectSecw1dMat/#_crosscross-reference-information","text":"This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoWFSecw1dMat/","text":"[]{#_top} [Home](../FEDEASLab.html) > [Section\\_Library](FEDEASLab.html) > HomoWFSecw1dMat.m HomoWFSecw1dMat []{#_name}PURPOSE **HOMOWFSECw1dMAT response of homogeneous wide flange (WF) section with uniaxial material** []{#_synopsis}SYNOPSIS **function SecResp = HomoWFSecw1dMat (action,SecNo,ndm,SecData,SecState)** []{#_description}DESCRIPTION HOMOWFSECw1dMAT response of homogeneous wide flange (WF) section with uniaxial material SECRESP = HOMOWFSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of homogeneous wide flange (WF) section with uniaxial material by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) Coordinate system: y ^ | .----+----. | | | '--. | .--' | | | z <-----+ + | d |tw | .--' '--. | tf | '---------' bf []{#_cross}CROSS-REFERENCE INFORMATION This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"HomoWFSecw1dMat"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoWFSecw1dMat/#homowfsecw1dmat","text":"","title":"HomoWFSecw1dMat"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoWFSecw1dMat/#_namepurpose","text":"**HOMOWFSECw1dMAT response of homogeneous wide flange (WF) section with uniaxial material**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoWFSecw1dMat/#_synopsissynopsis","text":"**function SecResp = HomoWFSecw1dMat (action,SecNo,ndm,SecData,SecState)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoWFSecw1dMat/#_descriptiondescription","text":"HOMOWFSECw1dMAT response of homogeneous wide flange (WF) section with uniaxial material SECRESP = HOMOWFSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of homogeneous wide flange (WF) section with uniaxial material by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) Coordinate system: y ^ | .----+----. | | | '--. | .--' | | | z <-----+ + | d |tw | .--' '--. | tf | '---------' bf","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/Modeling_Library/Section_Library/HomoWFSecw1dMat/#_crosscross-reference-information","text":"This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/Modeling_Library/Section_Library/MultRectSecw1dMat/","text":"[]{#_top} [Home](../FEDEASLab.html) > [Section\\_Library](FEDEASLab.html) > MultRectSecw1dMat.m MultRectSecw1dMat []{#_name}PURPOSE **MULTRECTSECw1dMAT response for section of rectangular patches and bars with uniaxial material** []{#_synopsis}SYNOPSIS **function SecResp = MultRectSecw1dMat (action,SecNo,ndm,SecData,SecState)** []{#_description}DESCRIPTION MULTRECTSECw1dMAT response for section of rectangular patches and bars with uniaxial material SECRESP = MULTRECTSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a section made up of rectangular patches and bars with uniaxial material by integration in y for 2d, and in y and z for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) Coordinate system: ^ y | |---+---------------| | | o o o o o | | | |-----------| z <---+---+ | | | | o o o | |-------- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information 'defo': report section displacements for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP = SECDISP for action = 'defo' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information in fields FibAyz(1:NF,3) = coordinates and area (weight) of NF IPs or fibers for contiguous shape FMatName{:} = cell array of material names for portions of contiguous shape FMatData{:} = cell array with material property data for portions of contiguous shape FMatID(1:NF) = array with material ID for NF fibers of contiguous shape BarAyz(1:NB,3) = coordinates and area (weight) of NB bars BMatName{:} = cell array of material names for bars BMatData{:} = cell array with material property data for bars BMatID(1:NB) = array with material ID for NB bars ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing in fields e = section deformations s = section force resultants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDISP is a data structure with the section displacements in fields ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= []{#_cross}CROSS-REFERENCE INFORMATION This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"MultRectSecw1dMat"},{"location":"Functions/latest/Modeling_Library/Section_Library/MultRectSecw1dMat/#multrectsecw1dmat","text":"","title":"MultRectSecw1dMat"},{"location":"Functions/latest/Modeling_Library/Section_Library/MultRectSecw1dMat/#_namepurpose","text":"**MULTRECTSECw1dMAT response for section of rectangular patches and bars with uniaxial material**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/Modeling_Library/Section_Library/MultRectSecw1dMat/#_synopsissynopsis","text":"**function SecResp = MultRectSecw1dMat (action,SecNo,ndm,SecData,SecState)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/Modeling_Library/Section_Library/MultRectSecw1dMat/#_descriptiondescription","text":"MULTRECTSECw1dMAT response for section of rectangular patches and bars with uniaxial material SECRESP = MULTRECTSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a section made up of rectangular patches and bars with uniaxial material by integration in y for 2d, and in y and z for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) Coordinate system: ^ y | |---+---------------| | | o o o o o | | | |-----------| z <---+---+ | | | | o o o | |-------- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information 'defo': report section displacements for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP = SECDISP for action = 'defo' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information in fields FibAyz(1:NF,3) = coordinates and area (weight) of NF IPs or fibers for contiguous shape FMatName{:} = cell array of material names for portions of contiguous shape FMatData{:} = cell array with material property data for portions of contiguous shape FMatID(1:NF) = array with material ID for NF fibers of contiguous shape BarAyz(1:NB,3) = coordinates and area (weight) of NB bars BMatName{:} = cell array of material names for bars BMatData{:} = cell array with material property data for bars BMatID(1:NB) = array with material ID for NB bars ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing in fields e = section deformations s = section force resultants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDISP is a data structure with the section displacements in fields ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/Modeling_Library/Section_Library/MultRectSecw1dMat/#_crosscross-reference-information","text":"This function calls: Extract_Sec2MatState EXTRACT_SEC2MATSTATE extract material state from section state This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/Other/","text":"v5.1.0\\Other Create_PanelZone % Clear memory and close any open windows InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material Plot_SingularModes Set_PlastCond separate truss and frame elements Simple_PanelZone_Test % shape2d SHAPE2D shape functions for 4-9 node quadrilateral element","title":"Index"},{"location":"Functions/latest/Other/#v510other","text":"Create_PanelZone % Clear memory and close any open windows InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material Plot_SingularModes Set_PlastCond separate truss and frame elements Simple_PanelZone_Test % shape2d SHAPE2D shape functions for 4-9 node quadrilateral element","title":"v5.1.0\\Other"},{"location":"Functions/latest/Other/Create_PanelZone/","text":"Create_PanelZone Purpose % Clear memory and close any open windows Synopsis This is a script file. Description % Clear memory and close any open windows Cross-Reference Information This function calls: CleanStart CLEANSTART initializes workspace for new analysis Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Units % Script file for common unit definition with Imperial units as default This function is called by:","title":"Create PanelZone"},{"location":"Functions/latest/Other/Create_PanelZone/#create_panelzone","text":"","title":"Create_PanelZone"},{"location":"Functions/latest/Other/Create_PanelZone/#purpose","text":"% Clear memory and close any open windows","title":"Purpose"},{"location":"Functions/latest/Other/Create_PanelZone/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Other/Create_PanelZone/#description","text":"% Clear memory and close any open windows","title":"Description"},{"location":"Functions/latest/Other/Create_PanelZone/#cross-reference-information","text":"This function calls: CleanStart CLEANSTART initializes workspace for new analysis Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Units % Script file for common unit definition with Imperial units as default This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Other/InelPanelZone/","text":"InelPanelZone Purpose INELPANELZONE 4-node panel zone element with inelastic material Synopsis function ElemResp = InelPanelZone (action,el_no,xyz,ElemData,ElemState) Description INELPANELZONE 4-node panel zone element with inelastic material ELEMRESP = INELPANELZONE (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 4-node panel zone element with inelastic material; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields t = element thickness (default t=1) nIP = number of integration points (default nIP=2) MatName = function name for material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: shape2d SHAPE2D shape functions for 4-9 node quadrilateral element Gauss2d GAUSS2D Gauss integration rule in two dimensions This function is called by:","title":"InelPanelZone"},{"location":"Functions/latest/Other/InelPanelZone/#inelpanelzone","text":"","title":"InelPanelZone"},{"location":"Functions/latest/Other/InelPanelZone/#purpose","text":"INELPANELZONE 4-node panel zone element with inelastic material","title":"Purpose"},{"location":"Functions/latest/Other/InelPanelZone/#synopsis","text":"function ElemResp = InelPanelZone (action,el_no,xyz,ElemData,ElemState)","title":"Synopsis"},{"location":"Functions/latest/Other/InelPanelZone/#description","text":"INELPANELZONE 4-node panel zone element with inelastic material ELEMRESP = INELPANELZONE (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 4-node panel zone element with inelastic material; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields t = element thickness (default t=1) nIP = number of integration points (default nIP=2) MatName = function name for material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses","title":"Description"},{"location":"Functions/latest/Other/InelPanelZone/#cross-reference-information","text":"This function calls: shape2d SHAPE2D shape functions for 4-9 node quadrilateral element Gauss2d GAUSS2D Gauss integration rule in two dimensions This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Other/Plot_SingularModes/","text":"Plot_SingularModes Purpose Synopsis This is a script file. Description Cross-Reference Information This function calls: This function is called by:","title":"Plot SingularModes"},{"location":"Functions/latest/Other/Plot_SingularModes/#plot_singularmodes","text":"","title":"Plot_SingularModes"},{"location":"Functions/latest/Other/Plot_SingularModes/#purpose","text":"","title":"Purpose"},{"location":"Functions/latest/Other/Plot_SingularModes/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Other/Plot_SingularModes/#description","text":"","title":"Description"},{"location":"Functions/latest/Other/Plot_SingularModes/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Other/Set_PlastCond/","text":"Set_PlastCond Purpose separate truss and frame elements Synopsis function Ain = Set_PlastCond (Model,ElemData) Description separate truss and frame elements Cross-Reference Information This function calls: This function is called by:","title":"Set PlastCond"},{"location":"Functions/latest/Other/Set_PlastCond/#set_plastcond","text":"","title":"Set_PlastCond"},{"location":"Functions/latest/Other/Set_PlastCond/#purpose","text":"separate truss and frame elements","title":"Purpose"},{"location":"Functions/latest/Other/Set_PlastCond/#synopsis","text":"function Ain = Set_PlastCond (Model,ElemData)","title":"Synopsis"},{"location":"Functions/latest/Other/Set_PlastCond/#description","text":"separate truss and frame elements","title":"Description"},{"location":"Functions/latest/Other/Set_PlastCond/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Other/Simple_PanelZone_Test/","text":"Simple_PanelZone_Test Purpose % Synopsis This is a script file. Description % Cross-Reference Information This function calls: CleanStart CLEANSTART initializes workspace for new analysis This function is called by:","title":"Simple PanelZone Test"},{"location":"Functions/latest/Other/Simple_PanelZone_Test/#simple_panelzone_test","text":"","title":"Simple_PanelZone_Test"},{"location":"Functions/latest/Other/Simple_PanelZone_Test/#purpose","text":"%","title":"Purpose"},{"location":"Functions/latest/Other/Simple_PanelZone_Test/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Other/Simple_PanelZone_Test/#description","text":"%","title":"Description"},{"location":"Functions/latest/Other/Simple_PanelZone_Test/#cross-reference-information","text":"This function calls: CleanStart CLEANSTART initializes workspace for new analysis This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Other/shape2d/","text":"shape2d Purpose SHAPE2D shape functions for 4-9 node quadrilateral element Synopsis function [N,dNdx,J] = shape2d (nat,xyz,nodix) Description SHAPE2D shape functions for 4-9 node quadrilateral element [N, dNdx, J] = SHAPE2D (NAT,XYZ,NODIX) shape functions for 4-9 node quadrilateral element % Input Parameters ---------------- nat = [ xi eta ] natural coordinates of point of interest xyz = nodal coordinates for element (row i for node i) nodix = node index, e.g. [1:4 7 8] if nodes 1 through 4 (always), if 7 and 8 are present ---------------- Return Variables ---------------- N = shape function values for point of interest dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Reference: T.J.R. Hughes, The Finite Element Method, pp. 135 Cross-Reference Information This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Shape2d"},{"location":"Functions/latest/Other/shape2d/#shape2d","text":"","title":"shape2d"},{"location":"Functions/latest/Other/shape2d/#purpose","text":"SHAPE2D shape functions for 4-9 node quadrilateral element","title":"Purpose"},{"location":"Functions/latest/Other/shape2d/#synopsis","text":"function [N,dNdx,J] = shape2d (nat,xyz,nodix)","title":"Synopsis"},{"location":"Functions/latest/Other/shape2d/#description","text":"SHAPE2D shape functions for 4-9 node quadrilateral element [N, dNdx, J] = SHAPE2D (NAT,XYZ,NODIX) shape functions for 4-9 node quadrilateral element % Input Parameters ---------------- nat = [ xi eta ] natural coordinates of point of interest xyz = nodal coordinates for element (row i for node i) nodix = node index, e.g. [1:4 7 8] if nodes 1 through 4 (always), if 7 and 8 are present ---------------- Return Variables ---------------- N = shape function values for point of interest dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Reference: T.J.R. Hughes, The Finite Element Method, pp. 135","title":"Description"},{"location":"Functions/latest/Other/shape2d/#cross-reference-information","text":"This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Cross-Reference Information"},{"location":"Functions/latest/PreProcessing/","text":"v5.1.0\\Utilities\\PreProcessing Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Other Matlab-specific files in this directory AISC_Sections.mat AISC_Section.p Add_Bars2Section.p Add_Brace2Frame.p Add_GravityColumn2Frame.p Add_Shape2Section.p CircLayer2Bar.p Create_BoxOutline.p Create_BoxwOvhOutline.p Create_CSecOutline.p Create_CircBarGrid.p Create_FrameSections.p Create_IPMesh4Circ.p Create_IPMesh4MultRectShape.p Create_IPMesh4Rect.p Create_IPMesh4WFShape.p Create_ISecOutline.p Create_JntOffsets.p Create_LSecOutline.p Create_Load4Frame.p Create_MPMesh4Circ.p Create_MRFrame.p Create_Mass4Frame.p Create_MultRectShape.p Create_RectBarGrid.p Create_RectOutline.p Create_RectPatch.p Create_RectShape.p Create_RectwCovOutline.p Create_SSecOutline.p Create_ShapewMat.p Create_TSecOutline.p ElemData2Qpl.p ElemData4SteelBraces.p ElemData4SteelFrame.p FiberElemData4SteelBraces.p FiberElemData4SteelFrame.p MP1dInt4Circ.p MP2dInt4Circ.p Rectangle2Fiber.p","title":"Pre-Processing"},{"location":"Functions/latest/PreProcessing/#v510utilitiespreprocessing","text":"Create_MRFrame CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame","title":"v5.1.0\\Utilities\\PreProcessing"},{"location":"Functions/latest/PreProcessing/#other-matlab-specific-files-in-this-directory","text":"AISC_Sections.mat AISC_Section.p Add_Bars2Section.p Add_Brace2Frame.p Add_GravityColumn2Frame.p Add_Shape2Section.p CircLayer2Bar.p Create_BoxOutline.p Create_BoxwOvhOutline.p Create_CSecOutline.p Create_CircBarGrid.p Create_FrameSections.p Create_IPMesh4Circ.p Create_IPMesh4MultRectShape.p Create_IPMesh4Rect.p Create_IPMesh4WFShape.p Create_ISecOutline.p Create_JntOffsets.p Create_LSecOutline.p Create_Load4Frame.p Create_MPMesh4Circ.p Create_MRFrame.p Create_Mass4Frame.p Create_MultRectShape.p Create_RectBarGrid.p Create_RectOutline.p Create_RectPatch.p Create_RectShape.p Create_RectwCovOutline.p Create_SSecOutline.p Create_ShapewMat.p Create_TSecOutline.p ElemData2Qpl.p ElemData4SteelBraces.p ElemData4SteelFrame.p FiberElemData4SteelBraces.p FiberElemData4SteelFrame.p MP1dInt4Circ.p MP2dInt4Circ.p Rectangle2Fiber.p","title":"Other Matlab-specific files in this directory"},{"location":"Functions/latest/PreProcessing/Create_Loading/","text":"[]{#_top} [Home](../FEDEASLab.html) > [General](FEDEASLab.html) > Create\\_Loading.m Create_Loading []{#_name}PURPOSE **CREATE\\_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements** []{#_synopsis}SYNOPSIS **function Loading = Create\\_Loading (Model,Pe,Ue)** []{#_description}DESCRIPTION CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements LOADING = CREATE_LOADING (MODEL,PE,UE) the function sets up the data structure LOADING with the array of applied force patterns at the free dofs of the model in field Pref and the array of imposed displacement patterns at the restrained dofs of the model in field Uref; model information is specified in data structure MODEL and the applied forces and imposed displacements are specified in arrays PE and UE, respectively; in arrays PE and UE rows correspond to node numbers and columns to dof direction Example: PE(3,:,1) = [10 0 50]; applied forces at node 3 in X,Y and Z direction for force pattern 1 UE(5,2,3) = 0.02; imposed displacement in Y-direction at node 5 for displacement pattern 3 []{#_cross}CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create Loading"},{"location":"Functions/latest/PreProcessing/Create_Loading/#create_loading","text":"","title":"Create_Loading"},{"location":"Functions/latest/PreProcessing/Create_Loading/#_namepurpose","text":"**CREATE\\_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/PreProcessing/Create_Loading/#_synopsissynopsis","text":"**function Loading = Create\\_Loading (Model,Pe,Ue)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/PreProcessing/Create_Loading/#_descriptiondescription","text":"CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements LOADING = CREATE_LOADING (MODEL,PE,UE) the function sets up the data structure LOADING with the array of applied force patterns at the free dofs of the model in field Pref and the array of imposed displacement patterns at the restrained dofs of the model in field Uref; model information is specified in data structure MODEL and the applied forces and imposed displacements are specified in arrays PE and UE, respectively; in arrays PE and UE rows correspond to node numbers and columns to dof direction Example: PE(3,:,1) = [10 0 50]; applied forces at node 3 in X,Y and Z direction for force pattern 1 UE(5,2,3) = 0.02; imposed displacement in Y-direction at node 5 for displacement pattern 3","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/PreProcessing/Create_Loading/#_crosscross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/PreProcessing/Create_NodalForces/","text":"[]{#_top} [Home](../FEDEASLab.html) > [General](FEDEASLab.html) > Create\\_NodalForces.m Create_NodalForces []{#_name}PURPOSE **CREATE\\_NODALFORCES set up reference vector of applied forces** []{#_synopsis}SYNOPSIS **function Pref = Create\\_NodalForces (Model,Pe)** []{#_description}DESCRIPTION CREATE_NODALFORCES set up reference vector of applied forces PREF = CREATE_NODALFORCES (MODEL,PE) the function sets up the vector of applied forces PREF at the free dofs of the model; model information is supplied in data structure MODEL and the applied forces in array PE; in array PE rows correspond to node numbers and columns to dofs Example: PE(3,:) = [10 0 50] means applied forces at node 3 in X,Y and Z direction []{#_cross}CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create NodalForces"},{"location":"Functions/latest/PreProcessing/Create_NodalForces/#create_nodalforces","text":"","title":"Create_NodalForces"},{"location":"Functions/latest/PreProcessing/Create_NodalForces/#_namepurpose","text":"**CREATE\\_NODALFORCES set up reference vector of applied forces**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/PreProcessing/Create_NodalForces/#_synopsissynopsis","text":"**function Pref = Create\\_NodalForces (Model,Pe)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/PreProcessing/Create_NodalForces/#_descriptiondescription","text":"CREATE_NODALFORCES set up reference vector of applied forces PREF = CREATE_NODALFORCES (MODEL,PE) the function sets up the vector of applied forces PREF at the free dofs of the model; model information is supplied in data structure MODEL and the applied forces in array PE; in array PE rows correspond to node numbers and columns to dofs Example: PE(3,:) = [10 0 50] means applied forces at node 3 in X,Y and Z direction","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/PreProcessing/Create_NodalForces/#_crosscross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/PreProcessing/Element/","text":"","title":"Plane Elements"},{"location":"Functions/latest/PreProcessing/Element/Frames/","text":"","title":"Frame Elements"},{"location":"Functions/latest/PreProcessing/Loading/","text":"Loading","title":"Loading"},{"location":"Functions/latest/PreProcessing/Loading/#loading","text":"","title":"Loading"},{"location":"Functions/latest/PreProcessing/Material/","text":"Material","title":"Material"},{"location":"Functions/latest/PreProcessing/Material/#material","text":"","title":"Material"},{"location":"Functions/latest/PreProcessing/Structure/Create_Damping/","text":"[]{#_top} [Home](../FEDEASLab.html) > [General](FEDEASLab.html) > Create\\_Damping.m Create_Damping []{#_name}PURPOSE **CREATE\\_DAMPING setup damping matrix of structural model** []{#_synopsis}SYNOPSIS **function C = Create\\_Damping (type,Kf,Ml,zeta,mode)** []{#_description}DESCRIPTION CREATE_DAMPING setup damping matrix of structural model C = CREATE_DAMPING (TYPE,KF,ML,ZETA,MODE) function sets up damping matrix C according to character variable TYPE for a structure with free dof stiffness matrix KF and free dof lumped mass vector ML; the damping matrix is calibrated so that the mode numbers in row vector MODE have damping ratios as specified in row vector ZETA; character variable TYPE should be either 'StifProp', 'Caughey' or 'Modal' Note: Caughey with one mode reduces to mass proportional damping matrix and with two modes reduces to Rayleigh damping; for more than 2 modes Caughey damping works only if Ml is fully populated; Modal damping refers to the method of superposing modal damping matrices Reference: Chopra, Dynamics of Structures, 2nd edition, pp. 455-463 []{#_cross}CROSS-REFERENCE INFORMATION This function calls: This function is called by: Add_Damping2State ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create Damping"},{"location":"Functions/latest/PreProcessing/Structure/Create_Damping/#create_damping","text":"","title":"Create_Damping"},{"location":"Functions/latest/PreProcessing/Structure/Create_Damping/#_namepurpose","text":"**CREATE\\_DAMPING setup damping matrix of structural model**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/PreProcessing/Structure/Create_Damping/#_synopsissynopsis","text":"**function C = Create\\_Damping (type,Kf,Ml,zeta,mode)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/PreProcessing/Structure/Create_Damping/#_descriptiondescription","text":"CREATE_DAMPING setup damping matrix of structural model C = CREATE_DAMPING (TYPE,KF,ML,ZETA,MODE) function sets up damping matrix C according to character variable TYPE for a structure with free dof stiffness matrix KF and free dof lumped mass vector ML; the damping matrix is calibrated so that the mode numbers in row vector MODE have damping ratios as specified in row vector ZETA; character variable TYPE should be either 'StifProp', 'Caughey' or 'Modal' Note: Caughey with one mode reduces to mass proportional damping matrix and with two modes reduces to Rayleigh damping; for more than 2 modes Caughey damping works only if Ml is fully populated; Modal damping refers to the method of superposing modal damping matrices Reference: Chopra, Dynamics of Structures, 2nd edition, pp. 455-463","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/PreProcessing/Structure/Create_Damping/#_crosscross-reference-information","text":"This function calls: This function is called by: Add_Damping2State ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/PreProcessing/Structure/Create_MRFrame/","text":"Create_MRFrame Purpose CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame Synopsis function Frame = Create_MRFrame (Lbv,Hsv,nsub) Description CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame FRAME = CREATE_MRFRAME (LBV,HSV,NSUB) function generates the node coordinates XYZ and element connectivity CON for a regular N-story, M-bay frame with bay spans in row vector LBV and story heights in row vector HSV; the optional row vector NSUB specifies the number of subelements for each frame girder the function returns the generated information in data structure FRAME with fields XYZ (node coordinates), CON (element connectivity), CINDX (column index by story), GINDX (girder index by floor), NBY (no of bays), NST (no of stories), NC (no of columns), NG (no of girders) NN (no of nodes), NE (no of elements) Cross-Reference Information This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Create MRFrame"},{"location":"Functions/latest/PreProcessing/Structure/Create_MRFrame/#create_mrframe","text":"","title":"Create_MRFrame"},{"location":"Functions/latest/PreProcessing/Structure/Create_MRFrame/#purpose","text":"CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame","title":"Purpose"},{"location":"Functions/latest/PreProcessing/Structure/Create_MRFrame/#synopsis","text":"function Frame = Create_MRFrame (Lbv,Hsv,nsub)","title":"Synopsis"},{"location":"Functions/latest/PreProcessing/Structure/Create_MRFrame/#description","text":"CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame FRAME = CREATE_MRFRAME (LBV,HSV,NSUB) function generates the node coordinates XYZ and element connectivity CON for a regular N-story, M-bay frame with bay spans in row vector LBV and story heights in row vector HSV; the optional row vector NSUB specifies the number of subelements for each frame girder the function returns the generated information in data structure FRAME with fields XYZ (node coordinates), CON (element connectivity), CINDX (column index by story), GINDX (girder index by floor), NBY (no of bays), NST (no of stories), NC (no of columns), NG (no of girders) NN (no of nodes), NE (no of elements)","title":"Description"},{"location":"Functions/latest/PreProcessing/Structure/Create_MRFrame/#cross-reference-information","text":"This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Cross-Reference Information"},{"location":"Functions/latest/PreProcessing/Structure/Create_Model/","text":"[]{#_top} [Home](../FEDEASLab.html) > [General](FEDEASLab.html) > Create\\_Model.m Create_Model []{#_name}PURPOSE **CREATE\\_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions** []{#_synopsis}SYNOPSIS **function Model = Create\\_Model (XYZ,CON,BOUN,ElemName)** []{#_description}DESCRIPTION CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_MODEL (XYZ,CON,BOUN,ELEMNAME) function creates data structure MODEL with model information from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss data structure MODEL has the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = node connectivity array DOF = array with degree of freedom numbering, nodes are stored columnwise ndf(el) = no of dofs/node for element el nen(el) = no of nodes for element el ElemName = cell array of element names []{#_cross}CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create Model"},{"location":"Functions/latest/PreProcessing/Structure/Create_Model/#create_model","text":"","title":"Create_Model"},{"location":"Functions/latest/PreProcessing/Structure/Create_Model/#_namepurpose","text":"**CREATE\\_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/PreProcessing/Structure/Create_Model/#_synopsissynopsis","text":"**function Model = Create\\_Model (XYZ,CON,BOUN,ElemName)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/PreProcessing/Structure/Create_Model/#_descriptiondescription","text":"CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_MODEL (XYZ,CON,BOUN,ELEMNAME) function creates data structure MODEL with model information from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss data structure MODEL has the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = node connectivity array DOF = array with degree of freedom numbering, nodes are stored columnwise ndf(el) = no of dofs/node for element el nen(el) = no of nodes for element el ElemName = cell array of element names","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/PreProcessing/Structure/Create_Model/#_crosscross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/PreProcessing/Structure/Create_NodalMass/","text":"[]{#_top} [Home](../FEDEASLab.html) > [General](FEDEASLab.html) > Create\\_NodalMass.m Create_NodalMass []{#_name}PURPOSE **CREATE\\_NODALMASS free dof lumped mass vector for structural model** []{#_synopsis}SYNOPSIS **function Ml = Create\\_NodalMass (Model,Me)** []{#_description}DESCRIPTION CREATE_NODALMASS free dof lumped mass vector for structural model ML = CREATE_NODALMASS (MODEL,ME) the function sets up the free dof lumped mass vector ML for the structural model specified in data structure MODEL from the specified nodal lumped mass values in array ME in which rows correspond to node numbers and columns to dof direction Example: ME(5,:) = [20 20 0]; lumped mass value in X and Y at node 5; no rotary inertia []{#_cross}CROSS-REFERENCE INFORMATION This function calls: This function is called by: Add_Mass2Model ADD_MASS2MODEL sets up lumped or consistent mass in Model.M Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create NodalMass"},{"location":"Functions/latest/PreProcessing/Structure/Create_NodalMass/#create_nodalmass","text":"","title":"Create_NodalMass"},{"location":"Functions/latest/PreProcessing/Structure/Create_NodalMass/#_namepurpose","text":"**CREATE\\_NODALMASS free dof lumped mass vector for structural model**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/PreProcessing/Structure/Create_NodalMass/#_synopsissynopsis","text":"**function Ml = Create\\_NodalMass (Model,Me)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/PreProcessing/Structure/Create_NodalMass/#_descriptiondescription","text":"CREATE_NODALMASS free dof lumped mass vector for structural model ML = CREATE_NODALMASS (MODEL,ME) the function sets up the free dof lumped mass vector ML for the structural model specified in data structure MODEL from the specified nodal lumped mass values in array ME in which rows correspond to node numbers and columns to dof direction Example: ME(5,:) = [20 20 0]; lumped mass value in X and Y at node 5; no rotary inertia","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/PreProcessing/Structure/Create_NodalMass/#_crosscross-reference-information","text":"This function calls: This function is called by: Add_Mass2Model ADD_MASS2MODEL sets up lumped or consistent mass in Model.M Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/PreProcessing/Structure/Create_SimpleModel/","text":"[]{#_top} [Home](../FEDEASLab.html) > [General](FEDEASLab.html) > Create\\_SimpleModel.m Create_SimpleModel []{#_name}PURPOSE **CREATE\\_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions** []{#_synopsis}SYNOPSIS **function Model = Create\\_SimpleModel (XYZ,CON,BOUN,ElemName)** []{#_description}DESCRIPTION CREATE_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_SIMPLEMODEL (XYZ,CON,BOUN,ELEMNAME) the function creates the data structure MODEL from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the numerical or cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON (4,:) = [ 6 7] : element 4 connects nodes 6 and 7, or CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss the data structure MODEL contains information about the structural model in the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = cell array of node connectivity DOF = array with degree of freedom numbering, nodes are stored rowwise ndf(el) = no of dofs/node for element el nq (el) = no of basic forces for element el nen(el) = no of nodes for element el ElemName = cell array of element names []{#_cross}CROSS-REFERENCE INFORMATION This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"Create SimpleModel"},{"location":"Functions/latest/PreProcessing/Structure/Create_SimpleModel/#create_simplemodel","text":"","title":"Create_SimpleModel"},{"location":"Functions/latest/PreProcessing/Structure/Create_SimpleModel/#_namepurpose","text":"**CREATE\\_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions**","title":"[]{#_name}PURPOSE"},{"location":"Functions/latest/PreProcessing/Structure/Create_SimpleModel/#_synopsissynopsis","text":"**function Model = Create\\_SimpleModel (XYZ,CON,BOUN,ElemName)**","title":"[]{#_synopsis}SYNOPSIS"},{"location":"Functions/latest/PreProcessing/Structure/Create_SimpleModel/#_descriptiondescription","text":"CREATE_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_SIMPLEMODEL (XYZ,CON,BOUN,ELEMNAME) the function creates the data structure MODEL from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the numerical or cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON (4,:) = [ 6 7] : element 4 connects nodes 6 and 7, or CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss the data structure MODEL contains information about the structural model in the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = cell array of node connectivity DOF = array with degree of freedom numbering, nodes are stored rowwise ndf(el) = no of dofs/node for element el nq (el) = no of basic forces for element el nen(el) = no of nodes for element el ElemName = cell array of element names","title":"[]{#_description}DESCRIPTION"},{"location":"Functions/latest/PreProcessing/Structure/Create_SimpleModel/#_crosscross-reference-information","text":"This function calls: This function is called by: Generated on Wed 22-Jan-2020 08:42:48 by m2html \u00a9 2005","title":"[]{#_cross}CROSS-REFERENCE INFORMATION"},{"location":"Functions/latest/Solution_Library/","text":"v5.1.0\\Solution_Scripts S_InitialStep % S_INITIALSTEP : script for initial step of incremental analysis S_MultiStep % S_MULTISTEP : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization S_Transient_MultiStep % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization","title":"Index"},{"location":"Functions/latest/Solution_Library/#v510solution_scripts","text":"S_InitialStep % S_INITIALSTEP : script for initial step of incremental analysis S_MultiStep % S_MULTISTEP : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHist % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization S_MultiStep_wLoadHistwSD % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization S_Transient_MultiStep % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization S_Transient_MultiStepwSD % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization","title":"v5.1.0\\Solution_Scripts"},{"location":"Functions/latest/Solution_Library/Scripts/S_InitialStep/","text":"S_InitialStep Purpose % S_INITIALSTEP : script for initial step of incremental analysis Synopsis This is a script file. Description % S_INITIALSTEP : script for initial step of incremental analysis ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S InitialStep"},{"location":"Functions/latest/Solution_Library/Scripts/S_InitialStep/#s_initialstep","text":"","title":"S_InitialStep"},{"location":"Functions/latest/Solution_Library/Scripts/S_InitialStep/#purpose","text":"% S_INITIALSTEP : script for initial step of incremental analysis","title":"Purpose"},{"location":"Functions/latest/Solution_Library/Scripts/S_InitialStep/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Solution_Library/Scripts/S_InitialStep/#description","text":"% S_INITIALSTEP : script for initial step of incremental analysis ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"Functions/latest/Solution_Library/Scripts/S_InitialStep/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep/","text":"S_MultiStep Purpose % S_MULTISTEP : script for multi-step incremental analysis including initialization Synopsis This is a script file. Description % S_MULTISTEP : script for multi-step incremental analysis including initialization ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S MultiStep"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep/#s_multistep","text":"","title":"S_MultiStep"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep/#purpose","text":"% S_MULTISTEP : script for multi-step incremental analysis including initialization","title":"Purpose"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep/#description","text":"% S_MULTISTEP : script for multi-step incremental analysis including initialization ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHist/","text":"S_MultiStep_wLoadHist Purpose % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization Synopsis This is a script file. Description % S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S MultiStep wLoadHist"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHist/#s_multistep_wloadhist","text":"","title":"S_MultiStep_wLoadHist"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHist/#purpose","text":"% S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization","title":"Purpose"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHist/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHist/#description","text":"% S_MULTISTEP_wLOADHIST : script for multi-step incremental analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHist/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHistwSD/","text":"S_MultiStep_wLoadHistwSD Purpose % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization Synopsis This is a script file. Description % S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S MultiStep wLoadHistwSD"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHistwSD/#s_multistep_wloadhistwsd","text":"","title":"S_MultiStep_wLoadHistwSD"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHistwSD/#purpose","text":"% S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization","title":"Purpose"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHistwSD/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHistwSD/#description","text":"% S_MULTISTEP_wLOADHISTwSD : script for multi-step incremental analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"Functions/latest/Solution_Library/Scripts/S_MultiStep_wLoadHistwSD/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStep/","text":"S_Transient_MultiStep Purpose % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization Synopsis This is a script file. Description % S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S Transient MultiStep"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStep/#s_transient_multistep","text":"","title":"S_Transient_MultiStep"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStep/#purpose","text":"% S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization","title":"Purpose"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStep/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStep/#description","text":"% S_TRANSIENT_MULTISTEP : script for multi-step transient analysis including initialization under given load history(ies) ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStep/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStepwSD/","text":"S_Transient_MultiStepwSD Purpose % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization Synopsis This is a script file. Description % S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: This function is called by:","title":"S Transient MultiStepwSD"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStepwSD/#s_transient_multistepwsd","text":"","title":"S_Transient_MultiStepwSD"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStepwSD/#purpose","text":"% S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization","title":"Purpose"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStepwSD/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStepwSD/#description","text":"% S_TRANSIENT_MULTISTEPwSD : script for multi-step transient analysis including initialization under given load history(ies) with automatic time step division and rescaling ========================================================================================= FEDEASLab - Release 5.1, July 2020 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2020. The Regents of the University of California. All Rights Reserved. =========================================================================================","title":"Description"},{"location":"Functions/latest/Solution_Library/Scripts/S_Transient_MultiStepwSD/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Utilities/","text":"v5.1.0\\Utilities CleanStart CLEANSTART initializes workspace for new analysis SIUnits % Script file for common unit definition with SI units as default Units % Script file for common unit definition with Imperial units as default Other Matlab-specific files in this directory: Create_DispCyclewN.p Create_LoadHistory.p Create_MultDispCycleswN.p D_index.p H_index.p Print_PDFile.p Subsequent directories: Interpolation Plotting PostProcessing PreProcessing Quadrature","title":"Utilities"},{"location":"Functions/latest/Utilities/#v510utilities","text":"CleanStart CLEANSTART initializes workspace for new analysis SIUnits % Script file for common unit definition with SI units as default Units % Script file for common unit definition with Imperial units as default","title":"v5.1.0\\Utilities"},{"location":"Functions/latest/Utilities/#other-matlab-specific-files-in-this-directory","text":"Create_DispCyclewN.p Create_LoadHistory.p Create_MultDispCycleswN.p D_index.p H_index.p Print_PDFile.p","title":"Other Matlab-specific files in this directory:"},{"location":"Functions/latest/Utilities/CleanStart/","text":"CleanStart Purpose CLEANSTART initializes workspace for new analysis Synopsis This is a script file. Description CLEANSTART initializes workspace for new analysis Cross-Reference Information This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows Simple_PanelZone_Test %","title":"CleanStart"},{"location":"Functions/latest/Utilities/CleanStart/#cleanstart","text":"","title":"CleanStart"},{"location":"Functions/latest/Utilities/CleanStart/#purpose","text":"CLEANSTART initializes workspace for new analysis","title":"Purpose"},{"location":"Functions/latest/Utilities/CleanStart/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Utilities/CleanStart/#description","text":"CLEANSTART initializes workspace for new analysis","title":"Description"},{"location":"Functions/latest/Utilities/CleanStart/#cross-reference-information","text":"This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows Simple_PanelZone_Test %","title":"Cross-Reference Information"},{"location":"Functions/latest/Utilities/SIUnits/","text":"SIUnits Purpose % Script file for common unit definition with SI units as default Synopsis This is a script file. Description % Script file for common unit definition with SI units as default Cross-Reference Information This function calls: This function is called by:","title":"SIUnits"},{"location":"Functions/latest/Utilities/SIUnits/#siunits","text":"","title":"SIUnits"},{"location":"Functions/latest/Utilities/SIUnits/#purpose","text":"% Script file for common unit definition with SI units as default","title":"Purpose"},{"location":"Functions/latest/Utilities/SIUnits/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Utilities/SIUnits/#description","text":"% Script file for common unit definition with SI units as default","title":"Description"},{"location":"Functions/latest/Utilities/SIUnits/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/latest/Utilities/Units/","text":"Units Purpose % Script file for common unit definition with Imperial units as default Synopsis This is a script file. Description % Script file for common unit definition with Imperial units as default Cross-Reference Information This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Units"},{"location":"Functions/latest/Utilities/Units/#units","text":"","title":"Units"},{"location":"Functions/latest/Utilities/Units/#purpose","text":"% Script file for common unit definition with Imperial units as default","title":"Purpose"},{"location":"Functions/latest/Utilities/Units/#synopsis","text":"This is a script file.","title":"Synopsis"},{"location":"Functions/latest/Utilities/Units/#description","text":"% Script file for common unit definition with Imperial units as default","title":"Description"},{"location":"Functions/latest/Utilities/Units/#cross-reference-information","text":"This function calls: This function is called by: Create_PanelZone % Clear memory and close any open windows","title":"Cross-Reference Information"},{"location":"Functions/latest/Utilities/Interpolation/","text":"","title":"Interpolation"},{"location":"Functions/latest/Utilities/Quadrature/","text":"v5.1.0\\Utilities\\Quadrature Gauss2d GAUSS2D Gauss integration rule in two dimensions Gaussq returns the locations y_i and weights w_i for Gauss quadrature of order n Other Matlab-specific files in this directory: Gauss.p Lobatto.p Midpoint.p Simpson.p Trap.p","title":"Quadrature"},{"location":"Functions/latest/Utilities/Quadrature/#v510utilitiesquadrature","text":"Gauss2d GAUSS2D Gauss integration rule in two dimensions Gaussq returns the locations y_i and weights w_i for Gauss quadrature of order n","title":"v5.1.0\\Utilities\\Quadrature"},{"location":"Functions/latest/Utilities/Quadrature/#other-matlab-specific-files-in-this-directory","text":"Gauss.p Lobatto.p Midpoint.p Simpson.p Trap.p","title":"Other Matlab-specific files in this directory:"},{"location":"Functions/latest/Utilities/Quadrature/Gauss2d/","text":"Gauss2d Purpose GAUSS2D Gauss integration rule in two dimensions Synopsis function [xIP,wIP] = Gauss2d (nIP) Description GAUSS2D Gauss integration rule in two dimensions [XIP,WIP] = GAUSS2D (NIP) locations and weights of 2d Gauss-Legendre integration scheme the function determines the locations in the intervals -1<xi<1, -1<eta<1, and the weights of the Gauss-Legendre integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP Cross-Reference Information This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Gauss2d"},{"location":"Functions/latest/Utilities/Quadrature/Gauss2d/#gauss2d","text":"","title":"Gauss2d"},{"location":"Functions/latest/Utilities/Quadrature/Gauss2d/#purpose","text":"GAUSS2D Gauss integration rule in two dimensions","title":"Purpose"},{"location":"Functions/latest/Utilities/Quadrature/Gauss2d/#synopsis","text":"function [xIP,wIP] = Gauss2d (nIP)","title":"Synopsis"},{"location":"Functions/latest/Utilities/Quadrature/Gauss2d/#description","text":"GAUSS2D Gauss integration rule in two dimensions [XIP,WIP] = GAUSS2D (NIP) locations and weights of 2d Gauss-Legendre integration scheme the function determines the locations in the intervals -1<xi<1, -1<eta<1, and the weights of the Gauss-Legendre integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP","title":"Description"},{"location":"Functions/latest/Utilities/Quadrature/Gauss2d/#cross-reference-information","text":"This function calls: This function is called by: InelPanelZone INELPANELZONE 4-node panel zone element with inelastic material","title":"Cross-Reference Information"},{"location":"Functions/latest/Utilities/Quadrature/Gaussq/","text":"Gaussq Purpose returns the locations y_i and weights w_i for Gauss quadrature of order n Synopsis function [yi,wi] = Gaussq (n) Description returns the locations y_i and weights w_i for Gauss quadrature of order n Requirements: n \\in N Cross-Reference Information This function calls: This function is called by:","title":"Gaussq"},{"location":"Functions/latest/Utilities/Quadrature/Gaussq/#gaussq","text":"","title":"Gaussq"},{"location":"Functions/latest/Utilities/Quadrature/Gaussq/#purpose","text":"returns the locations y_i and weights w_i for Gauss quadrature of order n","title":"Purpose"},{"location":"Functions/latest/Utilities/Quadrature/Gaussq/#synopsis","text":"function [yi,wi] = Gaussq (n)","title":"Synopsis"},{"location":"Functions/latest/Utilities/Quadrature/Gaussq/#description","text":"returns the locations y_i and weights w_i for Gauss quadrature of order n Requirements: n \\in N","title":"Description"},{"location":"Functions/latest/Utilities/Quadrature/Gaussq/#cross-reference-information","text":"This function calls: This function is called by:","title":"Cross-Reference Information"},{"location":"Functions/v5.1.0-alpha/","text":"Matlab Index Matlab Directories Basic Dynamics Element_Library General Material_Library Section_Library Solution_Library Utilities Utilities\\Interpolation Utilities\\Plotting Utilities\\PostProcessing Utilities\\PreProcessing Utilities\\Quadrature Matlab Files found in these Directories AISC_Section Create_RectBarGrid Hermite Plot_2dMomntDistr A_matrix Create_RectOutline HermiteN Plot_AxialForces AccelerationIntegral Create_RectPatch HomoCircSecw1dMat Plot_BounCond Add_Bars2Section Create_RectShape HomoRectSecw1dMat Plot_DeformedStructure Add_Brace2Frame Create_RectwCovOutline HomoWFSecw1dMat Plot_DispPath Add_Damping2State Create_SSecOutline Increment Plot_EQRecord Add_GravityColumn2Frame Create_ShapewMat Inel2dFrm_wLHNMYS Plot_ElemLoading Add_Mass2Model Create_SimpleModel Inel2dFrm_wLPPM Plot_ForcDistr Add_OpenPHIndx2Post Create_TSecOutline Inel2dFrm_wOneComp Plot_Hinge4Elem Add_Shape2Section Create_Window Inel2dFrm_wTwoComp Plot_IPVarDistr Aj_matrix D_index InelJ2PwLH3dMat Plot_LoadHistory Animate_EventSequence DefGeom_2dFrm InelLPwLH1dMat Plot_Mesh4Circ Animate_ResponsewHngHist DefGeom_3dFrm InelSDOF_Newmark Plot_Mesh4MultRectShape B_matrix DeformShape2dFrm InelTruss Plot_Model BbariBbarx_matrix DeformShape2dFrm_wCurvIntp Initialize Plot_NodalForces BilinElastic1dMat DeformShape2dFrm_wDispIntp Initialize_SolStrat Plot_OpenPlasticHinges BilinHyst1dMat Dinel2dFrm_EBwDF Initialize_State Plot_PlasticHinges BilinInel1dMat Dinel2dFrm_EBwFF Iterate Plot_Releases BilinOrOr1dMat Draw_3dAxisCross Ks_matrix Plot_SectionGeometry BilinPkOr1dMat Draw_Arrow LE2dFrm Plot_StoryDistr Check3dFrmAxes Draw_AxisCross LE2dFrm_wPdelta Plot_XYData CircLayer2Bar Draw_Cube LE3dFrm Print_PDFile CleanStart EigenMode LETruss Q0_vector Complete_QV ElasticResponseSpectrum LSDOF_LinearWilson Q2Post Condense_MV ElemData2Qpl LSDOF_Newmark ReCircSecw1dMat Create_BoxOutline ElemData4SteelBraces Label_2dMoments ReRectSecw1dMat Create_BoxwOvhOutline ElemData4SteelFrame Label_AxialForces Readme Create_CSecOutline ElementLoading Label_Model Rectangle2Fiber Create_CircBarGrid ElmLenOr Lagrange SIUnits Create_Damping Event2Event_NLAnalysis LagrangeN S_Check_Global3dEQ Create_DispCyclewN ExtrReshu Large2du2v_Frm S_DisplMethod Create_FrameSections Extract_BasicEl2SecState Large3du2v_Frm S_ForceMethod Create_IPMesh4Circ Extract_El2MatState LineProp4PlotSection SectionWrapper Create_IPMesh4MultRectShape Extract_El2SecState LinearStep Simpson Create_IPMesh4Rect Extract_Sec2MatState LoadFactorControl StateDetermination Create_IPMesh4WFShape Extract_Str2ElState LoadFactorIncrement Structure Create_ISecOutline FiberElemData4SteelBraces Lobatto SubIncr4ElemntSD Create_JntOffsets FiberElemData4SteelFrame Localize TimeIntegrationConstants Create_LSecOutline FontProp4PlotSection MP1dInt4Circ TranJnt Create_Load4Frame Fs_matrix MP2dInt4Circ TransientIncrement Create_LoadHistory GMP1dMat ManderConcr1dMat TransientInitialize Create_Loading GPYS MaterialWrapper TransientIterate Create_MPMesh4Circ Gauss Midpoint TransientStateDetermination Create_MRFrame GeomTran_2dFrm ModalAnalysis Trap Create_Mass4Frame GeomTran_3dFrm ModeDecomposition Units Create_Model GeomTran_Truss MultRectSecw1dMat Update_State Create_MultDispCycleswN Get_HFlrTrans OneIteration Update_TransientState Create_MultRectShape Get_HngPos4DefoElem OneTransientIteration V0_vector Create_NodalForces Get_ModelScale PlasticAnalysis kg_2dFrm Create_NodalMass Get_RIStDrift PlasticAnalysis_wLBT kg_3dFrm Create_PlastLimSurface Get_StShear PlasticAnalysis_wUBT kg_Truss Create_PwForces H_index Plot_2dCurvDistr","title":"Index"},{"location":"Guides/","text":"Getting Started Download & Install The FEDEASLab Matlab Toolbox will soon be available for download as a zipped folder from here . Teaching Get Started Modeling Coming soon Developing Coming soon","title":"Getting Started"},{"location":"Guides/#getting-started","text":"","title":"Getting Started"},{"location":"Guides/#download-install","text":"The FEDEASLab Matlab Toolbox will soon be available for download as a zipped folder from here .","title":"Download &amp; Install"},{"location":"Guides/DataStructs/","text":"Data Structures Model Model contains... --8<-- \"DataStructures/Model.md\" ElemData","title":"Data Structures"},{"location":"Guides/DataStructs/#data-structures","text":"","title":"Data Structures"},{"location":"Guides/DataStructs/#model","text":"Model contains... --8<-- \"DataStructures/Model.md\"","title":"Model"},{"location":"Guides/DataStructs/#elemdata","text":"","title":"ElemData"},{"location":"Guides/Data_Structures/","text":"","title":"Data Structures"},{"location":"Guides/Developers/","text":"Developer's Manual Coming soon.","title":"Developer's Manual"},{"location":"Guides/Developers/#developers-manual","text":"Coming soon.","title":"Developer's Manual"},{"location":"Guides/Teaching/","text":"FEDEASLab Basic Structural Analysis Functions Abstract FEDEASLab is a collection of Matlab functions for instruction and research in linear and nonlinear finite element analysis. These functions take advantage of the widespread use of Matlab in engineering curricula around the world, and the extensive set of built-in and customized Matlab functions for many branches of science and engineering. In parallel with the introduction of basic concepts in an introductory course on structural analysis,the initial set of functions is rather small. This report is limited to this initial set. As the complexity of structural analysis concepts and procedures grows, the number of functions grows rapidly under the following criteria: Maintain modularity by keeping the extent of each function focused on a specific task realizing that composite tasks can be accomplished by collecting functions into scripts or higher order functions. Maintain modularity by organizing the variables of the analysis process in a small set of data structures serving as input and output arguments of the different functions. The organization of structural analysis variables in data structures accommodates the subsequent growth in complexity of the structural analysis task with the addition of fields to the existing data structures. For the same reason general utility functions start out with input arguments of simple data types and subsequently expand to accommodate more complex data types while retaining the same interface","title":"FEDEASLab Basic Structural Analysis Functions"},{"location":"Guides/Teaching/#abstract","text":"FEDEASLab is a collection of Matlab functions for instruction and research in linear and nonlinear finite element analysis. These functions take advantage of the widespread use of Matlab in engineering curricula around the world, and the extensive set of built-in and customized Matlab functions for many branches of science and engineering. In parallel with the introduction of basic concepts in an introductory course on structural analysis,the initial set of functions is rather small. This report is limited to this initial set. As the complexity of structural analysis concepts and procedures grows, the number of functions grows rapidly under the following criteria: Maintain modularity by keeping the extent of each function focused on a specific task realizing that composite tasks can be accomplished by collecting functions into scripts or higher order functions. Maintain modularity by organizing the variables of the analysis process in a small set of data structures serving as input and output arguments of the different functions. The organization of structural analysis variables in data structures accommodates the subsequent growth in complexity of the structural analysis task with the addition of fields to the existing data structures. For the same reason general utility functions start out with input arguments of simple data types and subsequently expand to accommodate more complex data types while retaining the same interface","title":"Abstract"},{"location":"Guides/Teaching/chp_1/","text":"Basic Analysis Functions Table of Contents Introduction Function Organization Data Organization Data Structure Model General Utility Functions Function Localize Displacement Method of Analysis 2.10 Direct Stiffness Assembly Introduction FEDEASLab functions implement structural analysis concepts in parallel with their theoretical presentation in the introductory structural analysis course, thus illustrating the generality of the methods and their application to large scale and complex structural models. The intent is not only to reinforce the understanding of the structural response under different types and arrangements of loading, but also to facilitate system and parameter studies. Function Organization The basic structural analysis functions for the introductory course are organized in two folders: Basic and Utilities . The Basic folder contains 14 functions that directly implement the analysis concepts of the course in Matlab. Most functions in this folder are provided in open source form ( .m file format), so that interested readers can relate the implementation details with the theory presented in the course. They can be classified in the following categories: Functions for Structural Matrices and Vectors (8) : These are listed in Table 2.1. Analysis Functions and Scripts (4) : These are listed in Table 2.2. General Utility Functions (2) : Namely Localize and ElmLenOr which are not invoked directly, but are used by the functions in the first category. The user defines the geometry and properties of the structural model, and then specifies the structural analysis procedure(s) and the graphical post-processing of the results by selecting suitable functions from Table 2.1-Table 2.4 in a Matlab script file, as described in the following sections. Scripting affords extensive flexibility for the response determination and the presentation of the results, but puts the burden on the user to assemble the whole by understanding its parts. This supports the open-ended educational mission of FEDEASLab , as opposed to the black-box nature of commercial analysis software. The following sections describe the functions in Table 2.1-Table 2.4 with examples. The notation for function arguments and local variables agrees with the notation of the course reader, as summarized in Appendix RB2. The examples in this chapter correspond to examples of the course reader with the Matlab scripts for all examples available in the folder Examples of the basic FEDEASLab package. Data Organization The initial set of analysis functions for the concepts of an introductory course on structural analysis is built around two data structures: Model , for the geometric description of the structural model, and ElemData for the element and material properties and element loading, as is evident from the input argument list of the functions in Table 2.1-Table 2.4. The organization of structural model information in two data structures serves to emphasize the concept of the introductory structural analysis course that, under linear conditions, the governing static and kinematic relations depend only on the geometry of the structural model and not on any element properties. Accordingly, the functions Bmatrix for setting up the linear static matrix B and Amatrix for setting up the linear kinematic matrix A of the structure take as single input argument the data structure Model with model geometry information. Data Structure Model In FEDEASLab information about the structural model is collected in the data structure Model , which is set up by the function CreateSimpleModel from information supplied by the user. The function CreateSimpleModel is limited to models consisting of 2-node, 2d or 3d truss and frame elements. The function numbers the degrees of freedom (DOFs) of the structure, as discussed in the course reader, thus facilitating their identification for small structural models. With this degree of freedom (DOF) numbering the analysis functions set up full matrices that do not take advantage of the small number of non-zero terms in large structural models. The general model creation function CreateModel does not have limitations on element type and uses a DOF numbering scheme that minimizes the storage of structure matrices. The use of sparse matrices with minimum storage is essential for the analysis of large structural models with 2d and 3d finite elements. Fig. 2.1 shows the input data for the structure of Example R4.1 in the form of numerical arrays XYZ , BOUN , and CON . The rows of XYZ correspond to the nodes and the ndm columns to the node coordinates, where ndm is the dimension of the structural model. The rows of BOUN also correspond to the nodes and the ndf columns to node restraint switches, where ndf is the maximum number of DOFs per node for the model. The DOF order for each node is: 1 = force in X , 2 = force in Y , 3 = moment about Z (for 2d model), or force in Z (for 3d model), 4,5,6 = moment about X , Y and Z (for 3d model). The switch value 0 indicates a free and the value 1 a restrained DOF. CON can be a numerical array for a structural model with only 2-node elements. For finite element models with elements having a different number of nodes, CON needs to be specified as a cell array so that the row contents can vary from element to element. Each row of the numerical CON array contains the node numbers to which the corresponding element connects. Finally, ElemName is a cell array that accommodates element names with a different number of characters. The names 'Truss' and '2dFrm' suffice for tasks that do not require element and material properties. For tasks requiring element and material properties the element names need to be 'LinTruss' , 'Lin2dFrm' , and 'Lin3dFrm' for the 2d/3d truss, the 2d frame, and the 3d frame element, respectively. General Utility Functions Once the geometry and other relevant information about the structural model is collected in data structure Model by the function CreateSimpleModel , information about the geometry and the global DOF correspondence for a particular element can be extracted with the help of two general utility functions: Localize and ElmLenOr . All functions with input arguments Model and ElemData in Table 2.1 invoke these utility functions for setting up the corresponding structural matrices or vectors. Function Localize This function locates the element el in the Model and returns its end node coordinates in array xyz , and the local-global DOF correspondence in vector id . The first column of the two dimensional array xyz contains the coordinates of end i of the element and the second column those of end j . function [xyz,id] = Localize(Model, el) XYZ = Model.XYZ; % node coordinates DOF = Model.DOF; % array with dof numbers for all nodes CON = Model.CON{el}; % extract connectivity array for element ndf = Model.ndf(el); % extract no of dofs /node for element % extract element coordinates into array xyz; % use CON array to extract appropriate rows of global XYZ array xyz = XYZ(CON(CON>0),:)'; % extract dof numbers into array id % use CON array to extract appropriate rows of DOF array id = DOF(CON(CON>0), 1:ndf)'; % reshape id array into vector id = id(:); Box 2.2: Syntax of function Localize with input arguments Model and el and output arguments xyz and id . Displacement Method of Analysis The steps of the displacement method of analysis are described in Section \\mathrm{R} 10.3 and Section \\mathrm{R} 10.4 A summary of these steps for implementation in FEDEASLab is: With the kinematic matrix \\mathbf{A}_{f} set up the stiffness matrix \\mathbf{K}_{f} and the initial force vector \\boldsymbol{P}_{0} \\mathbf{K}_{f}=\\mathbf{A}_{f}^{T} \\mathbf{K}_{s} \\mathbf{A}_{f} \\quad \\boldsymbol{P}_{0}=\\mathbf{A}_{J}^{T} \\boldsymbol{Q}_{0}+\\boldsymbol{P}_{w f} Solve the equilibrium equations for the free DOF displacements \\boldsymbol{U}_{f} P_{f}=\\mathbf{K}_{f} \\boldsymbol{U}_{f}+\\boldsymbol{P}_{0} Determine the element deformations \\boldsymbol{V} from the kinematic relations \\boldsymbol{V}=\\mathbf{A}_{f} \\boldsymbol{U}_{f} Determine the basic forces Q from the collection of element force-deformation relations Q=\\mathbf{K}_{s} \\boldsymbol{V}+\\boldsymbol{Q}_{0} Box 2.17 shows the implementation of these steps in the Matlab script file S_DisplMethod . As is the case with the script for the force method of analysis, the script S_DisplMethod depends on the definition of the structural model geometry in data structure Model , and on the specification of the element property and loading information in data structure ElemData . The specification of the nodal forces Pf and Pwf is optional with default, values equal to zero. The script uses the same auxiliary functions as the script for the force method to remove the rows of the kinematic matrix \\mathbf{A} with release deformations and pad the vector of basic forces Q from the displacement method of analysis with zero values at the releases, so that it can determine the element deformations \\boldsymbol{V}_{\\varepsilon} at the element ends with flexural releases and plot the deformed shape of the corresponding element, if required. 2.10 Direct Stiffness Assembly Section \\mathrm{R} 10.6 .3 demonstrates the significant advantage of the displacement method over the force method of analysis: the direct assembly of the structure stiffness matrix \\mathbf{K}_{f} and the resisting forces \\boldsymbol{P}_{r} . We demonstrate briefly the ease of implementing the direct stiffness assembly in FEDEASLab by taking advantage of the array indexing capabilities of Matlab described in Appendix \\mathrm{A} and avoiding the multiplication by the Boolean array in Eq. \\mathrm{R}(10.31) . The latter approach is symbolically compact but computationally inefficient, because the Boolean matrix \\mathbf{A}_{b}^{(e l)} in Eq. \\mathrm{R}(10.31) contains only a few terms of one but mostly zeros. In the direct assembly process the element i d array serves as index of the element stiffness coefficients into the structure stiffness matrix \\check{\\mathrm{K}} . FEDEASLab function Kf_matrix.m assembles the complete stiffness matrix \\check{\\mathrm{K}} and then extracts the stiffness \\mathbf{K} at the free DOFs (in practice only the free dof stiffness \\mathbf{K} is assembled to save storage). K = zeros(nt, nt); for el=1:ne % locate element in Model and return end coordinates and id array [xyz,id] = Localize(Model, el); % form element stiffness matrix ke in global reference system ke = ke_matrix(Model.ElemName{el}, ElemData{el}, xyz); % assemble element stiffness matrix ke into structure matrix K K(id,id) = K(id, id) + ke; end Kf = K(1:nf, 1:nf); % extract stiffness matrix of free DOFs","title":"Basic Analysis Functions"},{"location":"Guides/Teaching/chp_1/#introduction","text":"FEDEASLab functions implement structural analysis concepts in parallel with their theoretical presentation in the introductory structural analysis course, thus illustrating the generality of the methods and their application to large scale and complex structural models. The intent is not only to reinforce the understanding of the structural response under different types and arrangements of loading, but also to facilitate system and parameter studies.","title":"Introduction"},{"location":"Guides/Teaching/chp_1/#function-organization","text":"The basic structural analysis functions for the introductory course are organized in two folders: Basic and Utilities . The Basic folder contains 14 functions that directly implement the analysis concepts of the course in Matlab. Most functions in this folder are provided in open source form ( .m file format), so that interested readers can relate the implementation details with the theory presented in the course. They can be classified in the following categories: Functions for Structural Matrices and Vectors (8) : These are listed in Table 2.1. Analysis Functions and Scripts (4) : These are listed in Table 2.2. General Utility Functions (2) : Namely Localize and ElmLenOr which are not invoked directly, but are used by the functions in the first category. The user defines the geometry and properties of the structural model, and then specifies the structural analysis procedure(s) and the graphical post-processing of the results by selecting suitable functions from Table 2.1-Table 2.4 in a Matlab script file, as described in the following sections. Scripting affords extensive flexibility for the response determination and the presentation of the results, but puts the burden on the user to assemble the whole by understanding its parts. This supports the open-ended educational mission of FEDEASLab , as opposed to the black-box nature of commercial analysis software. The following sections describe the functions in Table 2.1-Table 2.4 with examples. The notation for function arguments and local variables agrees with the notation of the course reader, as summarized in Appendix RB2. The examples in this chapter correspond to examples of the course reader with the Matlab scripts for all examples available in the folder Examples of the basic FEDEASLab package.","title":"Function Organization"},{"location":"Guides/Teaching/chp_1/#data-organization","text":"The initial set of analysis functions for the concepts of an introductory course on structural analysis is built around two data structures: Model , for the geometric description of the structural model, and ElemData for the element and material properties and element loading, as is evident from the input argument list of the functions in Table 2.1-Table 2.4. The organization of structural model information in two data structures serves to emphasize the concept of the introductory structural analysis course that, under linear conditions, the governing static and kinematic relations depend only on the geometry of the structural model and not on any element properties. Accordingly, the functions Bmatrix for setting up the linear static matrix B and Amatrix for setting up the linear kinematic matrix A of the structure take as single input argument the data structure Model with model geometry information.","title":"Data Organization"},{"location":"Guides/Teaching/chp_1/#data-structure-model","text":"In FEDEASLab information about the structural model is collected in the data structure Model , which is set up by the function CreateSimpleModel from information supplied by the user. The function CreateSimpleModel is limited to models consisting of 2-node, 2d or 3d truss and frame elements. The function numbers the degrees of freedom (DOFs) of the structure, as discussed in the course reader, thus facilitating their identification for small structural models. With this degree of freedom (DOF) numbering the analysis functions set up full matrices that do not take advantage of the small number of non-zero terms in large structural models. The general model creation function CreateModel does not have limitations on element type and uses a DOF numbering scheme that minimizes the storage of structure matrices. The use of sparse matrices with minimum storage is essential for the analysis of large structural models with 2d and 3d finite elements. Fig. 2.1 shows the input data for the structure of Example R4.1 in the form of numerical arrays XYZ , BOUN , and CON . The rows of XYZ correspond to the nodes and the ndm columns to the node coordinates, where ndm is the dimension of the structural model. The rows of BOUN also correspond to the nodes and the ndf columns to node restraint switches, where ndf is the maximum number of DOFs per node for the model. The DOF order for each node is: 1 = force in X , 2 = force in Y , 3 = moment about Z (for 2d model), or force in Z (for 3d model), 4,5,6 = moment about X , Y and Z (for 3d model). The switch value 0 indicates a free and the value 1 a restrained DOF. CON can be a numerical array for a structural model with only 2-node elements. For finite element models with elements having a different number of nodes, CON needs to be specified as a cell array so that the row contents can vary from element to element. Each row of the numerical CON array contains the node numbers to which the corresponding element connects. Finally, ElemName is a cell array that accommodates element names with a different number of characters. The names 'Truss' and '2dFrm' suffice for tasks that do not require element and material properties. For tasks requiring element and material properties the element names need to be 'LinTruss' , 'Lin2dFrm' , and 'Lin3dFrm' for the 2d/3d truss, the 2d frame, and the 3d frame element, respectively.","title":"Data Structure Model"},{"location":"Guides/Teaching/chp_1/#general-utility-functions","text":"Once the geometry and other relevant information about the structural model is collected in data structure Model by the function CreateSimpleModel , information about the geometry and the global DOF correspondence for a particular element can be extracted with the help of two general utility functions: Localize and ElmLenOr . All functions with input arguments Model and ElemData in Table 2.1 invoke these utility functions for setting up the corresponding structural matrices or vectors.","title":"General Utility Functions"},{"location":"Guides/Teaching/chp_1/#function-localize","text":"This function locates the element el in the Model and returns its end node coordinates in array xyz , and the local-global DOF correspondence in vector id . The first column of the two dimensional array xyz contains the coordinates of end i of the element and the second column those of end j . function [xyz,id] = Localize(Model, el) XYZ = Model.XYZ; % node coordinates DOF = Model.DOF; % array with dof numbers for all nodes CON = Model.CON{el}; % extract connectivity array for element ndf = Model.ndf(el); % extract no of dofs /node for element % extract element coordinates into array xyz; % use CON array to extract appropriate rows of global XYZ array xyz = XYZ(CON(CON>0),:)'; % extract dof numbers into array id % use CON array to extract appropriate rows of DOF array id = DOF(CON(CON>0), 1:ndf)'; % reshape id array into vector id = id(:); Box 2.2: Syntax of function Localize with input arguments Model and el and output arguments xyz and id .","title":"Function Localize"},{"location":"Guides/Teaching/chp_1/#displacement-method-of-analysis","text":"The steps of the displacement method of analysis are described in Section \\mathrm{R} 10.3 and Section \\mathrm{R} 10.4 A summary of these steps for implementation in FEDEASLab is: With the kinematic matrix \\mathbf{A}_{f} set up the stiffness matrix \\mathbf{K}_{f} and the initial force vector \\boldsymbol{P}_{0} \\mathbf{K}_{f}=\\mathbf{A}_{f}^{T} \\mathbf{K}_{s} \\mathbf{A}_{f} \\quad \\boldsymbol{P}_{0}=\\mathbf{A}_{J}^{T} \\boldsymbol{Q}_{0}+\\boldsymbol{P}_{w f} Solve the equilibrium equations for the free DOF displacements \\boldsymbol{U}_{f} P_{f}=\\mathbf{K}_{f} \\boldsymbol{U}_{f}+\\boldsymbol{P}_{0} Determine the element deformations \\boldsymbol{V} from the kinematic relations \\boldsymbol{V}=\\mathbf{A}_{f} \\boldsymbol{U}_{f} Determine the basic forces Q from the collection of element force-deformation relations Q=\\mathbf{K}_{s} \\boldsymbol{V}+\\boldsymbol{Q}_{0} Box 2.17 shows the implementation of these steps in the Matlab script file S_DisplMethod . As is the case with the script for the force method of analysis, the script S_DisplMethod depends on the definition of the structural model geometry in data structure Model , and on the specification of the element property and loading information in data structure ElemData . The specification of the nodal forces Pf and Pwf is optional with default, values equal to zero. The script uses the same auxiliary functions as the script for the force method to remove the rows of the kinematic matrix \\mathbf{A} with release deformations and pad the vector of basic forces Q from the displacement method of analysis with zero values at the releases, so that it can determine the element deformations \\boldsymbol{V}_{\\varepsilon} at the element ends with flexural releases and plot the deformed shape of the corresponding element, if required.","title":"Displacement Method of Analysis"},{"location":"Guides/Teaching/chp_1/#210-direct-stiffness-assembly","text":"Section \\mathrm{R} 10.6 .3 demonstrates the significant advantage of the displacement method over the force method of analysis: the direct assembly of the structure stiffness matrix \\mathbf{K}_{f} and the resisting forces \\boldsymbol{P}_{r} . We demonstrate briefly the ease of implementing the direct stiffness assembly in FEDEASLab by taking advantage of the array indexing capabilities of Matlab described in Appendix \\mathrm{A} and avoiding the multiplication by the Boolean array in Eq. \\mathrm{R}(10.31) . The latter approach is symbolically compact but computationally inefficient, because the Boolean matrix \\mathbf{A}_{b}^{(e l)} in Eq. \\mathrm{R}(10.31) contains only a few terms of one but mostly zeros. In the direct assembly process the element i d array serves as index of the element stiffness coefficients into the structure stiffness matrix \\check{\\mathrm{K}} . FEDEASLab function Kf_matrix.m assembles the complete stiffness matrix \\check{\\mathrm{K}} and then extracts the stiffness \\mathbf{K} at the free DOFs (in practice only the free dof stiffness \\mathbf{K} is assembled to save storage). K = zeros(nt, nt); for el=1:ne % locate element in Model and return end coordinates and id array [xyz,id] = Localize(Model, el); % form element stiffness matrix ke in global reference system ke = ke_matrix(Model.ElemName{el}, ElemData{el}, xyz); % assemble element stiffness matrix ke into structure matrix K K(id,id) = K(id, id) + ke; end Kf = K(1:nf, 1:nf); % extract stiffness matrix of free DOFs","title":"2.10 Direct Stiffness Assembly"},{"location":"Guides/Teaching/chp_2/","text":"Utilities Page under development.","title":"Utilities"},{"location":"Guides/Teaching/chp_2/#utilities","text":"Page under development.","title":"Utilities"}]}