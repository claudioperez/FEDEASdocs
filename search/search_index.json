{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".home-feature { justify-content: space-between !important; align-items: center !important; display: flex !important; margin-top: 3rem !important; margin-bottom: 3rem !important; } \u03a6\u03b5\u03b9\u03b4\u03b9\u03b1\u03c2 FEDEAS Lab is a modular framework for teaching and research on the simulation of nonlinear structural response under static and dynamic loads, with a reference implementation in Matlab\u00a9 . Get Started Guides \\[\\boldsymbol{P}_f= \\mathbf{K}_f\\mspace{1.5mu}\\boldsymbol{U}_f + \\boldsymbol{P}_{0}\\] View guides that explain the concepts and components of FEDEAS Lab. Function Index function B = B_matrix ( Model ) Peruse a comprehensive list of functions provided by FEDEAS Lab, with detailed explanations of their interfaces. Examples Walk through some examples of the various analysis procedures that FEDEAS Lab provides. Section modeling Example under construction Finite Element Analysis Example under construction Frame inelasticity Example under construction","title":"Home"},{"location":"index-short/","text":".home-feature { justify-content: space-between !important; align-items: center !important; display: flex !important; margin-top: 3rem !important; margin-bottom: 3rem !important; } \u03a6\u03b5\u03b9\u03b4\u03b9\u03b1\u03c2 FEDEAS Lab is a modular framework for teaching and research on the simulation of nonlinear structural response under static and dynamic loads, with a reference implementation in Matlab\u00a9 . Get Started Guides \\[\\boldsymbol{P}_f= \\mathbf{K}_f\\mspace{1.5mu}\\boldsymbol{U}_f + \\boldsymbol{P}_{0}\\] View guides that explain the concepts and components of FEDEAS Lab. Function Index function B = B_matrix ( Model ) Peruse a comprehensive list of functions provided by FEDEAS Lab, with detailed explanations of their interfaces. Examples Walk through some examples of the various analysis procedures that FEDEAS Lab provides.","title":"Index short"},{"location":"terms/","text":"This website is generated with a heavily modified fork of MkDocs . Matlab API documentation is generated with a modifed fork of m2html . In accordance with the license of this project, modified sources are provided at https://github.com/claudioperez/m2md. Page styling uses Bootstrap with themeing heavily adapted from Bootswatch . Additional sources of inspiration for the layout of this site include Numba , Pandas , and Codecov . Copyright Copyright \u00a9 2021 The Regents of the University of California. This website and its content (including without limitation the text, computer code, artwork, photographs, images, music, audio material, video material and audio-visual material on this website) is owned by the The Regents of the University of California. Any redistribution or reproduction of part or all of the contents in any form is prohibited other than the following: You may view this website and the material on this website on a computer or mobile device via a web browser; You may copy and store this website and the material on this website in your web browser cache memory; You may print pages from this website for your own use. You may not distribute or commercially exploit the content. Nor may you transmit it or store it in any other website or other form of electronic retrieval system. The automated and/or systematic collection of data from this website is prohibited. Disclaimer THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Terms"},{"location":"About/","text":"About FEDEASLab FEDEASLab is a modular Matlab\u00a9 toolbox for the simulation of the nonlinear structural response under static and dynamic loads. The names stands for Finite Elements for Design, Evaluation and Analysis of Structures and pays homage to \u03a6\u03f5\u03b9\u03b4\u03b9\u03b1\u03c2, the creator of the magnificent sculptures for the Parthenon during the golden age of Athens under Pericles. and has been used successfully for the development of new elements and material models, as well as for the simulation of the response of small and large structural models in research and instruction. The toolbox consists of several functions grouped in categories. These functions operate on five basic data structures which represent the model, the loading, the element properties, the state of the structural response, and the parameters of the solution strategy. A sixth data structure is optional and carries post-processing information that can be used for response interpretation and visualization. The process of performing the nonlinear response analysis of a structure under static or transient conditions is broken down into logical steps. Each step is represented by a separate function. With this approach the definition of the model, the element properties and the loading as well as the analysis of the model under the given loading is accomplished with scripts that invoke the individual functions. Alternative solution strategies can be readily explored. Moreover, the user can easily exchange a function to provide additional capabilities. It is equally easy to access the data objects and enhance the information stored in them. A common task is the addition of element and material models. This task is simplified by the consistent function interface used throughout the toolbox. Acknowledgements License","title":"About"},{"location":"About/acknowledgements/","text":"Acknowledgements","title":"Acknowledgements"},{"location":"Functions/","text":"Index AISC_Section DefGeom_3dFrm InelJ2PwLH3dMat Plot_LoadHistory A_matrix DeformShape2dFrm InelJ2PwLH3dto1dMat Plot_Mesh4Circ AccelerationIntegral DeformShape2dFrm_wCurvIntp InelJ2PwLHPlnStrs2dMat Plot_Mesh4MultRectShape Add_Bars2Section DeformShape2dFrm_wDispIntp InelJ2PwLHStrConstr3dMat Plot_Model Add_Brace2Frame DeformShape3dFrm InelLPwLH1dMat Plot_NodalForces Add_Damping2State DeformShape3dFrm_wCurvIntp InelLST Plot_OpenPlasticHinges Add_GravityColumn2Frame DeformShape3dFrm_wDispIntp InelPlnStrs2dMat Plot_PlasticHinges Add_Mass2Model Dinel2dFrm_EBwDF InelRe3dMatwConstr Plot_Releases Add_OpenPHIndx2Post Dinel3dFrm_EBwDF InelSDOF_Newmark Plot_SectionGeometry Add_Shape2Section Draw_3dAxisCross InelTruss Plot_SolutionHistory Aj_matrix Draw_Arrow InelasticResponseSpectrum Plot_StoryDistr Animate_EventSequence Draw_AxisCross Kf_matrix Plot_StressField Animate_ResponseHistory Draw_Cube Ks_matrix Plot_XYData BInel2dFrm_wTwoComp DuctilityDemandSpectrum LE1dMat Post2Q B_matrix EigenMode LE2dFrm Print_Figs2File Bbar_matrix ElasticResponseSpectrum LE2dFrm_wPdelta Print_PDFile BbariBbarx_matrix ElasticSpectra4EQRecord LE2dFrm_wVarIDF Q0_vector BilinElastic1dMat ElemData2Qpl LE2dFrm_wVarIFF Q2Post BilinInel1dMat ElemData4SteelBraces LE3dFrm Radau BilinOrOr1dMat ElemData4SteelFrame LE4nodeQuad ReCircSecw1dMat BilinPkOr1dMat ElementLoading LE4nodeQuadwIM ReRectSecw1dMat C2Cubature ElmLenOr LE4to9nodeQuad Read_PEEREQRecord Cart2PolarTensorTrans Euro_IPSection LE8nodeBrick RectPatch2Layer Check3dFrmAxes ExtrReshu LE9nodeQuad Rectangle2Fiber CircLayer2Bar Extract_BasicEl2SecState LECST Rectangle2Layer CleanStart Extract_El2BasicElState LEIso2dMat RshpData4MultColorPlot CompReCircSecw1dMat Extract_El2MatState LEIso3dMat S2Cubature Complete_QV Extract_El2SecState LEIsoConstr3dMat S_BucklingLoad Condense_MV Extract_Fields LELST S_Check_Global3dEQ Condense_k Extract_Sec2MatState LESOrth2dMat S_DisplMethod Convert_SAPModel Extract_Str2ElState LETruss S_ForceMethod Create_Block FiberElemData4SteelBraces LSDOF_CentralDifference S_Increment Create_BoxOutline FiberElemData4SteelFrame LSDOF_LinearWilson S_InitialStep Create_BoxwOvhOutline FontProp4PlotSection LSDOF_Newmark S_Initialize Create_CSecOutline Fs_matrix Label_2dMoments S_Iterate Create_CircBarGrid GPYS Label_AxialForces S_LinearStep Create_DispCyclewN Gauss Label_Model S_MultiStep Create_FrameSections Gauss2d Lagrange S_MultiStep_wLoadHist Create_IPMesh4Circ Gen1dMatwDmg Large2du2v_Frm S_MultiStep_wLoadHistwSD Create_IPMesh4MultRectShape GenDiagNdMat LineProp4PlotSection S_OneStep_wLoadHist Create_IPMesh4Rect GeomTran_2dFrm Lobatto S_Transient_MultiStep Create_IPMesh4WFShape GeomTran_3dFrm Localize S_Transient_MultiStepwSD Create_ISecOutline GeomTran_Truss MP1dInt4Circ S_Update_State Create_JntOffsets Get_HFlrTrans MP2dInt4Circ SectionWrapper Create_LSecOutline Get_HngPos4DefoElem ManderConcr1dMat Simpson Create_Load4Frame Get_IPVarDistr ManderConcrwLTS1dMat SubIncr4MatSD Create_LoadHistory Get_ModelScale Mass4Prism2dFrm Tie_2dMesh Create_MPMesh4Circ Get_StDrift Mass4Taper2dFrm_wDF Tie_3dMesh Create_MRFrame Get_StShear MaterialWrapper TimeIntegrationConstants Create_Mass4Frame Get_Veps Midpoint Tint2d Create_MultDispCycleswN Hardening ModalAnalysis TranJnt Create_MultRectShape Hermite ModeDecomposition TransformMtensor2GL Create_NMInterDiagram HomoCircSecw1dMat MultRectSecw1dMat TransformStr2GL Create_PlasticLimitSurface HomoRectSecw1dMat Plot_2dCurvDistr TransfrmStr2AxiSym Create_RectBarGrid HomoWFSecw1dMat Plot_2dMomntDistr Trap Create_RectOutline Inel2dFrm Plot_3dYieldSurface V0_vector Create_RectPatch Inel3dMatwConstr Plot_AxialForces Vec2Tensor Create_RectShape Inel4to9nodeQuad Plot_BounCond kg_2dFrm Create_RectwCovOutline Inel4to9nodeReQuad Plot_DeformedStructure kg_Truss Create_SSecOutline Inel8nodeBrick Plot_DeformedSurface shape2d Create_ShapewMat InelCST Plot_DispPath shape3d Create_TSecOutline InelDPwCapwLH3dMat Plot_ElemLoading shapeBhat Create_TickLabels InelDPwLH3dMat Plot_ForcDistr shapeCST Create_Units InelGJ2P3dMat Plot_Hinge4Elem shapeLST Create_Window InelGJ2PStrConstr3dMat Plot_IPStressField DefGeom_2dFrm InelJ2PwLH2dMat Plot_IPVarDistr","title":"Index"},{"location":"Functions/latest/","text":"FEDEASLab Functions","title":"FEDEASLab Functions"},{"location":"Functions/latest/Element_Library/","text":"Element Library ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_El2MatState extract material state from element state Sub directories Frame_Elements Shell_Elements Special_Elements","title":"Element Library"},{"location":"Functions/latest/Element_Library/ElementLoading/","text":"Element_Library > ElementLoading ElementLoading Purpose determines current distributed element load value Synopsis wC = ElementLoading ( w0 , lamda , LdId ) Description ELEMENTLOADING determines current distributed element load value WC = ELEMENTLOADING (w0,LAMDA,LDID); function determines the current distributed element load values as the product of the user specified reference values in vector W0 and the current load factor(s) in row vector LAMDA; the load history ID for distributed element loads is specified in row vector LDID Cross-Reference Information This function calls: This function is called by: BInel2dFrm_wEPLHM 2d elasto-plastic, linear hardening basic frame element with hinge offsets BInel2dFrm_wEPLHNMYS 2d elasto-plastic, linear hardening basic frame element Inel2dFrm inelastic 2d frame element with different basic element types Inel3dFrm_wLHNMYS 3d frame element with elastic-linear hardening plastic axial-flexure hinges Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) Dinel3dFrm_EBwDF Euler-Bernoulli 3d-frame element with distributed inelasticity (displacement formulation) Dinel3dFrm_EBwFF 3d-frame element with distributed inelasticity (iterative force formulation) LE2dFrm_w2ndOrdDF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_w2ndOrdFF 2d LE frame element with moderate deformations under linear or NL geometry Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material Inel4to9nodeQuad isoparametric 4-9 node quadrilateral element with inelastic material Inel4to9nodeReQuad isoparametric 4-9 node quad element with inelastic material and reinforcing layers Inel8nodeBrick isoparametric 8 node brick element with inelastic material InelCST constant strain triangle with inelastic material under plane stress/strain InelDKT inelastic discrete Kirchhoff triangle for plate bending InelLST linear strain triangle with inelastic material under plane stress/strain","title":"ElementLoading"},{"location":"Functions/latest/Element_Library/ExtrReshu/","text":"Element_Library > ExtrReshu ExtrReshu Purpose extracts displacements and increments from State and reshapes into array Synopsis [ u , Du , DDu ] = ExtrReshu ( State , ndf , nen ) Description EXTRRESHU extracts displacements and increments from State and reshapes into array [U,DU,DDU] = EXTRRESHU (STATE,NDF,NEN) the function extracts the displacements and their increments from State and reshapes these into an NDF x NEN array, where NDF is no of dofs/node and NEN number of end nodes for element Cross-Reference Information This function calls: This function is called by: Inel2dFrm inelastic 2d frame element with different basic element types Inel3dFrm_wLHNMYS 3d frame element with elastic-linear hardening plastic axial-flexure hinges InelTruss 2d/3d inelastic truss element under linear or nonlinear geometry Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) Dinel3dFrm_EBwDF Euler-Bernoulli 3d-frame element with distributed inelasticity (displacement formulation) Dinel3dFrm_EBwFF 3d-frame element with distributed inelasticity (iterative force formulation) LE2dFrm 2d LE frame element under linear or nonlinear geometry LE2dFrm_w2ndOrdDF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_w2ndOrdFF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry LE2dFrm_wVarIDF 2d LE frame element with variable cross section under linear or NL geometry LE2dFrm_wVarIFF 2d LE frame element with variable cross section under linear or NL geometry LE3dFrm 3d linear frame element under linear or nonlinear geometry LETruss 2d/3d linear truss element under linear or nonlinear geometry Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material Inel4to9nodeQuad isoparametric 4-9 node quadrilateral element with inelastic material Inel4to9nodeReQuad isoparametric 4-9 node quad element with inelastic material and reinforcing layers InelCST constant strain triangle with inelastic material under plane stress/strain InelDKT inelastic discrete Kirchhoff triangle for plate bending InelLST linear strain triangle with inelastic material under plane stress/strain LE4nodeMindlinPlate linear elastic isoparametric 4-node quadrilateral Mindlin plate element LE4nodeMindlinPlatewITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC LE4nodeMindlinShellwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC LE4nodeQuad isoparametric 4-node quadrilateral element with linear elastic material LE4nodeQuadwIM isoparametric 4-node quad element with linear elastic material and incompatible bending modes LE4to9nodeMindlinPlate linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element LE4to9nodeMindlinShell linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element LE4to9nodeQuad isoparametric 4-9 node quadrilateral element with linear elastic material LE9nodeQuad isoparametric 9 node quadrilateral element with linear elastic material LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LECST constant strain triangle with linear elastic material under plane stress/strain LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material LELST linear strain triangle with linear elastic material under plane stress/strain","title":"ExtrReshu"},{"location":"Functions/latest/Element_Library/Extract_El2MatState/","text":"Element_Library > Extract_El2MatState Extract_El2MatState Purpose extract material state from element state Synopsis MatState = Extract_El2MatState ( mat , aeps , ElState , rd ) Description EXTRACT_EL2MATSTATE extract material state from element state MATSTATE = EXTRACT_EL2MATSTATE (MAT,AEPS,ELSTATE,RD) function extracts from data structure ELSTATE the necessary information for the element material, and returns it in data structure MATSTATE; it needs compatibility array AEPS to determine material strains from element displacements RD identifies the displacement DOFs to extract (default = all) Cross-Reference Information This function calls: This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material Inel4to9nodeQuad isoparametric 4-9 node quadrilateral element with inelastic material Inel4to9nodeReQuad isoparametric 4-9 node quad element with inelastic material and reinforcing layers Inel8nodeBrick isoparametric 8 node brick element with inelastic material InelCST constant strain triangle with inelastic material under plane stress/strain InelDKT inelastic discrete Kirchhoff triangle for plate bending InelLST linear strain triangle with inelastic material under plane stress/strain MaterialWrapper wrapper element that passes on arguments to the material state determination","title":"Extract El2MatState"},{"location":"Functions/latest/Element_Library/Frame_Elements/","text":"Frame Elements Check3dFrmAxes check that y-axis is not co-linear with element chord DeformShape2dFrm deformed shape of linear elastic, uniform, prismatic 2d frame element DeformShape2dFrm_wDispIntp deformed shape of 2d frame element with cubic polynomials DeformShape3dFrm deformed shape of linear elastic, uniform, prismatic 3d frame element DeformShape3dFrm_wDispIntp deformed shape of 3d frame element with cubic polynomials Extract_El2BasicElState extract basic element state from element state Mass4Prism2dFrm consistent mass matrix for prismatic 2d frame element Sub directories ConcentrInelastic DistrInelastic Linear","title":"Frame Elements"},{"location":"Functions/latest/Element_Library/Frame_Elements/Check3dFrmAxes/","text":"Element_Library > Frame_Elements > Check3dFrmAxes Check3dFrmAxes Purpose check that y-axis is not co-linear with element chord Synopsis y = Check3dFrmAxes ( el , y , xyz ) Description CHECK3dFRMAXES check that y-axis is not co-linear with element chord Y = CHECK3dFRMAXES(EL,Y,XYZ) the function checks that the specified Y-axis for the element EL with end node coordinates XYZ is not colinear with the element chord; if colinearity is detected, the function returns a unit vector in the global Y- or Z-axis and issues a warning message with information about the change; if not, the function returns the normalized vector Y Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: Dinel3dFrm_EBwDF Euler-Bernoulli 3d-frame element with distributed inelasticity (displacement formulation) Dinel3dFrm_EBwFF 3d-frame element with distributed inelasticity (iterative force formulation) LE3dFrm 3d linear frame element under linear or nonlinear geometry","title":"Check3dFrmAxes"},{"location":"Functions/latest/Element_Library/Frame_Elements/DeformShape2dFrm/","text":"Element_Library > Frame_Elements > DeformShape2dFrm DeformShape2dFrm Purpose deformed shape of linear elastic, uniform, prismatic 2d frame element Synopsis [ XYd , xyd ] = DeformShape2dFrm ( xyz , ElemData , u , v , MAGF , nsub ) Description DEFORMSHAPE2dFRM deformed shape of linear elastic, uniform, prismatic 2d frame element [XYd,xyd] = DEFORMSHAPE2DFRM (ELEMDATA,XYZ,U,V,MAGF,NSUB); The function returns the global coordinates of the magnified deformed shape of a 2d frame element under large end displacements in array XYd, and the local coordinates of the magnified deformed shape in array xyd. Input arguments are the end node coordinates in array XYZ, the element properties in cell array ELEMDATA, and the end displacements in vector U. Optional arguments are the end deformations V for elements with releases or plastic hinges (these can be supplied in a data structure with fields VE or V), the magnification factor MAGF (default=10), and the number of intermediate points NSUB (default=50) for the deformed shape. The function uses the exact homogeneous and particular solution of the differential equation for a linear elastic homogeneous frame element under uniformly distributed transverse load and uniform curvature. Cross-Reference Information This function calls: DefGeom_2dFrm determines current length and corotational diad of 2-node, 2d frame element ElmLenOr element length and x-axis orientation (direction cosines) Large2du2v_Frm determine 2d frame element deformations from end displacements TranJnt sets up transformation matrix for finite size joints This function is called by: Plot_DeformedStructure plot deformed shape of the structure Plot_OpenPlasticHinges display plastic hinge locations in original or deformed configuration Plot_PlasticHinges display plastic hinge locations in current window","title":"DeformShape2dFrm"},{"location":"Functions/latest/Element_Library/Frame_Elements/DeformShape2dFrm_wDispIntp/","text":"Element_Library > Frame_Elements > DeformShape2dFrm_wDispIntp DeformShape2dFrm_wDispIntp Purpose deformed shape of 2d frame element with cubic polynomials Synopsis [ XYd , xyd ] = DeformShape2dFrm_wDispIntp ( xyz , ElemData , u , v , MAGF , nsub ) Description DEFORMSHAPE2dFRM_wDISPINTP deformed shape of 2d frame element with cubic polynomials [XYd,xyd] = DEFORMSHAPE2dFRM_wDISPINTP (XYZ,ELEMDATA,U,V,MAGF,NSUB) The function returns the global coordinates of the magnified deformed shape of a 2d frame element under large end displacements in array XYd, and the local coordinates of the magnified deformed shape in array xyd. Input arguments are the end node coordinates in array XYZ, the element properties in cell array ELEMDATA, and the end node displacements in vector U. Optional arguments are the end deformations V for elements with releases or plastic hinges (these can be supplied in a data structure with fields VE or V), the magnification factor MAGF (default=10), and the number of intermediate points NSUB (default=100) for the deformed shape. and NSUB for the number of intermediate points for the deformed shape; The function uses Hermite cubic interpolation polynomials for the transverse displacements. Cross-Reference Information This function calls: DefGeom_2dFrm determines current length and corotational diad of 2-node, 2d frame element ElmLenOr element length and x-axis orientation (direction cosines) Large2du2v_Frm determine 2d frame element deformations from end displacements TranJnt sets up transformation matrix for finite size joints This function is called by: Plot_OpenPlasticHinges display plastic hinge locations in original or deformed configuration","title":"DeformShape2dFrm wDispIntp"},{"location":"Functions/latest/Element_Library/Frame_Elements/DeformShape3dFrm/","text":"Element_Library > Frame_Elements > DeformShape3dFrm DeformShape3dFrm Purpose deformed shape of linear elastic, uniform, prismatic 3d frame element Synopsis [ XYZd , xyzd ] = DeformShape3dFrm ( xyz , ElemData , u , v , MAGF , nsub ) Description DEFORMSHAPE3dFRM deformed shape of linear elastic, uniform, prismatic 3d frame element [XYZd,xyzd] = DEFORMSHAPE3dFRM (XYZ,ELEMDATA,U,V,MAGF,NSUB) The function returns the global coordinates of the magnified deformed shape of a 3d frame element under large end displacements in array XYZd, and the local coordinates of the magnified deformed shape in array xyzd. Input arguments are the end node coordinates in array XYZ, the element properties in cell array ELEMDATA, and the end displacements in vector U. Optional arguments are the end deformations V for elements with releases or plastic hinges (these can be supplied in a data structure with fields VE or V), the magnification factor MAGF (default=10), and the number of intermediate points NSUB (default=100) for the deformed shape. The function uses the exact homogeneous and particular solution of the differential equation for a linear elastic homogeneous frame element under uniformly distributed transverse load and uniform curvature. Cross-Reference Information This function calls: DefGeom_3dFrm determines current length and corotational triad of 2-node, 3d frame element ElmLenOr element length and x-axis orientation (direction cosines) Large3du2v_Frm determine 3d frame element deformations from end displacements TranJnt sets up transformation matrix for finite size joints This function is called by: Plot_DeformedStructure plot deformed shape of the structure","title":"DeformShape3dFrm"},{"location":"Functions/latest/Element_Library/Frame_Elements/DeformShape3dFrm_wDispIntp/","text":"Element_Library > Frame_Elements > DeformShape3dFrm_wDispIntp DeformShape3dFrm_wDispIntp Purpose deformed shape of 3d frame element with cubic polynomials Synopsis [ XYZd , xyzd ] = DeformShape3dFrm_wDispIntp ( xyz , ElemData , u , v , MAGF , nsub ) Description DEFORMSHAPE3dFRM_wDISPINTP deformed shape of 3d frame element with cubic polynomials [XYZd,xyzd] = DEFORMSHAPE3dFRM_wDISPINTP (XYZ,ELEMDATA,U,V,MAGF,NSUB) The function returns the global coordinates of the magnified deformed shape of a 3d frame element under large end displacements in array XYZd, and the local coordinates of the magnified deformed shape in array xyzd. Input arguments are the end node coordinates in array XYZ, the element properties in cell array ELEMDATA, and the end displacements in vector U. Optional arguments are the end deformations V for elements with releases or plastic hinges, the magnification factor MAGF (default=10) and the number of intermediate points NSUB (default=100) for the deformed shape. The function uses Hermite cubic interpolation polynomials for the transverse displacements. Cross-Reference Information This function calls: DefGeom_3dFrm determines current length and corotational triad of 2-node, 3d frame element ElmLenOr element length and x-axis orientation (direction cosines) Large3du2v_Frm determine 3d frame element deformations from end displacements TranJnt sets up transformation matrix for finite size joints This function is called by:","title":"DeformShape3dFrm wDispIntp"},{"location":"Functions/latest/Element_Library/Frame_Elements/Extract_El2BasicElState/","text":"Element_Library > Frame_Elements > Extract_El2BasicElState Extract_El2BasicElState Purpose extract basic element state from element state Synopsis BasicElState = Extract_El2BasicElState ( ag , ElState ) Description EXTRACT_EL2BASICELSTATE extract basic element state from element state BASICELSTATE = EXTRACT_EL2BASICELSTATE (AG,ELSTATE) function extracts from data structure ELSTATE the necessary information for the state of the basic element and returns it in data structure BASICELSTATE; it needs compatibility array AG to determine the element deformations from displacements Cross-Reference Information This function calls: This function is called by:","title":"Extract El2BasicElState"},{"location":"Functions/latest/Element_Library/Frame_Elements/Mass4Prism2dFrm/","text":"Element_Library > Frame_Elements > Mass4Prism2dFrm Mass4Prism2dFrm Purpose consistent mass matrix for prismatic 2d frame element Synopsis ElemMass = Mass4Prism2dFrm ( xyz , ElemData ) Description MASS4PRISM2dFRM consistent mass matrix for prismatic 2d frame element Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: Inel2dFrm inelastic 2d frame element with different basic element types LE2dFrm 2d LE frame element under linear or nonlinear geometry LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry","title":"Mass4Prism2dFrm"},{"location":"Functions/latest/Element_Library/Frame_Elements/ConcentrInelastic/","text":"ConcentrInelastic BInel2dFrm_wEPLHM 2d elasto-plastic, linear hardening basic frame element with hinge offsets BInel2dFrm_wEPLHNMYS 2d elasto-plastic, linear hardening basic frame element BInel2dFrm_wTwoComp two component 2d frame element (linear + linear-perfectly plastic) Create_PlasticLimitSurface pologonal plastic limit surface for truss and 2d frame elements GPYS function value, gradient and Hessian of polynomial yield surface Inel2dFrm inelastic 2d frame element with different basic element types Inel3dFrm_wLHNMYS 3d frame element with elastic-linear hardening plastic axial-flexure hinges InelTruss 2d/3d inelastic truss element under linear or nonlinear geometry Other files in this directory BInel2dFrm_wEPLHM.p BInel2dFrm_wEPLHNMYS.p Inel3dFrm_wLHNMYS.p","title":"ConcentrInelastic"},{"location":"Functions/latest/Element_Library/Frame_Elements/ConcentrInelastic/BInel2dFrm_wEPLHM/","text":"Element_Library > Frame_Elements > ConcentrInelastic > BInel2dFrm_wEPLHM BInel2dFrm_wEPLHM Purpose 2d elasto-plastic, linear hardening basic frame element with hinge offsets Synopsis BElemResp = BInel2dFrm_wEPLHM ( action , L , BElemData , BElemState ) Description BINELP2dFRM_WEPLHM 2d elasto-plastic, linear hardening basic frame element with hinge offsets BELEMRESP = BINELP2dFRM_WEPLHM (ACTION,L,BELEMDATA,BELEMSTATE) the function determines the 2d response of an elasto-plastic basic frame element of length L with linear elastic axial response and elasto-plasic flexural response with linear isotropic and kinematic hardening at two plastic hinges that may be offset from the element ends (series model) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in BELEMRESP: ACTION = 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report basic element forces 'stif': report basic element stiffness matrix and basic element forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure BELEMRESP stands for the following data object(s) for each ACTION: BELEMRESP = BELEMDATA for action = 'chec' BELEMRESP = BELEMSTATE for action = 'init' BELEMRESP = BELEMSTATE for action = 'stif' BELEMRESP = BELEMSTATE for action = 'forc' BELEMRESP = BELEMPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BELEMDATA is a data structure with basic element property information; it has the fields E = Young's Modulus A = cross-sectional area I = moment of inertia Mp = plastic moment capacity at plastic hinges near ends i, j ( Mp = [Mpi , Mpj] ) Hir = isotropic hardening modulus ratio Hkr = kinematic hardening modulus ratio HngOff = offset location of plastic hinges as %L (default [0 0]) w = uniformly distributed element load [wx;wy]; YFtol = yield criterion tolerance (default = 1e-12) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BELEMSTATE is a data structure with the current basic element state; it has the fields v = vector of total element deformations k = basic element stiffness matrix; updated under ACTION = 'stif' q = basic element forces; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables the element history variables of this element are ehp = plastic hinge deformations (2x1 array) Mbk = back forces at flexural hinges (2x1 array) alpha = isotropic hardening variable (2x1 array) Cross-Reference Information This function calls: ElementLoading determines current distributed element load value This function is called by:","title":"BInel2dFrm wEPLHM"},{"location":"Functions/latest/Element_Library/Frame_Elements/ConcentrInelastic/BInel2dFrm_wEPLHNMYS/","text":"Element_Library > Frame_Elements > ConcentrInelastic > BInel2dFrm_wEPLHNMYS BInel2dFrm_wEPLHNMYS Purpose 2d elasto-plastic, linear hardening basic frame element Synopsis BElemResp = BInel2dFrm_wEPLHNMYS ( action , L , BElemData , BElemState ) Description BINELP2dFRM_WEPLHNMYS 2d elasto-plastic, linear hardening basic frame element BELEMRESP = BINELP2dFRM_WEPLHNMYS (ACTION,L,BELEMDATA,BELEMSTATE) the function determines the 2d response of an elasto-plastic basic frame element of length L with elasto-plastic behavior with linear isotropic and kinematic hardening under axial force (N) - bending moment (M) interaction at two plastic hinges at ends i and j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in BELEMRESP: ACTION = 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report basic element forces 'stif': report basic element stiffness matrix and basic element forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure BELEMRESP stands for the following data object(s) for each ACTION: BELEMRESP = BELEMDATA for action = 'chec' BELEMRESP = BELEMSTATE for action = 'init' BELEMRESP = BELEMSTATE for action = 'stif' BELEMRESP = BELEMSTATE for action = 'forc' BELEMRESP = BELEMPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BELEMDATA is a data structure with basic element property information; it has the fields E = Young's Modulus A = cross-sectional area I = moment of inertia Np = plastic axial capacity at hinges near ends i, j ( Np = [Npi ; Npj] ) Nb = axial force at balance point at hinges near ends i, j; default = zeros(2,1) Mp = plastic moment capacity at hinges near ends i, j ( Mp = [Mpi ; Mpj] ) Hir = isotropic plastic modulus ratio (default = [ 0 ; 0 ] ) Hkr = kinematic modulus ratio (default = [ 0 ; 0 ; 0 ] ) w = uniformly distributed element load [wx ;wy] (default = [ 0 ; 0 ] ) GPYSC = coefficients for polynomial yield surface (default = [ 1.2 2 0 ; 1 0 2 ; 3.5 2 2 ; -1 0 0 ] ) YFtol = yield criterion tolerance (default = 1e-12) Wtol = work tolerance for return map algorithm (default = 1e-16) MaxIter = max no of iterations for return map algorithm (default = 15) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BELEMSTATE is a data structure with the current basic element state; it has the fields v = vector of total element deformations ke = basic element stiffness matrix; updated under ACTION = 'stif' q = basic element forces; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables the element history variables of this element are ehp = plastic hinge deformations (4x1 array) sbk = plastic hinge back forces (4x1 array) alpha = isotropic hardening variable (2x1 array) Cross-Reference Information This function calls: ElementLoading determines current distributed element load value GPYS function value, gradient and Hessian of polynomial yield surface This function is called by:","title":"BInel2dFrm wEPLHNMYS"},{"location":"Functions/latest/Element_Library/Frame_Elements/ConcentrInelastic/BInel2dFrm_wTwoComp/","text":"Element_Library > Frame_Elements > ConcentrInelastic > BInel2dFrm_wTwoComp BInel2dFrm_wTwoComp Purpose two component 2d frame element (linear + linear-perfectly plastic) Synopsis BElemResp = BInel2dFrm_wTwoComp ( action , L , BElemData , BElemState ) Description BINELP2dFRM_WTWOCOMP two component 2d frame element (linear + linear-perfectly plastic) BELEMRESP = BINELP2dFRM_WTWOCOMP (ACTION,L,BELEMDATA,BELEMSTATE) the function determines the 2d response of the two component basic frame element of length L the element exhibits linear elastic axial response and elastic-linear hardening flexural response as the sum of two components in parallel: a linear elastic + linear-perfectly plastic ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in BELEMRESP: ACTION = 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report basic element forces 'stif': report basic element stiffness matrix and basic element forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure BELEMRESP stands for the following data object(s) for each ACTION: BELEMRESP = BELEMDATA for action = 'chec' BELEMRESP = BELEMSTATE for action = 'init' BELEMRESP = BELEMSTATE for action = 'stif' BELEMRESP = BELEMSTATE for action = 'forc' BELEMRESP = BELEMPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BELEMDATA is a data structure with basic element property information; it has the fields E = Young's Modulus A = cross-sectional area I = moment of inertia Mp = plastic moment capacity at plastic hinges near ends i, j ( Mp = [Mpi , Mpj] ) Hr = ratio of linear elastic component to total stiffness (default = 0) YFtol = tolerance for yield criterion (default = 1e-12) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BELEMSTATE is a data structure with the current basic element state; it has the fields v = vector of total element deformations k = basic element stiffness matrix; updated under ACTION = 'stif' q = basic element forces; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables the element history variables of this element are vp = plastic element deformations (3x1 array) Cross-Reference Information This function calls: This function is called by:","title":"BInel2dFrm wTwoComp"},{"location":"Functions/latest/Element_Library/Frame_Elements/ConcentrInelastic/Create_PlasticLimitSurface/","text":"Element_Library > Frame_Elements > ConcentrInelastic > Create_PlasticLimitSurface Create_PlasticLimitSurface Purpose pologonal plastic limit surface for truss and 2d frame elements Synopsis LimitSurf = Create_PlasticLimitSurface ( ElemName , ElemData ) Description CREATE_PLASTICLIMITSURFACE pologonal plastic limit surface for truss and 2d frame elements LIMITSURF = CREATE_PLASTLIMSURFACE(ELEMNAME,ELEMDATA) the function sets up the polygonal plastic limit surface for the element type ELEMNAME (only truss and 2d frame elements supported); the polygonal plastic surface depends on the plastic axial capacity NP and flexural capacity MP in ELEMDATA; LIMITSURF is an array with the plastic capacity values at the polygon corners; the field NMOPT of ELEMDATA determines the type of plastic surface; the current options are: 'None' : no interaction between axial and flexural capacity 'Dmnd' : diamond shaped polygon for plastic limit surface 'AISC' : 8-sided polygon according to AISC specifications Cross-Reference Information This function calls: This function is called by: Plot_PlasticHinges display plastic hinge locations in current window","title":"Create PlasticLimitSurface"},{"location":"Functions/latest/Element_Library/Frame_Elements/ConcentrInelastic/GPYS/","text":"Element_Library > Frame_Elements > ConcentrInelastic > GPYS GPYS Purpose function value, gradient and Hessian of polynomial yield surface Synopsis [ f , g , h ] = GPYS ( GPYSC , xyz , ScVec ) Description GPYS function value, gradient and Hessian of polynomial yield surface [F,G,H] = GPYS (GPYSC,XYZ,SCVEC) the function determines the value F(X,Y,Z), the gradient G(X,Y,Z), and the Hessian matrix (2nd derivative) H(X,Y,Z) of F at a point XYZ for a general polynomial yield surface with coefficients GPYSC SCVEC is a scale vector for the variables X, Y, and Z G = the gradient (normal) of the yield surface = [dF/dX; dF/dY; dF/dZ] H = the Hessian (2nd deriv) of the yield surface = dG/dXYZ = [d2(F)/d(X)^2 d2(F)/d(X)d(Y) d2(F)/d(X)d(Z); d2(F)/d(Y)d(X) d2(F)/d(Y)^2 d2(F)/d(Y)d(Z); d2(F)/d(Z)d(X) d2(F)/d(Z)d(Y) d2(F)/d(Z)^2] The coefficients of the polynomial yield surface are specified as follows general 3d case GPYSC = [d1 a1 b1 c1; d2 a2 b2 c2; d3 a3 b3 c3; ...] for F = Sum_i (di*(X^ai)*(Y^bi)*(Z^ci)) general 2d case GPYSC = [c1 a1 b1; c2 a2 b2; c3 a3 b3; ...] for F = Sum_i (ci*(X^ai)*(Y^bi)) Cross-Reference Information This function calls: This function is called by: BInel2dFrm_wEPLHNMYS 2d elasto-plastic, linear hardening basic frame element","title":"GPYS"},{"location":"Functions/latest/Element_Library/Frame_Elements/ConcentrInelastic/Inel2dFrm/","text":"Element_Library > Frame_Elements > ConcentrInelastic > Inel2dFrm Inel2dFrm Purpose inelastic 2d frame element with different basic element types Synopsis ElemResp = Inel2dFrm ( action , el_no , xyz , ElemData , ElemState ) Description INEL2dFRM inelastic 2d frame element with different basic element types ELEMRESP = INEL2dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of inelastic 2d frame element with different basic element types ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information; it has the fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) LdIdx = load history no for element loading in x-direction LdIdy = load history no for element loading in y-direction JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j HngOff = offset location of plastic hinges as %L (default [0 0]) NMOpt = true or false for including or excluding N-M interaction, respectively (false) BElemTyp = function name of basic frame element; currently BInel2dFrm_wEPLHM for flexure or BInel2dFrm_wEPLHNMYS for N-M interaction SubDivNo = number of element deformation subdivisions (5) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations vp = plastic deformations q = element basic forces Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Mass4Prism2dFrm consistent mass matrix for prismatic 2d frame element ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options This function is called by:","title":"Inel2dFrm"},{"location":"Functions/latest/Element_Library/Frame_Elements/ConcentrInelastic/Inel3dFrm_wLHNMYS/","text":"Element_Library > Frame_Elements > ConcentrInelastic > Inel3dFrm_wLHNMYS Inel3dFrm_wLHNMYS Purpose 3d frame element with elastic-linear hardening plastic axial-flexure hinges Synopsis ElemResp = Inel3dFrm_wLHNMYS ( action , el_no , xyz , ElemData , ElemState ) Description INEL2dFRM_wLHNMYS 3d frame element with elastic-linear hardening plastic axial-flexure hinges ELEMRESP = INEL3dFRM_wLHNMYS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d one-component linear elastic frame element with linear plastic hardening axial-flexure hinges with General Closest Point Project (GCPP) Iteration for the N-M yield surface; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = FunHandle for action = 'defo' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area Iy = moment of inertia about y-axis Iz = moment of inertia about z-axis J = polar moment of area E = modulus of elasticity G = shear modulus Np = plastic axial capacity of element Mp = plastic moment capacity of element GPYSC = polynomial exponents for plastic surface (see help for function GPYS) Hir = isotropic hardening ratio for flexural end i and j ([0;0]) Hkr = kinematic hardening ratio for axial, flexural end i and end j ([0;0;0]) w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) JntOff = rigid joint offsets in global X, Y and Z at element ends; column 1 for node i, column 2 for node j LdIdx = load history no for element loading in x-direction LdIdy = load history no for element loading in y-direction LdIdz = load history no for element loading in z-direction Wtol = incremental work tolerance for state convergence (10^-16) MaxIter = maximum number of iterations for state convergence (15) SubDivNo= number of element deformation subdivisions (5) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations vp = plastic deformations q = element basic forces w = current value of distributed element load Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_3dFrm kinematic matrices and deformations for a 2-node 3d frame element kg_3dFrm geometric stiffness matrix for 2-node 3d frame element different options This function is called by:","title":"Inel3dFrm wLHNMYS"},{"location":"Functions/latest/Element_Library/Frame_Elements/ConcentrInelastic/InelTruss/","text":"Element_Library > Frame_Elements > ConcentrInelastic > InelTruss InelTruss Purpose 2d/3d inelastic truss element under linear or nonlinear geometry Synopsis ElemResp = InelTruss ( action , el_no , xyz , ElemData , ElemState ) Description INELTRUSS 2d/3d inelastic truss element under linear or nonlinear geometry ELEMRESP = INELTRUSS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d/3d inelastic truss element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area MatName = function for material stress-strain response MatData = material property data s0 = initial force (default = 0) e0 = initial deformation (default = 0) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Mat = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_Truss kinematic matrices and deformations for a 2-node truss element kg_Truss geometric stiffness matrix for 2d/3d 2-node truss element for different options This function is called by:","title":"InelTruss"},{"location":"Functions/latest/Element_Library/Frame_Elements/DistrInelastic/","text":"DistrInelastic DeformShape2dFrm_wCurvIntp deformed shape of 2d frame element from curvatures DeformShape3dFrm_wCurvIntp deformed shape of 3d frame element from curvatures Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) Dinel3dFrm_EBwDF Euler-Bernoulli 3d-frame element with distributed inelasticity (displacement formulation) Dinel3dFrm_EBwFF 3d-frame element with distributed inelasticity (iterative force formulation) Extract_BasicEl2SecState extract section state from basic element state Extract_El2SecState extract section state from element state Mass4Taper2dFrm_wDF consistent mass matrix for tapered 2d frame element with displ interpolation Other files in this directory Dinel2dFrm_EBwFF.p Dinel3dFrm_EBwFF.p","title":"DistrInelastic"},{"location":"Functions/latest/Element_Library/Frame_Elements/DistrInelastic/DeformShape2dFrm_wCurvIntp/","text":"Element_Library > Frame_Elements > DistrInelastic > DeformShape2dFrm_wCurvIntp DeformShape2dFrm_wCurvIntp Purpose deformed shape of 2d frame element from curvatures Synopsis [ XYd , xyd ] = DeformShape2dFrm_wCurvIntp ( xyz , ElemData , u , EPost , MAGF , nsub ) Description DEFORMSHAPE2dFRM_wCURVINTP deformed shape of 2d frame element from curvatures [XYd,xyd] = DEFORMSHAPE2dFRM_wCURVINTP (XYZ,ELEMDATA,U,EPOST,MAGF,NSUB) The function returns the global coordinates of the magnified deformed shape of a 2d frame element under large end displacements in array XYd, and the local coordinates of the magnified deformed shape in array xyd. Input arguments are the end node coordinates in array XYZ, the element properties in cell array ELEMDATA, the end displacements in vector U, and the data structure EPOST with information about the curvatures KAPPA along the element axis in field Sec{iP}.e(2). Optional arguments are the magnification factor MAGF (default=10) and the number of intermediate points NSUB (default=100) for the deformed shape. The function uses double integration of the interpolation polynomial of the curvatures at the integration points. (reference: Neuenhofer/Filippou, ASCE, JSE, June 1998, pp. 704-711) Cross-Reference Information This function calls: DefGeom_2dFrm determines current length and corotational diad of 2-node, 2d frame element ElmLenOr element length and x-axis orientation (direction cosines) TranJnt sets up transformation matrix for finite size joints This function is called by: Plot_OpenPlasticHinges display plastic hinge locations in original or deformed configuration","title":"DeformShape2dFrm wCurvIntp"},{"location":"Functions/latest/Element_Library/Frame_Elements/DistrInelastic/DeformShape3dFrm_wCurvIntp/","text":"Element_Library > Frame_Elements > DistrInelastic > DeformShape3dFrm_wCurvIntp DeformShape3dFrm_wCurvIntp Purpose deformed shape of 3d frame element from curvatures Synopsis [ XYZd , xyzd ] = DeformShape3dFrm_wCurvIntp ( xyz , ElemData , u , EPost , MAGF , nsub ) Description DEFORMSHAPE3dFRM_wCURVINTP deformed shape of 3d frame element from curvatures [XYd,xyd] = DEFORMSHAPE3dFRM_wCURVINTP (XYZ,ELEMDATA,U,KAPPA,MAGF,NSUB) The function returns the global coordinates of the magnified deformed shape of a 3d frame element under large end displacements in array XYd, and the local coordinates of the magnified deformed shape in array xyd. Input arguments are the end node coordinates in array XYZ, the element properties in cell array ELEMDATA, the end displacements in vector U, and the data structure EPOST with information about the curvatures KAPPAz KAPPAy along the element axis in fields Sec{iP}.e(2) and Sec{iP}.e(3). Optional arguments are the magnification factor MAGF (default=10) and the number of intermediate points NSUB (default=100) for the deformed shape. The function uses double integration of the interpolation polynomial of the curvatures at the integration points. (reference: Neuenhofer/Filippou, ASCE, JSE, June 1998, pp. 704-711) Cross-Reference Information This function calls: DefGeom_3dFrm determines current length and corotational triad of 2-node, 3d frame element ElmLenOr element length and x-axis orientation (direction cosines) TranJnt sets up transformation matrix for finite size joints This function is called by:","title":"DeformShape3dFrm wCurvIntp"},{"location":"Functions/latest/Element_Library/Frame_Elements/DistrInelastic/Dinel2dFrm_EBwDF/","text":"Element_Library > Frame_Elements > DistrInelastic > Dinel2dFrm_EBwDF Dinel2dFrm_EBwDF Purpose 2d-frame element with distributed inelasticity (displacement formulation) Synopsis ElemResp = Dinel2dFrm_EBwDF ( action , el_no , xyz , ElemData , ElemState ) Description DINEL2dFRM_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) ELEMRESP = DINEL2dFRM_EBwDF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) function determines the response of 2d frame element with distributed inelasticity for any type of section and material under linear and nonlinear geometry; displacement formulation with small deformations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j nIP = number of integration points IntTyp = function name for element integration SecName = function name for section s-e response SecData{i} = section property data at integration point i (see function with SecName) LdIdx = load history no for element loading in x-direction LdIdy = load history no for element loading in y-direction ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Sec{i}= section response information at integration point i (see function with SecName) Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_BasicEl2SecState extract section state from basic element state ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options This function is called by:","title":"Dinel2dFrm EBwDF"},{"location":"Functions/latest/Element_Library/Frame_Elements/DistrInelastic/Dinel2dFrm_EBwFF/","text":"Element_Library > Frame_Elements > DistrInelastic > Dinel2dFrm_EBwFF Dinel2dFrm_EBwFF Purpose 2d-frame element with distributed inelasticity (force formulation) Synopsis ElemResp = Dinel2dFrm_EBwFF ( action , el_no , xyz , ElemData , ElemState ) Description DINEL2dFRM_EBwFF 2d-frame element with distributed inelasticity (force formulation) ELEMRESP = DINEL2dFRM_EBwFF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) function determines the response of 2d frame element with distributed inelasticity for any type of section and material under linear and nonlinear geometry; iterative or non-iterative force formulation with small deformations reference: Spacone/Filippou/Taucer IJSDEE, Vol.25, No.7, July 1996, pp. 711-725 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) MR = moment release code (0=cont,1=hinge) (default=[0;0]) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j nIP = number of integration points IntTyp = function name for element integration Tol = relative tolerance for convergence of state determination (10^-16) MaxIter = maximum number of iterations for state convergence (15) SubDivNo= number of element deformation subdivisions (5) SecName = function name for section s-e response SecData{i} = section property data at integration point i (see function with SecName) LdIdx = load history no for element loading in x-direction LdIdy = load history no for element loading in y-direction ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Sec{i}= section response information at integration point i (see function with SecName) Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options This function is called by:","title":"Dinel2dFrm EBwFF"},{"location":"Functions/latest/Element_Library/Frame_Elements/DistrInelastic/Dinel3dFrm_EBwDF/","text":"Element_Library > Frame_Elements > DistrInelastic > Dinel3dFrm_EBwDF Dinel3dFrm_EBwDF Purpose Euler-Bernoulli 3d-frame element with distributed inelasticity (displacement formulation) Synopsis ElemResp = Dinel3dFrm_EBwDF ( action , el_no , xyz , ElemData , ElemState ) Description DINEL3DFRM_EBwDF Euler-Bernoulli 3d-frame element with distributed inelasticity (displacement formulation) ELEMRESP = DINEL3DFRM_EBwDF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) function determines the response of a Euler-Bernoulli 3d frame element with distributed inelasticity for any type of section and material under linear and nonlinear geometry; Displacement formulation with small deformations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = FunHandle for action = 'defo' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) yornt = y-axis orientation in global reference system (x, y, z) w = uniform element loads LdId = load history no for element local loading in direction of Px, Py, Pz, Mt, My and Mz MR = moment release code (0=cont,1=hinge) (default=[0;0;0;0]) rho = mass density JntOff = rigid joint offsets in global X, Y, Z at element ends; column 1 for node i, column 2 for node j SecName = function name for section s-e response SecData{i} = section property data at integration point i (see function with SecName) nIP = number of integration points IntTyp = function name for element integration ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Sec{i} = section response information at integration point i (see function with SecName) Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Check3dFrmAxes check that y-axis is not co-linear with element chord Extract_BasicEl2SecState extract section state from basic element state ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_3dFrm kinematic matrices and deformations for a 2-node 3d frame element kg_3dFrm geometric stiffness matrix for 2-node 3d frame element different options This function is called by:","title":"Dinel3dFrm EBwDF"},{"location":"Functions/latest/Element_Library/Frame_Elements/DistrInelastic/Dinel3dFrm_EBwFF/","text":"Element_Library > Frame_Elements > DistrInelastic > Dinel3dFrm_EBwFF Dinel3dFrm_EBwFF Purpose 3d-frame element with distributed inelasticity (iterative force formulation) Synopsis ElemResp = Dinel3dFrm_EBwFF ( action , el_no , xyz , ElemData , ElemState ) Description DINEL3dFRM_EBwITERFF 3d-frame element with distributed inelasticity (iterative force formulation) ELEMRESP = DINEL3dFRM_EBwITERFF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) function determines the response of 3d frame element with distributed inelasticity for any type of section and material under linear and nonlinear geometry; iterative force formulation with small deformations reference: Spacone/Filippou/Taucer IJSDEE, Vol.25, No.7, July 1996, pp. 711-725 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = FunHandle for action = 'defo' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) yornt = y-axis orientation in global reference system (x, y, z) w = uniform element loads LdId = load history no for element local loading in direction of Px, Py, Pz, Mt, My and Mz MR = moment release code (0=cont,1=hinge) (default=[0;0;0;0]) rho = mass density JntOff = rigid joint offsets in global X, Y, Z at element ends; column 1 for node i, column 2 for node j SecName = function name for section s-e response SecData{i} = section property data at integration point i (see function with SecName) nIP = number of integration points IntTyp = function name for element integration Tol = relative tolerance for convergence of state determination (10^-16) MaxIter = maximum number of iterations for state convergence (15) SubDivNo= number of element deformation subdivisions (5) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Sec{i}= section response information at integration point i (see function with SecName) Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Check3dFrmAxes check that y-axis is not co-linear with element chord ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_3dFrm kinematic matrices and deformations for a 2-node 3d frame element kg_3dFrm geometric stiffness matrix for 2-node 3d frame element different options This function is called by:","title":"Dinel3dFrm EBwFF"},{"location":"Functions/latest/Element_Library/Frame_Elements/DistrInelastic/Extract_BasicEl2SecState/","text":"Element_Library > Frame_Elements > DistrInelastic > Extract_BasicEl2SecState Extract_BasicEl2SecState Purpose extract section state from basic element state Synopsis SecState = Extract_BasicEl2SecState ( sec , ae , ElState ) Description EXTRACT_BASICEL2SECSTATE extract section state from basic element state SECSTATE = EXTRACT_BASICEL2SECSTATE (SEC,AE,ELSTATE) function extracts from data structure ELSTATE the necessary information for section SEC, and returns it in data structure SECSTATE; it needs compatibility array AE to determine section from element deformations Cross-Reference Information This function calls: This function is called by: Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel3dFrm_EBwDF Euler-Bernoulli 3d-frame element with distributed inelasticity (displacement formulation)","title":"Extract BasicEl2SecState"},{"location":"Functions/latest/Element_Library/Frame_Elements/DistrInelastic/Extract_El2SecState/","text":"Element_Library > Frame_Elements > DistrInelastic > Extract_El2SecState Extract_El2SecState Purpose extract section state from element state Synopsis SecState = Extract_El2SecState ( sec , ae , ElemState ) Description EXTRACT_EL2SECSTATE extract section state from element state SECSTATE = EXTRACT_EL2SECSTATE (SEC,AE,ELSTATE) function extracts from data structure ELSTATE the necessary information for section SEC, and returns it in data structure SECSTATE; it needs compatibility array AE to determine section from element deformations Cross-Reference Information This function calls: This function is called by: SectionWrapper wrapper element that passes on arguments to the section state determination","title":"Extract El2SecState"},{"location":"Functions/latest/Element_Library/Frame_Elements/DistrInelastic/Mass4Taper2dFrm_wDF/","text":"Element_Library > Frame_Elements > DistrInelastic > Mass4Taper2dFrm_wDF Mass4Taper2dFrm_wDF Purpose consistent mass matrix for tapered 2d frame element with displ interpolation Synopsis ElemMass = Mass4Taper2dFrm_wDF ( xyz , ElemData ) Description MASS4TAPER2dFRM_wDF consistent mass matrix for tapered 2d frame element with displ interpolation Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) Hermite Hermite interpolation polynomials in interval -1<xi<1 Lagrange Lagrange interpolation polynomials in interval -1<xi<1 This function is called by: LE2dFrm_wVarIDF 2d LE frame element with variable cross section under linear or NL geometry LE2dFrm_wVarIFF 2d LE frame element with variable cross section under linear or NL geometry","title":"Mass4Taper2dFrm wDF"},{"location":"Functions/latest/Element_Library/Frame_Elements/Linear/","text":"Linear LE2dFrm 2d LE frame element under linear or nonlinear geometry LE2dFrm_w2ndOrdDF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_w2ndOrdFF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry LE2dFrm_wVarIDF 2d LE frame element with variable cross section under linear or NL geometry LE2dFrm_wVarIFF 2d LE frame element with variable cross section under linear or NL geometry LE3dFrm 3d linear frame element under linear or nonlinear geometry LETruss 2d/3d linear truss element under linear or nonlinear geometry Other files in this directory LE2dFrm_w2ndOrdDF.p LE2dFrm_w2ndOrdFF.p","title":"Linear"},{"location":"Functions/latest/Element_Library/Frame_Elements/Linear/LE2dFrm/","text":"Element_Library > Frame_Elements > Linear > LE2dFrm LE2dFrm Purpose 2d LE frame element under linear or nonlinear geometry Synopsis ElemResp = LE2dFrm ( action , el_no , xyz , ElemData , ElemState ) Description LE2dFRM 2d LE frame element under linear or nonlinear geometry ELEMRESP = LE2dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) e0 = initial deformations (default = 0) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j Release = axial and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array Mass4Prism2dFrm consistent mass matrix for prismatic 2d frame element ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options This function is called by:","title":"LE2dFrm"},{"location":"Functions/latest/Element_Library/Frame_Elements/Linear/LE2dFrm_w2ndOrdDF/","text":"Element_Library > Frame_Elements > Linear > LE2dFrm_w2ndOrdDF LE2dFrm_w2ndOrdDF Purpose 2d LE frame element with moderate deformations under linear or NL geometry Synopsis ElemResp = LE2dFrm_w2ndOrdDF ( action , el_no , xyz , ElemData , ElemState ) Description LE2dFRM_w2NDORDDF 2d LE frame element with moderate deformations under linear or NL geometry ELEMRESP = LE2dFRM_w2NDORDDF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element under moderate deformations using displacement interpolation functions in the basic system (displacement formulation); the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j IntTyp = function name for element integration nIP = number of integration points ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Sec{i}.e = section deformations at integration point i Sec{i}.s = section forces at integration point i Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options Hermite Hermite interpolation polynomials in interval -1<xi<1 Lagrange Lagrange interpolation polynomials in interval -1<xi<1 This function is called by:","title":"LE2dFrm w2ndOrdDF"},{"location":"Functions/latest/Element_Library/Frame_Elements/Linear/LE2dFrm_w2ndOrdFF/","text":"Element_Library > Frame_Elements > Linear > LE2dFrm_w2ndOrdFF LE2dFrm_w2ndOrdFF Purpose 2d LE frame element with moderate deformations under linear or NL geometry Synopsis ElemResp = LE2dFrm_w2ndOrdFF ( action , el_no , xyz , ElemData , ElemState ) Description LE2dFRM_w2NDORDFF 2d LE frame element with moderate deformations under linear or NL geometry ELEMRESP = LE2dFRM_w2NDORDFF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element under moderate deformations using force interpolation functions in the basic system (force formulation); Reference: Neuenhofer/Filippou, ASCE, JSE, June 1998, pp. 704-711; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j IntTyp = function name for element integration nIP = number of integration points ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Sec{i}.e = section deformations at integration point i Sec{i}.s = section forces at integration point i Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options Lagrange Lagrange interpolation polynomials in interval -1<xi<1 This function is called by:","title":"LE2dFrm w2ndOrdFF"},{"location":"Functions/latest/Element_Library/Frame_Elements/Linear/LE2dFrm_wPdelta/","text":"Element_Library > Frame_Elements > Linear > LE2dFrm_wPdelta LE2dFrm_wPdelta Purpose 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry Synopsis ElemResp = LE2dFrm_wPdelta ( action , el_no , xyz , ElemData , ElemState ) Description LE2dFRM 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry ELEMRESP = LE2dFRM_wPDELTA (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element with P-delta effects; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity I = moment of inertia rho = mass density JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j Release = axial and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array Mass4Prism2dFrm consistent mass matrix for prismatic 2d frame element ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options This function is called by:","title":"LE2dFrm wPdelta"},{"location":"Functions/latest/Element_Library/Frame_Elements/Linear/LE2dFrm_wVarIDF/","text":"Element_Library > Frame_Elements > Linear > LE2dFrm_wVarIDF LE2dFrm_wVarIDF Purpose 2d LE frame element with variable cross section under linear or NL geometry Synopsis ElemResp = LE2dFrm_wVarIDF ( action , el_no , xyz , ElemData , ElemState ) Description LE2dFRM_wVARIDF 2d LE frame element with variable cross section under linear or NL geometry ELEMRESP = LE2dFRM_wVARIDF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element with variable cross section using displacement interpolation functions in the basic system (displacement formulation); the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) rho = mass density w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j IntTyp = function name for element integration nIP = number of integration points SecData{i} = section property data at integration point i; it has the fields E = modulus of elasticity A = area of cross section I = moment of inertia ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Sec{i}.e = section deformations at integration point i Sec{i}.s = section forces at integration point i Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array Mass4Taper2dFrm_wDF consistent mass matrix for tapered 2d frame element with displ interpolation ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options Hermite Hermite interpolation polynomials in interval -1<xi<1 Lagrange Lagrange interpolation polynomials in interval -1<xi<1 This function is called by:","title":"LE2dFrm wVarIDF"},{"location":"Functions/latest/Element_Library/Frame_Elements/Linear/LE2dFrm_wVarIFF/","text":"Element_Library > Frame_Elements > Linear > LE2dFrm_wVarIFF LE2dFrm_wVarIFF Purpose 2d LE frame element with variable cross section under linear or NL geometry Synopsis ElemResp = LE2dFrm_wVarIFF ( action , el_no , xyz , ElemData , ElemState ) Description LE2dFRM_wVARIFF 2d LE frame element with variable cross section under linear or NL geometry ELEMRESP = LE2dFRM_wVARIFF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d linear elastic frame element with variable cross section using force interpolation functions in the basic system (force formulation); the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) w = uniform element load ( w(1) = longitudinal, w(2) = transverse ) JntOff = rigid joint offsets in global X and Y at element ends; column 1 for node i, column 2 for node j IntTyp = function name for element integration nIP = number of integration points SecData{i} = section property data at integration point i; it has the fields E = modulus of elasticity A = area of cross section I = moment of inertia ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Sec{i}.e = section deformations at integration point i Sec{i}.s = section forces at integration point i Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array Mass4Taper2dFrm_wDF consistent mass matrix for tapered 2d frame element with displ interpolation ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options Lagrange Lagrange interpolation polynomials in interval -1<xi<1 This function is called by:","title":"LE2dFrm wVarIFF"},{"location":"Functions/latest/Element_Library/Frame_Elements/Linear/LE3dFrm/","text":"Element_Library > Frame_Elements > Linear > LE3dFrm LE3dFrm Purpose 3d linear frame element under linear or nonlinear geometry Synopsis ElemResp = LE3dFrm ( action , el_no , xyz , ElemData , ElemState ) Description LE3dFRM 3d linear frame element under linear or nonlinear geometry ELEMRESP = LE3dFRM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 3d linear frame element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'defo': report function handle for deformed shape 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = FunHandle for action = 'defo' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information; it has the fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) E = modulus of elasticity G = shear modulus rho = mass density A = cross sectional area Iy = moment of inertia about y-axis Iz = moment of inertia about z-axis J = polar moment of inertia yornt = local y-axis orientation in global reference system (column vector) JntOff = rigid joint offsets in global X, Y, Z at element ends; column 1 for node i, column 2 for node j w = uniform element load ( w(1) = longitudinal, w(2),w(3) = transverse in y and z, resp.) e0 = initial deformations ( e(1) = axial strain, e(2),e(3) = curvature about y and z, resp.) Release = axial, torsional and end flexural releases in column vector (0=cont,1=hinge) (default=[0;0;0;0;0;0]) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array Check3dFrmAxes check that y-axis is not co-linear with element chord ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_3dFrm kinematic matrices and deformations for a 2-node 3d frame element kg_3dFrm geometric stiffness matrix for 2-node 3d frame element different options This function is called by:","title":"LE3dFrm"},{"location":"Functions/latest/Element_Library/Frame_Elements/Linear/LETruss/","text":"Element_Library > Frame_Elements > Linear > LETruss LETruss Purpose 2d/3d linear truss element under linear or nonlinear geometry Synopsis ElemResp = LETruss ( action , el_no , xyz , ElemData , ElemState ) Description LETRUSS 2d/3d linear truss element under linear or nonlinear geometry ELEMRESP = LETRUSS (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of 2d/3d linear elastic truss element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear, PDelta or corotational) (default=linear) A = cross sectional area E = modulus of elasticity rho = mass density s0 = initial force (default = 0) e0 = initial deformation (default = 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMMASS is a data structure with element mass information in fields ml = lumped mass vector mc = consistent mass matrix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = element deformations q = element basic forces Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_Truss kinematic matrices and deformations for a 2-node truss element kg_Truss geometric stiffness matrix for 2d/3d 2-node truss element for different options This function is called by:","title":"LETruss"},{"location":"Functions/latest/Element_Library/Shell_Elements/","text":"Shell Elements ADOFTran_PlateShell transforms active dof array from local to global reference for plate and shell elements RectPatch2Layer integration points and weights for 1d-integration of rectangular patch Tint2d integration rule over triangular area TranDK transformation matrix for discrete Kirchhoff triangle constraints TransformMtensor2GL transformation of moment tensor from plane to global reference system TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element shape2dQT shape functions for 4-9 node quadrilateral element and 3-6 node triangle shape3d shape functions for 8 node solid (brick) element shapeBhat shape function Bhat shapeCST shape functions for 3 node constant strain triangle shapeDKT shape functions for 6-dof 3-node discrete Kirchhoff triangle shapeLST shape functions for 6 node linear strain triangle shapeMN shape functions for 4-node panel element with mid-edge nodes Other files in this directory ADOFTran_PlateShell.p TranDK.p shape2dQT.p shapeDKT.p shapeMN.p Sub directories Inelastic Linear","title":"Shell Elements"},{"location":"Functions/latest/Element_Library/Shell_Elements/ADOFTran_PlateShell/","text":"Element_Library > Shell_Elements > ADOFTran_PlateShell ADOFTran_PlateShell Purpose transforms active dof array from local to global reference for plate and shell elements Synopsis arsz = ADOFTran_PlateShell ( arsz , el_no , xyz ) Description ADOFTRAN_PLATESHELL transforms active dof array from local to global reference for plate and shell elements ARSZ = ADOFTRAN_PLATESHELL (ARSZ,EL_NO,XYZ) the function transforms the size array ARSZ with the active dofs of plate and shell elements from the local to the global reference system Cross-Reference Information This function calls: This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material InelDKT inelastic discrete Kirchhoff triangle for plate bending LE4nodeMindlinPlate linear elastic isoparametric 4-node quadrilateral Mindlin plate element LE4nodeMindlinPlatewITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC LE4to9nodeMindlinPlate linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material","title":"ADOFTran PlateShell"},{"location":"Functions/latest/Element_Library/Shell_Elements/RectPatch2Layer/","text":"Element_Library > Shell_Elements > RectPatch2Layer RectPatch2Layer Purpose integration points and weights for 1d-integration of rectangular patch Synopsis [ yfib , wfib ] = RectPatch2Layer ( patcoor , IntTyp , nlayer ) Description RECTPATCH2LAYER integration points and weights for 1d-integration of rectangular patch [YFIB,WFIB] = RECTPATCH2LAYER (PATCOOR,INTTYP,NLAYER) function determines locations in vector YFIB and integration weights in vector WFIB for 1d integration of a rectangular patch for the integration scheme in character array INTTYP and the number of integration points in NLAYER; the dimension of the rectangular patch is supplied by specifying the coordinates of opposite corners in array PATCOOR ([y1 z1 (+ve quadrant);y2 z2 (-ve quadrant)]) (NOTE: right handed local coordinate system x-y-z!) INTTYP can be either 'Midpoint', 'Gauss', Lobatto' or 'Trap' Cross-Reference Information This function calls: This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material InelDKT inelastic discrete Kirchhoff triangle for plate bending","title":"RectPatch2Layer"},{"location":"Functions/latest/Element_Library/Shell_Elements/Tint2d/","text":"Element_Library > Shell_Elements > Tint2d Tint2d Purpose integration rule over triangular area Synopsis [ xIP , wIP ] = Tint2d ( nIP ) Description TINT2D integration rule over triangular area [XIP,WIP] = TINT2D (NIP) locations and weights of integration over triangular area the function returns the locations in area coordinates and weights of integration over triangular are for NIP integration points; the locations are reported in (nIPx3) array XIP and the weights in row vector WIP Cross-Reference Information This function calls: This function is called by: InelCST constant strain triangle with inelastic material under plane stress/strain InelDKT inelastic discrete Kirchhoff triangle for plate bending InelLST linear strain triangle with inelastic material under plane stress/strain LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LECST constant strain triangle with linear elastic material under plane stress/strain LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material LELST linear strain triangle with linear elastic material under plane stress/strain","title":"Tint2d"},{"location":"Functions/latest/Element_Library/Shell_Elements/TranDK/","text":"Element_Library > Shell_Elements > TranDK TranDK Purpose transformation matrix for discrete Kirchhoff triangle constraints Synopsis T = TranDK ( xyz ) Description TRANDK transformation matrix for discrete Kirchhoff triangle constraints T = TRANDK (XYZ) the function sets up the 12x9 transformation matrix T from the 12 rotation dofs at the nodes and midsides of a 3-node triangle to the 9 nodal dofs; References: R.D. Cook et al, Concepts and Applications of FE Analysis, 3rd ed, pp. 328-332 J-L Batoz, et al, A Study of Three-Node Triangular Plate Bending Elements, IJNME (1980), pp. 1771-1812 Cross-Reference Information This function calls: This function is called by: InelDKT inelastic discrete Kirchhoff triangle for plate bending LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material","title":"TranDK"},{"location":"Functions/latest/Element_Library/Shell_Elements/TransformMtensor2GL/","text":"Element_Library > Shell_Elements > TransformMtensor2GL TransformMtensor2GL Purpose transformation of moment tensor from plane to global reference system Synopsis Mg = TransformMtensor2GL ( Tr0 , Mv ) Description TRANSFORMMTENSOR2GL transformation of moment tensor from plane to global reference system MG = TRANSFORMMTENSOR2GL (TR0,MV) function to transform the moment tensor from the plane to the global reference system; the plane moment tensor MV is supplied in vector form with component order xx,yy,xy and is returned in vector form MG with component order XX,YY,ZZ,XY,YZ,XZ in the global reference system X-Y-Z; TR0 is the rotation matrix from the global to the local reference Cross-Reference Information This function calls: This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material InelDKT inelastic discrete Kirchhoff triangle for plate bending LE4nodeMindlinPlate linear elastic isoparametric 4-node quadrilateral Mindlin plate element LE4nodeMindlinPlatewITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC LE4nodeMindlinShellwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC LE4to9nodeMindlinPlate linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element LE4to9nodeMindlinShell linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material","title":"TransformMtensor2GL"},{"location":"Functions/latest/Element_Library/Shell_Elements/TransformStr2GL/","text":"Element_Library > Shell_Elements > TransformStr2GL TransformStr2GL Purpose transformation of strain and stress tensors from local to global reference system Synopsis [ epsi , sig ] = TransformStr2GL ( ndm , Tr0 , epsi , sig ) Description TRANSFORMSTR2GL transformation of strain and stress tensors from local to global reference system [EPSI,SIG] = TRANSFORMSTR2GL (NDM,TR0,EPSI,SIG) function to transform the strain and stress tensors from the local to the global reference system; the strain EPSI and stress SIG are supplied in vector form with component order xx,yy,zz,xy,yz,xz and returned in vector form with component order XX,YY,ZZ,XY,YZ,XZ; NDM is the model dimension and TR0 is the rotation matrix from the global to the local reference; the function accounts for the case of a 2d plane stress or strain field in a 3d model Cross-Reference Information This function calls: This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material Inel4to9nodeQuad isoparametric 4-9 node quadrilateral element with inelastic material Inel4to9nodeReQuad isoparametric 4-9 node quad element with inelastic material and reinforcing layers InelCST constant strain triangle with inelastic material under plane stress/strain InelLST linear strain triangle with inelastic material under plane stress/strain LE4nodeMindlinShellwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC LE4nodeQuad isoparametric 4-node quadrilateral element with linear elastic material LE4nodeQuadwIM isoparametric 4-node quad element with linear elastic material and incompatible bending modes LE4to9nodeMindlinShell linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element LE4to9nodeQuad isoparametric 4-9 node quadrilateral element with linear elastic material LE9nodeQuad isoparametric 9 node quadrilateral element with linear elastic material LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LECST constant strain triangle with linear elastic material under plane stress/strain LELST linear strain triangle with linear elastic material under plane stress/strain","title":"TransformStr2GL"},{"location":"Functions/latest/Element_Library/Shell_Elements/shape2d/","text":"Element_Library > Shell_Elements > shape2d shape2d Purpose shape functions for 4-9 node quadrilateral element Synopsis [ N , dNdx , J ] = shape2d ( nat , xyz , nodix ) Description SHAPE2D shape functions for 4-9 node quadrilateral element [N,dNdx,J] = SHAPE2D (NAT,XYZ,NODIX) shape functions for 4-9 node quadrilateral element Input Parameters ---------------- nat = [ xi eta ] natural coordinates of point of interest xyz = nodal coordinates for element (row i for node i) nodix = node index, e.g. [1:4 7 8] if nodes 1 through 4 (always), 7 and 8 are present ---------------- Return Variables ---------------- N = shape function values for point of interest dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Reference: T.J.R. Hughes, The Finite Element Method, pp. 135 Cross-Reference Information This function calls: This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material Inel4to9nodeQuad isoparametric 4-9 node quadrilateral element with inelastic material Inel4to9nodeReQuad isoparametric 4-9 node quad element with inelastic material and reinforcing layers LE4nodeMindlinPlate linear elastic isoparametric 4-node quadrilateral Mindlin plate element LE4nodeMindlinPlatewITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC LE4nodeMindlinShellwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC LE4nodeQuad isoparametric 4-node quadrilateral element with linear elastic material LE4nodeQuadwIM isoparametric 4-node quad element with linear elastic material and incompatible bending modes LE4to9nodeMindlinPlate linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element LE4to9nodeMindlinShell linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element LE4to9nodeQuad isoparametric 4-9 node quadrilateral element with linear elastic material LE9nodeQuad isoparametric 9 node quadrilateral element with linear elastic material shapeBhat shape function Bhat","title":"Shape2d"},{"location":"Functions/latest/Element_Library/Shell_Elements/shape2dQT/","text":"Element_Library > Shell_Elements > shape2dQT shape2dQT Purpose shape functions for 4-9 node quadrilateral element and 3-6 node triangle Synopsis [ N , dNdx , J ] = shape2dQT ( option , nat , xyz , nodix ) Description SHAPE2DQT shape functions for 4-9 node quadrilateral element and 3-6 node triangle [N,dNdx,J] = SHAPE2DQT (NAT,XYZ,NODIX) shape functions for 4-9 node quadrilateral element and 3-6 node triangle Input Parameters ---------------- option = 'T' for triangle nat = [ xi eta ] natural coordinates of element xyz = nodal coordinates for element (row i for node i) nodix = node index, e.g. [1:4 7 8] if nodes 1 through 4 (always), 7 and 8 are present ---------------- Return Variables ---------------- N = shape functions in natural coordinates dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Cross-Reference Information This function calls: This function is called by:","title":"shape2dQT"},{"location":"Functions/latest/Element_Library/Shell_Elements/shape3d/","text":"Element_Library > Shell_Elements > shape3d shape3d Purpose shape functions for 8 node solid (brick) element Synopsis [ N , dNdx , J ] = shape3d ( nat , xyz ) Description SHAPE3D shape functions for 8 node solid (brick) element [N,dNdx,J] = SHAPE3D (NAT,XYZ) shape functions for 8 node solid (brick) element Input Parameters ---------------- nat = [ xi eta zeta ] natural coordinates in element xyz = nodal coordinates for element (row i for node i) ---------------- Return Variables ---------------- N = shape functions in natural coordinates dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates ------------------------------------------------------ Cross-Reference Information This function calls: This function is called by: Inel8nodeBrick isoparametric 8 node brick element with inelastic material LE8nodeBrick isoparametric 8 node brick element with linear elastic material","title":"Shape3d"},{"location":"Functions/latest/Element_Library/Shell_Elements/shapeBhat/","text":"Element_Library > Shell_Elements > shapeBhat shapeBhat Purpose shape function Bhat Synopsis [ Bhat , G , J ] = shapeBhat ( npd , nat , wIP , xyz ) Description SHAPEBHAT shape function Bhat Cross-Reference Information This function calls: shape2d shape functions for 4-9 node quadrilateral element This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC LE4nodeMindlinPlatewITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC LE4nodeMindlinShellwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC","title":"shapeBhat"},{"location":"Functions/latest/Element_Library/Shell_Elements/shapeCST/","text":"Element_Library > Shell_Elements > shapeCST shapeCST Purpose shape functions for 3 node constant strain triangle Synopsis [ N , dNdx , J ] = shapeCST ( xi , xyz ) Description SHAPECST shape functions for 3 node constant strain triangle [N,dNdx,J] = SHAPECST (XI,XYZ) shape functions for 3 node constant strain triangle Input Parameters ---------------- xi = natural (area) coordinates of element xyz = nodal coordinates for element (row i for node i) ---------------- Return Variables ---------------- N = shape functions in natural coordinates dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Cross-Reference Information This function calls: This function is called by: InelCST constant strain triangle with inelastic material under plane stress/strain InelDKT inelastic discrete Kirchhoff triangle for plate bending LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LECST constant strain triangle with linear elastic material under plane stress/strain LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material LELST linear strain triangle with linear elastic material under plane stress/strain","title":"shapeCST"},{"location":"Functions/latest/Element_Library/Shell_Elements/shapeDKT/","text":"Element_Library > Shell_Elements > shapeDKT shapeDKT Purpose shape functions for 6-dof 3-node discrete Kirchhoff triangle Synopsis [ N , dNdx , J ] = shapeDKT ( xi , xyz ) Description SHAPEDKT shape functions for 6-dof 3-node discrete Kirchhoff triangle [N,dNdx,J] = SHAPEDKT (XI,XYZ) shape functions for 6-dof 3-node discrete Kirchhoff triangle Input Parameters ---------------- nat = [ xi(1:3 ] natural coordinates of element xyz = nodal coordinates for element (row i for node i) ---------------- Return Variables ---------------- N = shape functions in natural coordinates dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Cross-Reference Information This function calls: This function is called by: InelDKT inelastic discrete Kirchhoff triangle for plate bending LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material","title":"shapeDKT"},{"location":"Functions/latest/Element_Library/Shell_Elements/shapeLST/","text":"Element_Library > Shell_Elements > shapeLST shapeLST Purpose shape functions for 6 node linear strain triangle Synopsis [ N , dNdx , J ] = shapeLST ( xi , xyz ) Description SHAPELST shape functions for 6 node linear strain triangle [N,dNdx,J] = SHAPELST(XI,XYZ) shape functions for 6 node linear strain triangle Input Parameters ---------------- xi = natural (area) coordinates of element xyz = nodal coordinates for element (row i for node i) ---------------- Return Variables ---------------- N = shape functions in natural coordinates dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Cross-Reference Information This function calls: This function is called by: InelLST linear strain triangle with inelastic material under plane stress/strain LELST linear strain triangle with linear elastic material under plane stress/strain","title":"shapeLST"},{"location":"Functions/latest/Element_Library/Shell_Elements/shapeMN/","text":"Element_Library > Shell_Elements > shapeMN shapeMN Purpose shape functions for 4-node panel element with mid-edge nodes Synopsis [ N , dNdx , J ] = shapeMN ( nat , xyz ) Description SHAPEMN shape functions for 4-node panel element with mid-edge nodes [N,dNdx,J] = SHAPEMN (NAT,XYZ,NODIX) shape functions for 4-node panel element with mid-edge nodes Input Parameters ---------------- nat = [ xi eta ] natural coordinates of point of interest xyz = node coordinates for element (row i for node i) ---------------- Return Variables ---------------- N = shape function values for point of interest dNdx = dNdx(i,j) = derivative of shape function j with respect to geometric coordinate x_i J = Jacobian of transformation from geometric to natural coordinates Reference: T.J.R. Hughes, The Finite Element Method, pp. 135 Cross-Reference Information This function calls: This function is called by:","title":"shapeMN"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/","text":"Inelastic Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material Inel4to9nodeQuad isoparametric 4-9 node quadrilateral element with inelastic material Inel4to9nodeReQuad isoparametric 4-9 node quad element with inelastic material and reinforcing layers Inel8nodeBrick isoparametric 8 node brick element with inelastic material InelCST constant strain triangle with inelastic material under plane stress/strain InelDKT inelastic discrete Kirchhoff triangle for plate bending InelLST linear strain triangle with inelastic material under plane stress/strain Other files in this directory Inel4nodeMindlinReShellwITC.p Inel4nodeMindlinShellwITC.p Inel4to9nodeMindlinReShell.p Inel4to9nodeMindlinShell.p InelDKT.p","title":"Inelastic"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/Inel4nodeMindlinReShellwITC/","text":"Element_Library > Shell_Elements > Inelastic > Inel4nodeMindlinReShellwITC Inel4nodeMindlinReShellwITC Purpose isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Synopsis ElemResp = Inel4nodeMindlinReShellwITC ( action , el_no , xyz , ElemData , ElemState ) Description INEL4NODEMINDLINRESHELLwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC ELEMRESP = INEL4NODEMINDLINRESHELLwITC (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of inelastic isoparametric 4 node quad Mindlin layer shell element with reinforcing layers with ITC; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) LdIdw = load ID for transverse element load b = element body forces (default b=[0;0;0] ) LdIdx = load ID for body forces b(1) LdIdy = load ID for body forces b(2) LdIdz = load ID for body forces b(3) nIP = number of integration points for flexure (default nIP =2) nl = number of layers for across depth integration (default nl=5) nrl = number of reinforcing layers (default nrl=0) rhol = reinforcing ratio of each reinforcing layer langle = angle of each reinforcing layer relative to x-axis MatName{1} = function name for material model of element MatName{2} = function name for material model of reinforcement MatData{1} = properties for element material model MatData{2} = properties for reinforcing material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of membrane integration point i Mat{i}.eps = strain tensor at membrane integration point i Mat{i}.sig = stress tensor at membrane integration point i Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i Mat{i}.Sxyz = coordinates of shear integration point i Mat{i}.V = shear forces at shear integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = membrane forces MomNd = nodal moments ShrNd = nodal shear forces Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_El2MatState extract material state from element state ADOFTran_PlateShell transforms active dof array from local to global reference for plate and shell elements RectPatch2Layer integration points and weights for 1d-integration of rectangular patch TransformMtensor2GL transformation of moment tensor from plane to global reference system TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element shapeBhat shape function Bhat DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"Inel4nodeMindlinReShellwITC"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/Inel4nodeMindlinShellwITC/","text":"Element_Library > Shell_Elements > Inelastic > Inel4nodeMindlinShellwITC Inel4nodeMindlinShellwITC Purpose isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Synopsis ElemResp = Inel4nodeMindlinShellwITC ( action , el_no , xyz , ElemData , ElemState ) Description INEL4NODEMINDLINSHELLwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC ELEMRESP = INEL4NODEMINDLINSHELLwITC (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of inelastic isoparametric 4 node quad Mindlin layer shell element with ITC; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) LdIdw = load ID for transverse element load b = element body forces (default b=[0;0;0] ) LdIdx = load ID for body forces b(1) LdIdy = load ID for body forces b(2) LdIdz = load ID for body forces b(3) nIP = number of integration points for flexure (default nIP=2) nl = number of layers for across depth integration (default nl=5) MatName = function name for material model MatData = properties for element material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of membrane integration point i Mat{i}.eps = strain tensor at membrane integration point i Mat{i}.sig = stress tensor at membrane integration point i Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i Mat{i}.Sxyz = coordinates of shear integration point i Mat{i}.V = shear forces at shear integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = membrane forces MomNd = nodal moments ShrNd = nodal shear forces Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_El2MatState extract material state from element state ADOFTran_PlateShell transforms active dof array from local to global reference for plate and shell elements RectPatch2Layer integration points and weights for 1d-integration of rectangular patch TransformMtensor2GL transformation of moment tensor from plane to global reference system TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element shapeBhat shape function Bhat DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"Inel4nodeMindlinShellwITC"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/Inel4to9nodeMindlinReShell/","text":"Element_Library > Shell_Elements > Inelastic > Inel4to9nodeMindlinReShell Inel4to9nodeMindlinReShell Purpose inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Synopsis ElemResp = Inel4to9nodeMindlinReShell ( action , el_no , xyz , ElemData , ElemState ) Description INEL4to9NODEMINDLINRESHELL inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers ELEMRESP = INEL4to9NODEMINDLINRESHELL (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of inelastic isoparametric 4-9 node quad Mindlin shell element with reinforcing layers; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) LdIdw = load ID for transverse element load b = element body forces (default b=[0;0;0] ) LdIdx = load ID for body forces b(1) LdIdy = load ID for body forces b(2) LdIdz = load ID for body forces b(3) nIP = number of integration points for flexure (default nIP =2) nl = number of layers for across depth integration (default nl=5) nrl = number of reinforcing layers (default nrl=0) rhol = reinforcing ratio of each reinforcing layer langle = angle of each reinforcing layer relative to x-axis MatName{1} = function name for material model of element MatName{2} = function name for material model of reinforcement MatData{1} = properties for element material model MatData{2} = properties for reinforcing material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of membrane integration point i Mat{i}.eps = strain tensor at membrane integration point i Mat{i}.sig = stress tensor at membrane integration point i Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i Mat{i}.Sxyz = coordinates of shear integration point i Mat{i}.V = shear forces at shear integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = membrane forces MomNd = nodal moments ShrNd = nodal shear forces Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_El2MatState extract material state from element state ADOFTran_PlateShell transforms active dof array from local to global reference for plate and shell elements RectPatch2Layer integration points and weights for 1d-integration of rectangular patch TransformMtensor2GL transformation of moment tensor from plane to global reference system TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"Inel4to9nodeMindlinReShell"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/Inel4to9nodeMindlinShell/","text":"Element_Library > Shell_Elements > Inelastic > Inel4to9nodeMindlinShell Inel4to9nodeMindlinShell Purpose isoparametric 4-9 node quad layer shell element with inelastic material Synopsis ElemResp = Inel4to9nodeMindlinShell ( action , el_no , xyz , ElemData , ElemState ) Description INEL4to9NODEMINDLINSHELL isoparametric 4-9 node quad layer shell element with inelastic material ELEMRESP = INEL4to9NODEMINDLINSHELL (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of isoparametric 4-9 node quadrilateral layer shell element with inelastic material; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) LdIdw = load ID for transverse element load b = element body forces (default b=[0;0;0] ) LdIdx = load ID for body forces b(1) LdIdy = load ID for body forces b(2) LdIdz = load ID for body forces b(3) nIP = number of integration points for flexure (default nIP =2) nl = number of layers for across depth integration (default nl=5) MatName = function name for material model MatData = properties for element material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of membrane integration point i Mat{i}.eps = strain tensor at membrane integration point i Mat{i}.sig = stress tensor at membrane integration point i Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i Mat{i}.Sxyz = coordinates of shear integration point i Mat{i}.V = shear forces at shear integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = membrane forces MomNd = nodal moments ShrNd = nodal shear forces Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_El2MatState extract material state from element state ADOFTran_PlateShell transforms active dof array from local to global reference for plate and shell elements RectPatch2Layer integration points and weights for 1d-integration of rectangular patch TransformMtensor2GL transformation of moment tensor from plane to global reference system TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"Inel4to9nodeMindlinShell"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/Inel4to9nodeQuad/","text":"Element_Library > Shell_Elements > Inelastic > Inel4to9nodeQuad Inel4to9nodeQuad Purpose isoparametric 4-9 node quadrilateral element with inelastic material Synopsis ElemResp = Inel4to9nodeQuad ( action , el_no , xyz , ElemData , ElemState ) Description INEL4to9NODEQUAD isoparametric 4-9 node quadrilateral element with inelastic material ELEMRESP = INEL4to9NODEQUAD (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of isoparametric 4-9 node quadrilateral element with inelastic material; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) LdIdx = load ID for body forces b(1) LdIdy = load ID for body forces b(2) nIP = number of integration points (default nIP=2) MatName = function name for material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_El2MatState extract material state from element state TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadMemb kinematic matrices and local displacements for a quadrilateral membrane element kg_QuadMemb geometric stiffness matrix for quadrilateral membrane element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"Inel4to9nodeQuad"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/Inel4to9nodeReQuad/","text":"Element_Library > Shell_Elements > Inelastic > Inel4to9nodeReQuad Inel4to9nodeReQuad Purpose isoparametric 4-9 node quad element with inelastic material and reinforcing layers Synopsis ElemResp = Inel4to9nodeReQuad ( action , el_no , xyz , ElemData , ElemState ) Description INEL4to9NODEREQUAD isoparametric 4-9 node quad element with inelastic material and reinforcing layers ELEMRESP = INEL4to9NODEREQUAD (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of isoparametric 4-9 node quadrilateral element with inelastic material and reinforcing layers; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) LdIdx = load ID for body forces b(1) LdIdy = load ID for body forces b(2) nIP = number of integration points (default nIP=2) nrl = number of reinforcing layers (default nrl=0) rhol = reinforcing ratio of each reinforcing layer langle = angle of each reinforcing layer relative to x-axis MatName{1} = function name for material model of element MatName{2} = function name for material model of reinforcement MatData{1} = properties for element material model MatData{2} = properties for reinforcing material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_El2MatState extract material state from element state TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadMemb kinematic matrices and local displacements for a quadrilateral membrane element kg_QuadMemb geometric stiffness matrix for quadrilateral membrane element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"Inel4to9nodeReQuad"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/Inel8nodeBrick/","text":"Element_Library > Shell_Elements > Inelastic > Inel8nodeBrick Inel8nodeBrick Purpose isoparametric 8 node brick element with inelastic material Synopsis ElemResp = Inel8nodeBrick ( action , el_no , xyz , ElemData , ElemState ) Description INEL8NODEBRICK isoparametric 8 node brick element with inelastic material ELEMRESP = INEL8NODEBRICK (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of isoparametric eight node brick element with inelastic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields b = element body forces (default b=[0;0;0] ) LdIdx = load ID for body forces b(1) LdIdy = load ID for body forces b(2) LdIdz = load ID for body forces b(3) MatName = function name for material model MatData = properties for element material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Mat{1}.xyz = coordinates of integration point Mat{1}.eps = strain tensor at integration point Mat{1}.sig = stress tensor at integration point Cross-Reference Information This function calls: ElementLoading determines current distributed element load value Extract_El2MatState extract material state from element state shape3d shape functions for 8 node solid (brick) element This function is called by:","title":"Inel8nodeBrick"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/InelCST/","text":"Element_Library > Shell_Elements > Inelastic > InelCST InelCST Purpose constant strain triangle with inelastic material under plane stress/strain Synopsis ElemResp = InelCST ( action , el_no , xyz , ElemData , ElemState ) Description INELCST constant strain triangle with inelastic material under plane stress/strain ELEMRESP = INELCST (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of constant strain triangle with inelastic material under plane stress/strain; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes (constant stress) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) LdIdx = load ID for body forces b(1) LdIdy = load ID for body forces b(2) MatName = function name for material model MatData = properties for element material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{1}.xyz = coordinates of integration point Mat{1}.eps = strain tensor at integration point Mat{1}.sig = stress tensor at integration point ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_El2MatState extract material state from element state Tint2d integration rule over triangular area TransformStr2GL transformation of strain and stress tensors from local to global reference system shapeCST shape functions for 3 node constant strain triangle DefGeom_Tri determines local coordinates and corotational triad of triangular element GeomTran_TriMemb kinematic matrices and local displacements for a triangular membrane element kg_TriMemb geometric stiffness matrix for triangular membrane element for different options This function is called by:","title":"InelCST"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/InelDKT/","text":"Element_Library > Shell_Elements > Inelastic > InelDKT InelDKT Purpose inelastic discrete Kirchhoff triangle for plate bending Synopsis ElemResp = InelDKT ( action , el_no , xyz , ElemData , ElemState ) Description INELDKT inelastic discrete Kirchhoff triangle for plate bending ELEMRESP = INELDKT (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of inelastic discrete Kirchhoff triangle for plate bending; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) LdIdw = load ID for transverse element load nIP = number of integration points (default nIP=3) nl = number of layers for across depth integration (default nl=5) MatName = function name for material model MatData = properties for element material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) MomNd = nodal moments Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_El2MatState extract material state from element state ADOFTran_PlateShell transforms active dof array from local to global reference for plate and shell elements RectPatch2Layer integration points and weights for 1d-integration of rectangular patch Tint2d integration rule over triangular area TranDK transformation matrix for discrete Kirchhoff triangle constraints TransformMtensor2GL transformation of moment tensor from plane to global reference system shapeCST shape functions for 3 node constant strain triangle shapeDKT shape functions for 6-dof 3-node discrete Kirchhoff triangle DefGeom_Tri determines local coordinates and corotational triad of triangular element GeomTran_TriPlate kinematic matrices and local displacements for a triangular plate element kg_TriPlate geometric stiffness matrix for triangular plate element for different options This function is called by:","title":"InelDKT"},{"location":"Functions/latest/Element_Library/Shell_Elements/Inelastic/InelLST/","text":"Element_Library > Shell_Elements > Inelastic > InelLST InelLST Purpose linear strain triangle with inelastic material under plane stress/strain Synopsis ElemResp = InelLST ( action , el_no , xyz , ElemData , ElemState ) Description INELLST linear strain triangle with inelastic material under plane stress/strain ELEMRESP = INELLST (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of linear strain triangle with inelastic material under plane stress/strain; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': stress recovery to element nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) LdIdx = load ID for body forces b(1) LdIdy = load ID for body forces b(2) nIP = number of integration points (default nIP=3) MatName = function name for material model MatData = properties for element material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: ElementLoading determines current distributed element load value ExtrReshu extracts displacements and increments from State and reshapes into array Extract_El2MatState extract material state from element state Tint2d integration rule over triangular area TransformStr2GL transformation of strain and stress tensors from local to global reference system shapeLST shape functions for 6 node linear strain triangle DefGeom_Tri determines local coordinates and corotational triad of triangular element GeomTran_TriMemb kinematic matrices and local displacements for a triangular membrane element kg_TriMemb geometric stiffness matrix for triangular membrane element for different options This function is called by:","title":"InelLST"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/","text":"Linear LE4nodeMindlinPlate linear elastic isoparametric 4-node quadrilateral Mindlin plate element LE4nodeMindlinPlatewITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC LE4nodeMindlinShellwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC LE4nodeQuad isoparametric 4-node quadrilateral element with linear elastic material LE4nodeQuadwIM isoparametric 4-node quad element with linear elastic material and incompatible bending modes LE4to9nodeMindlinPlate linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element LE4to9nodeMindlinShell linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element LE4to9nodeQuad isoparametric 4-9 node quadrilateral element with linear elastic material LE8nodeBrick isoparametric 8 node brick element with linear elastic material LE9nodeQuad isoparametric 9 node quadrilateral element with linear elastic material LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LECST constant strain triangle with linear elastic material under plane stress/strain LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material LELST linear strain triangle with linear elastic material under plane stress/strain Other files in this directory LE4nodeMindlinPlate.p LE4nodeMindlinPlatewITC.p LE4nodeMindlinShellwITC.p LE4to9nodeMindlinPlate.p LE4to9nodeMindlinShell.p LECMSDKTShell.p LECMSDKTShell_wDDOF.p LEDKT.p","title":"Linear"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LE4nodeMindlinPlate/","text":"Element_Library > Shell_Elements > Linear > LE4nodeMindlinPlate LE4nodeMindlinPlate Purpose linear elastic isoparametric 4-node quadrilateral Mindlin plate element Synopsis ElemResp = LE4nodeMindlinPlate ( action , el_no , xyz , ElemData , ElemState ) Description LE4NODEMINDLINPLATE linear elastic isoparametric 4-node quadrilateral Mindlin plate element ELEMRESP = LE4NODEMINDLINPLATE (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of linear elastic isoparametric 4-node quadrilateral Mindlin plate element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) nIP = number of integration points for flexure (default nIP =2) nsIP = number of integration points for shear (default nsIP=1) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i Mat{i}.Sxyz = coordinates of shear integration point i Mat{i}.V = shear forces at shear integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) MomNd = nodal moments ShrNd = nodal shear forces Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array ADOFTran_PlateShell transforms active dof array from local to global reference for plate and shell elements TransformMtensor2GL transformation of moment tensor from plane to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"LE4nodeMindlinPlate"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LE4nodeMindlinPlatewITC/","text":"Element_Library > Shell_Elements > Linear > LE4nodeMindlinPlatewITC LE4nodeMindlinPlatewITC Purpose linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC Synopsis ElemResp = LE4nodeMindlinPlatewITC ( action , el_no , xyz , ElemData , ElemState ) Description LE4NODEMINDLINPLATEwITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC ELEMRESP = LE4NODEMINDLINPLATEwITC (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) nIP = number of integration points for flexure (default nIP=2) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i Mat{i}.Sxyz = coordinates of shear integration point i Mat{i}.V = shear forces at shear integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) MomNd = nodal moments ShrNd = nodal shear forces Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array ADOFTran_PlateShell transforms active dof array from local to global reference for plate and shell elements TransformMtensor2GL transformation of moment tensor from plane to global reference system shape2d shape functions for 4-9 node quadrilateral element shapeBhat shape function Bhat DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"LE4nodeMindlinPlatewITC"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LE4nodeMindlinShellwITC/","text":"Element_Library > Shell_Elements > Linear > LE4nodeMindlinShellwITC LE4nodeMindlinShellwITC Purpose linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC Synopsis ElemResp = LE4nodeMindlinShellwITC ( action , el_no , xyz , ElemData , ElemState ) Description LE4NODEMINDLINSHELLwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC ELEMRESP = LE4NODEMINDLINSHELLwITC (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) b = element body forces (default b=[0;0;0] ) nIP = number of integration points ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of membrane integration point i Mat{i}.eps = strain tensor at membrane integration point i Mat{i}.sig = stress tensor at membrane integration point i Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i Mat{i}.Sxyz = coordinates of shear integration point i Mat{i}.V = shear forces at shear integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = membrane forces MomNd = nodal moments ShrNd = nodal shear forces Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array TransformMtensor2GL transformation of moment tensor from plane to global reference system TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element shapeBhat shape function Bhat DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"LE4nodeMindlinShellwITC"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LE4nodeQuad/","text":"Element_Library > Shell_Elements > Linear > LE4nodeQuad LE4nodeQuad Purpose isoparametric 4-node quadrilateral element with linear elastic material Synopsis ElemResp = LE4nodeQuad ( action , el_no , xyz , ElemData , ElemState ) Description LE4NODEQUAD isoparametric 4-node quadrilateral element with linear elastic material ELEMRESP = LE4NODEQUAD (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of isoparametric 4-node quadrilateral element with linear elastic material under plane stress/strain; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) nIP = number of integration points (default nIP = 2) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadMemb kinematic matrices and local displacements for a quadrilateral membrane element kg_QuadMemb geometric stiffness matrix for quadrilateral membrane element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"LE4nodeQuad"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LE4nodeQuadwIM/","text":"Element_Library > Shell_Elements > Linear > LE4nodeQuadwIM LE4nodeQuadwIM Purpose isoparametric 4-node quad element with linear elastic material and incompatible bending modes Synopsis ElemResp = LE4nodeQuadwIM ( action , el_no , xyz , ElemData , ElemState ) Description LE4NODEQUADwIM isoparametric 4-node quad element with linear elastic material and incompatible bending modes ELEMRESP = LE4NODEQUADwIM (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of isoparametric 4-node quad element with linear elastic material and incompatible bending modes under plane stress/strain; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) nIP = number of integration points (default nIP =2) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadMemb kinematic matrices and local displacements for a quadrilateral membrane element kg_QuadMemb geometric stiffness matrix for quadrilateral membrane element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"LE4nodeQuadwIM"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LE4to9nodeMindlinPlate/","text":"Element_Library > Shell_Elements > Linear > LE4to9nodeMindlinPlate LE4to9nodeMindlinPlate Purpose linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element Synopsis ElemResp = LE4to9nodeMindlinPlate ( action , el_no , xyz , ElemData , ElemState ) Description LE4NODEMINDLINPLATE linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element ELEMRESP = LE4NODEMINDLINPLATE (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) nIP = number of integration points for flexure (default nIP =3) nsIP = number of integration points for shear (default nsIP=2) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i Mat{i}.Sxyz = coordinates of shear integration point i Mat{i}.V = shear forces at shear integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) MomNd = nodal moments ShrNd = nodal shear forces Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array ADOFTran_PlateShell transforms active dof array from local to global reference for plate and shell elements TransformMtensor2GL transformation of moment tensor from plane to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"LE4to9nodeMindlinPlate"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LE4to9nodeMindlinShell/","text":"Element_Library > Shell_Elements > Linear > LE4to9nodeMindlinShell LE4to9nodeMindlinShell Purpose linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element Synopsis ElemResp = LE4to9nodeMindlinShell ( action , el_no , xyz , ElemData , ElemState ) Description LE4TO9NODEMINDLINSHELL linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element ELEMRESP = LE4TO9NODEMINDLINSHELL (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) b = element body forces (default b=[0;0;0] ) nIP = number of integration points for flexure (default nIP =3) nsIP = number of integration points for shear (default nsIP=2) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of membrane integration point i Mat{i}.eps = strain tensor at membrane integration point i Mat{i}.sig = stress tensor at membrane integration point i Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i Mat{i}.Sxyz = coordinates of shear integration point i Mat{i}.V = shear forces at shear integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = membrane forces MomNd = nodal moments ShrNd = nodal shear forces Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array TransformMtensor2GL transformation of moment tensor from plane to global reference system TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"LE4to9nodeMindlinShell"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LE4to9nodeQuad/","text":"Element_Library > Shell_Elements > Linear > LE4to9nodeQuad LE4to9nodeQuad Purpose isoparametric 4-9 node quadrilateral element with linear elastic material Synopsis ElemResp = LE4to9nodeQuad ( action , el_no , xyz , ElemData , ElemState ) Description LE4to9NODEQUAD isoparametric 4-9 node quadrilateral element with linear elastic material ELEMRESP = LE4to9NODEQUAD (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of isoparametric 4-9 node quadrilateral element with linear elastic material under plane stress/strain; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) nIP = number of integration points (default nIP =2) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadMemb kinematic matrices and local displacements for a quadrilateral membrane element kg_QuadMemb geometric stiffness matrix for quadrilateral membrane element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"LE4to9nodeQuad"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LE8nodeBrick/","text":"Element_Library > Shell_Elements > Linear > LE8nodeBrick LE8nodeBrick Purpose isoparametric 8 node brick element with linear elastic material Synopsis ElemResp = LE8nodeBrick ( action , el_no , xyz , ElemData , ElemState ) Description LE8NODEBRICK isoparametric 8 node brick element with linear elastic material ELEMRESP = LE8NODEBRICK (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of isoparametric eight node brick element with linear elastic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields b = element body forces (default b=[0;0;0] ) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Mat{1}.xyz = coordinates of integration point Mat{1}.eps = strain tensor at integration point Mat{1}.sig = stress tensor at integration point Cross-Reference Information This function calls: shape3d shape functions for 8 node solid (brick) element This function is called by:","title":"LE8nodeBrick"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LE9nodeQuad/","text":"Element_Library > Shell_Elements > Linear > LE9nodeQuad LE9nodeQuad Purpose isoparametric 9 node quadrilateral element with linear elastic material Synopsis ElemResp = LE9nodeQuad ( action , el_no , xyz , ElemData , ElemState ) Description LE9NODEQUAD isoparametric 9 node quadrilateral element with linear elastic material ELEMRESP = LE9NODEQUAD (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of isoparametric 9-node quadrilateral element with linear elastic material under plane stress/strain; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) nIP = number of integration points (default nIP =3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array TransformStr2GL transformation of strain and stress tensors from local to global reference system shape2d shape functions for 4-9 node quadrilateral element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element GeomTran_QuadMemb kinematic matrices and local displacements for a quadrilateral membrane element kg_QuadMemb geometric stiffness matrix for quadrilateral membrane element for different options Gauss2d Gauss integration rule in two dimensions This function is called by:","title":"LE9nodeQuad"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LECMSDKTShell/","text":"Element_Library > Shell_Elements > Linear > LECMSDKTShell LECMSDKTShell Purpose linear elastic 3-node triangle with constant mebrane strain + DK bending Synopsis ElemResp = LECMSDKTShell ( action , el_no , xyz , ElemData , ElemState ) Description LECMSDKTSHELL linear elastic 3-node triangle with constant mebrane strain + DK bending ELEMRESP = LECMSDKTSHELL (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of linear elastic 3-node triangle with constant mebrane strain + DK bending; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) w = transverse element load (default w=0) nIP = number of integration points (default nIP=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of membrane integration point i Mat{i}.eps = strain tensor at membrane integration point i Mat{i}.sig = stress tensor at membrane integration point i Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = membrane forces MomNd = nodal moments Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array Tint2d integration rule over triangular area TranDK transformation matrix for discrete Kirchhoff triangle constraints TransformMtensor2GL transformation of moment tensor from plane to global reference system TransformStr2GL transformation of strain and stress tensors from local to global reference system shapeCST shape functions for 3 node constant strain triangle shapeDKT shape functions for 6-dof 3-node discrete Kirchhoff triangle DefGeom_Tri determines local coordinates and corotational triad of triangular element GeomTran_TriPlate kinematic matrices and local displacements for a triangular plate element kg_TriPlate geometric stiffness matrix for triangular plate element for different options This function is called by:","title":"LECMSDKTShell"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LECMSDKTShell_wDDOF/","text":"Element_Library > Shell_Elements > Linear > LECMSDKTShell_wDDOF LECMSDKTShell_wDDOF Purpose linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF Synopsis ElemResp = LECMSDKTShell_wDDOF ( action , el_no , xyz , ElemData , ElemState ) Description LECMSDKTSHELL_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF ELEMRESP = LECMSDKTSHELL_wDDOF (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) w = transverse element load (default w=0) nIP = number of integration points (default nIP=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of membrane integration point i Mat{i}.eps = strain tensor at membrane integration point i Mat{i}.sig = stress tensor at membrane integration point i Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = membrane forces MomNd = nodal moments Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array Tint2d integration rule over triangular area TranDK transformation matrix for discrete Kirchhoff triangle constraints TransformMtensor2GL transformation of moment tensor from plane to global reference system TransformStr2GL transformation of strain and stress tensors from local to global reference system shapeCST shape functions for 3 node constant strain triangle shapeDKT shape functions for 6-dof 3-node discrete Kirchhoff triangle DefGeom_Tri determines local coordinates and corotational triad of triangular element GeomTran_TriPlate kinematic matrices and local displacements for a triangular plate element kg_TriPlate geometric stiffness matrix for triangular plate element for different options This function is called by:","title":"LECMSDKTShell wDDOF"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LECST/","text":"Element_Library > Shell_Elements > Linear > LECST LECST Purpose constant strain triangle with linear elastic material under plane stress/strain Synopsis ElemResp = LECST ( action , el_no , xyz , ElemData , ElemState ) Description LECST constant strain triangle with linear elastic material under plane stress/strain ELEMRESP = LECST (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of constant strain triangle with linear elastic material under plane stress/strain; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{1}.xyz = coordinates of integration point Mat{1}.eps = strain tensor at integration point Mat{1}.sig = stress tensor at integration point ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array Tint2d integration rule over triangular area TransformStr2GL transformation of strain and stress tensors from local to global reference system shapeCST shape functions for 3 node constant strain triangle DefGeom_Tri determines local coordinates and corotational triad of triangular element GeomTran_TriMemb kinematic matrices and local displacements for a triangular membrane element kg_TriMemb geometric stiffness matrix for triangular membrane element for different options This function is called by:","title":"LECST"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LEDKT/","text":"Element_Library > Shell_Elements > Linear > LEDKT LEDKT Purpose discrete Kirchhoff 3-node triangle for plate bending with linear elastic material Synopsis ElemResp = LEDKT ( action , el_no , xyz , ElemData , ElemState ) Description LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material ELEMRESP = LEDKT (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of discrete Kirchhoff 3-node triangle for plate bending with linear elastic material; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) w = transverse element load (default w=0) nIP = number of integration points (default nIP=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.Fxyz = coordinates of flexural integration point i Mat{i}.M = bending moment tensor at flexural integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) MomNd = nodal moments Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array ADOFTran_PlateShell transforms active dof array from local to global reference for plate and shell elements Tint2d integration rule over triangular area TranDK transformation matrix for discrete Kirchhoff triangle constraints TransformMtensor2GL transformation of moment tensor from plane to global reference system shapeCST shape functions for 3 node constant strain triangle shapeDKT shape functions for 6-dof 3-node discrete Kirchhoff triangle DefGeom_Tri determines local coordinates and corotational triad of triangular element GeomTran_TriPlate kinematic matrices and local displacements for a triangular plate element kg_TriPlate geometric stiffness matrix for triangular plate element for different options This function is called by:","title":"LEDKT"},{"location":"Functions/latest/Element_Library/Shell_Elements/Linear/LELST/","text":"Element_Library > Shell_Elements > Linear > LELST LELST Purpose linear strain triangle with linear elastic material under plane stress/strain Synopsis ElemResp = LELST ( action , el_no , xyz , ElemData , ElemState ) Description LELST linear strain triangle with linear elastic material under plane stress/strain ELEMRESP = LELST (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) response of linear strain triangle with linear elastic material under plane stress/strain; the element accounts for linear and nonlinear geometry for the nodal dof transformations; depending on the value of the character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO, end node coordinates XYZ, and material and loading properties in the data structure ELEMDATA. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'stre': integration point stress projection to nodes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP = STRSREC for action = 'stre' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMDATA is a data structure with element property information in fields Geom = character variable for geometric transformation of node variables (linear or corotational) (default=linear) t = element thickness (default t=1) b = element body forces (default b=[0;0] ) nIP = number of integration points (default nIP=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields Tr0 = transformation matrix from local to global coordinates Mat{i}.xyz = coordinates of integration point i Mat{i}.eps = strain tensor at integration point i Mat{i}.sig = stress tensor at integration point i ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STRSREC is a data structure with nodal stress information in field(s) sigNd = nodal stresses Cross-Reference Information This function calls: ExtrReshu extracts displacements and increments from State and reshapes into array Tint2d integration rule over triangular area TransformStr2GL transformation of strain and stress tensors from local to global reference system shapeCST shape functions for 3 node constant strain triangle shapeLST shape functions for 6 node linear strain triangle DefGeom_Tri determines local coordinates and corotational triad of triangular element GeomTran_TriMemb kinematic matrices and local displacements for a triangular membrane element kg_TriMemb geometric stiffness matrix for triangular membrane element for different options This function is called by:","title":"LELST"},{"location":"Functions/latest/Element_Library/Special_Elements/","text":"Special Elements MaterialWrapper wrapper element that passes on arguments to the material state determination SectionWrapper wrapper element that passes on arguments to the section state determination","title":"Special Elements"},{"location":"Functions/latest/Element_Library/Special_Elements/MaterialWrapper/","text":"Element_Library > Special_Elements > MaterialWrapper MaterialWrapper Purpose wrapper element that passes on arguments to the material state determination Synopsis ElemResp = MaterialWrapper ( action , el_no , xyz , ElemData , ElemState ) Description MATERIALWRAPPER wrapper element that passes on arguments to the material state determination ELEMRESP = MATERIALWRAPPER (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) the function determines the response of the material MATNAME in ELEMDATA ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'size' function reports size of element arrays in variable ARSZ 'chec' function checks element property data for omissions and returns default values in ELEMDATA 'init' function returns element history variables in ELEMSTATE 'forc' function returns element resisting forces in ELEMSTATE 'stif' function returns element stiffness matrix and resisting forces in ELEMSTATE 'post' function returns data structure ELEMPOST with post-processing information depending on value of character variable ACTION the function returns information in data structure ELEMRESP for the element with number EL_NO and end node coordinates XYZ; the data structure ELEMDATA supplies the element property data. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure ELEMRESP stands for the following data object depending on value of ACTION ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = eps = material strains q = sig = material stresses Cross-Reference Information This function calls: Extract_El2MatState extract material state from element state This function is called by:","title":"MaterialWrapper"},{"location":"Functions/latest/Element_Library/Special_Elements/SectionWrapper/","text":"Element_Library > Special_Elements > SectionWrapper SectionWrapper Purpose wrapper element that passes on arguments to the section state determination Synopsis ElemResp = SectionWrapper ( action , el_no , xyz , ElemData , ElemState ) Description SECTIONWRAPPER wrapper element that passes on arguments to the section state determination ELEMRESP = SECTIONWRAPPER (ACTION,EL_NO,XYZ,ELEMDATA,ELEMSTATE) the function determines the response of the section SECNAME in ELEMDATA ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in ELEMRESP: ACTION = 'size': report size of element arrays 'chec': check element property data for omissions and assign default values 'init': initialize element history variables 'forc': report element resisting forces 'stif': report element stiffness matrix and resisting forces 'mass': report lumped mass vector and consistent mass matrix 'post': report post-processing information 'defo': report function handle for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure ELEMRESP stands for the following data object(s) for each ACTION: ELEMRESP = ARSZ for action = 'size' ELEMRESP = ELEMDATA for action = 'chec' ELEMRESP = ELEMSTATE for action = 'init' ELEMRESP = ELEMSTATE for action = 'stif' ELEMRESP = ELEMSTATE for action = 'forc' ELEMRESP = ELEMMASS for action = 'mass' ELEMRESP = ELEMPOST for action = 'post' ELEMRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ARSZ is an Boolean array of size NDF x NEN, where NDF = number of DOFs/node, NEN = number of nodes, with unit values corresponding to the active element DOFs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMSTATE is a data structure with the current element state; it has the fields u = vector of total element displacements in global reference Du = vector of element displacement increments from last convergence DDu = vector of element displacement increments from last iteration ke = element stiffness matrix in global reference; updated under ACTION = 'stif' p = element resisting force vector in global reference; updated under ACTION = 'stif' or 'forc' Past = element history variables at last converged state Pres = current element history variables lamda = row vector of current load factor(s) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMPOST is a data structure with element response information for post-processing in fields v = e = section deformations q = s = section forces Cross-Reference Information This function calls: Extract_El2SecState extract section state from element state This function is called by:","title":"SectionWrapper"},{"location":"Functions/latest/General/","text":"General A_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements Add_Damping2State setup damping matrix of structural model as field of data structure STATE Add_Mass2Model sets up lumped or consistent mass in Model.M Aj_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements B_matrix equilibrium matrix of structural model with 2d/3d truss and 2d frame elements Bbar_matrix function for determining force influence matrices of structural model BbariBbarx_matrix force influence matrices of primary structure from equilibrium matrix Bf Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom Create_Damping setup damping matrix of structural model Create_Loading create data structure Loading with reference vector(s) for applied forces and imposed displacements Create_Model creates data structure Model from node coordinates, connectivity and boundary conditions Create_NodalForces set up reference vector of applied forces Create_NodalMass free dof lumped mass vector for structural model Create_NodeDispl set up reference vector of imposed displacements at restrained dofs Create_PwForces set up equivalent nodal forces due to uniform element loading w Create_SimpleModel create data structure Model from node coordinates, connectivity and boundary conditions Extract_Str2ElState extract element state from structure state Fs_matrix block diagonal matrix of element flexibity matrices for structural model Kf_matrix stiffness matrix at free dofs of structural model Ks_matrix block diagonal matrix of basic element stiffness matrices for structural model Localize returns the node coordinates and id array of element Q0_vector initial (fixed-end) force vector for structural model Structure performs requested action on group of elements SubIncr4ElemntSD element displacement increment subdivision for state determination V0_vector initial element deformation vector for the structural model Other files in this directory Create_Damping.p Create_Loading.p Create_Model.p Create_NodalForces.p Create_NodalMass.p Create_NodeDispl.p Create_PwForces.p Create_SimpleModel.p Structure.p SubIncr4ElemntSD.p","title":"General"},{"location":"Functions/latest/General/A_matrix/","text":"General > A_matrix A_matrix Purpose kinematic matrix of structural model with 2d/3d truss and 2d frame elements Synopsis A = A_matrix ( Model ) Description A_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements A = A_MATRIX (MODEL) the function forms the kinematic matrix A for all degrees of freedom (DOFs) and all element deformations of the structural model specified in data structure MODEL; this version is limited to 2d/3d truss and 2d frame elements Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: S_DisplMethod script for displacement method of structural analysis Event2Event_NLAnalysis event-to-event incremental analysis with linear or P-DELTA geometry PlasticAnalysis collapse load factor, basic forces, and collapse mechanism by plastic analysis Get_Veps determine the elastic deformations from the displacements and plastic deformations","title":"A matrix"},{"location":"Functions/latest/General/Add_Damping2State/","text":"General > Add_Damping2State Add_Damping2State Purpose setup damping matrix of structural model as field of data structure STATE Synopsis State = Add_Damping2State ( type , Model , State , zeta , mode ) Description ADD_DAMPING2STATE setup damping matrix of structural model as field of data structure STATE STATE = ADD_DAMPING2STATE (TYPE,MODEL,STATE,ZETA,MODE) the function sets up the structural damping matrix C as a field of data structure STATE the free DOF stiffness matrix is supplied in the field Kf of STATE and the free DOF lumped mass vector in the field Ml of MODEL; the damping matrix is calibrated so that the mode numbers in row vector MODE have the damping ratios specified in the row vector ZETA; the character variable TYPE should be either 'StifProp', 'Caughey' or 'Modal' Note: Caughey with one mode reduces to a mass proportional damping matrix and with two modes reduces to Rayleigh damping; for more than 2 modes Caughey damping works only if Ml is fully populated; Modal damping refers to the method of superposing modal damping matrices by Wilson/Penzien; reference: Chopra, Dynamics of Structures, 2nd edition, pp. 455-463 Cross-Reference Information This function calls: Create_Damping setup damping matrix of structural model This function is called by:","title":"Add Damping2State"},{"location":"Functions/latest/General/Add_Mass2Model/","text":"General > Add_Mass2Model Add_Mass2Model Purpose sets up lumped or consistent mass in Model.M Synopsis Model = Add_Mass2Model ( Model , Me , ElemData , option ) Description ADD_MASS2MODEL sets up lumped or consistent mass in Model.M MODEL = ADD_MASS2MODEL (MODEL,ME,ELEMDATA,OPTION) the function adds the field M to the data structure Model, which carries information about the structural model; M is either a nfx1 column vector for the lumped mass or, a nfxnf array for the consistent mass of the model, where nf is the number of free DOFs; this depends on the presence ELEMDATA in the argument list and on the character variable OPTION; the following cases are possible: (1) without ELEMDATA the function takes the nodal lumped mass values in array ME where row=node no and column=dof no and assigns them to the column vector M with the row corresponding to the DOF number; Example: ME(5,:) = [20 20 0]; lumped mass value in X and Y at node 5; no rotary inertia (2) if ELEMDATA is present in the argument list the function calculates the lumped and consistent mass contribution of each element in the structural model that supports this feature; it adds the element lumped mass to the nodal lumped mass and returns the lumped mass in column vector M (3) if ELEMDATA is present and OPTION='CONSISTENT' the function returns the consistent mass matrix M after adding the nodal lumped mass on its diagonal if the Model was generated with Create_Model and supports sparse DOF indexing then M is a sparse column vector or matrix; if the Model was generated with Create_SimpleModel then the column vector or matrix are full Cross-Reference Information This function calls: Create_NodalMass free dof lumped mass vector for structural model Structure performs requested action on group of elements This function is called by:","title":"Add Mass2Model"},{"location":"Functions/latest/General/Aj_matrix/","text":"General > Aj_matrix Aj_matrix Purpose kinematic matrix of structural model with 2d/3d truss and 2d frame elements Synopsis Aj = Aj_matrix ( Model ) Description AJ_MATRIX kinematic matrix of structural model with 2d/3d truss and 2d frame elements AJ = AJ_MATRIX (MODEL) the function forms the kinematic matrix AJ for all degrees of freedom (DOFs) and all element deformations of the structural model specified in data structure MODEL; the kinematic matrix AJ includes the effect of joint offsets for the elements; the function is currently limited to 2d/3d truss and 2d frame elements Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) TranJnt sets up transformation matrix for finite size joints This function is called by: Event2Event_NLAnalysis event-to-event incremental analysis with linear or P-DELTA geometry PlasticAnalysis collapse load factor, basic forces, and collapse mechanism by plastic analysis Get_Veps determine the elastic deformations from the displacements and plastic deformations","title":"Aj matrix"},{"location":"Functions/latest/General/B_matrix/","text":"General > B_matrix B_matrix Purpose equilibrium matrix of structural model with 2d/3d truss and 2d frame elements Synopsis B = B_matrix ( Model ) Description B_MATRIX equilibrium matrix of structural model with 2d/3d truss and 2d frame elements B = B_MATRIX (MODEL) the function forms the equilibrium matrix B for all degrees of freedom (DOFs) and all basic forces of the structural model specified in data structure MODEL; this version is limited to 2d/3d truss and 2d frame elements Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: Bbar_matrix function for determining force influence matrices of structural model S_ForceMethod script for force method of structural analysis","title":"B matrix"},{"location":"Functions/latest/General/Bbar_matrix/","text":"General > Bbar_matrix Bbar_matrix Purpose function for determining force influence matrices of structural model Synopsis [ Bbar , Bvbar , ind_x ] = Bbar_matrix ( Model , ElemData ) Description BBAR_MATRIX function for determining force influence matrices of structural model [BBAR,BVBAR,IND_X] = BBAR_MATRIX (MODEL,ELEMDATA) the function determines the force influence matrix BBAR for the applied nodal forces, and the force influence matrix BVBAR for the initial element deformations of the structural model in data structure MODEL with element property information in cell array ELEMDATA; IND_X is the redundant force index vector into the basic forces of the structure; instead of Model and ElemData the input arguments can be the static matrix BF and the collection of flexibility coefficient matrices FS, respectively Cross-Reference Information This function calls: B_matrix equilibrium matrix of structural model with 2d/3d truss and 2d frame elements BbariBbarx_matrix force influence matrices of primary structure from equilibrium matrix Bf Fs_matrix block diagonal matrix of element flexibity matrices for structural model H_index cell array of indices into structure arrays for continuous element deformations This function is called by:","title":"Bbar matrix"},{"location":"Functions/latest/General/BbariBbarx_matrix/","text":"General > BbariBbarx_matrix BbariBbarx_matrix Purpose force influence matrices of primary structure from equilibrium matrix Bf Synopsis [ Bbari , Bbarx , ind_x ] = BbariBbarx_matrix ( Bf , ind_r , ind_rng ) Description BBARIBBARX_MATRIX force influence matrices of primary structure from equilibrium matrix Bf [BBARI,BBARX,IND_X] = BBARIBBARX_MATRIX (BF,IND_R,IND_RNG) the function determines the force influence matrices BBARI and BBARX of the primary structure from the equilibrium matrix BF; the optional argument IND_R specifies the index for the selected redundant basic forces; the optional argument IND_RNG selects the redundant basic forces among those in the group; BBARI is the force influence matrix for the applied forces at the free dofs, and BBARX is the force influence matrix for the redundant basic forces; IND_X is the redundant force index vector into the basic forces of the structure Cross-Reference Information This function calls: This function is called by: Bbar_matrix function for determining force influence matrices of structural model S_ForceMethod script for force method of structural analysis","title":"BbariBbarx matrix"},{"location":"Functions/latest/General/Condense_MV/","text":"General > Condense_MV Condense_MV Purpose condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom Synopsis [ Kfc , Pfc ] = Condense_MV ( Kf , idr , Pf ) Description CONDENSE_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom [KFC,PFC] = CONDENSE_MV (KF,IDR,PF) function condenses free dof stiffness matrix KF and applied force vector PF to a reduced set of dofs as specified in list or row vector IDR; the condensed stiffness matrix is KFC and the initial force vector is PFC Cross-Reference Information This function calls: This function is called by: InelJ2PwLH2dMat inelastic 2d material with J2 plasticity under linear kinematic and isotropic hardening InelPlnStrs2dMat inelastic material under plane stress in x-y LEIso2dMat linear elastic, isotropic 2d material model under general plane stress or strain conditions Inel3dMatwConstr 3d inelastic material under stress constraints (condensation) InelRe3dMatwConstr 3d inelastic material with smeared reinforcement under stress constraints LEIsoConstr3dMat linear elastic, isotropic 3d material model with stress or strain constraints MatSDwConstr state determination of 3d material under constraints MatSDwDirConstr state determination of 3d material under constraints without iterations MatSDwIterConstr state determination of 3d material under constraints with iterations EigenMode determines eigenfrequencies and eigenmodes of structural model","title":"Condense MV"},{"location":"Functions/latest/General/Create_Damping/","text":"General > Create_Damping Create_Damping Purpose setup damping matrix of structural model Synopsis C = Create_Damping ( type , Kf , Ml , zeta , mode ) Description CREATE_DAMPING setup damping matrix of structural model C = CREATE_DAMPING (TYPE,KF,ML,ZETA,MODE) function sets up damping matrix C according to character variable TYPE for a structure with free dof stiffness matrix KF and free dof lumped mass vector ML; the damping matrix is calibrated so that the mode numbers in row vector MODE have damping ratios as specified in row vector ZETA; the character variable TYPE should be either 'StifProp', 'Caughey' or 'Modal' Note: Caughey with one mode reduces to a mass proportional damping matrix and with two modes reduces to Rayleigh damping; for more than 2 modes Caughey damping works only if Ml is fully populated; Modal damping refers to the method of superposing modal damping matrices by Wilson/Penzien; reference: Chopra, Dynamics of Structures, 2nd edition, pp. 455-463 Cross-Reference Information This function calls: EigenMode determines eigenfrequencies and eigenmodes of structural model This function is called by: Add_Damping2State setup damping matrix of structural model as field of data structure STATE","title":"Create Damping"},{"location":"Functions/latest/General/Create_Loading/","text":"General > Create_Loading Create_Loading Purpose create data structure Loading with reference vector(s) for applied forces and imposed displacements Synopsis Loading = Create_Loading ( Model , Pe , Ue ) Description CREATE_LOADING create data structure Loading with reference vector(s) for applied forces and imposed displacements LOADING = CREATE_LOADING (MODEL,PE,UE) the function sets up the data structure LOADING with the array of applied force patterns at the free dofs of the model in field Pref and the array of imposed displacement patterns at the restrained dofs of the model in field Uref; model information is specified in data structure MODEL and the applied forces and imposed displacements are specified in arrays PE and UE, respectively; in arrays PE and UE rows correspond to node numbers and columns to dof direction Example: PE(3,:,1) = [10 0 50]; applied forces at node 3 in X,Y and Z direction for force pattern 1 UE(5,2,3) = 0.02; imposed displacement in Y-direction at node 5 for displacement pattern 3 Cross-Reference Information This function calls: This function is called by:","title":"Create Loading"},{"location":"Functions/latest/General/Create_Model/","text":"General > Create_Model Create_Model Purpose creates data structure Model from node coordinates, connectivity and boundary conditions Synopsis Model = Create_Model ( XYZ , CON , BOUN , ElemName ) Description CREATE_MODEL creates data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_MODEL (XYZ,CON,BOUN,ELEMNAME) function creates data structure MODEL with model information from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss data structure MODEL has the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = node connectivity array DOF = array with degree of freedom numbering, nodes are stored columnwise ndf(el) = no of dofs/node for element el nen(el) = no of nodes for element el ElemName = cell array of element names Cross-Reference Information This function calls: This function is called by:","title":"Create Model"},{"location":"Functions/latest/General/Create_NodalForces/","text":"General > Create_NodalForces Create_NodalForces Purpose set up reference vector of applied forces Synopsis Pref = Create_NodalForces ( Model , Pe ) Description CREATE_NODALFORCES set up reference vector of applied forces PREF = CREATE_NODALFORCES (MODEL,PE) the function sets up the vector of applied forces PREF at the free dofs of the model; model information is supplied in data structure MODEL and the applied forces in array PE; in array PE rows correspond to node numbers and columns to dofs Example: PE(3,:) = [10 0 50] means applied forces at node 3 in X,Y and Z direction Cross-Reference Information This function calls: This function is called by:","title":"Create NodalForces"},{"location":"Functions/latest/General/Create_NodalMass/","text":"General > Create_NodalMass Create_NodalMass Purpose free dof lumped mass vector for structural model Synopsis Ml = Create_NodalMass ( Model , Me ) Description CREATE_NODALMASS free dof lumped mass vector for structural model ML = CREATE_NODALMASS (MODEL,ME) the function sets up the free dof lumped mass vector ML for the structural model specified in data structure MODEL from the specified nodal lumped mass values in array ME in which rows correspond to node numbers and columns to dof direction Example: ME(5,:) = [20 20 0]; lumped mass value in X and Y at node 5; no rotary inertia Cross-Reference Information This function calls: This function is called by: Add_Mass2Model sets up lumped or consistent mass in Model.M","title":"Create NodalMass"},{"location":"Functions/latest/General/Create_NodeDispl/","text":"General > Create_NodeDispl Create_NodeDispl Purpose set up reference vector of imposed displacements at restrained dofs Synopsis Uref = Create_NodeDispl ( Model , Ue ) Description CREATE_NODEDISPL set up reference vector of imposed displacements at restrained dofs UREF = CREATE_NODEDISPL (MODEL,UE) the function sets up the vector of imposed displacements UREF at the restrained dofs of the model; model information is supplied in data structure MODEL and the imposed displacements in array UE; in array UE rows correspond to node numbers and columns to dofs Example: UE(3,:) = [0.2 0.1 0.03] means imposed displacements at node 3 in X,Y and Z direction Cross-Reference Information This function calls: This function is called by:","title":"Create NodeDispl"},{"location":"Functions/latest/General/Create_PwForces/","text":"General > Create_PwForces Create_PwForces Purpose set up equivalent nodal forces due to uniform element loading w Synopsis Pw = Create_PwForces ( Model , ElemData ) Description CREATE_PWFORCES set up equivalent nodal forces due to uniform element loading w PW = CREATE_PWFORCES (MODEL,ELEMDATA) the function sets up the vector of equivalent nodal forces PW due to uniform element loading w; model information is supplied in data structure MODEL, and the magnitude of w is supplied for each element in field W of ELEMDATA Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: S_DisplMethod script for displacement method of structural analysis S_ForceMethod script for force method of structural analysis","title":"Create PwForces"},{"location":"Functions/latest/General/Create_SimpleModel/","text":"General > Create_SimpleModel Create_SimpleModel Purpose create data structure Model from node coordinates, connectivity and boundary conditions Synopsis Model = Create_SimpleModel ( XYZ , CON , BOUN , ElemName ) Description CREATE_SIMPLEMODEL create data structure Model from node coordinates, connectivity and boundary conditions MODEL = CREATE_SIMPLEMODEL (XYZ,CON,BOUN,ELEMNAME) the function creates the data structure MODEL from the array of node coordinates XYZ (rows correspond to node numbers and columns to dofs), the numerical or cell array of element connectivity CON (rows correspond to element numbers), the array of boundary conditions BOUN (rows correspond to node numbers and columns to dofs), and the cell array of element names ELEMNAME (rows correspond to element numbers) Example: XYZ (3,:) = [10 15 22]; coordinates of node 3 BOUN (3,:) = [ 1 0 1]; boundary condition code for node 3 (0=free and 1=fixed) CON (4,:) = [ 6 7] : element 4 connects nodes 6 and 7, or CON {4} = [ 6 7]; element 4 connects nodes 6 and 7 ELEMNAME{4} = 'LinTruss'; element 4 is a linear elastic truss the data structure MODEL contains information about the structural model in the following fields MODEL.ndm = dimension of structural model nn = number of nodes in structural model ne = number of elements nf = number of free degrees of freedom nt = total number of degrees of freedom XYZ = node coordinates, nodes are stored columnwise BOUN = boundary conditions, nodes are stored columnwise CON = cell array of node connectivity DOF = array with degree of freedom numbering, nodes are stored rowwise ndf(el) = no of dofs/node for element el nq (el) = no of basic forces for element el nen(el) = no of nodes for element el ElemName = cell array of element names Cross-Reference Information This function calls: This function is called by:","title":"Create SimpleModel"},{"location":"Functions/latest/General/Extract_Str2ElState/","text":"General > Extract_Str2ElState Extract_Str2ElState Purpose extract element state from structure state Synopsis ElemState = Extract_Str2ElState ( el , id , State ) Description EXTRACT_STR2ELSTATE extract element state from structure state ELEMSTATE = EXTRACT_STR2ELSTATE(EL,ID,STATE) the function extracts from the data structure STATE the necessary state information for element EL, with id-array ID, and returns it in data structure ELEMSTATE; when STATE is numeric, it is assumed to represent the global dof displacement vector and the function extracts only the element dof displacements in ELEMSTATE.U Cross-Reference Information This function calls: This function is called by: Structure performs requested action on group of elements","title":"Extract Str2ElState"},{"location":"Functions/latest/General/Fs_matrix/","text":"General > Fs_matrix Fs_matrix Purpose block diagonal matrix of element flexibity matrices for structural model Synopsis Fs = Fs_matrix ( Model , ElemData , Roption ) Description FS_MATRIX block diagonal matrix of element flexibity matrices for structural model FS = FS_MATRIX (MODEL,ELEMDATA,ROPTION) the function sets up the block diagonal matrix of element flexibility matrices FS for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA; if ROPTION=0 the element release information is not accounted for in setting up Fs (default=1) Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: Bbar_matrix function for determining force influence matrices of structural model S_ForceMethod script for force method of structural analysis Animate_EventSequence generate plot sequence with location of plastic hinges for each event Complete_QV complete basic force QIN and element deformation vector VE with values at releases","title":"Fs matrix"},{"location":"Functions/latest/General/Kf_matrix/","text":"General > Kf_matrix Kf_matrix Purpose stiffness matrix at free dofs of structural model Synopsis Kf = Kf_matrix ( Model , ElemData ) Description KF_MATRIX stiffness matrix at free dofs of structural model KF = KF_MATRIX (MODEL,ELEMDATA) the function forms the stiffness matrix KF at the free dofs of the structural model specified in data structure MODEL with element property information in cell array ELEMDATA Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by:","title":"Kf matrix"},{"location":"Functions/latest/General/Ks_matrix/","text":"General > Ks_matrix Ks_matrix Purpose block diagonal matrix of basic element stiffness matrices for structural model Synopsis Ks = Ks_matrix ( Model , ElemData ) Description KS_MATRIX block diagonal matrix of basic element stiffness matrices for structural model KS = KS_MATRIX (MODEL,ELEMDATA) the function sets up the block diagonal matrix of basic element stiffness matrices KS for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: S_DisplMethod script for displacement method of structural analysis","title":"Ks matrix"},{"location":"Functions/latest/General/Localize/","text":"General > Localize Localize Purpose returns the node coordinates and id array of element Synopsis [ xyz , id ] = Localize ( Model , el ) Description LOCALIZE returns the node coordinates and id array of element [XYZ,ID] = LOCALIZE (MODEL,EL) the function returns the node coordinates XYZ and the id array ID of the element with number EL for the structural model specified in data structure MODEL Cross-Reference Information This function calls: This function is called by: A_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements Aj_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements B_matrix equilibrium matrix of structural model with 2d/3d truss and 2d frame elements Create_PwForces set up equivalent nodal forces due to uniform element loading w Fs_matrix block diagonal matrix of element flexibity matrices for structural model Kf_matrix stiffness matrix at free dofs of structural model Ks_matrix block diagonal matrix of basic element stiffness matrices for structural model Q0_vector initial (fixed-end) force vector for structural model Structure performs requested action on group of elements V0_vector initial element deformation vector for the structural model Event2Event_NLAnalysis event-to-event incremental analysis with linear or P-DELTA geometry PlasticAnalysis collapse load factor, basic forces, and collapse mechanism by plastic analysis Get_IPVarDistr plots distribution of integration point variables of elements with sections Label_2dMoments label end moment values for 2d frame elements in current window Label_AxialForces label axial force values in current window Plot_2dCurvDistr plot curvature distribution of 2d linear elastic frame elements Plot_2dMomntDistr plots moment distribution for 2d frame elements in current window Plot_AxialForces plot axial forces in current window Plot_ForcDistr plots internal force distribution for truss and frame elements in ElemList Plot_IPVarDistr plots distribution of integration point variables of elements with sections Plot_DeformedStructure plot deformed shape of the structure Plot_ElemLoading display element loading in current window Plot_Model plots the original or deformed geometry of the structural model Plot_OpenPlasticHinges display plastic hinge locations in original or deformed configuration Plot_PlasticHinges display plastic hinge locations in current window Plot_Releases display element releases in current window Add_OpenPHIndx2Post add index to POST for open plastic hinges in elements Get_StShear determine the story shears for moment resisting frame","title":"Localize"},{"location":"Functions/latest/General/Q0_vector/","text":"General > Q0_vector Q0_vector Purpose initial (fixed-end) force vector for structural model Synopsis Q0 = Q0_vector ( Model , ElemData ) Description Q0_VECTOR initial (fixed-end) force vector for structural model Q0 = Q0_VECTOR (MODEL,ELEMDATA) the function sets up the initial (fixed-end) force vector Q0 for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: S_DisplMethod script for displacement method of structural analysis Event2Event_NLAnalysis event-to-event incremental analysis with linear or P-DELTA geometry","title":"Q0 vector"},{"location":"Functions/latest/General/Structure/","text":"General > Structure Structure Purpose performs requested action on group of elements Synopsis Resp = Structure ( action , Model , ElemData , State , ElemList ) Description STRUCTURE performs requested action on group of elements RESP = STRUCTURE (ACTION,MODEL,ELEMDATA,STATE,ELEMLIST) response of some or all elements in the structural model, as requested in ELEMLIST (default=all); depending on the value of the character variable ACTION, the function returns information in data structure RESP for the structural model with properties in MODEL; the cell array ELEMDATA contains the element properties; the optional data structure STATE contains current response state variables for the model. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in RESP: ACTION = 'chec' check element property data for omissions and assign default values 'init' initialize element history variables 'forc' report structure resisting forces 'stif' report structure stiffness matrix and resisting forces 'mass' report lumped mass vector and consistent mass matrix 'post' report post-processing information 'stre' nodal stress recovery with element least squares 'nstr' nodal stress recovery with direct nodal stress calculations 'spre' nodal stress recovery with superconvergent global patch (ZZ-method) (not implemented) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure RESP stands for the following data object(s) for each ACTION: RESP = ELEMDATA for action = 'chec' RESP = STATE for action = 'init' RESP = STATE for action = 'stif' RESP = STATE for action = 'forc' RESP = MASS for action = 'mass' RESP = POST for action = 'post' RESP = NDSTR for action = 'stre','nstr','spre' RESP is empty for unsupported keywords additional keywords can be added in the function ADD_ACTION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STATE is a data structure with information about the current response state of the model in fields lamda = row vector of current load factor(s) U = global dof total displacement vector DU = global dof displacement increments from last convergencey DDU = global dof displacement increments from last iteration Udot = global dof velocity vector Udotdot = global dof acceleration vector Kf = structure stiffness matrix at free dofs; returned along with U under action = 'stif' Kfd = structure stiffness matrix coupling free and restrained dofs Pr = structure resisting force vector; returned along with U under action = 'stif' or 'forc' Past = data structure of element history variables at last convergence in cell array Elem Pres = data structure of current element history variables in cell array Elem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MASS is a data structure with mass information in fields: Ml = lumped mass vector of free dofs of structural model Mc = consistent mass matrix of free dofs of structural model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ POST is a data structure with structure and element response information for post-processing in fields: lamda = row vector of current load factor(s) Elem{el} = cell array with post-processing information for each element U = global dof displacement vector Udot = global dof velocity vector (for transient analysis) Uddot = global dof acceleration vector (for transient analysis) Pr = structure resisting force vector Time = time ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ NDSTR is a data structure with nodal stress information in fields: SigNd = nodal stresses for plane and membrane finite elements MomNd = nodal moments for plate and shell finite elements ShrNd = nodal shears for plate and shell finite elements with shear deformations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ELEMLIST = list of elements to which action applies (default=all elements in model) Cross-Reference Information This function calls: Extract_Str2ElState extract element state from structure state Localize returns the node coordinates and id array of element SubIncr4ElemntSD element displacement increment subdivision for state determination This function is called by: Add_Mass2Model sets up lumped or consistent mass in Model.M S_BucklingLoad general script for determining the buckling load of a structural model S_Initialize script for initializing State and SolStrat S_Update_State state determination after convergence with results in Post Initialize initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_State initialize state variables of structural model and create STATE LinearStep sets up and solves the structure equilibrium equations for single load step StateDetermination structure state determination under static conditions Update_State final state determination under static conditions, reset increments and history S_InitialStep script for initial step of incremental analysis S_MultiStep script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD script for multi-step incremental analysis under given load history(ies) S_OneStep_wLoadHist script for a single step of incremental analysis under given load history(ies) S_Transient_MultiStep script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD script for multi-step transient analysis under given load history(ies) TransientStateDetermination structure state determination under transient conditions Update_TransientState final state determination under transient conditions, reset increments and history","title":"Structure"},{"location":"Functions/latest/General/SubIncr4ElemntSD/","text":"General > SubIncr4ElemntSD SubIncr4ElemntSD Purpose element displacement increment subdivision for state determination Synopsis ElemState = SubIncr4ElemntSD ( el , ElemName , xyz , ElemData , ElemState ) Description SUBINCR4ELMNTSD element displacement increment subdivision for state determination ELEMSTATE = SUBINCR4ELMNTSD (EL,ELEMNAME,XYZ,ELEMDATA,ELEMSTATE) function calls the state determination function for all elements in the structural model with the option of subdividing the displacement increment in case of non-convergence; the latter case is represented by the logical variable CONVFLAG in ELEMSTATE; to activate the option of element displacement increment subdivision, the variable SUBDIVNO must be set in the element property data structure ELEMDATA Cross-Reference Information This function calls: This function is called by: Structure performs requested action on group of elements","title":"SubIncr4ElemntSD"},{"location":"Functions/latest/General/V0_vector/","text":"General > V0_vector V0_vector Purpose initial element deformation vector for the structural model Synopsis V0 = V0_vector ( Model , ElemData , Roption ) Description V0_VECTOR initial element deformation vector for the structural model V0 = V0_VECTOR (MODEL,ELEMDATA,ROPTION) the function sets up the initial element deformation vector V0 for the structural model specified in data structure MODEL with element property information in cell array ELEMDATA if ROPTION=0, element release information is not accounted for in setting up V0 (default=1) Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: S_ForceMethod script for force method of structural analysis Complete_QV complete basic force QIN and element deformation vector VE with values at releases","title":"V0 vector"},{"location":"Functions/latest/Geometry/","text":"Geometry Coro3dKinematics determine deformations and kinematic transformation matrices DefGeom_2dFrm determines current length and corotational diad of 2-node, 2d frame element DefGeom_3dFrm determines current length and corotational triad of 2-node, 3d frame element DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element DefGeom_Tri determines local coordinates and corotational triad of triangular element ElmLenOr element length and x-axis orientation (direction cosines) GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element GeomTran_3dFrm kinematic matrices and deformations for a 2-node 3d frame element GeomTran_QuadMemb kinematic matrices and local displacements for a quadrilateral membrane element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element GeomTran_TriMemb kinematic matrices and local displacements for a triangular membrane element GeomTran_TriPlate kinematic matrices and local displacements for a triangular plate element GeomTran_Truss kinematic matrices and deformations for a 2-node truss element Large2du2v_Frm determine 2d frame element deformations from end displacements Large3du2ul_Quad determine the local displacements of a triangular element Large3du2ul_Tri determine the local displacements of a triangular element Large3du2v_Frm determine 3d frame element deformations from end displacements Rot2q convert normalized rotation vector to quaternion representation TranJnt sets up transformation matrix for finite size joints TranNodeQuat transforms node quaternions and moments to rotations and moments kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options kg_3dFrm geometric stiffness matrix for 2-node 3d frame element different options kg_QuadMemb geometric stiffness matrix for quadrilateral membrane element for different options kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options kg_TriMemb geometric stiffness matrix for triangular membrane element for different options kg_TriPlate geometric stiffness matrix for triangular plate element for different options kg_Truss geometric stiffness matrix for 2d/3d 2-node truss element for different options q2Rmat determine rotation matrix from normalized quaternions spin determine the spin tensor of a vector spinblk determine the spin tensors for a group of vectors Other files in this directory Coro3dKinematics.p DefGeom_Quad.p DefGeom_Tri.p GeomTran_QuadMemb.p GeomTran_QuadPlate.p GeomTran_TriMemb.p GeomTran_TriPlate.p Large3du2ul_Quad.p Large3du2ul_Tri.p Large3du2v_Frm.p Rot2q.p TranNodeQuat.p kg_3dFrm.p kg_QuadMemb.p kg_QuadPlate.p kg_TriMemb.p kg_TriPlate.p q2Rmat.p spin.p spinblk.p","title":"Geometry"},{"location":"Functions/latest/Geometry/Coro3dKinematics/","text":"Geometry > Coro3dKinematics Coro3dKinematics Purpose determine deformations and kinematic transformation matrices Synopsis [ av , ap , ar , aq , ath , v ] = Coro3dKinematics ( xyz , GeomData , u ) Description CORO3DKINEMATICS determine deformations and kinematic transformation matrices [AV,AP,AR,AQ,ATH,V] = CORO3DKINEMATICS (XYZ,GEOMDATA,U) the function determines the element deformations V and the kinematic transformation matrices AV, AP, AR, AQ and ATH for the corotational formulation of nonlinear geometry for a 2-node, 3d frame element; U is the vector of node displacements in the global reference system and XYZ are the node coordinates; the data structure GEOMDATA carries information about joint offsets for the element Cross-Reference Information This function calls: DefGeom_3dFrm determines current length and corotational triad of 2-node, 3d frame element Large3du2v_Frm determine 3d frame element deformations from end displacements Rot2q convert normalized rotation vector to quaternion representation q2Rmat determine rotation matrix from normalized quaternions spin determine the spin tensor of a vector This function is called by: GeomTran_3dFrm kinematic matrices and deformations for a 2-node 3d frame element kg_3dFrm geometric stiffness matrix for 2-node 3d frame element different options","title":"Coro3dKinematics"},{"location":"Functions/latest/Geometry/DefGeom_2dFrm/","text":"Geometry > DefGeom_2dFrm DefGeom_2dFrm Purpose determines current length and corotational diad of 2-node, 2d frame element Synopsis [ L , T ] = DefGeom_2dFrm ( xyz ) Description DEFGEOM_2dFRM determines current length and corotational diad of 2-node, 2d frame element [L,T] = DEFGEOM_2dFRM (XYZ); the function determines the length L and the corotational diad T of a 2d frame element in the current configuration from the end node coordinates XYZ (column 1 for node i, column 2 for node j); the corotational diad is given in matrix T whose columns correspond to axes x and y, resp. Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: DeformShape2dFrm deformed shape of linear elastic, uniform, prismatic 2d frame element DeformShape2dFrm_wDispIntp deformed shape of 2d frame element with cubic polynomials DeformShape2dFrm_wCurvIntp deformed shape of 2d frame element from curvatures","title":"DefGeom 2dFrm"},{"location":"Functions/latest/Geometry/DefGeom_3dFrm/","text":"Geometry > DefGeom_3dFrm DefGeom_3dFrm Purpose determines current length and corotational triad of 2-node, 3d frame element Synopsis [ L , T ] = DefGeom_3dFrm ( xyz , GeomData , u ) Description DEFGEOM_3dFRM determines current length and corotational triad of 2-node, 3d frame element [L,T] = DEFGEOM_3dFRM (XYZ,GEOMDATA,U); the function determines the length L and corotational triad T of a 2-node, 3d frame element in the current configuration from the end node coordinates XYZ (column 1 for node i, column 2 for node j) and the end displacement vector U (optional); the corotational triad is given in matrix T whose columns correspond to axes x,y,z resp. Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) Rot2q convert normalized rotation vector to quaternion representation q2Rmat determine rotation matrix from normalized quaternions This function is called by: DeformShape3dFrm deformed shape of linear elastic, uniform, prismatic 3d frame element DeformShape3dFrm_wDispIntp deformed shape of 3d frame element with cubic polynomials DeformShape3dFrm_wCurvIntp deformed shape of 3d frame element from curvatures Coro3dKinematics determine deformations and kinematic transformation matrices GeomTran_3dFrm kinematic matrices and deformations for a 2-node 3d frame element Large3du2v_Frm determine 3d frame element deformations from end displacements","title":"DefGeom 3dFrm"},{"location":"Functions/latest/Geometry/DefGeom_Quad/","text":"Geometry > DefGeom_Quad DefGeom_Quad Purpose determines local coordinates and corotational triad of quadrilateral element Synopsis [ xl , T ] = DefGeom_Quad ( xyz ) Description DEFGEOM_QUAD determines local coordinates and corotational triad of quadrilateral element [XL,T] = DEFGEOM_QUAD (XYZ); the function determines the local coordinates XL and the corotational triad T of a quadrilateral element in the configuration with end node coordinates XYZ (column 1 for node i, column 2 for node j); the corotational triad is given by matrix T whose columns correspond to axes x,y,z resp. Cross-Reference Information This function calls: This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material Inel4to9nodeQuad isoparametric 4-9 node quadrilateral element with inelastic material Inel4to9nodeReQuad isoparametric 4-9 node quad element with inelastic material and reinforcing layers LE4nodeMindlinPlate linear elastic isoparametric 4-node quadrilateral Mindlin plate element LE4nodeMindlinPlatewITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC LE4nodeMindlinShellwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC LE4nodeQuad isoparametric 4-node quadrilateral element with linear elastic material LE4nodeQuadwIM isoparametric 4-node quad element with linear elastic material and incompatible bending modes LE4to9nodeMindlinPlate linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element LE4to9nodeMindlinShell linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element LE4to9nodeQuad isoparametric 4-9 node quadrilateral element with linear elastic material LE9nodeQuad isoparametric 9 node quadrilateral element with linear elastic material GeomTran_QuadMemb kinematic matrices and local displacements for a quadrilateral membrane element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element Large3du2ul_Quad determine the local displacements of a triangular element kg_QuadMemb geometric stiffness matrix for quadrilateral membrane element for different options kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options Tie_3dMesh tie nodes and elements for mesh generated in separate 3d blocks","title":"DefGeom Quad"},{"location":"Functions/latest/Geometry/DefGeom_Tri/","text":"Geometry > DefGeom_Tri DefGeom_Tri Purpose determines local coordinates and corotational triad of triangular element Synopsis [ xl , T ] = DefGeom_Tri ( xyz ) Description DEFGEOM_TRI determines local coordinates and corotational triad of triangular element [XL,T] = DEFGEOM_TRI (XYZ) the function determines the local coordinates XL and the corotational triad T of a triangular element in the current configuration from the end node coordinates XYZ (column 1 for node i, column 2 for node j); the corotational triad is given in matrix T whose columns correspond to axes x,y,z resp. Cross-Reference Information This function calls: This function is called by: InelCST constant strain triangle with inelastic material under plane stress/strain InelDKT inelastic discrete Kirchhoff triangle for plate bending InelLST linear strain triangle with inelastic material under plane stress/strain LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LECST constant strain triangle with linear elastic material under plane stress/strain LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material LELST linear strain triangle with linear elastic material under plane stress/strain GeomTran_TriMemb kinematic matrices and local displacements for a triangular membrane element GeomTran_TriPlate kinematic matrices and local displacements for a triangular plate element Large3du2ul_Tri determine the local displacements of a triangular element kg_TriMemb geometric stiffness matrix for triangular membrane element for different options kg_TriPlate geometric stiffness matrix for triangular plate element for different options","title":"DefGeom Tri"},{"location":"Functions/latest/Geometry/ElmLenOr/","text":"Geometry > ElmLenOr ElmLenOr Purpose element length and x-axis orientation (direction cosines) Synopsis [ L , dcx ] = ElmLenOr ( xyz ) Description ELMLENOR element length and x-axis orientation (direction cosines) [L,DCX] = ELMLENOR (XYZ); the function determines the length L and x-axis orientation of an element with end node coordinates XYZ (column 1 for node i, column 2 for node j); the direction cosines for the element x-axis are reported in vector DCX Cross-Reference Information This function calls: This function is called by: Check3dFrmAxes check that y-axis is not co-linear with element chord Inel2dFrm inelastic 2d frame element with different basic element types Inel3dFrm_wLHNMYS 3d frame element with elastic-linear hardening plastic axial-flexure hinges InelTruss 2d/3d inelastic truss element under linear or nonlinear geometry DeformShape2dFrm deformed shape of linear elastic, uniform, prismatic 2d frame element DeformShape2dFrm_wDispIntp deformed shape of 2d frame element with cubic polynomials DeformShape3dFrm deformed shape of linear elastic, uniform, prismatic 3d frame element DeformShape3dFrm_wDispIntp deformed shape of 3d frame element with cubic polynomials DeformShape2dFrm_wCurvIntp deformed shape of 2d frame element from curvatures DeformShape3dFrm_wCurvIntp deformed shape of 3d frame element from curvatures Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) Dinel3dFrm_EBwDF Euler-Bernoulli 3d-frame element with distributed inelasticity (displacement formulation) Dinel3dFrm_EBwFF 3d-frame element with distributed inelasticity (iterative force formulation) Mass4Taper2dFrm_wDF consistent mass matrix for tapered 2d frame element with displ interpolation LE2dFrm 2d LE frame element under linear or nonlinear geometry LE2dFrm_w2ndOrdDF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_w2ndOrdFF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry LE2dFrm_wVarIDF 2d LE frame element with variable cross section under linear or NL geometry LE2dFrm_wVarIFF 2d LE frame element with variable cross section under linear or NL geometry LE3dFrm 3d linear frame element under linear or nonlinear geometry LETruss 2d/3d linear truss element under linear or nonlinear geometry Mass4Prism2dFrm consistent mass matrix for prismatic 2d frame element A_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements Aj_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements B_matrix equilibrium matrix of structural model with 2d/3d truss and 2d frame elements Create_PwForces set up equivalent nodal forces due to uniform element loading w Fs_matrix block diagonal matrix of element flexibity matrices for structural model Kf_matrix stiffness matrix at free dofs of structural model Ks_matrix block diagonal matrix of basic element stiffness matrices for structural model Q0_vector initial (fixed-end) force vector for structural model V0_vector initial element deformation vector for the structural model DefGeom_2dFrm determines current length and corotational diad of 2-node, 2d frame element DefGeom_3dFrm determines current length and corotational triad of 2-node, 3d frame element GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element GeomTran_Truss kinematic matrices and deformations for a 2-node truss element Large2du2v_Frm determine 2d frame element deformations from end displacements kg_2dFrm geometric stiffness matrix for 2-node 2d frame element for different options kg_3dFrm geometric stiffness matrix for 2-node 3d frame element different options kg_Truss geometric stiffness matrix for 2d/3d 2-node truss element for different options Event2Event_NLAnalysis event-to-event incremental analysis with linear or P-DELTA geometry PlasticAnalysis collapse load factor, basic forces, and collapse mechanism by plastic analysis Draw_Arrow draws 2d or 3d arrow Get_IPVarDistr plots distribution of integration point variables of elements with sections Label_2dMoments label end moment values for 2d frame elements in current window Label_AxialForces label axial force values in current window Plot_2dCurvDistr plot curvature distribution of 2d linear elastic frame elements Plot_2dMomntDistr plots moment distribution for 2d frame elements in current window Plot_AxialForces plot axial forces in current window Plot_ForcDistr plots internal force distribution for truss and frame elements in ElemList Plot_IPVarDistr plots distribution of integration point variables of elements with sections Get_HngPos4DefoElem determine axial and flexural hinge position for deformed element Get_ModelScale determines maximum and minimum element length in Model Label_Model displays element and node numbers and global axes in the current window Plot_ElemLoading display element loading in current window Plot_OpenPlasticHinges display plastic hinge locations in original or deformed configuration Plot_PlasticHinges display plastic hinge locations in current window Plot_Releases display element releases in current window Add_OpenPHIndx2Post add index to POST for open plastic hinges in elements Add_Brace2Frame adds brace elements to a bay of a frame","title":"ElmLenOr"},{"location":"Functions/latest/Geometry/GeomTran_2dFrm/","text":"Geometry > GeomTran_2dFrm GeomTran_2dFrm Purpose kinematic matrices and deformations for a 2-node 2d frame element Synopsis [ ag , bg , ab , v , Dv , DDv ] = GeomTran_2dFrm ( option , xyz , GeomData , u , Du , DDu ) Description GEOMTRAN_2dFRM kinematic matrices and deformations for a 2-node 2d frame element [AG,BG,AB,V,DV,DDV] = GEOMTRAN_2dFRM (OPTION,XYZ,GEOMDATA,U,DU,DDU) the function determines the kinematic matrix AG from the global to the basic reference system, the static matrix BG from the basic to the global reference system, and the kinematic matrix AB from the global to the local reference system as well as the element deformation vector V and its increments DV and DDV from the node displacement array U and its increments DU and DDU for a 2-node 2d frame element with end node coordinates XYZ; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. GEOMDATA is a data structure with information about rigid joint offsets in field JNTOFF, (first column for node i, second column for node j) Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) Large2du2v_Frm determine 2d frame element deformations from end displacements TranJnt sets up transformation matrix for finite size joints This function is called by: Inel2dFrm inelastic 2d frame element with different basic element types Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) LE2dFrm 2d LE frame element under linear or nonlinear geometry LE2dFrm_w2ndOrdDF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_w2ndOrdFF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry LE2dFrm_wVarIDF 2d LE frame element with variable cross section under linear or NL geometry LE2dFrm_wVarIFF 2d LE frame element with variable cross section under linear or NL geometry Get_StShear determine the story shears for moment resisting frame","title":"GeomTran 2dFrm"},{"location":"Functions/latest/Geometry/GeomTran_3dFrm/","text":"Geometry > GeomTran_3dFrm GeomTran_3dFrm Purpose kinematic matrices and deformations for a 2-node 3d frame element Synopsis [ ag , bg , ab , v , Dv , DDv ] = GeomTran_3dFrm ( option , xyz , GeomData , u , Du , DDu ) Description GEOMTRAN_3dFRM kinematic matrices and deformations for a 2-node 3d frame element [AG,BG,AB,V,DV,DDV] = GEOMTRAN_3dFRM (OPTION,XYZ,GEOMDATA,U,DU,DDU) the function determines the kinematic matrix AG from the global to the basic reference system, the static matrix BG from the basic to the global reference system, and the kinematic matrix AB from the global to the local reference system as well as the element deformation vector V and its increments DV and DDV from the node displacement array U and its increments DU and DDU for a 2-node 3d frame element with end node coordinates XYZ; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. GEOMDATA is a data structure with information about rigid joint offsets in field JNTOFF (first column for node i, second column for node j), and orientation (direction cosines) of the local y-axis in vector YORNT Cross-Reference Information This function calls: Coro3dKinematics determine deformations and kinematic transformation matrices DefGeom_3dFrm determines current length and corotational triad of 2-node, 3d frame element Large3du2v_Frm determine 3d frame element deformations from end displacements TranJnt sets up transformation matrix for finite size joints This function is called by: Inel3dFrm_wLHNMYS 3d frame element with elastic-linear hardening plastic axial-flexure hinges Dinel3dFrm_EBwDF Euler-Bernoulli 3d-frame element with distributed inelasticity (displacement formulation) Dinel3dFrm_EBwFF 3d-frame element with distributed inelasticity (iterative force formulation) LE3dFrm 3d linear frame element under linear or nonlinear geometry","title":"GeomTran 3dFrm"},{"location":"Functions/latest/Geometry/GeomTran_QuadMemb/","text":"Geometry > GeomTran_QuadMemb GeomTran_QuadMemb Purpose kinematic matrices and local displacements for a quadrilateral membrane element Synopsis [ ag , ab , xl0 , ul , Dul , DDul ] = GeomTran_QuadMemb ( option , xyz , u , Du , DDu ) Description GEOMTRAN_QUADMEMB kinematic matrices and local displacements for a quadrilateral membrane element [AG,AB,XL0,UL,DUL,DDUL] = GEOMTRAN_QUADMEMB (OPTION,XYZ,U,DU,DDU) the function determines the kinematic matrix AG from the global to the basic reference system, and the kinematic matrix AB from the global to the local reference system as well as the local coordinates XL0, and local displacements UL and increments DUL and DDUL from the node displacement array U and its increments DU and DDU for a quadrilateral membrane element with end node coordinates XYZ; OPTION is a character variable with one of two values: 'linear' and 'corotational', for linear and corotational geometry, resp. Cross-Reference Information This function calls: DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element spinblk determine the spin tensors for a group of vectors This function is called by: Inel4to9nodeQuad isoparametric 4-9 node quadrilateral element with inelastic material Inel4to9nodeReQuad isoparametric 4-9 node quad element with inelastic material and reinforcing layers LE4nodeQuad isoparametric 4-node quadrilateral element with linear elastic material LE4nodeQuadwIM isoparametric 4-node quad element with linear elastic material and incompatible bending modes LE4to9nodeQuad isoparametric 4-9 node quadrilateral element with linear elastic material LE9nodeQuad isoparametric 9 node quadrilateral element with linear elastic material","title":"GeomTran QuadMemb"},{"location":"Functions/latest/Geometry/GeomTran_QuadPlate/","text":"Geometry > GeomTran_QuadPlate GeomTran_QuadPlate Purpose kinematic matrices and local displacements for a quadrilateral plate element Synopsis [ ag , ab , xl0 , ul , Dul , DDul ] = GeomTran_QuadPlate ( option , xyz , u , Du , DDu ) Description GEOMTRAN_QUADPLATE kinematic matrices and local displacements for a quadrilateral plate element [AG,AB,XL0,UL,DUL,DDUL] = GEOMTRAN_QUADPLATE (OPTION,XYZ,U,DU,DDU) the function determines the kinematic matrix AG from the global to the basic reference system, and the kinematic matrix AB from the global to the local reference system as well as the local coordinates XL0, and local displacements UL and increments DUL and DDUL from the node displacement array U and its increments DU and DDU for a quadrilateral plate element with end node coordinates XYZ; OPTION is a character variable with one of two values: 'linear' and 'corotational', for linear and corotational geometry, resp. Cross-Reference Information This function calls: DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element Large3du2ul_Quad determine the local displacements of a triangular element Rot2q convert normalized rotation vector to quaternion representation q2Rmat determine rotation matrix from normalized quaternions spin determine the spin tensor of a vector This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material LE4nodeMindlinPlate linear elastic isoparametric 4-node quadrilateral Mindlin plate element LE4nodeMindlinPlatewITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC LE4nodeMindlinShellwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC LE4to9nodeMindlinPlate linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element LE4to9nodeMindlinShell linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element","title":"GeomTran QuadPlate"},{"location":"Functions/latest/Geometry/GeomTran_TriMemb/","text":"Geometry > GeomTran_TriMemb GeomTran_TriMemb Purpose kinematic matrices and local displacements for a triangular membrane element Synopsis [ ag , ab , xl0 , ul , Dul , DDul ] = GeomTran_TriMemb ( option , xyz , u , Du , DDu ) Description GEOMTRAN_TRIMEMB kinematic matrices and local displacements for a triangular membrane element [AG,AB,XL0,UL,DUL,DDUL] = GEOMTRAN_TRIMEMB (OPTION,XYZ,U,DU,DDU) the function determines the kinematic matrix AG from the global to the basic reference system, and the kinematic matrix AB from the global to the local reference system as well as the local coordinates XL0, and local displacements UL and increments DUL and DDUL from the node displacement array U and its increments DU and DDU for a triangular membrane element with end node coordinates XYZ; OPTION is a character variable with one of two values: 'linear' and 'corotational', for linear and corotational geometry, resp. Cross-Reference Information This function calls: DefGeom_Tri determines local coordinates and corotational triad of triangular element spinblk determine the spin tensors for a group of vectors This function is called by: InelCST constant strain triangle with inelastic material under plane stress/strain InelLST linear strain triangle with inelastic material under plane stress/strain LECST constant strain triangle with linear elastic material under plane stress/strain LELST linear strain triangle with linear elastic material under plane stress/strain","title":"GeomTran TriMemb"},{"location":"Functions/latest/Geometry/GeomTran_TriPlate/","text":"Geometry > GeomTran_TriPlate GeomTran_TriPlate Purpose kinematic matrices and local displacements for a triangular plate element Synopsis [ ag , ab , xl0 , ul , Dul , DDul ] = GeomTran_TriPlate ( option , xyz , u , Du , DDu ) Description GEOMTRAN_TRIPLATE kinematic matrices and local displacements for a triangular plate element [AG,AB,XL0,UL,DUL,DDUL] = GEOMTRAN_TRIPLATE (OPTION,XYZ,U,DU,DDU) the function determines the kinematic matrix AG from the global to the basic reference system, and the kinematic matrix AB from the global to the local reference system as well as the local coordinates XL0, and local displacements UL and increments DUL and DDUL from the node displacement array U and its increments DU and DDU for a triangular plate element with end node coordinates XYZ; OPTION is a character variable with one of two values: 'linear' and 'corotational', for linear and corotational geometry, resp. Cross-Reference Information This function calls: DefGeom_Tri determines local coordinates and corotational triad of triangular element Large3du2ul_Tri determine the local displacements of a triangular element Rot2q convert normalized rotation vector to quaternion representation q2Rmat determine rotation matrix from normalized quaternions spin determine the spin tensor of a vector This function is called by: InelDKT inelastic discrete Kirchhoff triangle for plate bending LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material","title":"GeomTran TriPlate"},{"location":"Functions/latest/Geometry/GeomTran_Truss/","text":"Geometry > GeomTran_Truss GeomTran_Truss Purpose kinematic matrices and deformations for a 2-node truss element Synopsis [ ag , bg , v , Dv , DDv ] = GeomTran_Truss ( option , xyz , u , Du , DDu ) Description GEOMTRAN_TRUSS kinematic matrices and deformations for a 2-node truss element [AG,BG,V,DV,DDV] = GEOMTRAN_TRUSS (NDF,XYZ,GEOMDATA,U,DU,DDU) the function determines the kinematic matrix AG from the global to the basic reference system, and the static matrix BG from the basic to the global reference system as well as the element deformation vector V and its increments DV and DDV from the end displacement vector U and its increments DU and DDU for a 2-node truss element with end node coordinates XYZ and NDF dofs/node; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: InelTruss 2d/3d inelastic truss element under linear or nonlinear geometry LETruss 2d/3d linear truss element under linear or nonlinear geometry","title":"GeomTran Truss"},{"location":"Functions/latest/Geometry/Large2du2v_Frm/","text":"Geometry > Large2du2v_Frm Large2du2v_Frm Purpose determine 2d frame element deformations from end displacements Synopsis v = Large2du2v_Frm ( xyz , u ) Description LARGE2DU2V_FRM determine 2d frame element deformations from end displacements V = LARGE2DU2V_FRM (XYZ,U) the function determines the deformations V of a 2-node, 2d frame element with end node coordinates XYZ under large end node displacements U Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: DeformShape2dFrm deformed shape of linear elastic, uniform, prismatic 2d frame element DeformShape2dFrm_wDispIntp deformed shape of 2d frame element with cubic polynomials GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element","title":"Large2du2v Frm"},{"location":"Functions/latest/Geometry/Large3du2ul_Quad/","text":"Geometry > Large3du2ul_Quad Large3du2ul_Quad Purpose determine the local displacements of a triangular element Synopsis ul = Large3du2ul_Quad ( xyz , u ) Description LARGE3DU2UL_QUAD determine the local displacements of a triangular element UL = LARGE3DU2UL_QUAD(XYZ,U) the function determines the displacements UL in the local reference system under the large node displacements U in the global reference system of a qudrilateral element with end node coordinates XYZ Cross-Reference Information This function calls: DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element Rot2q convert normalized rotation vector to quaternion representation q2Rmat determine rotation matrix from normalized quaternions This function is called by: GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options","title":"Large3du2ul Quad"},{"location":"Functions/latest/Geometry/Large3du2ul_Tri/","text":"Geometry > Large3du2ul_Tri Large3du2ul_Tri Purpose determine the local displacements of a triangular element Synopsis ul = Large3du2ul_Tri ( xyz , u ) Description LARGE3DU2UL_TRI determine the local displacements of a triangular element UL = LARGE3DU2UL_TRI(XYZ,U) the function determines the displacements UL in the local reference system under the large node displacements U in the global reference system of a triangular element with end node coordinates XYZ Cross-Reference Information This function calls: DefGeom_Tri determines local coordinates and corotational triad of triangular element Rot2q convert normalized rotation vector to quaternion representation q2Rmat determine rotation matrix from normalized quaternions This function is called by: GeomTran_TriPlate kinematic matrices and local displacements for a triangular plate element kg_TriPlate geometric stiffness matrix for triangular plate element for different options","title":"Large3du2ul Tri"},{"location":"Functions/latest/Geometry/Large3du2v_Frm/","text":"Geometry > Large3du2v_Frm Large3du2v_Frm Purpose determine 3d frame element deformations from end displacements Synopsis [ v , vthetaI , vthetaJ ] = Large3du2v_Frm ( xyz , GeomData , u ) Description LARGE3DU2V_FRM determine 3d frame element deformations from end displacements [V,VTHETAI,VTHETAJ] = LARGE3DU2V_FRM(XYZ,GEOMDATA,U) the function determines the deformations V and the relative pseudo-rotation vectors VTHETAI and VTHETAJ at nodes I and J of a 2-node, 3d frame element with end node coordinates XYZ under large end node displacements U; the data structure GEOMDATA carries information about the joint offsets for the element Cross-Reference Information This function calls: DefGeom_3dFrm determines current length and corotational triad of 2-node, 3d frame element Rot2q convert normalized rotation vector to quaternion representation q2Rmat determine rotation matrix from normalized quaternions This function is called by: DeformShape3dFrm deformed shape of linear elastic, uniform, prismatic 3d frame element DeformShape3dFrm_wDispIntp deformed shape of 3d frame element with cubic polynomials Coro3dKinematics determine deformations and kinematic transformation matrices GeomTran_3dFrm kinematic matrices and deformations for a 2-node 3d frame element","title":"Large3du2v Frm"},{"location":"Functions/latest/Geometry/Rot2q/","text":"Geometry > Rot2q Rot2q Purpose convert normalized rotation vector to quaternion representation Synopsis q = Rot2q ( theta ) Description ROTQ convert normalized rotation vector to quaternion representation Q = ROT2Q (THETA) the function converts the normalized rotation vector THETA to the normalized quaternion representation Q Cross-Reference Information This function calls: This function is called by: Coro3dKinematics determine deformations and kinematic transformation matrices DefGeom_3dFrm determines current length and corotational triad of 2-node, 3d frame element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element GeomTran_TriPlate kinematic matrices and local displacements for a triangular plate element Large3du2ul_Quad determine the local displacements of a triangular element Large3du2ul_Tri determine the local displacements of a triangular element Large3du2v_Frm determine 3d frame element deformations from end displacements kg_3dFrm geometric stiffness matrix for 2-node 3d frame element different options kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options kg_TriPlate geometric stiffness matrix for triangular plate element for different options","title":"Rot2q"},{"location":"Functions/latest/Geometry/TranJnt/","text":"Geometry > TranJnt TranJnt Purpose sets up transformation matrix for finite size joints Synopsis aj = TranJnt ( JntOff ) Description TRANJNT sets up transformation matrix for finite size joints AJ = TRANJNT (JNTOFF) the function sets up the transformation matrix AJ for finite size joints of 2d and 3d frame elements; the rigid joint offsets at the element ends are specified in array JNTOFF with the first column corresponding to node i and the second column to node j Cross-Reference Information This function calls: This function is called by: DeformShape2dFrm deformed shape of linear elastic, uniform, prismatic 2d frame element DeformShape2dFrm_wDispIntp deformed shape of 2d frame element with cubic polynomials DeformShape3dFrm deformed shape of linear elastic, uniform, prismatic 3d frame element DeformShape3dFrm_wDispIntp deformed shape of 3d frame element with cubic polynomials DeformShape2dFrm_wCurvIntp deformed shape of 2d frame element from curvatures DeformShape3dFrm_wCurvIntp deformed shape of 3d frame element from curvatures Aj_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element GeomTran_3dFrm kinematic matrices and deformations for a 2-node 3d frame element Plot_DeformedStructure plot deformed shape of the structure Plot_Model plots the original or deformed geometry of the structural model Plot_OpenPlasticHinges display plastic hinge locations in original or deformed configuration Plot_PlasticHinges display plastic hinge locations in current window","title":"TranJnt"},{"location":"Functions/latest/Geometry/TranNodeQuat/","text":"Geometry > TranNodeQuat TranNodeQuat Purpose transforms node quaternions and moments to rotations and moments Synopsis [ U , P ] = TranNodeQuat ( Model , Uq , Pq , rix ) Description TRANNODEQUAT transforms node quaternions and moments to rotations and moments [U,P] = TRANNODEQUAT (MODEL,UQ,PQ,RIX) the function transforms the node quaternions UQ and their work conjugate quaternion moments PQ to rotations U and work conjugate moments M; MODEL carries the information about the structural model and RIX is the index of rotation dofs at each node, which must be of length 3; translations and work conjugate forces in UQ and PQ return unaffected Cross-Reference Information This function calls: spin determine the spin tensor of a vector This function is called by:","title":"TranNodeQuat"},{"location":"Functions/latest/Geometry/kg_2dFrm/","text":"Geometry > kg_2dFrm kg_2dFrm Purpose geometric stiffness matrix for 2-node 2d frame element for different options Synopsis kg = kg_2dFrm ( option , xyz , u , q ) Description KG_2dFRM geometric stiffness matrix for 2-node 2d frame element for different options KG = KG_2dFRM (OPTION,XYZ,U,Q) the function determines the geometric stiffness matrix KG of a 2-node 2d frame element with end coordinates in array XYZ (node i corresponds to first column and node j to second); the geometric stiffness matrix depends on the node displacement values in array U (ndfx2) in the global reference system and on the basic force vector Q; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: Inel2dFrm inelastic 2d frame element with different basic element types Dinel2dFrm_EBwDF 2d-frame element with distributed inelasticity (displacement formulation) Dinel2dFrm_EBwFF 2d-frame element with distributed inelasticity (force formulation) LE2dFrm 2d LE frame element under linear or nonlinear geometry LE2dFrm_w2ndOrdDF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_w2ndOrdFF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_wPdelta 2d linear elastic frame element with P-delta effect under linear or nonlinear geometry LE2dFrm_wVarIDF 2d LE frame element with variable cross section under linear or NL geometry LE2dFrm_wVarIFF 2d LE frame element with variable cross section under linear or NL geometry","title":"kg 2dFrm"},{"location":"Functions/latest/Geometry/kg_3dFrm/","text":"Geometry > kg_3dFrm kg_3dFrm Purpose geometric stiffness matrix for 2-node 3d frame element different options Synopsis kg = kg_3dFrm ( option , xyz , GeomData , u , q , ElLoad ) Description KG_3dFRM geometric stiffness matrix for 2-node 3d frame element different options KG = KG_3dFRM (OPTION,XYZ,GEOMDATA,U,Q,ELLOAD) the function determines the geometric stiffness matrix KG of a 2-node element with end coordinates in array XYZ (node i corresponds to first column and node j to second); the geometric stiffness matrix depends on the node displacement values in array U (ndfx2) in the global reference system and on the basic force vector Q; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. Cross-Reference Information This function calls: Coro3dKinematics determine deformations and kinematic transformation matrices ElmLenOr element length and x-axis orientation (direction cosines) Rot2q convert normalized rotation vector to quaternion representation spin determine the spin tensor of a vector This function is called by: Inel3dFrm_wLHNMYS 3d frame element with elastic-linear hardening plastic axial-flexure hinges Dinel3dFrm_EBwDF Euler-Bernoulli 3d-frame element with distributed inelasticity (displacement formulation) Dinel3dFrm_EBwFF 3d-frame element with distributed inelasticity (iterative force formulation) LE3dFrm 3d linear frame element under linear or nonlinear geometry","title":"kg 3dFrm"},{"location":"Functions/latest/Geometry/kg_QuadMemb/","text":"Geometry > kg_QuadMemb kg_QuadMemb Purpose geometric stiffness matrix for quadrilateral membrane element for different options Synopsis kg = kg_QuadMemb ( option , xyz , u , pl ) Description KG_QUADMEMB geometric stiffness matrix for quadrilateral membrane element for different options KG = KG_QUADMEMB (OPTION,XYZ,U,PL); the function determines the geometric stiffness matrix KG of a quad mebrane element with end coordinates in array XYZ (columns correspond to nodes); the geometric stiffness matrix depends on the node displacement values in array U (ndm x nen) in the global reference system and on the local nodal force vector PL; (nen = number of nodes) OPTION is a character variable with value equal to 'linear' or 'corotational' for linear and corotational geometry, resp. Cross-Reference Information This function calls: DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element spinblk determine the spin tensors for a group of vectors This function is called by: Inel4to9nodeQuad isoparametric 4-9 node quadrilateral element with inelastic material Inel4to9nodeReQuad isoparametric 4-9 node quad element with inelastic material and reinforcing layers LE4nodeQuad isoparametric 4-node quadrilateral element with linear elastic material LE4nodeQuadwIM isoparametric 4-node quad element with linear elastic material and incompatible bending modes LE4to9nodeQuad isoparametric 4-9 node quadrilateral element with linear elastic material LE9nodeQuad isoparametric 9 node quadrilateral element with linear elastic material","title":"kg QuadMemb"},{"location":"Functions/latest/Geometry/kg_QuadPlate/","text":"Geometry > kg_QuadPlate kg_QuadPlate Purpose geometric stiffness matrix for quadrilateral plate element for different options Synopsis kg = kg_QuadPlate ( option , xyz , u , pl ) Description KG_QUADPLATE geometric stiffness matrix for quadrilateral plate element for different options KG = KG_QUADPLATE (OPTION,XYZ,U,PL); the function determines the geometric stiffness matrix KG of a quad plate element with end coordinates in array XYZ (columns correspond to nodes); the geometric stiffness matrix depends on the node displacement values in array U (ndm x nen) in the global reference system and on the local nodal force vector PL; (nen = number of nodes) OPTION is a character variable with value equal to 'linear' or 'corotational' for linear and corotational geometry, resp. Cross-Reference Information This function calls: DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element Large3du2ul_Quad determine the local displacements of a triangular element Rot2q convert normalized rotation vector to quaternion representation q2Rmat determine rotation matrix from normalized quaternions spin determine the spin tensor of a vector spinblk determine the spin tensors for a group of vectors This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material LE4nodeMindlinPlate linear elastic isoparametric 4-node quadrilateral Mindlin plate element LE4nodeMindlinPlatewITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC LE4nodeMindlinShellwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC LE4to9nodeMindlinPlate linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element LE4to9nodeMindlinShell linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element","title":"kg QuadPlate"},{"location":"Functions/latest/Geometry/kg_TriMemb/","text":"Geometry > kg_TriMemb kg_TriMemb Purpose geometric stiffness matrix for triangular membrane element for different options Synopsis kg = kg_TriMemb ( option , xyz , u , pl ) Description KG_TRIMEMB geometric stiffness matrix for triangular membrane element for different options KG = KG_TRIMEMB (OPTION,XYZ,U,PL); the function determines the geometric stiffness matrix KG of a triangular mebrane element with end coordinates in array XYZ (columns correspond to nodes); the geometric stiffness matrix depends on the node displacement values in array U (ndm x nen) in the global reference system and on the local nodal force vector PL; (nen = number of nodes) OPTION is a character variable with value equal to 'linear' or 'corotational' for linear and corotational geometry, resp. Cross-Reference Information This function calls: DefGeom_Tri determines local coordinates and corotational triad of triangular element spinblk determine the spin tensors for a group of vectors This function is called by: InelCST constant strain triangle with inelastic material under plane stress/strain InelLST linear strain triangle with inelastic material under plane stress/strain LECST constant strain triangle with linear elastic material under plane stress/strain LELST linear strain triangle with linear elastic material under plane stress/strain","title":"kg TriMemb"},{"location":"Functions/latest/Geometry/kg_TriPlate/","text":"Geometry > kg_TriPlate kg_TriPlate Purpose geometric stiffness matrix for triangular plate element for different options Synopsis kg = kg_TriPlate ( option , xyz , u , pl ) Description KG_TRIPLATE geometric stiffness matrix for triangular plate element for different options KG = KG_TRIPLATE (OPTION,XYZ,U,PL); the function determines the geometric stiffness matrix KG of a triangular plate element with end coordinates in array XYZ (columns correspond to nodes); the geometric stiffness matrix depends on the node displacement values in array U (ndm x nen) in the global reference system and on the local nodal force vector PL; (nen = number of nodes) OPTION is a character variable with value equal to 'linear' or 'corotational' for linear and corotational geometry, resp. Cross-Reference Information This function calls: DefGeom_Tri determines local coordinates and corotational triad of triangular element Large3du2ul_Tri determine the local displacements of a triangular element Rot2q convert normalized rotation vector to quaternion representation q2Rmat determine rotation matrix from normalized quaternions spin determine the spin tensor of a vector spinblk determine the spin tensors for a group of vectors This function is called by: InelDKT inelastic discrete Kirchhoff triangle for plate bending LECMSDKTShell linear elastic 3-node triangle with constant mebrane strain + DK bending LECMSDKTShell_wDDOF linear elastic 3-node triangle with constant mebrane strain + DK bending with drill DOF LEDKT discrete Kirchhoff 3-node triangle for plate bending with linear elastic material","title":"kg TriPlate"},{"location":"Functions/latest/Geometry/kg_Truss/","text":"Geometry > kg_Truss kg_Truss Purpose geometric stiffness matrix for 2d/3d 2-node truss element for different options Synopsis kg = kg_Truss ( option , xyz , u , q ) Description KG_TRUSS geometric stiffness matrix for 2d/3d 2-node truss element for different options KG = KG_TRUSS (OPTION,XYZ,U,Q) the function determines the geometric stiffness matrix KG of a 2-node 2d/3d truss element with end coordinates in array XYZ (node i corresponds to first column and node j to second); the geometric stiffness matrix depends on the node displacement values in array U (ndmx2) in the global reference system and on the basic force vector Q; OPTION is a character variable with one of three values: 'linear','PDelta' and 'corotational' for linear, P-Delta and corotational geometry, resp. Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: InelTruss 2d/3d inelastic truss element under linear or nonlinear geometry LETruss 2d/3d linear truss element under linear or nonlinear geometry","title":"kg Truss"},{"location":"Functions/latest/Geometry/q2Rmat/","text":"Geometry > q2Rmat q2Rmat Purpose determine rotation matrix from normalized quaternions Synopsis R = q2Rmat ( qhat ) Description Q2Rmat determine rotation matrix from normalized quaternions R = Q2RMAT (QHAT) the function determines the rotation matrix R from the normalized representation QHAT of a rotation Cross-Reference Information This function calls: spin determine the spin tensor of a vector This function is called by: Coro3dKinematics determine deformations and kinematic transformation matrices DefGeom_3dFrm determines current length and corotational triad of 2-node, 3d frame element GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element GeomTran_TriPlate kinematic matrices and local displacements for a triangular plate element Large3du2ul_Quad determine the local displacements of a triangular element Large3du2ul_Tri determine the local displacements of a triangular element Large3du2v_Frm determine 3d frame element deformations from end displacements kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options kg_TriPlate geometric stiffness matrix for triangular plate element for different options","title":"q2Rmat"},{"location":"Functions/latest/Geometry/spin/","text":"Geometry > spin spin Purpose determine the spin tensor of a vector Synopsis S = spin ( u ) Description SPIN determine the spin tensor of a vector S = SPIN (U) the function determines the spin tensor S of a vector U with three components Cross-Reference Information This function calls: This function is called by: Coro3dKinematics determine deformations and kinematic transformation matrices GeomTran_QuadPlate kinematic matrices and local displacements for a quadrilateral plate element GeomTran_TriPlate kinematic matrices and local displacements for a triangular plate element TranNodeQuat transforms node quaternions and moments to rotations and moments kg_3dFrm geometric stiffness matrix for 2-node 3d frame element different options kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options kg_TriPlate geometric stiffness matrix for triangular plate element for different options q2Rmat determine rotation matrix from normalized quaternions","title":"Spin"},{"location":"Functions/latest/Geometry/spinblk/","text":"Geometry > spinblk spinblk Purpose determine the spin tensors for a group of vectors Synopsis S = spinblk ( u ) Description SPINBLK determine the spin tensors for a group of vectors S = SPINBLK (U) the function determines the spin tensors for a group of vectors in U; U must have size N=3K where K is the number of vectors the array S contains the spin tensors in K vertically concatenated 3x3 blocks Cross-Reference Information This function calls: This function is called by: GeomTran_QuadMemb kinematic matrices and local displacements for a quadrilateral membrane element GeomTran_TriMemb kinematic matrices and local displacements for a triangular membrane element kg_QuadMemb geometric stiffness matrix for quadrilateral membrane element for different options kg_QuadPlate geometric stiffness matrix for quadrilateral plate element for different options kg_TriMemb geometric stiffness matrix for triangular membrane element for different options kg_TriPlate geometric stiffness matrix for triangular plate element for different options","title":"Spinblk"},{"location":"Functions/latest/Material_Library/","text":"Material Library Condense_k condense matrix K to a reduced set idr of dofs by condensing out dofs idc DmgEvow1pnd damage model with one positive and one negative damage index DmgEvow2pnd damage model with two positive and two negative damage indices with interaction DmgLib value and slope of damage evolution function FNAME SubIncr4MatSD material strain increment subdivision for state determination Other files in this directory DmgEvow1pnd.p DmgEvow2pnd.p DmgLib.p Sub directories 1dMaterials 2dMaterials 3dMaterials","title":"Material Library"},{"location":"Functions/latest/Material_Library/Condense_k/","text":"Material_Library > Condense_k Condense_k Purpose condense matrix K to a reduced set idr of dofs by condensing out dofs idc Synopsis krr = Condense_k ( k , idr , idc ) Description CONDENSE_K condense matrix K to a reduced set idr of dofs by condensing out dofs idc KRR = CONDENSE_K (K,IDR,IDC) the function condenses the stiffness matrix K to a reduced set of dofs as specified in list or row vector IDR by condensing out the dofs in list or row vector IDC; the condensed stiffness matrix is KRR Cross-Reference Information This function calls: This function is called by: InelJ2PwLHPlnStrs2dMat inelastic 2d material with J2 plasticity and linear hardening under plane stress Inel3dMatwConstr 3d inelastic material under stress constraints (condensation) InelGJ2PStrConstr3dMat 3d general plasticity J2 material under constrained stress state InelJ2PwLHStrConstr3dMat inelastic 3d material with J2 plasticity and linear hardening under stress constraints InelRe3dMatwConstr 3d inelastic material with smeared reinforcement under stress constraints","title":"Condense k"},{"location":"Functions/latest/Material_Library/DmgEvow1pnd/","text":"Material_Library > DmgEvow1pnd DmgEvow1pnd Purpose damage model with one positive and one negative damage index Synopsis DmgResp = DmgEvow1pnd ( action , DmgData , DmgState ) Description DMGEVOw1PND damage model with one positive and one negative damage index DMGRESP = DMGEVOw1PND (ACTION,DMGDATA,DMGSTATE) the function determines the true response of a force-deformation relation of any type under a damage evolution rule with one positive and one negative damage index ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in DMGRESP: ACTION = 'chec': check damage parameters for omissions and assign default values 'init': initialize history variables for damage evolution 'forc': report true force 'stif': report true force and stiffness 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure DMGRESP stands for the following data object(s) for each ACTION: DMGRESP = DMGDATA for action = 'chec' DMGRESP = DMGSTATE for action = 'init' DMGRESP = DMGSTATE for action = 'stif' DMGRESP = DMGSTATE for action = 'forc' DMGRESP = DMGPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DMGDATA is a data structure with damage parameter information; it has the fields dFun = damage evolution function ( default = MBeta ) DOpt = 'total' (for total energy) or 'plastic' for plastic energy dissipation dp = damage rule parameters (nx2, first column for +ve, second for -ve; n depends on the damage rule, for statistical functions n=2, default ones(2) ) Cd0 = scale factor of yield energy for damage threshold ( 1x2, default [ 1 1 ] ) Cd1 = scale factor of yield energy for complete damage ( 1x2, default [ 100 100 ] ) Cwc = influence factor for repeat cycles (0=none to 1=full)( 1x2, default [ 0 0 ] ) Ccd = damage coupling for opposite stress (0=none to 1=full)( 1x2, default [ 1 1 ] ) psi_d0 = enery dissipation value at initiation of damage psi_d1 = enery dissipation value at completion of damage Frac = false or true for fracture inclusion (default=false) psiF = if Frac is true, energy at fracture initiation ( 1x2 ) psiU = if Frac is true, energy at fracture completion ( 1x2 ) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DMGSTATE is a data structure with the current damage state; it has the fields e = total deformation De = deformation increment from last convergence se = effective force (from effective force-deformation relation) ep = plastic deformation (if available from effective force-deformation relation) epP = plastic deformation at last convergence s = true force; updated under ACTION = 'stif' k = true stiffness; updated under ACTION = 'stif' or 'forc' Past = damage history variables at last converged state Pres = current damage history variables the history variables of the damage evolution model are d = damage indices ( 1x2)( +ve -ve ) psi = energy dissipation ( 1x2 ) se = last effective force value (scalar) eEx = extreme strain values ( 1x2 ) psiEx = extreme energy dissipation values ( 1x2 ) Cross-Reference Information This function calls: DmgLib value and slope of damage evolution function FNAME This function is called by: Gen1dMatwDmg 1d material with damage evolution of any effective stress-strain relation","title":"DmgEvow1pnd"},{"location":"Functions/latest/Material_Library/DmgEvow2pnd/","text":"Material_Library > DmgEvow2pnd DmgEvow2pnd Purpose damage model with two positive and two negative damage indices with interaction Synopsis DmgResp = DmgEvow2pnd ( action , DmgData , DmgState ) Description DMGEVOw2PND damage model with two positive and two negative damage indices with interaction Cross-Reference Information This function calls: DmgLib value and slope of damage evolution function FNAME This function is called by:","title":"DmgEvow2pnd"},{"location":"Functions/latest/Material_Library/DmgLib/","text":"Material_Library > DmgLib DmgLib Purpose value and slope of damage evolution function FNAME Synopsis y = DmgLib ( Fname ) Description DMGLIB value and slope of damage evolution function FNAME the function returns the value and slope of the damage evolution function FNAME; the library contains the following normalized functions for damage evolution None : no damage MBeta : modified beta cumulative distribution with the following parameter relation a = dp(2), b = dp(1)*dp(2) for dp(1)>1 and a = dp(2)/dp(1), b=dp(2) otherwise OBeta : beta cumulative distribution with parameters dp(1) and dp(2) Wbl : Weibull cumulative distribution with parameters dp(1) and dp(2) Logn : lognormal cumulative distribution with parameters dp(1) and dp(2) Bilin : bilinear function with parameters dp(1)-dp(3) Trilin: trilinear function with parameters dp(1)-dp(5) Cross-Reference Information This function calls: This function is called by: DmgEvow1pnd damage model with one positive and one negative damage index DmgEvow2pnd damage model with two positive and two negative damage indices with interaction","title":"DmgLib"},{"location":"Functions/latest/Material_Library/SubIncr4MatSD/","text":"Material_Library > SubIncr4MatSD SubIncr4MatSD Purpose material strain increment subdivision for state determination Synopsis MatState = SubIncr4MatSD ( MatName , action , MatNo , MatData , MatState ) Description SUBINCR4MATSD material strain increment subdivision for state determination MATSTATE = SUBINCR4MATSD (MatName,action,MatNo,MatData,MatState) the function calls the state determination function for an iterative material with possible subdivision of the strain increment depending on CONVFLAG in MATSTATE; the number of step subdivisions SUBDIVNO is defined in MATDATA Cross-Reference Information This function calls: This function is called by:","title":"SubIncr4MatSD"},{"location":"Functions/latest/Material_Library/1dMaterials/","text":"1dMaterials BilinElastic1dMat uniaxial stress-strain relation for a bilinear elastic material BilinHyst1dMat bilinear hysteretic force-deformation relation with pinching BilinInel1dMat uniaxial stress-strain relation for bilinear inelastic material BilinOrOr1dMat uniaxial stress-strain relation for bilinear origin-oriented material BilinPkOr1dMat uniaxial stress-strain relation for bilinear origin-oriented material BoucWen1dMat Bouc-Wen-Baber hysteretic-degrading material Concrete021dMat uniaxial Kent-Scott-Park concrete material object with degraded linear unloading/reloading FrictionGap1dMat friction gap 1d model defined as a piecewise function with FrictionSlipLock1dMat friction gap 1d model defined as a piecewise function with GMP1dMat uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material Gen1dMatwDmg 1d material with damage evolution of any effective stress-strain relation InelDPwLH1dMat inelastic linear-plastic 1d Drucker-Prager model with linear kinematic and isotropic hardening InelGP1dMat inelastic generalized plasticity 1d material model InelLPwLH1dMat inelastic linear-plastic 1d model with linear kinematic and isotropic hardening InelParall1dMat 1d parallel model of several inelastic materials InelSeries1dMat 1d series model of several inelastic materials InelSerieswFriction1dMat 1d series model of several inelastic materials with friction control LE1dMat uniaxial stress-strain relation for a linear elastic material ManderConcr1dMat hysteretic concrete stress-strain relation after Mander ManderConcrwLTS1dMat hysteretic concrete stress-strain relation after Mander with linear tension stiffening Steel021dMat inelastic linear-plastic 1d model with linear isotropic TrilinHyst1dMat trilinear hysteretic force-deformation relation with pinching Other files in this directory BilinHyst1dMat.p BoucWen1dMat.p Concrete021dMat.p FrictionGap1dMat.p FrictionSlipLock1dMat.p GMP1dMat.p InelDPwLH1dMat.p InelGP1dMat.p InelParall1dMat.p InelSeries1dMat.p InelSerieswFriction1dMat.p Steel021dMat.p TrilinHyst1dMat.p","title":"1dMaterials"},{"location":"Functions/latest/Material_Library/1dMaterials/BilinElastic1dMat/","text":"Material_Library > 1dMaterials > BilinElastic1dMat BilinElastic1dMat Purpose uniaxial stress-strain relation for a bilinear elastic material Synopsis MatResp = BilinElastic1dMat ( action , MatNo , MatData , MatState ) Description BILINELASTIC1dMAT uniaxial stress-strain relation for a bilinear elastic material MATRESP = BILINELASTIC1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for a bilinear elastic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Eh = post-yield modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BilinElastic1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/BilinHyst1dMat/","text":"Material_Library > 1dMaterials > BilinHyst1dMat BilinHyst1dMat Purpose bilinear hysteretic force-deformation relation with pinching Synopsis MatResp = BilinHyst1dMat ( action , MatNo , MatData , MatState ) Description BILINHYST1dMAT bilinear hysteretic force-deformation relation with pinching MATRESP = BILINHYST1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function for bilinear hysteretic force-deformation relation with pinching ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields sig1p = positive stress at first transition eps1p = positive strain at first transition sig2p = ultimate positive stress eps2p = ultimate positive strain sig1n = negative stress at first transition eps1n = negative strain at first transition sig2n = ultimate negative stress eps2n = ultimate negative strain pnchx(+ve ; -ve) = x-pinching parameters under +ve and -ve deformation pnchy(+ve ; -ve) = y-pinching parameters under +ve and -ve deformation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BilinHyst1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/BilinInel1dMat/","text":"Material_Library > 1dMaterials > BilinInel1dMat BilinInel1dMat Purpose uniaxial stress-strain relation for bilinear inelastic material Synopsis MatResp = BilinInel1dMat ( action , MatNo , MatData , MatState ) Description BILININEL1dMAT uniaxial stress-strain relation for bilinear inelastic material MATRESP = BILININEL1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for bilinear inelastic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Eh = post-yield modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BilinInel1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/BilinOrOr1dMat/","text":"Material_Library > 1dMaterials > BilinOrOr1dMat BilinOrOr1dMat Purpose uniaxial stress-strain relation for bilinear origin-oriented material Synopsis MatResp = BilinOrOr1dMat ( action , MatNo , MatData , MatState ) Description BILINOROR1dMAT uniaxial stress-strain relation for bilinear origin-oriented material MATRESP = BILINOROR1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for bilinear origin-oriented material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'data' function prints material properties in output file IOW 'hist' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for action = 'data' and for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Eh = post-yield modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BilinOrOr1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/BilinPkOr1dMat/","text":"Material_Library > 1dMaterials > BilinPkOr1dMat BilinPkOr1dMat Purpose uniaxial stress-strain relation for bilinear origin-oriented material Synopsis MatResp = BilinPkOr1dMat ( action , MatNo , MatData , MatState ) Description BILINPKOR1dMAT uniaxial stress-strain relation for bilinear origin-oriented material MATRESP = BILINPKOR1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for bilinear origin-oriented material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'data' function prints material properties in output file IOW 'hist' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for action = 'data' and for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Eh = post-yield modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BilinPkOr1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/BoucWen1dMat/","text":"Material_Library > 1dMaterials > BoucWen1dMat BoucWen1dMat Purpose Bouc-Wen-Baber hysteretic-degrading material Synopsis MatResp = BoucWen1dMat ( action , Mat_no , MatData , MatState ) Description BOUCWEN1dMAT Bouc-Wen-Baber hysteretic-degrading material MATRESP = BOUCWEN1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function for Bouc-Wen-Baber hysteretic-degrading material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material MatState in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged MatState Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields alp(ha) = hardening ratio bet(a) = controls hysteretic capacity gam(ma) = controls pinching .del(ta) = controls difference in positive and negative strength .E = initial modulus .m = exponent of transition from elastic to plastic .eta0 = initial yield strain .lam_eta = controls stiffness degradation .A0 = default to 1 .lam_A = controls both stiffness and strength degradation .nu0 = default to 1 .lam_nu = controls strength degradation Material History Variables q : hysteretic variable w : hysteretic work (parameter's degradation are proportional to this work) sig : stress (only for postprocessing purposes) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for MatPost-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"BoucWen1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/Concrete021dMat/","text":"Material_Library > 1dMaterials > Concrete021dMat Concrete021dMat Purpose uniaxial Kent-Scott-Park concrete material object with degraded linear unloading/reloading Synopsis MatResp = Concrete021dMat ( action , MatNo , MatData , MatState ) Description Concrete021dMAT uniaxial Kent-Scott-Park concrete material object with degraded linear unloading/reloading stiffness according to the work of Mohd Hisham Mohd Yassin and linear tension softening. A translation of the OpenSees model Concrete02. MATRESP = Concrete021dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): ecmin = Smallest previous concrete strain (compression) dept = Historical variable km eps sig ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields fc = Compressive strength epc0 = Strain at compressive strength fcu = Crushing strength epcu = Strain at crushing strength lambda = Ratio between unloading slope at epscu and original slope ft = Concrete tensile strength Ets = Tension softening slope (absolute value) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"Concrete021dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/FrictionGap1dMat/","text":"Material_Library > 1dMaterials > FrictionGap1dMat FrictionGap1dMat Purpose friction gap 1d model defined as a piecewise function with Synopsis MatResp = FrictionGap1dMat ( action , MatNo , MatData , MatState ) Description FRICTIONGAP1dMAT friction gap 1d model defined as a piecewise function with any constituent material response inside friction limits and linear elastic response outside MATRESP = FRICTIONGAP1dMAT (ACTION,MAT_NO,MATDATA,MatState) the function determines the current material state under total strain EPSI for a linear elastic model when epsi is outside friction strain limits, and the response for the constituent basic material inside those limits. History variables of the constituent basic material are stored in MatState.Pres.CMat. Friction limit in terms of total strain is defined, fricx. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): Pgap = maximum friction limit Ngap = minimum friction limit ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial elastic modulus fy = friction stress Mgap = gap magnification factor Pgap = initial positive gap Ngap = initial negative gap ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: InelLPwLH1dMat inelastic linear-plastic 1d model with linear kinematic and isotropic hardening This function is called by:","title":"FrictionGap1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/FrictionSlipLock1dMat/","text":"Material_Library > 1dMaterials > FrictionSlipLock1dMat FrictionSlipLock1dMat Purpose friction gap 1d model defined as a piecewise function with Synopsis MatResp = FrictionSlipLock1dMat ( action , MatNo , MatData , MatState ) Description FRICTIONSLIPLOCK1dMAT friction gap 1d model defined as a piecewise function with any constituent material response inside friction limits and linear elastic response outside MATRESP = FRICTIONSLIPLOCK1dMAT (ACTION,MAT_NO,MATDATA,MatState) the function determines the current material state under total strain EPSI for a linear elastic model when epsi is outside friction strain limits, and the response for the constituent basic material inside those limits. History variables of the constituent basic material are stored in MatState.Pres.CMat. Friction limit in terms of total strain is defined, fricx. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): Pgap = maximum friction limit Ngap = minimum friction limit epsmax = maximum absolute total strain attained so far epsmin = minimum absolute total strain attained so far CMat = history variables of the constituent basic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields Pgap = initial positive gap Ngap = initial negative gap Mgap = gap evolution factor ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"FrictionSlipLock1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/GMP1dMat/","text":"Material_Library > 1dMaterials > GMP1dMat GMP1dMat Purpose uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material Synopsis MatResp = GMP1dMat ( action , MatNo , MatData , MatState ) Description GMP1DMAT uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material MATRESP = GMP1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Giuffre-Menegotto-Pinto hysteretic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields E = initial modulus fy = row vector with positive and negative yield strength (default = equal fy) b = strain hardening ratio (can also specify hardening modulus Eh for b = Eh/E) R0 = exp transition elastic-plastic (default value 20) cR1 = coefficient for variation of R0 (default value 0.925) cR2 = coefficient for variation of R0 (default value 0.15) a1 = isotropic hardening (IH) coefficient in compression (default value 0) a2 = trigger strain ductility for IH in compression (default value 0) a3 = isotropic hardening (IH) coefficient in tension (default value 0) a4 = trigger strain ductility for IH in tension (default value 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"GMP1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/Gen1dMatwDmg/","text":"Material_Library > 1dMaterials > Gen1dMatwDmg Gen1dMatwDmg Purpose 1d material with damage evolution of any effective stress-strain relation Synopsis MatResp = Gen1dMatwDmg ( action , MatNo , MatData , MatState ) Description GEN1dMATwDAMG 1d material with damage evolution of any effective stress-strain relation MATRESP = GEN1dMATwDMG (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for a 1d model with damage evolution of any effective stress-strain relation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields BMatName = function for effective stress-strain relation (consult function help) Eny(1:2) = yield energy dissipation ([ +ve -ve ]) epsy(1:2) = yield strain ([ +ve -ve ]) Dmg = data structure with damage variables (consult function DmgEvow1pnd) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress eps_p = plastic strain (if available) d = damage index ( [ +ve -ve ] ) Etd = tangent modulus of true stress-strain relation Cross-Reference Information This function calls: DmgEvow1pnd damage model with one positive and one negative damage index This function is called by:","title":"Gen1dMatwDmg"},{"location":"Functions/latest/Material_Library/1dMaterials/InelDPwLH1dMat/","text":"Material_Library > 1dMaterials > InelDPwLH1dMat InelDPwLH1dMat Purpose inelastic linear-plastic 1d Drucker-Prager model with linear kinematic and isotropic hardening Synopsis MatResp = InelDPwLH1dMat ( action , MatNo , MatData , MatState ) Description INELDPwLH1dMAT inelastic linear-plastic 1d Drucker-Prager model with linear kinematic and isotropic hardening MATRESP = INELLPwLH1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for an inelastic linear-plastic 1d Drucker-Prager model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Reference: JC Simo and TJR Hughes, Computational Inelasticity, pp. 43-45 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): eps_p = plastic strain alpha = isotropic hardening variable sig_b = back stress (for kinematic hardening) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Hi = isotropic plastic modulus Hk = kinematic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"InelDPwLH1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/InelGP1dMat/","text":"Material_Library > 1dMaterials > InelGP1dMat InelGP1dMat Purpose inelastic generalized plasticity 1d material model Synopsis MatResp = InelGP1dMat ( action , MatNo , MatData , MatState ) Description INELGP1dMAT inelastic generalized plasticity 1d material model MATRESP = INELGP1dMAT (ACTION,MATNO,MATDATA,MATSTATE) the function determines the stress-strain relation for a 1d material under generalized plasticity with different hardening rules Reference: Aurrichio/Taylor,International Journal of Plasticity, vol.11, pp.65-98,1995 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield stress nu = Poisson's ratio Hi = isotropic hardening modulus Hk = kinematic hardening modulus delta = speed of material approach to asymptotic behavior phi = distance between asymptotic and current radius of yield function Hnl = nonlinear kinematic hardening parameter HRule = hardening rule (Options: 'LP','GP','NLK') ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress eps_p = plastic strain Cross-Reference Information This function calls: Hardening library of hardening functions for plasticity models This function is called by:","title":"InelGP1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/InelLPwLH1dMat/","text":"Material_Library > 1dMaterials > InelLPwLH1dMat InelLPwLH1dMat Purpose inelastic linear-plastic 1d model with linear kinematic and isotropic hardening Synopsis MatResp = InelLPwLH1dMat ( action , MatNo , MatData , MatState ) Description INELLPwLH1dMAT inelastic linear-plastic 1d model with linear kinematic and isotropic hardening MATRESP = INELLPwLH1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for an inelastic linear-plastic 1d model with linear kinematic and isotropic hardening with the return map algorithm; the plastic strain EPS_P, the back stress SIG_B and the isotropic hardening variable ALPHA are the history variables of the model Reference: JC Simo and TJR Hughes, Computational Inelasticity, pp. 43-45 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): eps_p = plastic strain alpha = isotropic hardening variable sig_b = back stress (for kinematic hardening) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength Hi = isotropic plastic modulus Hk = kinematic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress eps_p = plastic strain Cross-Reference Information This function calls: This function is called by: FrictionGap1dMat friction gap 1d model defined as a piecewise function with","title":"InelLPwLH1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/InelParall1dMat/","text":"Material_Library > 1dMaterials > InelParall1dMat InelParall1dMat Purpose 1d parallel model of several inelastic materials Synopsis MatResp = InelParall1dMat ( action , MatNo , MatData , MatState ) Description INELSERIES1dMAT 1d parallel model of several inelastic materials MATRESP = INELPARALL1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for a 1d parallel model of several inelastic materials ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information 'debu' function returns data structure MATSTATE with detailed processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATSTATE for action = 'debu' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): sig = material stress Ceps = vector of component strains .Mat{m} = history variables of material component m in fields Past and Pres ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields .CMatName{m} = function name for material component m .CMatData{m} = properties for material component m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Ceps = vector of component strains Csig = vector of component stresses Cross-Reference Information This function calls: This function is called by:","title":"InelParall1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/InelSeries1dMat/","text":"Material_Library > 1dMaterials > InelSeries1dMat InelSeries1dMat Purpose 1d series model of several inelastic materials Synopsis MatResp = InelSeries1dMat ( action , MatNo , MatData , MatState ) Description INELSERIES1dMAT 1d series model of several inelastic materials MATRESP = INELSERIES1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for a 1d series model of several inelastic materials ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information 'debu' function returns data structure MATSTATE with detailed processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATSTATE for action = 'debu' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): sig = material stress Ceps = vector of component strains .Mat{m} = history variables of material component m in fields Past and Pres ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields MaxIter = maximum number of iterations for material state determination Tol = tolerance for compatibility relation .CMatName{m} = function name for material component m .CMatData{m} = properties for material component m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Ceps = vector of component strains Cross-Reference Information This function calls: This function is called by:","title":"InelSeries1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/InelSerieswFriction1dMat/","text":"Material_Library > 1dMaterials > InelSerieswFriction1dMat InelSerieswFriction1dMat Purpose 1d series model of several inelastic materials with friction control Synopsis MatResp = InelSerieswFriction1dMat ( action , MatNo , MatData , MatState ) Description INELSERIESwFRICTION1dMAT 1d series model of several inelastic materials with friction control MATRESP = INELSERIESwFRICTION1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the current material state under total strain EPSI for a 1d series model of several inelastic materials with friction control ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information 'debu' function returns data structure MATSTATE with detailed processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATSTATE for action = 'debu' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): sig = material stress Ceps = vector of component strains .Mat{m} = history variables of material component m in fields Past and Pres ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields MaxIter = maximum number of iterations for material state determination Tol = tolerance for compatibility relation .CMatName{m} = function name for material component m .CMatData{m} = properties for material component m .FMatName{m} = function name for friction material component m .FMatData{m} = properties for friction material component m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Ceps = vector of component strains Cross-Reference Information This function calls: This function is called by:","title":"InelSerieswFriction1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/LE1dMat/","text":"Material_Library > 1dMaterials > LE1dMat LE1dMat Purpose uniaxial stress-strain relation for a linear elastic material Synopsis MatResp = LE1dMat ( action , MatNo , MatData , MatState ) Description LE1dMAT uniaxial stress-strain relation for a linear elastic material MATRESP = LE1dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for a linear elastic material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"LE1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/ManderConcr1dMat/","text":"Material_Library > 1dMaterials > ManderConcr1dMat ManderConcr1dMat Purpose hysteretic concrete stress-strain relation after Mander Synopsis MatResp = ManderConcr1dMat ( action , MatNo , MatData , MatState ) Description MANDERCONCR1DMAT hysteretic concrete stress-strain relation after Mander MATRESP = MANDERCONCR1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Mander material model ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields fc = compressive strength for unconfined concrete epc0 = strain at compressive strength for unconfined concrete Ec = initial modulus for unconfined concrete Kfc = ratio of confined to unconfined concrete strength ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"ManderConcr1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/ManderConcrwLTS1dMat/","text":"Material_Library > 1dMaterials > ManderConcrwLTS1dMat ManderConcrwLTS1dMat Purpose hysteretic concrete stress-strain relation after Mander with linear tension stiffening Synopsis MatResp = ManderConcrwLTS1dMat ( action , MatNo , MatData , MatState ) Description MANDERCONCR1DMAT hysteretic concrete stress-strain relation after Mander with linear tension stiffening MATRESP = MANDERCONCR1DMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the uniaxial stress-strain relation for Mander material model with linear tension stiffening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields fc = compressive strength for unconfined concrete epc0 = strain at compressive strength for unconfined concrete Ec = initial modulus for unconfined concrete Kfc = ratio of confined to unconfined concrete strength ft = tensile strength for concrete Ets = tension stiffening modulus (absolute value) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"ManderConcrwLTS1dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/Steel021dMat/","text":"Material_Library > 1dMaterials > Steel021dMat Steel021dMat Purpose inelastic linear-plastic 1d model with linear isotropic Synopsis MatResp = Steel021dMat ( action , MatNo , MatData , MatState ) Description Steel021dMAT inelastic linear-plastic 1d model with linear isotropic hardening. A translation of the OpenSees model Steel02. MATRESP = Steel012dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Past and Pres contain the following history variable(s): epsmin = Minimum strain in compression epsmax = Maximum strain in tension epsp1 = plastic excursion epss0 = eps at asymptotes intersection sigs0 = sig at asymptotes intersection; epssr = eps at last inversion point sigsr = sig at last inversion point kon = index for loading/unloading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E0 = initial modulus fy = yield strength b = strain-hardening ratio ( =Eh/E) a1 = isotropic hardening parameter in compression, increase of compression yield envelope as proportion of yield strength after a plastic strain of $a2*($Fy/E0). (optional) a2 = isotropic hardening parameter in compression (see explanation under $a1). (optional). a3 = isotropic hardening parameter in tension, increase of tension yield envelope as proportion of yield strength after a plastic strain of $a4*($Fy/E0). (optional) a4 = isotropic hardening parameter in tension (see explanation under $a3). (optional) R0 = exp transition elastic-plastic cR1 = coefficient for changing R0 to R cR2 = coefficient for changing R0 to R ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"Steel021dMat"},{"location":"Functions/latest/Material_Library/1dMaterials/TrilinHyst1dMat/","text":"Material_Library > 1dMaterials > TrilinHyst1dMat TrilinHyst1dMat Purpose trilinear hysteretic force-deformation relation with pinching Synopsis MatResp = TrilinHyst1dMat ( action , MatNo , MatData , MatState ) Description TRILINHYST1dMAT trilinear hysteretic force-deformation relation with pinching MATRESP = TRILINHYST1dMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function for trilinear hysteretic force-deformation relation with pinching ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material tangent modulus; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information in fields sig1p = positive moment at first transition eps1p = positive strain at first transition sig2p = positive moment at second transition eps2p = positive strain at second transition sig3p = ultimate positive moment eps3p = ultimate positive strain sig1n = negative moment at first transition eps1n = negative strain at first transition sig2n = negative moment at second transition eps2n = negative strain at second transition sig3n = ultimate negative moment eps3n = ultimate negative strain pnchx(+ve ; -ve) = x-pinching parameters under +ve and -ve deformation pnchy(+ve ; -ve) = y-pinching parameters under +ve and -ve deformation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = uniaxial stress Cross-Reference Information This function calls: This function is called by:","title":"TrilinHyst1dMat"},{"location":"Functions/latest/Material_Library/2dMaterials/","text":"2dMaterials InelJ2PwLH2dMat inelastic 2d material with J2 plasticity under linear kinematic and isotropic hardening InelJ2PwLHPlnStrs2dMat inelastic 2d material with J2 plasticity and linear hardening under plane stress InelPlnStrs2dMat inelastic material under plane stress in x-y LEIso2dMat linear elastic, isotropic 2d material model under general plane stress or strain conditions LESOrth2dMat linear elastic, isotropic 2d material model under general plane stress or strain conditions","title":"2dMaterials"},{"location":"Functions/latest/Material_Library/2dMaterials/InelJ2PwLH2dMat/","text":"Material_Library > 2dMaterials > InelJ2PwLH2dMat InelJ2PwLH2dMat Purpose inelastic 2d material with J2 plasticity under linear kinematic and isotropic hardening Synopsis MatResp = InelJ2PwLH2dMat ( action , MatNo , MatData , MatState ) Description INELJ2PwLH2DMAT inelastic 2d material with J2 plasticity under linear kinematic and isotropic hardening MATRESP = INELJ2PwLH2DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 2d material with J2 plasticity under linear kinematic and isotropic hardening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio Hi = isotropic hardening modulus Hk = kinematic hardening modulus Case = 'stress' for plane stress, 'strain' for plane strain, or 'general'(empty) irs = stress components to be retained for the general Case tol = tolerance value for stress condensation maxiter = maximum number of iterations for for stress condensation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain(4x1) sig = stress(4x1) eps_p = plastic strain(4x1) Cross-Reference Information This function calls: Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom InelJ2PwLH3dMat inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening This function is called by:","title":"InelJ2PwLH2dMat"},{"location":"Functions/latest/Material_Library/2dMaterials/InelJ2PwLHPlnStrs2dMat/","text":"Material_Library > 2dMaterials > InelJ2PwLHPlnStrs2dMat InelJ2PwLHPlnStrs2dMat Purpose inelastic 2d material with J2 plasticity and linear hardening under plane stress Synopsis MatResp = InelJ2PwLHPlnStrs2dMat ( action , MatNo , MatData , MatState ) Description INELJ2PwLHPLNSTRS2DMAT inelastic 2d material with J2 plasticity and linear hardening under plane stress MATRESP = INELJ2PwLHPLNSTRS2DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for inelastic 2d material with J2 yield surface and isotropic and kinematic hardening under general plane stress conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'data' function prints material properties in output file IOW 'hist' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for action = 'data' and for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 4x1 vector form in the order 11, 22, 33, 12 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 4x1 vector form in the order 11, 22, 33, 12 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 4x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio Hi = isotropic hardening modulus Hk = kinematic hardening modulus irs = stress components to be retained MatTol = tolerance value for stress condensation maxiter = maximum number of iterations for for stress condensation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig = stress tensor in 4x1 vector form in the order 11, 22, 33, 12 eps_p = plastic strain tensor in 4x1 vector form in the order 11, 22, 33, 12 Cross-Reference Information This function calls: InelJ2PwLH3dMat inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Condense_k condense matrix K to a reduced set idr of dofs by condensing out dofs idc This function is called by:","title":"InelJ2PwLHPlnStrs2dMat"},{"location":"Functions/latest/Material_Library/2dMaterials/InelPlnStrs2dMat/","text":"Material_Library > 2dMaterials > InelPlnStrs2dMat InelPlnStrs2dMat Purpose inelastic material under plane stress in x-y Synopsis MatResp = InelPlnStrs2dMat ( action , MatNo , MatData , MatState ) Description INELPLNSTRS2dMAT inelastic material under plane stress in x-y MATRESP = INELPLNSTRS2dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the stress-strain relation of a 3d material model under plane stress conditions in x-y ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = stress (nrx1) Cross-Reference Information This function calls: Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom This function is called by:","title":"InelPlnStrs2dMat"},{"location":"Functions/latest/Material_Library/2dMaterials/LEIso2dMat/","text":"Material_Library > 2dMaterials > LEIso2dMat LEIso2dMat Purpose linear elastic, isotropic 2d material model under general plane stress or strain conditions Synopsis MatResp = LEIso2dMat ( action , MatNo , MatData , MatState ) Description LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions MATRESP = LEISO2dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the response of a linear elastic, isotropic material under general plane stress or strain conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 4x1 vector form in the order 11, 22, 33, 12 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 4x1 vector form in the order 11, 22, 33, 12 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 4x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus nu = Poisson ratio eps0 = initial strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig0 = initial stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Case = 'stress' or 'strain' irs = stress or strain components to be retained depending on Case ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig = stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Cross-Reference Information This function calls: Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom This function is called by:","title":"LEIso2dMat"},{"location":"Functions/latest/Material_Library/2dMaterials/LESOrth2dMat/","text":"Material_Library > 2dMaterials > LESOrth2dMat LESOrth2dMat Purpose linear elastic, isotropic 2d material model under general plane stress or strain conditions Synopsis MatResp = LESOrth2dMat ( action , MatNo , MatData , MatState ) Description LEISO2dMAT linear elastic, isotropic 2d material model under general plane stress or strain conditions MATRESP = LEISO2dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the response of a linear elastic, isotropic material under general plane stress or strain conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 4x1 vector form in the order 11, 22, 33, 12 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 4x1 vector form in the order 11, 22, 33, 12 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 4x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus nu = Poisson ratio eps0 = initial strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig0 = initial stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Case = 'stress' or 'strain' irs = stress or strain components to be retained depending on Case ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 4x1 vector form in the order 11, 22, 33, 12 sig = stress tensor in 4x1 vector form in the order 11, 22, 33, 12 Cross-Reference Information This function calls: This function is called by:","title":"LESOrth2dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/","text":"3dMaterials GenDiagNdMat GENDIAGNDMAT Hardening library of hardening functions for plasticity models Inel3dMatwConstr 3d inelastic material under stress constraints (condensation) InelDPwCapwLH3dMat inelastic 3d material model with Drucker-Prager plasticity with tension cutoff InelDPwLH3dMat inelastic 3d material model with Drucker-Prager plasticity and kinematic and isotropic hardening InelGJ2P3dMat 3d generalized J2 plasticity material model InelGJ2PStrConstr3dMat 3d general plasticity J2 material under constrained stress state InelJ2PwLH3dMat inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening InelJ2PwLH3dto1dMat inelastic 1d response of J2 plastic material with linear kinematic and isotropic hardening InelJ2PwLHStrConstr3dMat inelastic 3d material with J2 plasticity and linear hardening under stress constraints InelRe3dMatwConstr 3d inelastic material with smeared reinforcement under stress constraints LEIso3dMat linear elastic, isotropic 3d material model LEIsoConstr3dMat linear elastic, isotropic 3d material model with stress or strain constraints Mazars3dConcrete MAZARS3dCONCRETE OneParamPlastDamg3dMat 3d generalized damage plasticity material model Vec2Tensor transforms vector to tensor and vice versa Other files in this directory Mazars3dConcrete.p OneParamPlastDamg3dMat.p","title":"3dMaterials"},{"location":"Functions/latest/Material_Library/3dMaterials/GenDiagNdMat/","text":"Material_Library > 3dMaterials > GenDiagNdMat GenDiagNdMat Purpose GENDIAGNDMAT Synopsis MatResp = GenDiagNdMat ( action , MatNo , MatData , MatState ) Description GENDIAGNDMAT MATRESP = GENDIAGNDMAT (ACTION,MAT_NO,MATDATA,MATSTATE) Function determines the stress-strain relation for a general Nd material model defined assembly a series of defined material model; each material model is decoupled from the others. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for action = 'data' and for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Nx1 vector Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate Nx1 vector km = material stiffness matrix; returned under ACTION = 'stif' sig = stress Nx1 vector; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables The stiffness matrix and the stress vector are organized in this way: [km_1 0 0 ... 0] [sig_1] [ 0 km_2 0 ... 0] [sig_2] km = [ 0 0 km_3 ... 0] sig = [sig_3] [ ... ... ... ... ...] [ ... ] [ 0 0 0 ... km_M] [sig_M] where M is the number of material model used to compone the global one. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA contains the field \"Mat\". This is a 1xM cell array data structures with material property information; each cell MAT{i} contains the fields required for the specific material model to add to the global one ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST contains the field \"Mat\". This is a 1xM cell array data. This is a 1xM cell array data structures with material response information for post-processing; each cell MAT{i} contains the fields provided by the specific material model added to the global one Cross-Reference Information This function calls: This function is called by:","title":"GenDiagNdMat"},{"location":"Functions/latest/Material_Library/3dMaterials/Hardening/","text":"Material_Library > 3dMaterials > Hardening Hardening Purpose library of hardening functions for plasticity models Synopsis y = Hardening ( Fname ) Description HARDENING library of hardening functions for plasticity models Cross-Reference Information This function calls: This function is called by: InelGP1dMat inelastic generalized plasticity 1d material model InelGJ2P3dMat 3d generalized J2 plasticity material model OneParamPlastDamg3dMat 3d generalized damage plasticity material model","title":"Hardening"},{"location":"Functions/latest/Material_Library/3dMaterials/Inel3dMatwConstr/","text":"Material_Library > 3dMaterials > Inel3dMatwConstr Inel3dMatwConstr Purpose 3d inelastic material under stress constraints (condensation) Synopsis MatResp = Inel3dMatwConstr ( action , MatNo , MatData , MatState ) Description INEL3DMATwCONSTR 3d inelastic material under stress constraints (condensation) MATRESP = INEL3DMATwCONSTR (ACTION,MATNO,MATDATA,MATSTATE) the function determines the stress-strain relation for any inelastic 3d material under stress constraints (condensation); MATNO is an integer counter for identification ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in MATRESP: ACTION = 'chec': check material property data for omissions and assign default values 'init': initialize material history variables 'forc': report material stress(es) 'stif': report material stiffness matrix and stress(es) 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure MATRESP stands for the following data object(s) for each ACTION: MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with section property information; it has the fields Mat3dName = name for 3d material function ir = stress components to retain (default = 1 2 4 5 6) ic = stress components to condense (default = 3 for zz) Wrtol = relative work tolerance for stress constraints (default = 10-20) Satol = absolute stress norm tolerance stress constraints (default = 10-6) maxiter = maximum number of iterations for satisfying stress constraints ConvFlag = convergence flag for constraint iterations (true/false) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state; it has the following fields: eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with section response information for post-processing; it has the following fields: eps = total strain sig = stress (6x1) Cross-Reference Information This function calls: Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom Condense_k condense matrix K to a reduced set idr of dofs by condensing out dofs idc This function is called by:","title":"Inel3dMatwConstr"},{"location":"Functions/latest/Material_Library/3dMaterials/InelDPwCapwLH3dMat/","text":"Material_Library > 3dMaterials > InelDPwCapwLH3dMat InelDPwCapwLH3dMat Purpose inelastic 3d material model with Drucker-Prager plasticity with tension cutoff Synopsis MatResp = InelDPwCapwLH3dMat ( action , MatNo , MatData , MatState ) Description InelDPwCapwH3dMat inelastic 3d material model with Drucker-Prager plasticity with tension cutoff and kinematic and isotropic hardening MATRESP = INELDPwCapwH3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material model based on Drucker-Prager plasticity with isotropic and kinematic hardening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'data' function prints material properties in output file IOW 'hist' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for action = 'data' and for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus nu = Poisson ratio ft = tensile strength fc = compressive strength r = frictional strength parameter rb = plastic volume change parameter Hi = isotropic hardening modulus Hk = kinematic hardening modulus Hp = hardening modulus of cutoff plateau fp = cap pressure of cutoff plateau Note: tension cutoff feature can be switched off by specifying a large fp, which is the default ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: This function is called by:","title":"InelDPwCapwLH3dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/InelDPwLH3dMat/","text":"Material_Library > 3dMaterials > InelDPwLH3dMat InelDPwLH3dMat Purpose inelastic 3d material model with Drucker-Prager plasticity and kinematic and isotropic hardening Synopsis MatResp = InelDPwLH3dMat ( action , MatNo , MatData , MatState ) Description INELDPwLH3DMAT inelastic 3d material model with Drucker-Prager plasticity and kinematic and isotropic hardening MATRESP = INELDPwLH3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) the function determines the stress-strain relation for an inelastic 3d material model based on Drucker-Prager plasticity with isotropic and kinematic hardening; MATNO is an integer counter for identification ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in MATRESP: ACTION = 'chec': check material property data for omissions and assign default values 'init': initialize material history variables 'forc': report material stress(es) 'stif': report material stiffness matrix and stress(es) 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure MATRESP stands for the following data object(s) for each ACTION: MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus nu = Poisson ratio ft = tensile strength fc = compressive strength r = frictional strength parameter rb = plastic volume change parameter Hk = kinematic hardening modulus Hi = isotropic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: This function is called by:","title":"InelDPwLH3dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/InelGJ2P3dMat/","text":"Material_Library > 3dMaterials > InelGJ2P3dMat InelGJ2P3dMat Purpose 3d generalized J2 plasticity material model Synopsis MatResp = InelGJ2P3dMat ( action , MatNo , MatData , MatState ) Description INELGJ2P3dMAT 3d generalized J2 plasticity material model MATRESP = INELGJ2P3dMAT (ACTION,MATNO,MATDATA,MATSTATE) the function determines the stress-strain relation for 3d material under different hardening rules for J2 yield surface with isotropic and kinematic hardening Reference: Aurrichio/Taylor,International Journal of Plasticity, vol.11, pp.65-98,1995 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield stress nu = Poisson's ratio Hi = isotropic hardening modulus Hk = kinematic hardening modulus delta = measures the speed of the material approaching the asymptotic behavior phi = a scalar measure of the distance between the asymptotic and the current radius of the yield function Hnl = nonlinear kinematic hardening parameter HRule = hardening rule (Options: 'LP','GP','NLK') ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: Hardening library of hardening functions for plasticity models This function is called by: InelGJ2PStrConstr3dMat 3d general plasticity J2 material under constrained stress state","title":"InelGJ2P3dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/InelGJ2PStrConstr3dMat/","text":"Material_Library > 3dMaterials > InelGJ2PStrConstr3dMat InelGJ2PStrConstr3dMat Purpose 3d general plasticity J2 material under constrained stress state Synopsis MatResp = InelGJ2PStrConstr3dMat ( action , MatNo , MatData , MatState ) Description INELGJ2PCONSTR3DMAT 3d general plasticity J2 material under constrained stress state MATRESP = INELGJ2PCONSTR3DMAT (ACTION,MATNO,MATDATA,MATSTATE) the function determines the stress-strain relation for 3d material under different hardening rules for J2 yield surface with isotropic and kinematic hardening under specified constrained 3d stress state Reference: Aurrichio/Taylor,International Journal of Plasticity, vol.11, pp.65-98,1995 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for action = 'data' and for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio Hi = isotropic hardening modulus Hk = kinematic hardening modulus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = total strain sig = stress (6x1) Cross-Reference Information This function calls: InelGJ2P3dMat 3d generalized J2 plasticity material model Condense_k condense matrix K to a reduced set idr of dofs by condensing out dofs idc This function is called by:","title":"InelGJ2PStrConstr3dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/InelJ2PwLH3dMat/","text":"Material_Library > 3dMaterials > InelJ2PwLH3dMat InelJ2PwLH3dMat Purpose inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Synopsis MatResp = InelJ2PwLH3dMat ( action , MatNo , MatData , MatState ) Description INELJ2PwLH3DMAT inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening MATRESP = INELJ2PwLH3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material model based on J2 plasticity with isotropic and kinematic hardening ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio (default = 0) Hk = kinematic hardening modulus (default = 0) Hi = isotropic hardening modulus (default = 0) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: This function is called by: InelJ2PwLH2dMat inelastic 2d material with J2 plasticity under linear kinematic and isotropic hardening InelJ2PwLHPlnStrs2dMat inelastic 2d material with J2 plasticity and linear hardening under plane stress InelJ2PwLHStrConstr3dMat inelastic 3d material with J2 plasticity and linear hardening under stress constraints","title":"InelJ2PwLH3dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/InelJ2PwLH3dto1dMat/","text":"Material_Library > 3dMaterials > InelJ2PwLH3dto1dMat InelJ2PwLH3dto1dMat Purpose inelastic 1d response of J2 plastic material with linear kinematic and isotropic hardening Synopsis MatResp = InelJ2PwLH3dto1dMat ( action , MatNo , MatData , MatState ) Description INELJ2PwLH3to1DMAT inelastic 1d response of J2 plastic material with linear kinematic and isotropic hardening MATRESP = INELJ2PwLH3to1DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the 1d stress-strain response of a 3d material model based on J2 plasticity with isotropic and kinematic hardening under uniaxial strain ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate km = material stiffness matrix; returned under ACTION = 'stif' sig = stress; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus nu = Poisson ratio fy = yield strength Hi = isotropic hardening modulus Hk = kinematic hardening modulus tol = tolerance value for stress condensation maxiter = maximum number of iterations for for stress condensation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain sig = stress eps_p = plastic strain Cross-Reference Information This function calls: This function is called by:","title":"InelJ2PwLH3dto1dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/InelJ2PwLHStrConstr3dMat/","text":"Material_Library > 3dMaterials > InelJ2PwLHStrConstr3dMat InelJ2PwLHStrConstr3dMat Purpose inelastic 3d material with J2 plasticity and linear hardening under stress constraints Synopsis MatResp = InelJ2PwLHStrConstr3dMat ( action , MatNo , MatData , MatState ) Description INELJ2PwLHSTRCONSTRS3DMAT inelastic 3d material with J2 plasticity and linear hardening under stress constraints MATRESP = INELJ2PwLHSTRCONSTRSS3DMAT (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material with J2 plasticity and linear kinematic and isotropic hardening under stress constraints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield strength nu = Poisson ratio Hi = isotropic hardening modulus Hk = kinematic hardening modulus irs = stress components to be retained ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: InelJ2PwLH3dMat inelastic 3d material model with J2 plasticity and linear kinematic and isotropic hardening Condense_k condense matrix K to a reduced set idr of dofs by condensing out dofs idc This function is called by:","title":"InelJ2PwLHStrConstr3dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/InelRe3dMatwConstr/","text":"Material_Library > 3dMaterials > InelRe3dMatwConstr InelRe3dMatwConstr Purpose 3d inelastic material with smeared reinforcement under stress constraints Synopsis MatResp = InelRe3dMatwConstr ( action , MatNo , MatData , MatState ) Description INELRE3DMATwCONSTR 3d inelastic material with smeared reinforcement under stress constraints MATRESP = INELRE3DMATwCONSTR (ACTION,MATNO,MATDATA,MATSTATE) the function determines the stress-strain relation for any inelastic 3d material with smeared reinforcement under stress constraints; MATNO is an integer counter for identification ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in MATRESP: ACTION = 'chec': check material property data for omissions and assign default values 'init': initialize material history variables 'forc': report material stress(es) 'stif': report material stiffness matrix and stress(es) 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure MATRESP stands for the following data object(s) for each ACTION: MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with section property information; it has the fields Mat3dName = name for 3d material function StMatName = name of material function for smeared reinforcement ir = stress components to retain (default = 1 2 4 5 6) ic = stress components to condense (default = 3 for zz) Wrtol = relative work tolerance for stress constraints (default = 10-20) Satol = absolute stress norm tolerance stress constraints (default = 10-6) maxiter = maximum number of iterations for satisfying stress constraints ConvFlag = convergence flag for constraint iterations (true/false) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state; it has the following fields: eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables Cross-Reference Information This function calls: Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom Condense_k condense matrix K to a reduced set idr of dofs by condensing out dofs idc This function is called by:","title":"InelRe3dMatwConstr"},{"location":"Functions/latest/Material_Library/3dMaterials/LEIso3dMat/","text":"Material_Library > 3dMaterials > LEIso3dMat LEIso3dMat Purpose linear elastic, isotropic 3d material model Synopsis MatResp = LEIso3dMat ( action , MatNo , MatData , MatState ) Description LEISO3dMAT linear elastic, isotropic 3d material model MATRESP = LEISO3dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the response of a linear elastic, isotropic 3d material ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus nu = Poisson ratio eps0 = initial strain tensor in vector form in the order 11, 22, 33, 12, 13, 23 sig0 = initial stress tensor in vector form in the order 11, 22, 33, 12, 13, 23 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: This function is called by:","title":"LEIso3dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/LEIsoConstr3dMat/","text":"Material_Library > 3dMaterials > LEIsoConstr3dMat LEIsoConstr3dMat Purpose linear elastic, isotropic 3d material model with stress or strain constraints Synopsis MatResp = LEIsoConstr3dMat ( action , MatNo , MatData , MatState ) Description LEISOCONSTR3dMAT linear elastic, isotropic 3d material model with stress or strain constraints MATRESP = LEISOCONSTR3dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the response of a linear elastic, isotropic 3d material model under given stress or strain constraints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = Young modulus nu = Poisson ratio eps0 = initial strain tensor in vector form in the order 11, 22, 33, 12, 13, 23 sig0 = initial stress tensor in vector form in the order 11, 22, 33, 12, 13, 23 Case = 'stress' or 'strain' irs = stress or strain components to be retained depending on Case tol = tolerance value for stress condensation maxiter = maximum number of iterations for for stress condensation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom This function is called by:","title":"LEIsoConstr3dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/Mazars3dConcrete/","text":"Material_Library > 3dMaterials > Mazars3dConcrete Mazars3dConcrete Purpose MAZARS3dCONCRETE Synopsis MatResp = Mazars3dConcrete ( action , MatNo , MatData , MatState ) Description MAZARS3dCONCRETE MATRESP = MAZARS3dCONCRETE (ACTION,MAT_NO,MATDATA,MATSTATE) function determines the stress-strain relation for an inelastic 3d material model Mazars' model (Ref: Using multifiber beams to account for shear and torsion: Applications to concrete structural elements - 2006) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'data' function prints material properties in output file IOW 'hist' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'hist' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' MATRESP is empty for action = 'data' and for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 km = material stiffness matrix; returned under ACTION = 'stif' sig = stress tensor in 6x1 vector form; returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus nu = Poisson ratio eps0 = initial threshold Ac = compression parameters Bc At = traction parameters Bt beta = shear correction ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Dt = damage variable in tension Dc = damage variable in compression D = damage variable Cross-Reference Information This function calls: This function is called by:","title":"Mazars3dConcrete"},{"location":"Functions/latest/Material_Library/3dMaterials/OneParamPlastDamg3dMat/","text":"Material_Library > 3dMaterials > OneParamPlastDamg3dMat OneParamPlastDamg3dMat Purpose 3d generalized damage plasticity material model Synopsis MatResp = OneParamPlastDamg3dMat ( action , MatNo , MatData , MatState ) Description ONEPARAMPLASTDAMG3dMAT 3d generalized damage plasticity material model MATRESP = ONEPARAMPLASTDAMG3dMAT (ACTION,MATNO,MATDATA,MATSTATE) function determines the stress-strain relation for 3d material under generalized damage plasticity ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ the character variable ACTION should have one of the following values ACTION = 'chec' function checks material property data for omissions and returns default values in MATDATA 'init' function returns the material history variables in MATSTATE 'forc' function returns the material stress (tensor) in MATSTATE 'stif' function returns the material tangent modulus and the stress (tensor) in MATSTATE 'post' function returns data structure MATPOST with post-processing information depending on the value of character variable ACTION the function returns information in data structure MATRESP for the material with number MAT_NO; data structure MATDATA supplies the material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ data structure MATRESP stands for one of the following data objects depending on value of ACTION MATRESP = MATDATA for action = 'chec' MATRESP = MATSTATE for action = 'init' MATRESP = MATSTATE for action = 'stif' MATRESP = MATSTATE for action = 'forc' MATRESP = MATPOST for action = 'post' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATSTATE is a data structure with information about the current material state in fields eps = total strain (tensor for 2d or 3d) Deps = strain increments from last convergence DDeps = strain increments from last iteration epsdot = strain rate (tensor for 2d or 3d) km = material stiffness matrix; returned under ACTION = 'stif' sig = stress (tensor for 2d or 3d); returned under ACTION = 'stif' or 'forc' Past = material history variables at last converged state Pres = current values of material history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATDATA is a data structure with material property information; it has the fields E = initial modulus fy = yield stress nu = Poisson's ratio Hi = isotropic hardening modulus Hk = kinematic hardening modulus delta = measures the speed of the material approaching the asymptotic behavior phi = a scalar measure of the distance between the asymptotic and the current radius of the yield function ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MATPOST is a data structure with material response information for post-processing in fields eps = strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 sig = stress tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 eps_p = plastic strain tensor in 6x1 vector form in the order 11, 22, 33, 12, 13, 23 Cross-Reference Information This function calls: Hardening library of hardening functions for plasticity models This function is called by:","title":"OneParamPlastDamg3dMat"},{"location":"Functions/latest/Material_Library/3dMaterials/Vec2Tensor/","text":"Material_Library > 3dMaterials > Vec2Tensor Vec2Tensor Purpose transforms vector to tensor and vice versa Synopsis Tensor = Vec2Tensor ( Vstr ) Description VEC2TENSOR transforms vector to tensor and vice versa TENSOR = VEC2TENSOR (VSTR) the function transforms the stress or strain vector VSTR to the corresponding tensor TENSOR and vice versa; it supports vectors of length 3, 6 or 9 and 2x2 or 3x3 tensors Cross-Reference Information This function calls: This function is called by:","title":"Vec2Tensor"},{"location":"Functions/latest/Section_Library/","text":"Section Library CompReCircSecw1dMat response of reinforced composite circular section with uniaxial materials Extract_Sec2MatState extract material state from section state HomoCircSecw1dMat response of homogeneous circular section with uniaxial material HomoCircSecwNdMat response of homogeneous circular section with 1d/2d/3d materia HomoRectSecw1dMat response of homogeneous rectangular section with uniaxial material HomoRectSecwNdMat response of homogeneous rectangular section with 1d/2d/3d material HomoWFSecw1dMat response of homogeneous wide flange (WF) section with uniaxial material MatSDwConstr state determination of 3d material under constraints MatSDwDirConstr state determination of 3d material under constraints without iterations MatSDwIterConstr state determination of 3d material under constraints with iterations MultRectSecw1dMat response for section of rectangular patches and bars with uniaxial material ReCircSecw1dMat response of reinforced circular section with uniaxial materials ReRectSecw1dMat response of reinforced rectangular section with uniaxial materials Other files in this directory HomoCircSecwNdMat.p HomoRectSecwNdMat.p MatSDwConstr.p MatSDwDirConstr.p MatSDwIterConstr.p","title":"Section Library"},{"location":"Functions/latest/Section_Library/CompReCircSecw1dMat/","text":"Section_Library > CompReCircSecw1dMat CompReCircSecw1dMat Purpose response of reinforced composite circular section with uniaxial materials Synopsis SecResp = CompReCircSecw1dMat ( action , SecNo , ndm , SecData , SecState ) Description COMPRECIRCSECw1dMAT response of reinforced composite circular section with uniaxial materials SECRESP = COMPRECIRCSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a reinforced composite circular section with uniaxial materials by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields R(1:2) = outer radius and inner radius of section (default = R(1) only) t = thickness of tube nr = no of integration points (fibers) over core radius (default=5)(thus 2 x nr across diameter) nt = no of integration points (fibers) over tube thickness (default=5) nth = no of integration points (fibers) in circumferential direction (used for 3d only),(default=12) MatName = cell array with function names for uniaxial stress-strain relations (1=tube,2=core) MatData = cell array with properties for uniaxial stress-strain relations (1=tube,2=core) BMatName = function name for uniaxial stress-strain relation of reinforcing bars BMatData = data structure with material property data for reinforcing bars BarAyz = array with y-z coordinates and area of each reinforcing bar; y-coordinate in first column, z-coordinate in second, area in third ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section force resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState extract material state from section state This function is called by:","title":"CompReCircSecw1dMat"},{"location":"Functions/latest/Section_Library/Extract_Sec2MatState/","text":"Section_Library > Extract_Sec2MatState Extract_Sec2MatState Purpose extract material state from section state Synopsis MatState = Extract_Sec2MatState ( m , as , SecState ) Description EXTRACT_SEC2MATSTATE extract material state from section state MATSTATE = EXTRACT_SEC2MATSTATE (M,AS,SECSTATE) function extracts from data structure SECSTATE the necessary information for material point M, and returns it in data structure MATSTATE; it needs compatibility array AS to determine material strains from section deformations Cross-Reference Information This function calls: This function is called by: CompReCircSecw1dMat response of reinforced composite circular section with uniaxial materials HomoCircSecw1dMat response of homogeneous circular section with uniaxial material HomoCircSecwNdMat response of homogeneous circular section with 1d/2d/3d materia HomoRectSecw1dMat response of homogeneous rectangular section with uniaxial material HomoRectSecwNdMat response of homogeneous rectangular section with 1d/2d/3d material HomoWFSecw1dMat response of homogeneous wide flange (WF) section with uniaxial material MultRectSecw1dMat response for section of rectangular patches and bars with uniaxial material ReCircSecw1dMat response of reinforced circular section with uniaxial materials ReRectSecw1dMat response of reinforced rectangular section with uniaxial materials","title":"Extract Sec2MatState"},{"location":"Functions/latest/Section_Library/HomoCircSecw1dMat/","text":"Section_Library > HomoCircSecw1dMat HomoCircSecw1dMat Purpose response of homogeneous circular section with uniaxial material Synopsis SecResp = HomoCircSecw1dMat ( action , SecNo , ndm , SecData , SecState ) Description HOMOCIRCSECw1dMAT response of homogeneous circular section with uniaxial material SECRESP = HOMOCIRCSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a homogeneous circular section with uniaxial material by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields R(1:2) = outer radius and inner radius of section (default = R(1) only) nr = no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth = no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) Rdrat = ratio of inner to outer radius for switching to uniform dicretization IntTyp = function name for section integration ('Midpoint' or 'Cubature') MatName = function name for material uniaxial stress-strain relation MatData = data structure with material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState extract material state from section state Create_IPMesh4Circ integration point coordinates, weights and material IDs for circular disc or annulus This function is called by:","title":"HomoCircSecw1dMat"},{"location":"Functions/latest/Section_Library/HomoCircSecwNdMat/","text":"Section_Library > HomoCircSecwNdMat HomoCircSecwNdMat Purpose response of homogeneous circular section with 1d/2d/3d materia Synopsis SecResp = HomoCircSecwNdMat ( action , SecNo , ndm , SecData , SecState ) Description HOMOCIRCSECwNdMAT response of homogeneous circular section with 1d/2d/3d materia SECRESP = HOMOCIRCSECwNdMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a homogeneous circular section with 1d/2d/3d material by integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are: N-Mz for NDM = 2 & NSR = 2 N-V-Mz for NDM = 2 & NSR = 3 N-Mz-My for NDM = 3 & NSR = 3 N-Mz-My-Vy-Vz-T for NDM = 3 & NSR = 6 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields R(1:2) = outer radius and inner radius of section (default = R(1) only) nr = no of integration points (fibers) over radius (default=5)(thus 2 x nr across diameter) nth = no of integration points (fibers) in circumferential direction (used for 3d only),(default=10) nsr = no of section resultants Rdrat = ratio of inner to outer radius for switching to uniform dicretization IntTyp = function name for section integration ('Midpoint' or 'Cubature') MatName = function name for material uniaxial stress-strain relation MatData = data structure with material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState extract material state from section state Create_IPMesh4Circ integration point coordinates, weights and material IDs for circular disc or annulus This function is called by:","title":"HomoCircSecwNdMat"},{"location":"Functions/latest/Section_Library/HomoRectSecw1dMat/","text":"Section_Library > HomoRectSecw1dMat HomoRectSecw1dMat Purpose response of homogeneous rectangular section with uniaxial material Synopsis SecResp = HomoRectSecw1dMat ( action , SecNo , ndm , SecData , SecState ) Description HOMORECTSECw1dMAT response of homogeneous rectangular section with uniaxial material SECRESP = HOMORECTSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a homogeneous rectangular section with uniaxial material by integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields d = section depth b = section width ny = no of integration points (fibers) in y (default = 10) nz = no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) IntTyp = function name for section integration MatName = function name for material uniaxial stress-strain relation MatData = data structure with material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState extract material state from section state Rectangle2Fiber integration points and weights for 2d-integration of a rectangle This function is called by:","title":"HomoRectSecw1dMat"},{"location":"Functions/latest/Section_Library/HomoRectSecwNdMat/","text":"Section_Library > HomoRectSecwNdMat HomoRectSecwNdMat Purpose response of homogeneous rectangular section with 1d/2d/3d material Synopsis SecResp = HomoRectSecwNdMat ( action , SecNo , ndm , SecData , SecState ) Description HOMORECTSECwNdMAT response of homogeneous rectangular section with 1d/2d/3d material SECRESP = HOMORECTSECwNdMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a homogeneous rectangular section with 1d/2d/3d material by integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are: N-Mz for NDM = 2 & NSR = 2 N-V-Mz for NDM = 2 & NSR = 3 N-Mz-My for NDM = 3 & NSR = 3 N-Mz-My-Vy-Vz-T for NDM = 3 & NSR = 6 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields d = section depth b = section width ny = no of integration points (fibers) in y (default = 10) nz = no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) nsr = no of section resultants IntTyp = function name for section integration MatName = function name for material uniaxial stress-strain relation MatData = data structure with material property data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState extract material state from section state Rectangle2Fiber integration points and weights for 2d-integration of a rectangle This function is called by:","title":"HomoRectSecwNdMat"},{"location":"Functions/latest/Section_Library/HomoWFSecw1dMat/","text":"Section_Library > HomoWFSecw1dMat HomoWFSecw1dMat Purpose response of homogeneous wide flange (WF) section with uniaxial material Synopsis SecResp = HomoWFSecw1dMat ( action , SecNo , ndm , SecData , SecState ) Description HOMOWFSECw1dMAT response of homogeneous wide flange (WF) section with uniaxial material SECRESP = HOMOWFSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of homogeneous wide flange (WF) section with uniaxial material by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) Coordinate system: y ^ | .----+----. | | | '--. | .--' | | | z <-----+ + | d |tw | .--' '--. | tf | '---------' bf Cross-Reference Information This function calls: Extract_Sec2MatState extract material state from section state Create_IPMesh4WFShape coordinates, weights and material IDs for wide flange section This function is called by:","title":"HomoWFSecw1dMat"},{"location":"Functions/latest/Section_Library/MatSDwConstr/","text":"Section_Library > MatSDwConstr MatSDwConstr Purpose state determination of 3d material under constraints Synopsis MatState = MatSDwConstr ( ifib , MatName , MatData , MatState ) Description MATSDwCONSTR state determination of 3d material under constraints Cross-Reference Information This function calls: Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom This function is called by:","title":"MatSDwConstr"},{"location":"Functions/latest/Section_Library/MatSDwDirConstr/","text":"Section_Library > MatSDwDirConstr MatSDwDirConstr Purpose state determination of 3d material under constraints without iterations Synopsis MatState = MatSDwDirConstr ( ifib , MatName , MatData , MatState ) Description MATSDwDIRCONSTR state determination of 3d material under constraints without iterations Cross-Reference Information This function calls: Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom This function is called by:","title":"MatSDwDirConstr"},{"location":"Functions/latest/Section_Library/MatSDwIterConstr/","text":"Section_Library > MatSDwIterConstr MatSDwIterConstr Purpose state determination of 3d material under constraints with iterations Synopsis MatState = MatSDwIterConstr ( ifib , MatName , MatData , MatState ) Description MATSDwITERCONSTR state determination of 3d material under constraints with iterations Cross-Reference Information This function calls: Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom This function is called by:","title":"MatSDwIterConstr"},{"location":"Functions/latest/Section_Library/MultRectSecw1dMat/","text":"Section_Library > MultRectSecw1dMat MultRectSecw1dMat Purpose response for section of rectangular patches and bars with uniaxial material Synopsis SecResp = MultRectSecw1dMat ( action , SecNo , ndm , SecData , SecState ) Description MULTRECTSECw1dMAT response for section of rectangular patches and bars with uniaxial material SECRESP = MULTRECTSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a section made up of rectangular patches and bars with uniaxial material by integration in y for 2d, and in y and z for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) Coordinate system: ^ y | |---+---------------| | | o o o o o | | | |-----------| z <---+---+ | | | | o o o | |-------- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information 'defo': report section displacements for deformed shape ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP = SECDISP for action = 'defo' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information in fields FibAyz(1:NF,3) = coordinates and area (weight) of NF IPs or fibers for contiguous shape FMatName{:} = cell array of material names for portions of contiguous shape FMatData{:} = cell array with material property data for portions of contiguous shape FMatID(1:NF) = array with material ID for NF fibers of contiguous shape BarAyz(1:NB,3) = coordinates and area (weight) of NB bars BMatName{:} = cell array of material names for bars BMatData{:} = cell array with material property data for bars BMatID(1:NB) = array with material ID for NB bars ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing in fields e = section deformations s = section force resultants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDISP is a data structure with the section displacements in fields Cross-Reference Information This function calls: Extract_Sec2MatState extract material state from section state This function is called by:","title":"MultRectSecw1dMat"},{"location":"Functions/latest/Section_Library/ReCircSecw1dMat/","text":"Section_Library > ReCircSecw1dMat ReCircSecw1dMat Purpose response of reinforced circular section with uniaxial materials Synopsis SecResp = ReCircSecw1dMat ( action , SecNo , ndm , SecData , SecState ) Description RECIRCSECw1dMAT response of reinforced circular section with uniaxial materials SECRESP = RECIRCSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a reinforced circular section with uniaxial materials by midpoint integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields R(1:2) = outer radius and inner radius of section (default = R(1) only) cv(1:2) = outer/inner cover (default=[0,0]) nr = no of integration points (fibers) for core in radial direction (default=5)(thus 2 x nr across diameter) nth = no of integration points (fibers) for core in circumferential direction (used for 3d only),(default=12) nrc = no of integration points (fibers) for cover in radial direction (default=5) ntc = no of integration points (fibers) for cover in circumferential direction (default=12) MatName = cell array with function names for uniaxial stress-strain relations (1=core,2=cover) MatData = cell array with properties for uniaxial stress-strain relations (1=core,2=cover) BMatName = function name for uniaxial stress-strain relation of reinforcing bars BMatData = data structure with material property data for reinforcing bars BarAyz = array with y-z coordinates and area of each reinforcing bar; y-coordinate in first column, z-coordinate in second, area in third ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section force resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState extract material state from section state Create_IPMesh4Circ integration point coordinates, weights and material IDs for circular disc or annulus This function is called by:","title":"ReCircSecw1dMat"},{"location":"Functions/latest/Section_Library/ReRectSecw1dMat/","text":"Section_Library > ReRectSecw1dMat ReRectSecw1dMat Purpose response of reinforced rectangular section with uniaxial materials Synopsis SecResp = ReRectSecw1dMat ( action , SecNo , ndm , SecData , SecState ) Description RERECTSECw1dMAT response of reinforced rectangular section with uniaxial materials SECRESP = RERECTSECw1dMAT (ACTION,SECNO,NDM,SECDATA,SECSTATE) the function determines the response of a reinforced rectangular section with uniaxial materials by integration in y-direction for 2d, and in y- and z- direction for 3d response (section resisting forces are N-Mz for NDM=2 and N-Mz-My for NDM=3) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When the character variable ACTION has one of the following values, the function performs the listed operations and returns the results in SECRESP: ACTION = 'chec': check section property data for omissions and assign default values 'init': initialize section history variables 'forc': report section resisting forces 'stif': report section stiffness matrix and resisting forces 'post': report post-processing information ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The data structure SECRESP stands for the following data object(s) for each ACTION: SECRESP = SECDATA for action = 'chec' SECRESP = SECSTATE for action = 'init' SECRESP = SECSTATE for action = 'stif' SECRESP = SECSTATE for action = 'forc' SECRESP = SECPOST for action = 'post' SECRESP is empty for unsupported keywords ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECDATA is a data structure with section property information; it has the fields d = section depth b = section width cv(1:2) = top/bottom and side cover (default=[0,0]) ny = no of integration points (fibers) in y (default = 10) nz = no of integration points (fibers) in z (default = 1 for 2d and 10 for 3d) ncl = no of integration points along cover (default = 10) nct = no of integration points across cover (default = 2) IntTyp = function name for section integration MatName = cell array with function names for uniaxial stress-strain relations (1=core,2=cover) MatData = cell array with properties for uniaxial stress-strain relations (1=core,2=cover) BMatName = function name for uniaxial stress-strain relation of reinforcing bars BMatData = data structure with material property data for reinforcing bars BarAyz = array with y-z coordinates and area of each reinforcing bar; y-coordinate in first column, z-coordinate in second, area in third ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECSTATE is a data structure with information about the current section state; it has the fields e = vector of total section deformations De = vector of section deformation increments from last convergence DDe = vector of section deformation increments from last iteration edot = vector of section deformation rates ks = section stiffness matrix; returned under ACTION = 'stif' s = section resisting force vector; returned under ACTION = 'stif' or 'forc' Past = section history variables at last converged state Pres = current section history variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SECPOST is a data structure with section response information for post-processing; it has the fields e = section deformations s = section stress resultants Mat{i} = material response information for post-processing (see material function with MatName) Cross-Reference Information This function calls: Extract_Sec2MatState extract material state from section state Create_IPMesh4Rect coordinates, weights and material IDs for rectangular section with cover This function is called by:","title":"ReRectSecw1dMat"},{"location":"Functions/latest/Solution_Library/","text":"Solution Library","title":"Solution Library"},{"location":"Functions/latest/Solution_Library/Scripts/","text":"Scripts S_BucklingLoad general script for determining the buckling load of a structural model S_Check_Global3dEQ general script for checking global equilibrium of 3d structural models S_DisplMethod script for displacement method of structural analysis S_ForceMethod script for force method of structural analysis S_Increment script for load incrementation S_Initialize script for initializing State and SolStrat S_Iterate script for equilibrium iterations S_LinearStep basic script for linear elastic analysis step by displacement method S_Update_State state determination after convergence with results in Post","title":"Scripts"},{"location":"Functions/latest/Solution_Library/Scripts/S_BucklingLoad/","text":"Solution_Library > Scripts > S_BucklingLoad S_BucklingLoad Purpose general script for determining the buckling load of a structural model Synopsis This is a script file . Description BUCKLINGLOAD general script for determining the buckling load of a structural model the scripts sets up the linear and the geometric stiffness of a structural model with its geometry and boundary conditions in MODEL and its element properties IN ELEMDATA; before invoking the script it is necessary to define the reference load in Loading, so that it can be applied in Step 2 for determining the axial forces in the elements and with them the total structure stiffness Kt in the undeformed configuration; the geometric stiffness Kg is determined by subtracting the initial stiffness Kl from Kt Cross-Reference Information This function calls: Structure performs requested action on group of elements Initialize_SolStrat default values for most solution strategy parameters Initialize_State initialize state variables of structural model and create STATE S_InitialStep script for initial step of incremental analysis This function is called by:","title":"S BucklingLoad"},{"location":"Functions/latest/Solution_Library/Scripts/S_Check_Global3dEQ/","text":"Solution_Library > Scripts > S_Check_Global3dEQ S_Check_Global3dEQ Purpose general script for checking global equilibrium of 3d structural models Synopsis This is a script file . Description CHECK_GLOBAL3dEQ general script for checking global equilibrium of 3d structural models the script uses the resisting forces in vector P or in State.Pr for checking the global force equilibrium of the structural model and the resisting forces along with the node coordinates in array Model.XYZ to set up the cross products for checking the moment equilibrium about the global X,Y,Z axes Cross-Reference Information This function calls: This function is called by:","title":"S Check Global3dEQ"},{"location":"Functions/latest/Solution_Library/Scripts/S_DisplMethod/","text":"Solution_Library > Scripts > S_DisplMethod S_DisplMethod Purpose script for displacement method of structural analysis Synopsis This is a script file . Description DISPLMETHOD script for displacement method of structural analysis the script contains the steps for the classical displacement method of structural analysis: (1) set up the kinematic matrix Af (2) set up the collection of element stiffness matrices Ks (3) set up the structure stiffness matrix Kf = Af'*Ks*Af (4) set up the equivalent nodal forces Pwf due to element loading (5) set up the initial element forces Q0 (6) set up the initial nodal forces P0 = Af'Q0 + Pwf (7) solve for the free global DOF displacements Uf from Pf-P0 = Kf*Uf (8) determine the element deformations V=Af*Uf (9) determine the basic element forces Q=Ks*V+Q0 Cross-Reference Information This function calls: A_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements Create_PwForces set up equivalent nodal forces due to uniform element loading w Ks_matrix block diagonal matrix of basic element stiffness matrices for structural model Q0_vector initial (fixed-end) force vector for structural model H_index cell array of indices into structure arrays for continuous element deformations Complete_QV complete basic force QIN and element deformation vector VE with values at releases This function is called by:","title":"S DisplMethod"},{"location":"Functions/latest/Solution_Library/Scripts/S_ForceMethod/","text":"Solution_Library > Scripts > S_ForceMethod S_ForceMethod Purpose script for force method of structural analysis Synopsis This is a script file . Description FORCEMETHOD script for force method of structural analysis the script contains the steps for the force method of structural analysis: (1) set up the equilibrium matrix Bf (2) set up the force influence matrices for the primary structure Bbari and Bbarx (3) set up the collection of element flexibility matrices Fs (4) set up the compatibility conditions and solve for the redundant basic forces Qx (5) determine the basic element forces Q=Qp+Bbarx*Qx (6) determine the element deformations Ve=Fs*Q+V0 (7) determine the free DOF displacements Uf=Bbari'*Ve Cross-Reference Information This function calls: B_matrix equilibrium matrix of structural model with 2d/3d truss and 2d frame elements BbariBbarx_matrix force influence matrices of primary structure from equilibrium matrix Bf Create_PwForces set up equivalent nodal forces due to uniform element loading w Fs_matrix block diagonal matrix of element flexibity matrices for structural model V0_vector initial element deformation vector for the structural model H_index cell array of indices into structure arrays for continuous element deformations Complete_QV complete basic force QIN and element deformation vector VE with values at releases This function is called by:","title":"S ForceMethod"},{"location":"Functions/latest/Solution_Library/Scripts/S_Increment/","text":"Solution_Library > Scripts > S_Increment S_Increment Purpose script for load incrementation Synopsis This is a script file . Description INCREMENT script for load incrementation Cross-Reference Information This function calls: Increment load incrementation and state advance under static conditions This function is called by:","title":"S Increment"},{"location":"Functions/latest/Solution_Library/Scripts/S_Initialize/","text":"Solution_Library > Scripts > S_Initialize S_Initialize Purpose script for initializing State and SolStrat Synopsis This is a script file . Description INITIALIZE script for initializing State and SolStrat ========================================================================================= FEDEASLab - Release 5.2, July 2021 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2021. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: Structure performs requested action on group of elements Initialize initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_SolStrat default values for most solution strategy parameters Initialize_State initialize state variables of structural model and create STATE This function is called by:","title":"S Initialize"},{"location":"Functions/latest/Solution_Library/Scripts/S_Iterate/","text":"Solution_Library > Scripts > S_Iterate S_Iterate Purpose script for equilibrium iterations Synopsis This is a script file . Description ITERATE script for equilibrium iterations ========================================================================================= FEDEASLab - Release 5.2, July 2021 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2021. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: Iterate equilibrium iterations until convergence under static conditions This function is called by:","title":"S Iterate"},{"location":"Functions/latest/Solution_Library/Scripts/S_LinearStep/","text":"Solution_Library > Scripts > S_LinearStep S_LinearStep Purpose basic script for linear elastic analysis step by displacement method Synopsis This is a script file . Description LINEARSTEP basic script for linear elastic analysis step by displacement method Cross-Reference Information This function calls: This function is called by:","title":"S LinearStep"},{"location":"Functions/latest/Solution_Library/Scripts/S_Update_State/","text":"Solution_Library > Scripts > S_Update_State S_Update_State Purpose state determination after convergence with results in Post Synopsis This is a script file . Description UPDATE_STATE state determination after convergence with results in Post ========================================================================================= FEDEASLab - Release 5.2, July 2021 Matlab Finite Elements for Design, Evaluation and Analysis of Structures Professor Filip C. Filippou (filippou@berkeley.edu) Department of Civil and Environmental Engineering, UC Berkeley Copyright(c) 1998-2021. The Regents of the University of California. All Rights Reserved. ========================================================================================= Cross-Reference Information This function calls: Structure performs requested action on group of elements Update_State final state determination under static conditions, reset increments and history This function is called by:","title":"S Update State"},{"location":"Functions/latest/Solution_Library/Static_Analysis/","text":"Static Analysis Event2Event_NLAnalysis event-to-event incremental analysis with linear or P-DELTA geometry Increment load incrementation and state advance under static conditions Initialize initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_SolStrat default values for most solution strategy parameters Initialize_State initialize state variables of structural model and create STATE Iterate equilibrium iterations until convergence under static conditions LinearStep sets up and solves the structure equilibrium equations for single load step LoadFactorControl determine load factor increment under load control strategy LoadFactorIncrement load factor increment(s) for given load histories OneIteration single equilibrium iteration under static conditions PlasticAnalysis collapse load factor, basic forces, and collapse mechanism by plastic analysis StateDetermination structure state determination under static conditions Update_State final state determination under static conditions, reset increments and history Other files in this directory Event2Event_NLAnalysis.p Increment.p Initialize.p Initialize_SolStrat.p Initialize_State.p Iterate.p LinearStep.p LoadFactorControl.p LoadFactorIncrement.p OneIteration.p PlasticAnalysis.p StateDetermination.p Update_State.p","title":"Static Analysis"},{"location":"Functions/latest/Solution_Library/Static_Analysis/Event2Event_NLAnalysis/","text":"Solution_Library > Static_Analysis > Event2Event_NLAnalysis Event2Event_NLAnalysis Purpose event-to-event incremental analysis with linear or P-DELTA geometry Synopsis [ lamdah , Qh , Ufh , Vph , Iph ] = Event2Event_NLAnalysis ( opt , Model , ElemData , Loading , ConvPar ) Description EVENT2EVENT_NLANALYSIS event-to-event incremental analysis with linear or P-DELTA geometry [LAMDAH,QH,UFH,VPH,IPH] = EVENT2EVENT_NLANALYSIS (OPT,MODEL,ELEMDATA,LOADING) the function determines the load factor history LAMDAH of a structural model for an event-to-event analysis under loading information in data structure LOADING; the latter should have two fields, Pref for the load pattern to be factored, and Pcf for the load pattern to remain constant; each row of the load factor history vector corresponds to a different event; OPT is a character variable with values of LG for linear, or NG for nonlinear geometry the data structure MODEL contains information about the structural model, and element property information is provided in cell array ELEMDATA the function returns the load factor history for each event in row vector LAMDAH, the basic force history in array QH, the free global dof displacement history in array UFH, the plastic element deformation history in array VPH, and the history of the index of plastic hinge locations in array IPH; in the array UFH the row number corresponds to the degree of freedom number, while in the arrays QH, VPH, and IPH the row number corresponds to the basic force number; in the history arrays QH, UFH, VPH,and IPH the column number corresponds to the event number Cross-Reference Information This function calls: A_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements Aj_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements Localize returns the node coordinates and id array of element Q0_vector initial (fixed-end) force vector for structural model ElmLenOr element length and x-axis orientation (direction cosines) This function is called by:","title":"Event2Event NLAnalysis"},{"location":"Functions/latest/Solution_Library/Static_Analysis/Increment/","text":"Solution_Library > Static_Analysis > Increment Increment Purpose load incrementation and state advance under static conditions Synopsis [ State , SolStrat ] = Increment ( Model , ElemData , Loading , State , SolStrat ) Description INCREMENT load incrementation and state advance under static conditions [STATE,SOLSTRAT] = INCREMENT(MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function increments the applied loading and determines the corresponding displacement increments under static conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories Cross-Reference Information This function calls: LoadFactorControl determine load factor increment under load control strategy LoadFactorIncrement load factor increment(s) for given load histories StateDetermination structure state determination under static conditions This function is called by: S_Increment script for load incrementation S_InitialStep script for initial step of incremental analysis S_MultiStep script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD script for multi-step incremental analysis under given load history(ies) S_OneStep_wLoadHist script for a single step of incremental analysis under given load history(ies)","title":"Increment"},{"location":"Functions/latest/Solution_Library/Static_Analysis/Initialize/","text":"Solution_Library > Static_Analysis > Initialize Initialize Purpose initialize analysis variables in STATE and load control parameters in SOLSTRAT Synopsis [ State , SolStrat ] = Initialize ( Model , ElemData , Loading , State , SolStrat ) Description INITIALIZE initialize analysis variables in STATE and load control parameters in SOLSTRAT [STATE,SOLSTRAT] = INITIALIZE(MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function initializes analysis variables in STATE and load control parameters in SOLSTRAT (only if IncrStrat.LFCtrl = 'yes'); the function returns updated data structures STATE and SOLSTRAT: MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories; specifically the function adds the following fields to STATE STATE lamda = row vector of current load factors Pi = initial force vector (for load sequences) Time = pseudo-or real time counter the function also adds the field HIST to SOLSTRAT with subfields Sp0 and sgnK0 for adjusting the load factor under load incrementation, if IncrStrat.LFCtrl='yes' Cross-Reference Information This function calls: Structure performs requested action on group of elements LoadFactorControl determine load factor increment under load control strategy This function is called by: S_Initialize script for initializing State and SolStrat S_InitialStep script for initial step of incremental analysis S_MultiStep script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD script for multi-step incremental analysis under given load history(ies)","title":"Initialize"},{"location":"Functions/latest/Solution_Library/Static_Analysis/Initialize_SolStrat/","text":"Solution_Library > Static_Analysis > Initialize_SolStrat Initialize_SolStrat Purpose default values for most solution strategy parameters Synopsis SolStrat = Initialize_SolStrat Description INITIALIZE_SOLSTRAT default values for most solution strategy parameters SOLSTRAT = INITIALIZE_SOLSTRAT the function assigns default values to most solution strategy parameters and creates the data structure SOLSTRAT with corresponding information; SOLSTRAT contains three substructures: INCRSTRAT, ITERSTRAT and TIMESTRAT; these data structures contain the following fields INCRSTRAT Dlam0 = initial load factor increment(s) (row vector) Deltat = pseudo-time increment (scalar) StifUpdt = stiffness update (character variable) LFCtrl = load control (character variable) LCType = load control type gamma = exponent of current stiffness parameter method of load control ITERSTRAT StifUpdt = stiffness update (character variable) Type = 'NR', 'ModNR', 'Krylov', 'LnSrch' LFCtrl = load control (character variable) LCType = load control type LCParam = load control parameters maxiter = maximum number of iterations for equilibrium (scalar) tol = tolerance for satifaction of equilibrium equations (scalar) TIMESTRAT Delta = time step of transient analysis (scalar) Type = type of numerical integration (character variable) Param = parameters of numerical time integration scheme (row vector) the data structure also contains three auxiliary fields Output = for echoing information about residuals during analysis (default = yes) Debug = for storing the state during solution for debuging (default = no) PUHist = for storing displacements and forces during solution for plotting (default = no) Cross-Reference Information This function calls: This function is called by: S_BucklingLoad general script for determining the buckling load of a structural model S_Initialize script for initializing State and SolStrat","title":"Initialize SolStrat"},{"location":"Functions/latest/Solution_Library/Static_Analysis/Initialize_State/","text":"Solution_Library > Static_Analysis > Initialize_State Initialize_State Purpose initialize state variables of structural model and create STATE Synopsis State = Initialize_State ( Model , ElemData ) Description INITIALIZE_STATE initialize state variables of structural model and create STATE INITIALIZE_STATE (MODEL,ELEMDATA) function initializes the displacement, velocity and acceleration vectors for the structural model with information in data structure MODEL; the cell array ELEMDATA supplies the element property data for element history initialization; the function returns data structure STATE with the following fields STATE.U = global dof total displacement vector DU = global dof displacement increments from last convergence DDU = global dof displacement increments from last iteration Udot = global dof velocity vector Udotdot = global dof acceleration vector Past = data structure of last element history variables in cell array Elem Pres = data structure of current element history variables in cell array Elem Cross-Reference Information This function calls: Structure performs requested action on group of elements This function is called by: S_BucklingLoad general script for determining the buckling load of a structural model S_Initialize script for initializing State and SolStrat LinearStep sets up and solves the structure equilibrium equations for single load step S_InitialStep script for initial step of incremental analysis S_MultiStep script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD script for multi-step incremental analysis under given load history(ies) S_Transient_MultiStep script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD script for multi-step transient analysis under given load history(ies)","title":"Initialize State"},{"location":"Functions/latest/Solution_Library/Static_Analysis/Iterate/","text":"Solution_Library > Static_Analysis > Iterate Iterate Purpose equilibrium iterations until convergence under static conditions Synopsis [ State , SolStrat ] = Iterate ( Model , ElemData , Loading , State , SolStrat ) Description ITERATE equilibrium iterations until convergence under static conditions [STATE,SOLSTRAT] = ITERATE(MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function performs equilibrium iterations until convergence under the applied loading and determines the corresponding displacement increments under static conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories Cross-Reference Information This function calls: OneIteration single equilibrium iteration under static conditions This function is called by: S_Iterate script for equilibrium iterations S_InitialStep script for initial step of incremental analysis S_MultiStep script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD script for multi-step incremental analysis under given load history(ies) S_OneStep_wLoadHist script for a single step of incremental analysis under given load history(ies)","title":"Iterate"},{"location":"Functions/latest/Solution_Library/Static_Analysis/LinearStep/","text":"Solution_Library > Static_Analysis > LinearStep LinearStep Purpose sets up and solves the structure equilibrium equations for single load step Synopsis State = LinearStep ( Model , ElemData , Loading ) Description LINEARSTEP sets up and solves the structure equilibrium equations for single load step STATE = LINEARSTEP (MODEL,ELEMDATA,LOADING) function sets up and solves the structure equilibrium equations for single load step by direct assembly of element stiffness matrices; the structural response is contained in data structure STATE with fields U for the global dof displacement vector, Pr for the resisting force vector and Kf for the stiffness matrix at the free dofs of the structure; information about the structural model is supplied in data structure MODEL, the element properties are supplied in cell array ELEMDATA and loading information is given in data structure LOADING with fields Pref and Uref for a single applied force and a single imposed displacement vector, respectively Cross-Reference Information This function calls: Structure performs requested action on group of elements Initialize_State initialize state variables of structural model and create STATE This function is called by:","title":"LinearStep"},{"location":"Functions/latest/Solution_Library/Static_Analysis/LoadFactorControl/","text":"Solution_Library > Static_Analysis > LoadFactorControl LoadFactorControl Purpose determine load factor increment under load control strategy Synopsis SolStrat = LoadFactorControl ( action , SolStrat , detKf , Pref , Ut , DUr ) Description LOADFACTORCONTROL determine load factor increment under load control strategy SOLSTRAT = LOADFACTORCONTROL(ACTION,SOLSTRAT,KL,KU,PREF,UT,DUR) the function determines the load factor increment in field DLAM of data structure SOLSTRAT under the specified load control strategy in field LCTYPE of SOLSTRAT; ACTION is a character variable that distinguishes various load control stages, i.e. initialization, incrementation and iteration; accordingly, the choices are ACTION = 'init': initialization of load control parameters in field HIST of SOLSTRAT ACTION = 'incr': determination of DLAM during load incrementation; parameter update in HIST ACTION = 'iter': determination of DLAM during equilibrium iteration (the following load control methods are currently supported: 'MinDispNorm' and 'KeyDOF' KL and KU are the lower and upper diagonal LU components of the tangent stiffness matrix, PREF is the reference force vector and UT the corresponding displacement vector under PREF, DUR is the vector of displacement increments under the current unbalance force vector Cross-Reference Information This function calls: This function is called by: Increment load incrementation and state advance under static conditions Initialize initialize analysis variables in STATE and load control parameters in SOLSTRAT OneIteration single equilibrium iteration under static conditions","title":"LoadFactorControl"},{"location":"Functions/latest/Solution_Library/Static_Analysis/LoadFactorIncrement/","text":"Solution_Library > Static_Analysis > LoadFactorIncrement LoadFactorIncrement Purpose load factor increment(s) for given load histories Synopsis Dlam = LoadFactorIncrement ( History , Time , Deltat ) Description LOADFACTORINCREMENT load factor increment(s) for given load histories DLAM = LOADFACTORINCREMENT(HISTORY,TIME,DELTAT) the function determines the load factor increment(s) in vector DLAM for the number of time histories in data structure HISTORY with fields TIME and VALUE; linear interpolation with current time TIME and time step DELTAT gives the load factor increment(s) Cross-Reference Information This function calls: This function is called by: Increment load incrementation and state advance under static conditions TransientIncrement load incrementation and state advance under transient conditions","title":"LoadFactorIncrement"},{"location":"Functions/latest/Solution_Library/Static_Analysis/OneIteration/","text":"Solution_Library > Static_Analysis > OneIteration OneIteration Purpose single equilibrium iteration under static conditions Synopsis [ State , SolStrat ] = OneIteration ( Model , ElemData , Loading , State , SolStrat ) Description ONEITERATION single equilibrium iteration under static conditions [STATE,SOLSTRAT] = ONEITERATION (MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function performs a single equilibrium iteration under the applied loading and determines the corresponding displacement increments under static conditions; information about the state of the structure is updated in STATE and information about the parameters of the solution strategy is updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns with corresponding load histories Cross-Reference Information This function calls: LoadFactorControl determine load factor increment under load control strategy StateDetermination structure state determination under static conditions This function is called by: Iterate equilibrium iterations until convergence under static conditions","title":"OneIteration"},{"location":"Functions/latest/Solution_Library/Static_Analysis/PlasticAnalysis/","text":"Solution_Library > Static_Analysis > PlasticAnalysis PlasticAnalysis Purpose collapse load factor, basic forces, and collapse mechanism by plastic analysis Synopsis [ lamdac , Qc , DUf , DVpl ] = PlasticAnalysis ( Model , ElemData , Loading , LPOpt ) Description PLASTICANALYSIS collapse load factor, basic forces, and collapse mechanism by plastic analysis [LAMDAC,QC,DUF,DVPL] = PLASTICANALYSIS (MODEL,ELEMDATA,LOADING,LPOPT) the function determines the collapse load factor LAMDAC of a structural model under loading information in data structure LOADING; the latter should have the field PREF for the load pattern to be factored, and may include a field Pcf for the load pattern to remain constant; the data structure MODEL contains information about the structural model, and element property information is provided in cell array ELEMDATA; the function also returns the basic forces at incipient collapse in vector QC, the displacement increments of the collapse mechanism in vector DUF, and the plastic deformation increments of the collapse mechanism in vector DVPL LPOPT is an optional data structure for selecting options of the linear programming algorithm; these options are discussed in the Matlab manual pages for the linprog function the function uses 'dual-simplex' and 'LargeScale' by default; the tolerance variable tol refers to OptimalityTolerance of the dual-simplex algorithm with default value 1e-7 Cross-Reference Information This function calls: A_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements Aj_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by:","title":"PlasticAnalysis"},{"location":"Functions/latest/Solution_Library/Static_Analysis/StateDetermination/","text":"Solution_Library > Static_Analysis > StateDetermination StateDetermination Purpose structure state determination under static conditions Synopsis State = StateDetermination ( StifUpdt , Model , ElemData , State ) Description STATEDETERMINATION structure state determination under static conditions STATE = STATEDETERMINATION (STIFUPDT,MODEL,ELEMDATA,STATE) the function updates the structure resisting force vector in STATE for the current state of the structure as described by the displacement vector and its increments as as well as by the history variables in STATE; depending on the value of character variable STIFUPDT the function also updates the tangent stiffness matrix in STATE MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties Cross-Reference Information This function calls: Structure performs requested action on group of elements This function is called by: Increment load incrementation and state advance under static conditions OneIteration single equilibrium iteration under static conditions","title":"StateDetermination"},{"location":"Functions/latest/Solution_Library/Static_Analysis/Update_State/","text":"Solution_Library > Static_Analysis > Update_State Update_State Purpose final state determination under static conditions, reset increments and history Synopsis State = Update_State ( Model , ElemData , State ) Description UPDATE_STATE final state determination under static conditions, reset increments and history STATE = UPDATE_STATE (MODEL,ELEMDATA,STATE) the function performs a final state determination for the current state of the structure as described by the displacement vector and its increments as well as by the history variables in STATE; it then updates the structure resisting forces and history variables in STATE and then sets the displacement increments in STATE to zero Cross-Reference Information This function calls: Structure performs requested action on group of elements This function is called by: S_Update_State state determination after convergence with results in Post S_InitialStep script for initial step of incremental analysis S_MultiStep script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD script for multi-step incremental analysis under given load history(ies) S_OneStep_wLoadHist script for a single step of incremental analysis under given load history(ies)","title":"Update State"},{"location":"Functions/latest/Solution_Library/Strategies/","text":"Strategies S_InitialStep script for initial step of incremental analysis S_MultiStep script for multi-step incremental analysis after load factor initialization S_MultiStep_wLoadHist script for multi-step incremental analysis under given load history(ies) S_MultiStep_wLoadHistwSD script for multi-step incremental analysis under given load history(ies) S_OneStep_wLoadHist script for a single step of incremental analysis under given load history(ies) S_Transient_MultiStep script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD script for multi-step transient analysis under given load history(ies)","title":"Strategies"},{"location":"Functions/latest/Solution_Library/Strategies/S_InitialStep/","text":"Solution_Library > Strategies > S_InitialStep S_InitialStep Purpose script for initial step of incremental analysis Synopsis This is a script file . Description INITIALSTEP script for initial step of incremental analysis the script initializes the state of the structural model and sets up the necessary variables for the load factor evolution under the given load pattern; it starts the post-processing counter pc and saves the initial response state in Post; after this it performs a single load step of static analysis with the parameters in SolStrat Cross-Reference Information This function calls: Structure performs requested action on group of elements Increment load incrementation and state advance under static conditions Initialize initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_State initialize state variables of structural model and create STATE Iterate equilibrium iterations until convergence under static conditions Update_State final state determination under static conditions, reset increments and history This function is called by: S_BucklingLoad general script for determining the buckling load of a structural model","title":"S InitialStep"},{"location":"Functions/latest/Solution_Library/Strategies/S_MultiStep/","text":"Solution_Library > Strategies > S_MultiStep S_MultiStep Purpose script for multi-step incremental analysis after load factor initialization Synopsis This is a script file . Description MULTISTEP script for multi-step incremental analysis after load factor initialization the script sets up the necessary variables for the load factor evolution under the the given load pattern; it initializes the state of the structural model, only if the variable State does not exist in the workspace; it is, therefore, useful for incremental analysis after a change in the load pattern; it initializes the counter pc only if it does not exist in the workspace and saves post-processing information of the first response state; it performs (nostep) load steps of static analysis with the parameters in SolStrat Cross-Reference Information This function calls: Structure performs requested action on group of elements Increment load incrementation and state advance under static conditions Initialize initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_State initialize state variables of structural model and create STATE Iterate equilibrium iterations until convergence under static conditions Update_State final state determination under static conditions, reset increments and history This function is called by:","title":"S MultiStep"},{"location":"Functions/latest/Solution_Library/Strategies/S_MultiStep_wLoadHist/","text":"Solution_Library > Strategies > S_MultiStep_wLoadHist S_MultiStep_wLoadHist Purpose script for multi-step incremental analysis under given load history(ies) Synopsis This is a script file . Description MULTISTEP_wLOADHIST script for multi-step incremental analysis under given load history(ies) with load factor initialization the script sets up the necessary variables for the load factor evolution for the static analysis under one or more more load patterns with given load histories; it initializes the state of the structural model, only if the variable State does not exist; it is, therefore, useful both for the application of load patterns with load histories from the unstressed state or for the continuation of incremental analysis after a change of the load patterns or the load histories; it initializes the counter pc only if it does not exist in the workspace and saves post-processing information of the initial response state; it performs several load steps of static analysis with the parameters in SolStrat until the pseudo-time parameter Time in State exceeds the specified maximum time Tmax Cross-Reference Information This function calls: Structure performs requested action on group of elements Increment load incrementation and state advance under static conditions Initialize initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_State initialize state variables of structural model and create STATE Iterate equilibrium iterations until convergence under static conditions Update_State final state determination under static conditions, reset increments and history This function is called by:","title":"S MultiStep wLoadHist"},{"location":"Functions/latest/Solution_Library/Strategies/S_MultiStep_wLoadHistwSD/","text":"Solution_Library > Strategies > S_MultiStep_wLoadHistwSD S_MultiStep_wLoadHistwSD Purpose script for multi-step incremental analysis under given load history(ies) Synopsis This is a script file . Description MULTISTEP_wLOADHISTwSD script for multi-step incremental analysis under given load history(ies) with load factor initialization, automatic step division and rescaling the script sets up the necessary variables for the load factor evolution for the static analysis under one or more more load patterns with given load histories; it initializes the state of the structural model, only if the variable State does not exist; it is, therefore, useful both for the application of load patterns with load histories from the unstressed state or for the continuation of incremental analysis after a change of the load patterns or the load histories; the script supports automatic load step subdivision and rescaling; it initializes the counter pc only if it does not exist in the workspace and saves post-processing information of the initial response state; it performs several load steps of static analysis with the parameters in SolStrat until the pseudo-time parameter Time in State exceeds the specified maximum time Tmax Cross-Reference Information This function calls: Structure performs requested action on group of elements Increment load incrementation and state advance under static conditions Initialize initialize analysis variables in STATE and load control parameters in SOLSTRAT Initialize_State initialize state variables of structural model and create STATE Iterate equilibrium iterations until convergence under static conditions Update_State final state determination under static conditions, reset increments and history This function is called by:","title":"S MultiStep wLoadHistwSD"},{"location":"Functions/latest/Solution_Library/Strategies/S_OneStep_wLoadHist/","text":"Solution_Library > Strategies > S_OneStep_wLoadHist S_OneStep_wLoadHist Purpose script for a single step of incremental analysis under given load history(ies) Synopsis This is a script file . Description ONESTEP_wLOADHIST script for a single step of incremental analysis under given load history(ies) the script performs a single load step of static analysis with the parameters in SolStrat under the given load pattern(s) and load history(ies); because it does not initialize the state or the parameters for the load factor evolution, it is suitable for the incremental static analysis continuation with the parameters in SolStrat Cross-Reference Information This function calls: Structure performs requested action on group of elements Increment load incrementation and state advance under static conditions Iterate equilibrium iterations until convergence under static conditions Update_State final state determination under static conditions, reset increments and history This function is called by:","title":"S OneStep wLoadHist"},{"location":"Functions/latest/Solution_Library/Strategies/S_Transient_MultiStep/","text":"Solution_Library > Strategies > S_Transient_MultiStep S_Transient_MultiStep Purpose script for multi-step transient analysis under given load history(ies) Synopsis This is a script file . Description TRANSIENT_MULTISTEP script for multi-step transient analysis under given load history(ies) the script sets up the necessary variables for the load factor evolution for the transient analysis under one or more more load patterns with given load histories; it initializes the state of the structural model, only if the variable State does not exist; it is, therefore, useful both for the application of load patterns with load histories from the unstressed state or for the continuation of incremental analysis after a change of the load patterns or the load histories; it initializes the counter pc only if it does not exist in the workspace and saves post-processing information of the initial response state; it performs several load steps of static analysis with the parameters in SolStrat until the pseudo-time parameter Time in State exceeds the specified maximum time Tmax Cross-Reference Information This function calls: Structure performs requested action on group of elements Initialize_State initialize state variables of structural model and create STATE TransientIncrement load incrementation and state advance under transient conditions TransientInitialize initialize State variables for transient response analysis TransientIterate equilibrium iterations until convergence under transient conditions Update_TransientState final state determination under transient conditions, reset increments and history This function is called by:","title":"S Transient MultiStep"},{"location":"Functions/latest/Solution_Library/Strategies/S_Transient_MultiStepwSD/","text":"Solution_Library > Strategies > S_Transient_MultiStepwSD S_Transient_MultiStepwSD Purpose script for multi-step transient analysis under given load history(ies) Synopsis This is a script file . Description TRANSIENT_MULTISTEPwSD script for multi-step transient analysis under given load history(ies) with initialization, automatic time step division and rescaling the script sets up the necessary variables for the load factor evolution for the transient analysis under one or more more load patterns with given load histories; it initializes the state of the structural model, only if the variable State does not exist; it is, therefore, useful both for the application of load patterns with load histories from the unstressed state or for the continuation of transient analysis after a change of the load patterns or the load histories; the script supports automatic load step subdivision and rescaling; it initializes the counter pc only if it does not exist in the workspace and saves post-processing information of the initial response state; it performs several load steps of static analysis with the parameters in SolStrat until the pseudo-time parameter Time in State exceeds the specified maximum time Tmax Cross-Reference Information This function calls: Structure performs requested action on group of elements Initialize_State initialize state variables of structural model and create STATE TransientIncrement load incrementation and state advance under transient conditions TransientInitialize initialize State variables for transient response analysis TransientIterate equilibrium iterations until convergence under transient conditions Update_TransientState final state determination under transient conditions, reset increments and history This function is called by:","title":"S Transient MultiStepwSD"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/","text":"Transient Analysis AccelerationIntegral determines displacement and velocity history for given acceleration history DuctilityDemandSpectrum determines the ductility demand spectrum for given acceleration history EigenMode determines eigenfrequencies and eigenmodes of structural model ElasticResponseSpectrum determines the elastic response spectrum for given acceleration history InelBilinSDOF_Newmark determines the response of inelastic bilinear SDOF system to acceleration history with Newmark's method InelSDOF_Newmark inelastic response of SDOF system to acceleration history with Newmark's method InelasticResponseSpectrum determines the inelastic response spectrum for given acceleration history LDRitzVectors generation of mass and stiffness orthogonal Load Dependent Ritz vectors LSDOF_CentralDifference determines the response of linear SDOF system to acceleration history with central difference method LSDOF_LinearWilson transient response of linear SDOF system by exact integration of piecewise linear excitation LSDOF_Newmark determines the response of linear SDOF system to acceleration history with Newmark's method ModalAnalysis determines modal response history for given transient loading ModeDecomposition determines eigenmode participation factors of given vector V OneTransientIteration single equilibrium iteration under transient conditions TimeIntegrationConstants constants of time integration strategy TransientIncrement load incrementation and state advance under transient conditions TransientInitialize initialize State variables for transient response analysis TransientIterate equilibrium iterations until convergence under transient conditions TransientStateDetermination structure state determination under transient conditions Update_TransientState final state determination under transient conditions, reset increments and history Other files in this directory InelBilinSDOF_Newmark.p LDRitzVectors.p OneTransientIteration.p TransientIncrement.p TransientInitialize.p TransientIterate.p TransientStateDetermination.p Update_TransientState.p","title":"Transient Analysis"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/AccelerationIntegral/","text":"Solution_Library > Transient_Analysis > AccelerationIntegral AccelerationIntegral Purpose determines displacement and velocity history for given acceleration history Synopsis [ u , udot ] = AccelerationIntegral ( uddot , Deltat , nstep ) Description ACCELERATIONINTEGRAL determines displacement and velocity history for given acceleration history [U,UDOT] = ACCELERATIONINTEGRAL (UDDOT,DELTAT,NSTEP,U0,UDOT0) the function integrates the acceleration history in array UDDOT to determine the displacement history in array U and the velocity history in array UDOT; the time step of the acceleration record is DELTAT and the total number of steps is NSTEP (default = no of acceleration values); the displacement and the velocity history are corrected for zero end values Cross-Reference Information This function calls: This function is called by:","title":"AccelerationIntegral"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/DuctilityDemandSpectrum/","text":"Solution_Library > Transient_Analysis > DuctilityDemandSpectrum DuctilityDemandSpectrum Purpose determines the ductility demand spectrum for given acceleration history Synopsis mu = DuctilityDemandSpectrum ( Acceleration , Ry , T , zeta ) Description DUCTILITYDEMANDSPECTRUM determines the ductility demand spectrum for given acceleration history MU = DUCTILITYDEMANDSPECTRUM (ACCELERATION,RY,T,Z) the function determines the ductility demand spectrum for a given acceleration history in data structure ACCELERATION with fields Deltat (time step size) and Value (acceleration value) and for given yield strength reduction factor(s) in row vector RY; the periods for the spectrum are specified in row vector T ( default= [0.001 0.1:0.1:5] ); the row vector ZETA contains the damping ratio(s) ( default=0 ) the ductility demand values for the periods in row vector T are returned in array MU with the row number corresponding to the period and the column number to the yield strength reduction factor Cross-Reference Information This function calls: InelSDOF_Newmark inelastic response of SDOF system to acceleration history with Newmark\u2019s method LSDOF_Newmark determines the response of linear SDOF system to acceleration history with Newmark\u2019s method This function is called by:","title":"DuctilityDemandSpectrum"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/EigenMode/","text":"Solution_Library > Transient_Analysis > EigenMode EigenMode Purpose determines eigenfrequencies and eigenmodes of structural model Synopsis [ omega , Ueig ] = EigenMode ( Kf , M , nmod ) Description EIGENMODE determines eigenfrequencies and eigenmodes of structural model [OMEGA UEIG] = EIGENMODE(KF,M,NMOD) function determines the lowest NMOD (default=all) eigenfrequencies in row vector OMEGA and corresponding eigenmodes in array UEIG for a structure with free dof stiffness matrix KF and free dof lumped mass vector or consistent mass matrix M; the eigenmodes in array UEIG are arranged columnwise (column no=mode no) Cross-Reference Information This function calls: Condense_MV condense matrix Kf and vector Pf to a reduced set idr of degrees of freedom This function is called by: Create_Damping setup damping matrix of structural model ModalAnalysis determines modal response history for given transient loading","title":"EigenMode"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/ElasticResponseSpectrum/","text":"Solution_Library > Transient_Analysis > ElasticResponseSpectrum ElasticResponseSpectrum Purpose determines the elastic response spectrum for given acceleration history Synopsis [ D , Psv , Psa ] = ElasticResponseSpectrum ( Acceleration , T , zeta ) Description ELASTICRESPONSESPECTRUM determines the elastic response spectrum for given acceleration history [D,PSV,PSA] = ELASTICRESPONSESPECTRUM (ACCELERATION,T,ZETA) the function determines the elastic response spectrum for a given acceleration history in data structure ACCELERATION with fields Deltat (time step size) and Value (acceleration value); the periods for the spectrum are specified in row vector T ( default= [0.001 0.1:0.1:5] ); the row vector ZETA contains the damping ratio(s) ( default=0 ); the response spectrum values for the periods in row vector T are returned in arrays D for displacement, PSV for pseudo-velocity, and PSA for pseudo-acceleration with the row number corresponding to the period and the column number to the damping ratio Cross-Reference Information This function calls: LSDOF_LinearWilson transient response of linear SDOF system by exact integration of piecewise linear excitation This function is called by: ElasticSpectra4EQRecord generates elastic response spectra for earthquake record","title":"ElasticResponseSpectrum"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/InelBilinSDOF_Newmark/","text":"Solution_Library > Transient_Analysis > InelBilinSDOF_Newmark InelBilinSDOF_Newmark Purpose determines the response of inelastic bilinear SDOF system to acceleration history with Newmark\u2019s method Synopsis [ u , udot , uddot , Pr ] = InelBilinSDOF_Newmark ( Deltat , omega , p , MatData , zeta , u0 , udot0 ) Description INELBILINSDOF_NEWMARK determines the response of inelastic bilinear SDOF system to acceleration history with Newmark's method [U,UDOT,UDDOT,PR] = INELSDOF_NEWMARK (DELT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of inelastic bilinear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; N.M. Newmark's method from 1959 is used for the numerical integration of the equations of motion; the properties of the force-deformation relation are supplied in data structure MATDATA; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT, the acceleration history(ies) in array UDDOT, and the resisting force history(ies) in array PR (also in the form force/mass!); these arrays are arranged columnwise (column no=frequency no) Cross-Reference Information This function calls: This function is called by:","title":"InelBilinSDOF Newmark"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/InelSDOF_Newmark/","text":"Solution_Library > Transient_Analysis > InelSDOF_Newmark InelSDOF_Newmark Purpose inelastic response of SDOF system to acceleration history with Newmark\u2019s method Synopsis [ u , udot , uddot , pr ] = InelSDOF_Newmark ( Deltat , omega , p , InelSDFData , zeta , u0 , udot0 ) Description INELSDOF_NEWMARK inelastic response of SDOF system to acceleration history with Newmark's method [U,UDOT,UDDOT,PR] = INELSDOF_NEWMARK (DELT,OMEGA,P,INELSDFDATA,ZETA,U0,UDOT0) the function determines the transient response history of an inelastic SDOF system to the acceleration history (force/mass) in vector P with Newmark's constant average acceleration method (1959) with time step of integration DELTAT; row vector OMEGA contains the eigenfrequency(ies) of the SDOF system, and row vector ZETA the optional damping ratio(s) (default = 0); the optional initial conditions are specified in row vectors U0 for the displacement and UDOT0 for the velocity (default values for both = 0); INELSDFDATA carries the force-deformation properties for the inelastic SDOF system: MatName = function name for 1d relation (default = InelLPwLH1dMat) uy = yield displacement (default = 1) eta = post-yield stiffness ratio (default = 0) the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT, the acceleration history(ies) in array UDDOT, and the resisting force history(ies) in array PR (also in the form force/mass!); these arrays are arranged columnwise (column no=frequency no) Cross-Reference Information This function calls: This function is called by: DuctilityDemandSpectrum determines the ductility demand spectrum for given acceleration history InelasticResponseSpectrum determines the inelastic response spectrum for given acceleration history","title":"InelSDOF Newmark"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/InelasticResponseSpectrum/","text":"Solution_Library > Transient_Analysis > InelasticResponseSpectrum InelasticResponseSpectrum Purpose determines the inelastic response spectrum for given acceleration history Synopsis [ D , V , A ] = InelasticResponseSpectrum ( Acceleration , MatData , T , zeta ) Description INELASTICRESPONSESPECTRUM determines the inelastic response spectrum for given acceleration history [D,V,A] = INELASTICRESPONSESPECTRUM (ACCELERATION,MATDATA,T,ZETA) the function determines the inelastic response spectrum for a given acceleration history in data structure ACCELERATION with fields Deltat (time step size) and Value (acceleration value); the properties of the force-deformation relation are supplied in data structure MATDATA; the periods for the spectrum are specified in row vector T ( default= [0.001 0.1:0.1:5] ); the row vector ZETA contains the damping ratio(s) ( default=0 ); the response spectrum values for the periods in row vector T are returned in arrays D for displacement, V for velocity, and A for acceleration with the row number corresponding to the period and the column number to the damping ratio Cross-Reference Information This function calls: InelSDOF_Newmark inelastic response of SDOF system to acceleration history with Newmark\u2019s method This function is called by:","title":"InelasticResponseSpectrum"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/LDRitzVectors/","text":"Solution_Library > Transient_Analysis > LDRitzVectors LDRitzVectors Purpose generation of mass and stiffness orthogonal Load Dependent Ritz vectors Synopsis [ LDR , omega ] = LDRitzVectors ( Kf , M , Pref , nov ) Description LDRITZVECTORS generation of mass and stiffness orthogonal Load Dependent Ritz vectors generation of nov Load Dependent Ritz vectors that are orthonormal to the lumped mass matrix M and orthogonal to the stiffenss matrix Kf INPUT ----------------------------- Kf : nf x nf stiffness matrix M : mass matrix or lumped mass vector Pref : vector of applied force distribution nov : number of Load Dependent Ritz vectors OUTPUT ---------------------------- LDR : Load-Dependent Ritz vectors omega : eigenfrequencies of reduced problem Cross-Reference Information This function calls: This function is called by: ModalAnalysis determines modal response history for given transient loading","title":"LDRitzVectors"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/LSDOF_CentralDifference/","text":"Solution_Library > Transient_Analysis > LSDOF_CentralDifference LSDOF_CentralDifference Purpose determines the response of linear SDOF system to acceleration history with central difference method Synopsis [ u , udot , uddot ] = LSDOF_CentralDifference ( Deltat , omega , p , zeta , u0 , udot0 ) Description LSDOF_CENTRALDIFFERENCE determines the response of linear SDOF system to acceleration history with central difference method [U,UDOT,UDDOT] = LSDOF_CENTRALDIFFERENCE (DELTAT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of linear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; the central difference method is used for the numerical integration of the equations of motion; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT and the acceleration history(ies) in array UDDOT arranged columnwise (column no=frequency no); Reference: A.K.Chopra, Dynamics of Structures, 2nd edition, pp. 171-174 Cross-Reference Information This function calls: This function is called by:","title":"LSDOF CentralDifference"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/LSDOF_LinearWilson/","text":"Solution_Library > Transient_Analysis > LSDOF_LinearWilson LSDOF_LinearWilson Purpose transient response of linear SDOF system by exact integration of piecewise linear excitation Synopsis [ u , udot , uddot ] = LSDOF_LinearWilson ( Deltat , omega , p , zeta , u0 , udot0 ) Description LSDOF_LINEARWILSON transient response of linear SDOF system by exact integration of piecewise linear excitation [U,UDOT,UDDOT] = LSDOF_LINEARWILSON (DELTAT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of linear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; the function integrates exactly the equations of motion for piecewise linear interpolation of excitation; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT and the acceleration history(ies) in array UDDOT arranged columnwise (column no=frequency no); Reference: A.K.Chopra, Dynamics of Structures, 2nd edition, pp. 167-171 Cross-Reference Information This function calls: This function is called by: ElasticResponseSpectrum determines the elastic response spectrum for given acceleration history ModalAnalysis determines modal response history for given transient loading","title":"LSDOF LinearWilson"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/LSDOF_Newmark/","text":"Solution_Library > Transient_Analysis > LSDOF_Newmark LSDOF_Newmark Purpose determines the response of linear SDOF system to acceleration history with Newmark\u2019s method Synopsis [ u , udot , uddot ] = LSDOF_Newmark ( Deltat , omega , p , zeta , u0 , udot0 ) Description LSDOF_NEWMARK determines the response of linear SDOF system to acceleration history with Newmark's method [U,UDOT,UDDOT] = LSDOF_NEWMARK (DELTAT,OMEGA,P,ZETA,U0,UDOT0) function determines the transient response history of linear SDOF system(s) with eigenfrequency(ies) in row vector OMEGA, to acceleration history (force/mass) in vector P, for damping ratio(s) in row vector ZETA (default=0), and initial conditions in row vectors U0 (displacement) and UDOT0 (velocity) (default values=0); the time step of integration is DELTAT; N.M. Newmark's method from 1959 is used for the numerical integration of the equations of motion; the function returns the displacement history(ies) in array U, the velocity history(ies) in array UDOT and the acceleration history(ies) in array UDDOT arranged columnwise (column no=frequency no); Reference: A.K.Chopra, Dynamics of Structures, 2nd edition, pp. 174-180 Cross-Reference Information This function calls: This function is called by: DuctilityDemandSpectrum determines the ductility demand spectrum for given acceleration history","title":"LSDOF Newmark"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/ModalAnalysis/","text":"Solution_Library > Transient_Analysis > ModalAnalysis ModalAnalysis Purpose determines modal response history for given transient loading Synopsis [ omega , Ueig , Y_t , Ydot_t , Yddot_t ] = ModalAnalysis ( option , Kf , M , Loading , Deltat , zeta , nmod ) Description MODALANALYSIS determines modal response history for given transient loading [OMEGA,UEIG,Y_T,YDOT_T,YDDOT_T] = MODALANALYSIS (OPTION,KF,M,LOADING,DELTAT,ZETA,NMOD) the function determines the response history of a multi-dof structural model with stiffness matrix at free dofs KF and consistent mass matrix or lumped mass vector M under given transient loading in data structure LOADING for the lowest NMOD (default=all) eigenmodes or NMOD Ritz vectors with damping ratios in row vector ZETA (default=0); the time step of integration is DELTAT; OPTION = 'eig' uses nmod eigenvectors, while OPTION = 'Ritz' uses nmod Ritz vectors in the modal analysis; the function returns NMOD eigenfrequencies of the structural model in row vector OMEGA, the eigenmode or Ritz vector shapes in array UEIG arranged columnwise (column no=mode no), and the response history of each eigenmode or Ritz vector in array Y_T arranged columnwise (column no=mode no), the velocity history of each eigenmode or Ritz vector in array YDOT_t, and the acceleration history of each eigenmode or Ritz vector in array YDDOT_t the data structure LOADING has the following fields LOADING.Uddref = vector of reference acceleration values at model dofs Pref = vector of reference load values at model dofs U0 = vector of initial displacement values at model dofs Udot0 = vector of initial velocity values at model dofs FrcHst = force time history in field Value AccHst = acceleration time history in field Value Cross-Reference Information This function calls: EigenMode determines eigenfrequencies and eigenmodes of structural model LDRitzVectors generation of mass and stiffness orthogonal Load Dependent Ritz vectors LSDOF_LinearWilson transient response of linear SDOF system by exact integration of piecewise linear excitation ModeDecomposition determines eigenmode participation factors of given vector V This function is called by:","title":"ModalAnalysis"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/ModeDecomposition/","text":"Solution_Library > Transient_Analysis > ModeDecomposition ModeDecomposition Purpose determines eigenmode participation factors of given vector V Synopsis [ Mmod , Ymod , Vmod ] = ModeDecomposition ( M , Ueig , V ) Description MODEDECOMPOSITION determines eigenmode participation factors of given vector V [MMOD,YMOD,VMOD] = MODEDECOMPOSITION (M,UEIG,V) the function determines the mode participation factors of vector V for a structural model with consistent mass matrix or lumped mass vector M at free DOFs for the modes in array UEIG arranged columnwise (column no=mode no); the function returns the modal mass terms in row vector MMOD, the mode participation factors in row vector YMOD and the inertial force decomposition vectors in array VMOD arranged columwise the size of the consistent mass matrix or the length of lumped mass vector M, the length of vector V and the number of rows of arrays UEIG and VMOD is equal to the number of free dofs of the structural model; the length of row vectors MMOD and YMOD is equal to the number of non-zero mass terms in the lumped mass vector M or the number of free dofs of the structural model for the case of consistent mass matrix M Cross-Reference Information This function calls: This function is called by: ModalAnalysis determines modal response history for given transient loading","title":"ModeDecomposition"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/OneTransientIteration/","text":"Solution_Library > Transient_Analysis > OneTransientIteration OneTransientIteration Purpose single equilibrium iteration under transient conditions Synopsis [ State , SolStrat ] = OneTransientIteration ( Model , ElemData , Loading , State , SolStrat ) Description ONETRANSIENTITERATION single equilibrium iteration under transient conditions [STATE,SOLSTRAT] = ONETRANSIENTITERATION (MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function performs a single equilibrium iteration under the applied loading and determines the corresponding displacement increments under transient conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories Cross-Reference Information This function calls: TimeIntegrationConstants constants of time integration strategy TransientStateDetermination structure state determination under transient conditions This function is called by: TransientIterate equilibrium iterations until convergence under transient conditions","title":"OneTransientIteration"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/TimeIntegrationConstants/","text":"Solution_Library > Transient_Analysis > TimeIntegrationConstants TimeIntegrationConstants Purpose constants of time integration strategy Synopsis Int_Constants = TimeIntegrationConstants ( TimeStrat , option ) Description TIMEINTEGRATIONCONSTANTS constants of time integration strategy INT_CONSTANTS = TIMEINTEGRATIONCONSTANTS (TIMESTRAT) the function determines the constants of the time integration strategy speficied in field Type of data structure TIMESTRAT and returns them in vector INT_CONSTRANTS the data structure TIMESTRAT contains information about the integration strategy in fiels DELTAT = time step (scalar) TYPE = name of integration method (character variable) PARAM = parameters of integration method (vector) Cross-Reference Information This function calls: This function is called by: OneTransientIteration single equilibrium iteration under transient conditions TransientIncrement load incrementation and state advance under transient conditions Update_TransientState final state determination under transient conditions, reset increments and history","title":"TimeIntegrationConstants"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/TransientIncrement/","text":"Solution_Library > Transient_Analysis > TransientIncrement TransientIncrement Purpose load incrementation and state advance under transient conditions Synopsis [ State , SolStrat ] = TransientIncrement ( Model , ElemData , Loading , State , SolStrat ) Description TRANSIENTINCREMENT load incrementation and state advance under transient conditions [STATE,SOLSTRAT] = TRANSIENTINCREMENT(MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function increments the applied loading and determines the corresponding displacement increments under transient conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories Cross-Reference Information This function calls: LoadFactorIncrement load factor increment(s) for given load histories TimeIntegrationConstants constants of time integration strategy TransientStateDetermination structure state determination under transient conditions This function is called by: S_Transient_MultiStep script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD script for multi-step transient analysis under given load history(ies)","title":"TransientIncrement"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/TransientInitialize/","text":"Solution_Library > Transient_Analysis > TransientInitialize TransientInitialize Purpose initialize State variables for transient response analysis Synopsis State = TransientInitialize ( Model , ElemData , Loading , State ) Description TRANSIENTINITIALIZE initialize State variables for transient response analysis STATE = TRANSIENTINITIALIZE(MODEL,ELEMDATA,LOADING,STATE) the function initializes variables in STATE relevant for transient response analysis and returns an updated data structure STATE; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force, imposed displacement, and imposed acceleration patterns with corresponding load histories; specifically the function adds the following fields to STATE needed for transient analysis STATE lamda = row vector of current load factors Pi = initial force vector (for load sequences) Time = pseudo-or real time counter Ugddot = support acceleration vector C = damping matrix Cross-Reference Information This function calls: This function is called by: S_Transient_MultiStep script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD script for multi-step transient analysis under given load history(ies)","title":"TransientInitialize"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/TransientIterate/","text":"Solution_Library > Transient_Analysis > TransientIterate TransientIterate Purpose equilibrium iterations until convergence under transient conditions Synopsis [ State , SolStrat ] = TransientIterate ( Model , ElemData , Loading , State , SolStrat ) Description TRANSIENTITERATE equilibrium iterations until convergence under transient conditions [STATE,SOLSTRAT] = TRANSIENTITERATE (MODEL,ELEMDATA,LOADING,STATE,SOLSTRAT) the function performs equilibrium iterations until convergence under the applied loading and determines the corresponding displacement increments under transient conditions; information about the state of the structure is updated in STATE and information about parameters of solution strategy are updated in SOLSTRAT; MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties, and LOADING is a data structure with information about applied force and imposed displacement patterns and corresponding load histories Cross-Reference Information This function calls: OneTransientIteration single equilibrium iteration under transient conditions This function is called by: S_Transient_MultiStep script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD script for multi-step transient analysis under given load history(ies)","title":"TransientIterate"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/TransientStateDetermination/","text":"Solution_Library > Transient_Analysis > TransientStateDetermination TransientStateDetermination Purpose structure state determination under transient conditions Synopsis State = TransientStateDetermination ( StifUpdt , Model , ElemData , State , Int_Constants ) Description TRANSIENTSTATEDETERMINATION structure state determination under transient conditions STATE = TRANSIENTSTATEDETERMINATION (STIFUPDT,MODEL,ELEMDATA,STATE) the function updates the structure resisting force vector in STATE for the current state of the structure as described by the displacement vector and its increments as as well as by the history variables in STATE; the effective resisting force and tangent stiffness matrix depend on integration constants in cell array INT_CONSTANTS depending on the value of character variable STIFUPDT the function also updates the tangent stiffness matrix in STATE MODEL is a data structure with information about the structural model, ELEMDATA is a cell array with element properties Cross-Reference Information This function calls: Structure performs requested action on group of elements This function is called by: OneTransientIteration single equilibrium iteration under transient conditions TransientIncrement load incrementation and state advance under transient conditions","title":"TransientStateDetermination"},{"location":"Functions/latest/Solution_Library/Transient_Analysis/Update_TransientState/","text":"Solution_Library > Transient_Analysis > Update_TransientState Update_TransientState Purpose final state determination under transient conditions, reset increments and history Synopsis State = Update_TransientState ( Model , ElemData , State , SolStrat ) Description UPDATE_TRANSIENTSTATE final state determination under transient conditions, reset increments and history STATE = UPDATE_TRANSIENTSTATE (MODEL,ELEMDATA,STATE,SOLSTRAT) the function performs a final state determination for the current state of the structure as described by the displacement vector and its increments as well as by the history variables in STATE; it then updates the structure resisting forces, and history variables as well as the nodal velocities and accelerations in STATE and then sets the displacement increments in STATE to zero data structure SOLSTRAT carries information about the time integration scheme in field TimeStrat Cross-Reference Information This function calls: Structure performs requested action on group of elements TimeIntegrationConstants constants of time integration strategy This function is called by: S_Transient_MultiStep script for multi-step transient analysis under given load history(ies) S_Transient_MultiStepwSD script for multi-step transient analysis under given load history(ies)","title":"Update TransientState"},{"location":"Functions/latest/Utilities/","text":"Utilities","title":"Utilities"},{"location":"Functions/latest/Utilities/General/","text":"General CleanStart clear all variables from the base workspace and close any open windows Create_DispCyclewN generate time and value pairs for a single displacement cycle with normal force Create_LoadHistory generate time and value pairs of a displacement cycle with normal force Create_MultDispCycleswN sequence of full, half or quarter displacement cycles with axial force Create_Units create time, length, mass and force units D_index cell array of indices into structure arrays for non-zero element deformations ElasticSpectra4EQRecord generates elastic response spectra for earthquake record Extract_Fields Summary of this function goes here H_index cell array of indices into structure arrays for continuous element deformations Print_Figs2File prints some or all open figures to file Print_PDFile sends the current figure to file Read_PEEREQRecord reads ground motions in the format of the PEER database Other files in this directory D_index.p H_index.p","title":"General"},{"location":"Functions/latest/Utilities/General/CleanStart/","text":"Utilities > General > CleanStart CleanStart Purpose clear all variables from the base workspace and close any open windows Synopsis CleanStart Description CLEANSTART clear all variables from the base workspace and close any open windows CLEANSTART the function initializes the workspace for a new analysis by clearing all existing variables and closing any open windows Cross-Reference Information This function calls: This function is called by:","title":"CleanStart"},{"location":"Functions/latest/Utilities/General/Create_DispCyclewN/","text":"Utilities > General > Create_DispCyclewN Create_DispCyclewN Purpose generate time and value pairs for a single displacement cycle with normal force Synopsis [ DspHst , FrcHst ] = Create_DispCyclewN ( DspPat , Options ) Description CREATE_DISPCYCLEwN generate time and value pairs for a single displacement cycle with normal force [DSPHST,FRCHST] = CREATE_DISPCYCLEwN (DSPPAT,OPTIONS) the function generates the time and value pairs of a single displacement cycle for the pattern in DSPPAT under constant or variable normal force N; the function returns the displacement history in data structure array DSPHST with fields Time and Value and the axial force history in data structure FRCHST with fields Time and Value; the displacement history consists of unit values at reversals with zero values in between, while the force history consists of unit values for constant axial force +- the variable axial force ratio NRat relative to the constant axial force specified in OPTIONS; the structure array DSPHST has one entry for uniaxial and 2 entries for biaxial displacement patterns; FRCHST has only one entry; DSPPAT is a character variable for the displacement path with the following syntax: U means uniaxial and B biaxial, with the addition of V indicating a variable axial force; the supported patterns are: U1(UV1) : uniaxial displacement history in 1-direction U2(UV2) : uniaxial displacement history in 2-direction U3(UV3) : displacement history at specified ratio of values along axis 1 and 2 B1(BV1) : circular displacement pattern starting with axis 1 B2(BV2) : counter-clock wise clover leaf pattern B3(BV3) : diamond displacement pattern B4(BV4) : circular displacement pattern starting with axis 2 OPTIONS is an optional data structure with the following fields: .TrmpN = time interval for ramping up the application of the axial force N .TrmpU = time interval for ramping up or down the application of first U .Nsub = time subdivision for description of circular path (default = 100) .NRat = ratio for axial force variation relative to constant value .HCyc = true or false; if true the function returns a half cycle instead of full .QCyc = true or false; if true the function returns a quarter cycle instead of full Cross-Reference Information This function calls: This function is called by: Create_MultDispCycleswN sequence of full, half or quarter displacement cycles with axial force","title":"Create DispCyclewN"},{"location":"Functions/latest/Utilities/General/Create_LoadHistory/","text":"Utilities > General > Create_LoadHistory Create_LoadHistory Purpose generate time and value pairs of a displacement cycle with normal force Synopsis LoadHist = Create_LoadHistory ( RevVal , LHCase , T_Rev ) Description CREATE_LOADHIST generate time and value pairs of a displacement cycle with normal force LOADHIST = CREATE_LOADHIST (REVVAL,LHCASE,T_REV) the function creates load history time and value pairs in fields Time and Value of the structure LOADHIST, respectively; the row vector REVVAL contains the load reversal values and the variable T_REV the period of reversals; the character variable LHCASE supports two cases: 'A' stands for the case that the Nth reversal occurs at N*T_REV, 'B' stands for the case that the reversal times are adjusted so that the rate of change for the load value is constant between reversals Cross-Reference Information This function calls: This function is called by:","title":"Create LoadHistory"},{"location":"Functions/latest/Utilities/General/Create_MultDispCycleswN/","text":"Utilities > General > Create_MultDispCycleswN Create_MultDispCycleswN Purpose sequence of full, half or quarter displacement cycles with axial force Synopsis [ DspHst , FrcHst ] = Create_MultDispCycleswN ( DspPat , Ucyc , Ncyc , TmStr , Options ) Description CREATE_MULTDISPCYCLESwN sequence of full, half or quarter displacement cycles with axial force [DSPHST,FRCHST] = CREATE_MULTDISPCYCLESwN (DSPPAT,UCYC,NCYC,TMSTR,OPTIONS) the function generates a sequence of full, half or quarter displacement cycles after factoring each with the corresponding factor in array UCYC; the axial force factor of the correponding cycle is specified in the optional array NCYC; UCYC is an ND x NCYC array and NCYC is a 1 x NCYC row vector, where ND is the number of imposed displacements/forces (1=uniaxial, 2=biaxial) and NCYC is the number of cycles; if NCYC is not specified, it is assumed equal to ONES(1,NCYC); the function returns the displacement history in the data structure array DSPHST with the fields Time and Value and the axial force history in the data structure FRCHST with the fields Time and Value; the data structure array DSPHST has one entry for uniaxial and 2 entries for biaxial and 2 entries for biaxial displacement patterns; FRCHST has only one entry. DSPPAT is a character variable if the displacement pattern is the same for all cycles and a character cell array, if the displacement pattern varies from cycle to cycle; the character variable identifies the path of the displacement pattern with the syntax: U means uniaxial and B biaxial, with the addition of V indicating a variable axial force; the supported patterns are: U1(UV1) : uniaxial displacement history in 1-direction U2(UV2) : uniaxial displacement history in 2-direction U3(UV3) : displacement history at specified ratio of values along axis 1 and 2 B1(BV1) : circular displacement pattern starting with axis 1 B2(BV2) : counter-clock wise clover leaf pattern B3(BV3) : diamond displacement pattern B4(BV4) : circular displacement pattern starting with axis 2 the optional argument TMSTR is a logical variable (true or false) to indicate whether the the pseudo-time needs stretching/shortening to maintain equal displacement increment for each displacement reversal (default = true). OPTIONS(NCYC) is an optional structure array with the following fields: .TrmpN = time interval for ramping up the application of the axial force N .TrmpU = time interval for ramping up or down the application of the first displacement .Nsub = time subdivision for description of the circular path .NRat = ratio of axial force variation relative to constant value .HCyc = true or false; true for half cycle instead of full displacement cycle .QCyc = true or false; true for quarter cycle instead of full displacement cycle Cross-Reference Information This function calls: Create_DispCyclewN generate time and value pairs for a single displacement cycle with normal force This function is called by:","title":"Create MultDispCycleswN"},{"location":"Functions/latest/Utilities/General/Create_Units/","text":"Utilities > General > Create_Units Create_Units Purpose create time, length, mass and force units Synopsis Units = Create_Units ( UnOption ) Description CREATE_UNITS create time, length, mass and force units UNITS = CREATE_UNITS (UNOPTION) the function creates the data structure UNITS with time, length, mass and force units including the value of the acceleration of gravity g for both the SI and the U.S. system; the optional input argument UNOPTION specifies the unit system to select for unit values: UNOPTION = 'US' means that sec, in and kip have unit value for deriving the remaining units UNOPTION = 'SI' means that sec, m and kg have unit value for deriving the remaining units Cross-Reference Information This function calls: This function is called by: ElasticSpectra4EQRecord generates elastic response spectra for earthquake record","title":"Create Units"},{"location":"Functions/latest/Utilities/General/D_index/","text":"Utilities > General > D_index D_index Purpose cell array of indices into structure arrays for non-zero element deformations Synopsis ied = D_index ( Model ) Description D_INDEX cell array of indices into structure arrays for non-zero element deformations IED = IDEF_INDEX (MODEL) the function sets up the cell array IED of indices for non-zero element deformations of the structural model in data structure MODEL; the list of inextensible elements is provided in field INEXTELIST of MODEL, and the list of inflexible elements in field INFLEXELIST of MODEL Cross-Reference Information This function calls: This function is called by: Animate_EventSequence generate plot sequence with location of plastic hinges for each event Plot_PlasticHinges display plastic hinge locations in current window Q2Post converts the vector of basic forces Q to cell array Post.Elem{}","title":"D index"},{"location":"Functions/latest/Utilities/General/ElasticSpectra4EQRecord/","text":"Utilities > General > ElasticSpectra4EQRecord ElasticSpectra4EQRecord Purpose generates elastic response spectra for earthquake record Synopsis Fig = ElasticSpectra4EQRecord ( AccHst , Options ) Description ELASTICSPECTRA4EQRECORD generates elastic response spectra for earthquake record FIG = ELASTICSPECTRA4EQRECORD (RECNAME,OPTIONS) the function generates and displays in a window the elastic response spectra for the accerelation record in the data structure ACCHST; the optional data structure OPTIONS carries parameters for spectra generation and some plot attributes; the function returns the figure handle FIG for further customization of the plot appearance; the data structure ACCHST has the following fields Time: vector of time steps of acceleration history Value: vector of corresponding acceleration values in g Deltat: time increment of recorded motion Title : information about the acceleration history with the following subfields (these are available for records in the PEER ground motion database) .Event : event of earthquake record .Date : date of earthquake record .Station : recording station .Direction : direction of ground acceleration the optional data structure OPTIONS has the following fields T : SDOF period range for spectra generation (default = 0:0.01:5) zeta : damping values for spectra generalation (default = [ 0 0.02 0.05 0.10 ] ) LUnit: unit system for length (options = 'SI' (cm) or 'US' (in), default = 'SI') FntSz: font size for axes and labels (default = 18) LnWth: line width (default = 1.5) LgFSz: font size for legends (default = 18) TlFSz: font size for plot title (default = 20) LnClr: specify the line colors for the plots as cell array, e.g. {'k';'b';'r';'m'} default color order uses the built-in function 'colororder' in Matlab 2019b or later Cross-Reference Information This function calls: ElasticResponseSpectrum determines the elastic response spectrum for given acceleration history Create_Units create time, length, mass and force units Create_Window creates new window with given dimensions Plot_XYData plots one or more pairs of X and Y array columns This function is called by:","title":"ElasticSpectra4EQRecord"},{"location":"Functions/latest/Utilities/General/Extract_Fields/","text":"Utilities > General > Extract_Fields Extract_Fields Purpose Summary of this function goes here Synopsis DataA = Extract_Fields ( DataB , FldNames ) Description UNTITLED4 Summary of this function goes here Detailed explanation goes here Cross-Reference Information This function calls: This function is called by:","title":"Extract Fields"},{"location":"Functions/latest/Utilities/General/H_index/","text":"Utilities > General > H_index H_index Purpose cell array of indices into structure arrays for continuous element deformations Synopsis iced = H_index ( Model , ElemData ) Description H_INDEX cell array of indices into structure arrays for continuous element deformations ICED = H_INDEX (MODEL,ELEMDATA) the function sets up the cell array ICED of indices for continuous element deformations based on release information for elements of the structural model in data structure MODEL; the location of element releases is specified in field RELEASE of cell array ELEMDATA ELEMDATA{2}.RELEASE = [0;1;0] : a flexural release is present at end i of element 2 ELEMDATA{3}.RELEASE = [1;0;1] : an axial and a flexural release at end j of element 3 the function supports only truss and 2d frame elements at present Cross-Reference Information This function calls: This function is called by: Bbar_matrix function for determining force influence matrices of structural model S_DisplMethod script for displacement method of structural analysis S_ForceMethod script for force method of structural analysis Plot_PlasticHinges display plastic hinge locations in current window Complete_QV complete basic force QIN and element deformation vector VE with values at releases","title":"H index"},{"location":"Functions/latest/Utilities/General/Print_Figs2File/","text":"Utilities > General > Print_Figs2File Print_Figs2File Purpose prints some or all open figures to file Synopsis Print_Figs2File ( Figure , FigName , FigOpt , PrOpt ) Description PRINT_FIGS2FILE prints some or all open figures to file PRINT_FIGS2FILE(FIGURE,FIGNAME,FIGOPT,PROPT) the function prints some or all figures with handles FIGURE to files with the name FIGNAME and suffix Fn with n as the numeric identifier; if FIGNAME is missing, it is replaced by 'PFile'; the optional arguments FIGOPT and PROPT are data structures with the following fields for controlling the display and the output: FIGOPT.Pos : position of figure(s) relative to display (1x4 numeric array) ( default = [ 0.10 0.10 0.88 0.88 ] ) .Ornt : figure orientation ('landscape' or 'portrait'; default='landscape') PROPT.Format: file format (default=-dpdf for PDF file) .Reso : print resolution (default=-r600 for PDF file) .Render: plot renderer (default=-painters) Example: Print_Fig2File(Fig([1 4]),'Response') prints the first and the fourth figure with handles in data structure Fig to the PDF files ResponseF1 and ResponseF2 Cross-Reference Information This function calls: This function is called by:","title":"Print Figs2File"},{"location":"Functions/latest/Utilities/General/Print_PDFile/","text":"Utilities > General > Print_PDFile Print_PDFile Purpose sends the current figure to file Synopsis Print_PDFile ( FName , FigOpt , PrOpt ) Description PRINT_PDFILE sends the current figure to file PRINT_PDFILE(FNAME,FIGOPT,PROPT) the function generates the FNAME.EXT file from the current figure; if FNAME is missing, it is replaced by 'PFile'; the optional arguments FIGOPT and PROPT are data structures with the following fields for controlling the display and the output: FIGOPT.Pos : position of figure relative to display (1x4 numeric array) ( default = [ 0.10 0.10 0.88 0.88 ] ) .Ornt : figure orientation ('landscape' or 'portrait'; default='landscape') PROPT.Format: file format (default=-dpdf for PDF file) .Reso : print resolution (default=-r600 for PDF file) .Render: plot renderer (default=-painters) Cross-Reference Information This function calls: This function is called by:","title":"Print PDFile"},{"location":"Functions/latest/Utilities/General/Read_PEEREQRecord/","text":"Utilities > General > Read_PEEREQRecord Read_PEEREQRecord Purpose reads ground motions in the format of the PEER database Synopsis AccHst = Read_PEEREQRecord ( RecName ) Description READ_PEEREQRECORD reads ground motions in the format of the PEER database ACCHST = READ_PEEREQRECORD (RECNAME) the function reads ground acceleration records in the format of the PEER database found in http://ngawest2.berkeley.edu/; if the name of the record is NOT specified in the character variable RECNAME, the function prompts for the directory with interactive selection of the record; if the RECNAME does not have an extension, the function adds the extension AT2; the function generates the data structure ACCHST with the following fields Title: general information about the record with subfields Event: earthquake name Date: date Station: recording station Direction: from record header PGA: peak ground acceleration in g AriasInt: Arias intensity in m/s Duration: significant duration (5-95% of AI) OutputUnit: acceleration in g FileName: filename of record Value: vector of acceleration values in g Time: vector of time steps Deltat: time increment of recorded motion Cross-Reference Information This function calls: This function is called by:","title":"Read PEEREQRecord"},{"location":"Functions/latest/Utilities/Interpolation/","text":"Interpolation Hermite Hermite interpolation polynomials in interval -1 Lagrange Lagrange interpolation polynomials in interval -1","title":"Interpolation"},{"location":"Functions/latest/Utilities/Interpolation/Hermite/","text":"Utilities > Interpolation > Hermite Hermite Purpose Hermite interpolation polynomials in interval -1<xi<1 Synopsis hp = Hermite ( degree , deriv , xi ) Description HERMITE Hermite interpolation polynomials in interval -1<xi<1 HP = HERMITE (DEGREE,DERIV,XI) the function determines the values of Hermite interpolation polynomials of degree DEGREE and derivative order DERIV at integration points in vector XI; the values are returned in array HP with rows representing the different Hermite polynomials of degree DEGREE and columns representing the values at points XI NOTE: XI need to be supplied in the interval -1<xi<1 EXAMPLE: Hermite(3,2,xi) returns the second derivative of cubic Hermite polynomials at xi If degree is even, one node of the equispaced grid used to evaluate the polynomials considers only the value of ordinate, without the derivative. This node is always the last node of the grid, considering that the end nodes are located in the first two positions. To go from the interval [-1;+1] to the interval [0;L]: Jac = 0.5*L; xP = Jac.*(1.+xi); hp(1:2:size(hp,1),:) = hp(1:2:size(hp,1),:)./(Jac^deriv); hp(2:2:size(hp,1),:) = hp(2:2:size(hp,1),:)./(Jac^(deriv-1)); Cross-Reference Information This function calls: This function is called by: Mass4Taper2dFrm_wDF consistent mass matrix for tapered 2d frame element with displ interpolation LE2dFrm_w2ndOrdDF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_wVarIDF 2d LE frame element with variable cross section under linear or NL geometry","title":"Hermite"},{"location":"Functions/latest/Utilities/Interpolation/Lagrange/","text":"Utilities > Interpolation > Lagrange Lagrange Purpose Lagrange interpolation polynomials in interval -1<xi<1 Synopsis lp = Lagrange ( degree , deriv , xi ) Description LAGRANGE Lagrange interpolation polynomials in interval -1<xi<1 LP = LAGRANGE(DEGREE,DERIV,XI) the function determines the values of Lagrange interpolation polynomials of degree DEGREE and derivative order DERIV at integration points in vector XI; the values are returned in array LP with rows representing the different Lagrange polynomials of degree DEGREE and columns representing the values at points XI NOTE: XI need to be supplied in the interval -1<xi<1 EXAMPLE: Lagrange(2,1,xi) returns the first derivative of quadratic Lagrange polynomials at xi To go from the interval [-1;+1] to the interval [0;L]: Jac = 0.5*L; xP = Jac.*(1.+xi); lp = lp./(Jac^deriv); Cross-Reference Information This function calls: This function is called by: Mass4Taper2dFrm_wDF consistent mass matrix for tapered 2d frame element with displ interpolation LE2dFrm_w2ndOrdDF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_w2ndOrdFF 2d LE frame element with moderate deformations under linear or NL geometry LE2dFrm_wVarIDF 2d LE frame element with variable cross section under linear or NL geometry LE2dFrm_wVarIFF 2d LE frame element with variable cross section under linear or NL geometry","title":"Lagrange"},{"location":"Functions/latest/Utilities/Plotting/","text":"Plotting Create_TickLabels creates cell array of tick labels with custom label skipping Create_Window creates new window with given dimensions Draw_3dAxisCross draw cross through the axes origin of the x-y-z data Draw_Arrow draws 2d or 3d arrow Draw_AxisCross draw cross through the axes origin of the x-y data Draw_Cube draws cube in current window Plot_DispPath plots biaxial displacement path in current window Plot_LoadHistory plots uniaxial or biaxial displacement and axial force history in current window Plot_SolutionHistory plots force-displacent pairs during iterative incremental solution Plot_StoryDistr plots all columns of array XP against the row index Plot_XYData plots one or more pairs of X and Y array columns RshpData4MultColorPlot reshapes column vectors x and y to arrays for multi-color plotting Sub directories Elements Sections Structure","title":"Plotting"},{"location":"Functions/latest/Utilities/Plotting/Create_TickLabels/","text":"Utilities > Plotting > Create_TickLabels Create_TickLabels Purpose creates cell array of tick labels with custom label skipping Synopsis TickLabel = Create_TickLabels ( TickNum , TickOpt ) Description CREATE_TICKLABELS creates cell array of tick labels with custom label skipping TICKLABEL = CREATE_TICKLABELS (TICKNUM,TICKOPT) the function creates the cell array of tick labels TICKLABEL by converting the numbers in the numerical array TICKNUM to labels the structure TICKOPT has the following fields: TICKOPT.TLStrt: specifies the cell number for the first label (default=1) .TLSpac: specifies the cell spacing of sequential numbers (default=2 i.e. one empty cell between labels) Example: Create_TickLabels( 1:5 ) generates a 9x1 cell array with the characters 1,2,3,4,5 in cells 1,3,5,7,9 while the other cells are empty Example: Create_TickLabels( 1:5 , TickOpt) with TickOpt.TLStrt = 2 and TLSpac = 3 generates a 16x1 cell array with the character 1 in the second cell and the characters 2,3,4,5 in the cells 5,8,11,14 respectively Cross-Reference Information This function calls: This function is called by:","title":"Create TickLabels"},{"location":"Functions/latest/Utilities/Plotting/Create_Window/","text":"Utilities > Plotting > Create_Window Create_Window Purpose creates new window with given dimensions Synopsis FigH = Create_Window ( dx , dy ) Description CREATE_WINDOW creates new window with given dimensions FIGH = CREATE_WINDOW (DX,DY) the function creates a new window with figure handle FIGH and dimensions DX and DY as proportions of the screen size in the horizontal and vertical direction, respectively Cross-Reference Information This function calls: This function is called by: ElasticSpectra4EQRecord generates elastic response spectra for earthquake record","title":"Create Window"},{"location":"Functions/latest/Utilities/Plotting/Draw_3dAxisCross/","text":"Utilities > Plotting > Draw_3dAxisCross Draw_3dAxisCross Purpose draw cross through the axes origin of the x-y-z data Synopsis Draw_3dAxisCross ( Xlim , Ylim , Zlim , PlotOpt ) Description DRAW_3DAXISCROSS draw cross through the axes origin of the x-y-z data DRAW_3DAXISCROSS (XLIM,YLIM, ZLIM, PLOTOPT) the function draws a cross through the axes origin of the x-y-z data with a gray, solid line style and 1.5 pt line width; these properties can be controlled by specifying the fields LnStl, LnWth and Color of the optional argument PLOTOPT; XLIM, YLIM, ZLIM are 1x2 numerical arrays for the specification of the axes endpoints Cross-Reference Information This function calls: This function is called by:","title":"Draw 3dAxisCross"},{"location":"Functions/latest/Utilities/Plotting/Draw_Arrow/","text":"Utilities > Plotting > Draw_Arrow Draw_Arrow Purpose draws 2d or 3d arrow Synopsis varargout = Draw_Arrow ( Astr , Aend , Aln , PlotOpt ) Description DRAW_ARROW draws 2d or 3d arrow AEND = DRAW_ARROW (ASTR,AEND,ALN,PLOTOPT) the function draws an arrow with starting point ASTR and end point AEND, if ALN is empty; if ALN is specified, then it represents the arrow length with AEND interpreted as the arrow direction; in this case the function returns the end point coordinates of the arrow in vector AEND PLOTOPT is a data structure for controlling the arrow display with the following fields: TipSF: scale factor for controlling the size of the arrow tip (default = 1); ArWth: line width of arrow shaft (default = 1); ArClr: color of arrow shaft and tip (default = 'k'); AbsSF: true or false to indicate absolute or relative to arrow length scaling Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: Plot_DispPath plots biaxial displacement path in current window Plot_SectionGeometry plots cross section geometry in current window Label_Model displays element and node numbers and global axes in the current window Plot_ElemLoading display element loading in current window Plot_NodalForces display nodal forces in current window","title":"Draw Arrow"},{"location":"Functions/latest/Utilities/Plotting/Draw_AxisCross/","text":"Utilities > Plotting > Draw_AxisCross Draw_AxisCross Purpose draw cross through the axes origin of the x-y data Synopsis Draw_AxisCross ( Xlim , Ylim , PlotOpt ) Description DRAW_AXISCROSS draw cross through the axes origin of the x-y data DRAW_AXISCROSS (XLIM,YLIM,PLOTOPT) the function draws a cross through the axes origin of the x-y data with a gray, solid line style and 1.5 pt line width; these properties can be controlled by specifying the fields LnStl, LnWth and LnClr of the optional argument PLOTOPT; XLIM and YLIM are 1x2 numerical arrays for the specification of the axes endpoints Cross-Reference Information This function calls: This function is called by: Plot_DispPath plots biaxial displacement path in current window Plot_LoadHistory plots uniaxial or biaxial displacement and axial force history in current window Plot_StoryDistr plots all columns of array XP against the row index Plot_XYData plots one or more pairs of X and Y array columns Plot_SectionGeometry plots cross section geometry in current window","title":"Draw AxisCross"},{"location":"Functions/latest/Utilities/Plotting/Draw_Cube/","text":"Utilities > Plotting > Draw_Cube Draw_Cube Purpose draws cube in current window Synopsis Draw_Cube ( XYZc , Size , Color ) Description DRAW_CUBE draws cube in current window DRAW_CUBE (XYZC,SIZE,COLOR) the function draws a cube of size SIZE with center coordinates XYZc and assigns COLOR to cube faces and edges Cross-Reference Information This function calls: This function is called by: Plot_Model plots the original or deformed geometry of the structural model","title":"Draw Cube"},{"location":"Functions/latest/Utilities/Plotting/Plot_DispPath/","text":"Utilities > Plotting > Plot_DispPath Plot_DispPath Purpose plots biaxial displacement path in current window Synopsis AxHndl = Plot_DispPath ( DspHst , PlotOpt ) Description PLOT_DISPPATH plots biaxial displacement path in current window AXHNDL = PLOT_DISPPATH (DSPHST,PLOTOPT) the function plots the biaxial displacement history in the structure array DSPHST in the current window and returns the axis handle in AXHNDL; the arrow on the displacement path corresponds to increasing pseudo-time; DSPHST has two entries with fields Time and Value; the optional argument PLOTOPT is a structure with the following fields: PLOTOPT.LnWth : line width for 2 or 3 plots (default=3) .LnStl : line style sequence for 2 or 3 plots (default='s-','o-','h-') .Color : color sequence for 2 or 3 plots (default='k','b','r') .MrkSz : marker size for 2 or 3 plots (default=5) .MFClr : marker face color sequence for 2 or 3 plots (default='k','b','r') .TipSF : scale factor for controlling the size of the arrow tip (default = 1); .ArWth : line width of arrow shaft (default = 1); .ArClr : color of arrow shaft and tip (default = 'k'); .AbsSF : true or false to indicate absolute or relative to arrow length scaling Cross-Reference Information This function calls: Draw_Arrow draws 2d or 3d arrow Draw_AxisCross draw cross through the axes origin of the x-y data This function is called by:","title":"Plot DispPath"},{"location":"Functions/latest/Utilities/Plotting/Plot_LoadHistory/","text":"Utilities > Plotting > Plot_LoadHistory Plot_LoadHistory Purpose plots uniaxial or biaxial displacement and axial force history in current window Synopsis AxHndl = Plot_LoadHistory ( DspHst , FrcHst , PlotOpt ) Description PLOT_LOADHISTORY plots uniaxial or biaxial displacement and axial force history in current window AXHNDL = PLOT_LOADHISTORY(DSPHST,FRCHST,PLOTOPT) the function plots the uniaxial or biaxial displacement history in the data structure DSPHST and the axial force history in the data structure FRCHST in the current window and returns the axis handle in AXHNDL; DSPHST has one entry for uniaxial and 2 entries for biaxial displacement patterns and has the fields Time and Value; FRCHST also has the fields Time and Value; the optional argument PLOTOPT is a structure with the following fields: PLOTOPT.LnWth : line width for 2 or 3 plots (default=3) .LnStl : line style sequence for 2 or 3 plots (default='s-','o-','h-') .LnClr : color sequence for 2 or 3 plots (default='k','b','r') .MrkSz : marker size for 2 or 3 plots (default=3) .MrkClr : marker face color sequence for 2 or 3 plots (default='k','b','r') Cross-Reference Information This function calls: Draw_AxisCross draw cross through the axes origin of the x-y data This function is called by:","title":"Plot LoadHistory"},{"location":"Functions/latest/Utilities/Plotting/Plot_SolutionHistory/","text":"Utilities > Plotting > Plot_SolutionHistory Plot_SolutionHistory Purpose plots force-displacent pairs during iterative incremental solution Synopsis AxHndl = Plot_SolutionHistory ( PUFinl , PUIncr , PUIter , PlotOpt ) Description PLOT_SOLUTIONHISTORY plots force-displacent pairs during iterative incremental solution AXHNDL = PLOT_SOLUTIONHISTORY (PUFINL,PUINCR,PUITER,PLOTOPT) the function plots in the current window the force-displacent pairs for specified DOFs during the iterative incremental solution; PUFINL, PUINCR and PUITER are data structures with the fields Uf, Pf and Pr for the free DOF displacements and the applied and resisting force vectors, respectively; if PUINCR is empty, the function plots only the final force-displacement pair for each step; PLOTOPT is a data structure with the following fields: PLOTOPT.LnWth : line width for plot ( default = [ 2 2 2 ]) .LnStl : line style sequence for plot ( default = {'none';'none';':'} ) .LnClr : color sequence for plot ( default = {'b';'m';'k'} ) .MrkSz : marker size for plot ( default = [ 6 15 10 ] ) .MrkClr : marker color sequence for plot ( default = {'b';'m';'r'} ) .MrkTyp : marker type sequence for plot ( default = {'o';'s';'s'} ) .XLbl : character variable for X-Label ( default = 'X-data') .YLbl : character variable for Y-Label ( default = 'X-data') .FntSz : font size for plot elements ( default = 30) .PScl : scalar factor for scaling the applied forces (e.g. to get load factor) .ShwFin : logical variable for including the final solution (default = true) .Udof : displacement DOF (negative to reverse direction in plot) .Pdof : force DOF (negative to reverse direction in plot) Cross-Reference Information This function calls: Plot_XYData plots one or more pairs of X and Y array columns This function is called by:","title":"Plot SolutionHistory"},{"location":"Functions/latest/Utilities/Plotting/Plot_StoryDistr/","text":"Utilities > Plotting > Plot_StoryDistr Plot_StoryDistr Purpose plots all columns of array XP against the row index Synopsis AxHndl = Plot_StoryDistr ( Xp , PlotOpt ) Description PLOT_STORYDISTR plots all columns of array XP against the row index AXHNDL = PLOT_STORYDISTR (XP,PLOTOPT) the function plots in the current window all columns of the array XP against the row index which is supposed to correspond to the story number and returns the axis handle in AXHNDL; the optional argument PLOTOPT is a structure with the following fields: PLOTOPT.LnWth : line width for plot (default = 2) .LnStl : line style sequence for plot (default = {'-','--',':','-.',':','--'} ) .LnClr : color sequence for plot (default = {'b','r','k','b','r','k'} ) .MrkSz : marker size for plot (default = 3) .MrkClr : marker color sequence for plot (default = {'b','r','k','b','r','k'} ) .MrkTyp : marker type sequence for plot (default = {'o','s','d','p','+','*'} ) .NoXTk : number of tick marks on X-axis (default = 5 including end points) .NoYTk : number of tick marks on Y-axis (default = 5 including end points) .FntSz : font size for plot elements (default = 30) .XLbl : character variable for X-Label (default = 'X-data') .YLbl : character variable for Y-Label (default = 'X-data') .Legnd : cell array of characters for plot legend (default: 1.Data, 2.Data, etc) Cross-Reference Information This function calls: Draw_AxisCross draw cross through the axes origin of the x-y data This function is called by:","title":"Plot StoryDistr"},{"location":"Functions/latest/Utilities/Plotting/Plot_XYData/","text":"Utilities > Plotting > Plot_XYData Plot_XYData Purpose plots one or more pairs of X and Y array columns Synopsis AxHndl = Plot_XYData ( Xp , Yp , PlotOpt , AxHndl ) Description PLOT_XYDATA plots one or more pairs of X and Y array columns AXHNDL = PLOT_XYDATA (XP,YP,PLOTOPT) the function plots in the current window one or more pairs of data in arrays XP and YP and returns the axis handle in AXHNDL; the arrays XP and YP must have the same number of rows and columns; the optional argument PLOTOPT is a structure with the following fields: PLOTOPT.LnWth : line width for plot (default = [ 2 no of X-Y pairs ]) .LnStl : line style sequence for plot (default = {'-','--',':','-.',':','--'} ) .LnClr : color sequence for plot (default = {'b','r','k','b','r','k'} ) .MrkSz : marker size for plot (default = [ 3 no of X-Y pairs ) .MrkClr : marker color sequence for plot (default = {'b','r','k','b','r','k'} ) .MrkTyp : marker type sequence for plot (default = {'o','s','d','p','+','*'} ) .NoXTk : number of tick marks on X-axis (default automatic) .NoYTk : number of tick marks on Y-axis (default automatic) .FntSz : font size for plot elements (default = 27) .XLbl : character variable for X-Label (default = 'X-data') .YLbl : character variable for Y-Label (default = 'X-data') .Legnd : cell array of characters for plot legend (default: 1.Data, 2.Data, etc) .ShwLg : logical variable for showing the plot legend (default = false) .MltClr : logical variable for color cycling of different data pairs (default = false) .AxStl : line style for coordinate cross (default '-') .AxClr : line color for coordinate cross (default [0.25 0.25 0.25] ) .AxWth : line width for coordinate cross (default 1.5 ) Cross-Reference Information This function calls: Draw_AxisCross draw cross through the axes origin of the x-y data This function is called by: ElasticSpectra4EQRecord generates elastic response spectra for earthquake record Plot_SolutionHistory plots force-displacent pairs during iterative incremental solution","title":"Plot XYData"},{"location":"Functions/latest/Utilities/Plotting/RshpData4MultColorPlot/","text":"Utilities > Plotting > RshpData4MultColorPlot RshpData4MultColorPlot Purpose reshapes column vectors x and y to arrays for multi-color plotting Synopsis [ Xplot , Yplot ] = RshpData4MultColorPlot ( x , y , noRev , NoRwSC ) Description RSHPDATA4MULTCOLORPLOT reshapes column vectors x and y to arrays for multi-color plotting [XPLOT,YPLOT] = RSHPDATA4MULTCOLORPLOT (X,Y,NOREV,NORWSC) X, Y : column vectors for X-data and Y-data NOREV : number of load reversals in x and y NORWSC: number of reversals with single color (default=2) Cross-Reference Information This function calls: This function is called by:","title":"RshpData4MultColorPlot"},{"location":"Functions/latest/Utilities/Plotting/Elements/","text":"Elements Cart2PolarTensorTrans tensor component transformation from cartesian to polar coordinates Get_IPVarDistr plots distribution of integration point variables of elements with sections Label_2dMoments label end moment values for 2d frame elements in current window Label_AxialForces label axial force values in current window Plot_2dCurvDistr plot curvature distribution of 2d linear elastic frame elements Plot_2dMomntDistr plots moment distribution for 2d frame elements in current window Plot_AxialForces plot axial forces in current window Plot_ForcDistr plots internal force distribution for truss and frame elements in ElemList Plot_IPStressField plots stress field for all elements in the Model Plot_IPVarDistr plots distribution of integration point variables of elements with sections Plot_StressField plots stress field for all elements in the Model TransfrmStr2AxiSym transform stress tensor field to axi-symmetric","title":"Elements"},{"location":"Functions/latest/Utilities/Plotting/Elements/Cart2PolarTensorTrans/","text":"Utilities > Plotting > Elements > Cart2PolarTensorTrans Cart2PolarTensorTrans Purpose tensor component transformation from cartesian to polar coordinates Synopsis Post = Cart2PolarTensorTrans ( Model , Post , Type , SymAx , AxOr , ElemList ) Description CART2POLARTENSORTRANS tensor component transformation from cartesian to polar coordinates Cross-Reference Information This function calls: This function is called by:","title":"Cart2PolarTensorTrans"},{"location":"Functions/latest/Utilities/Plotting/Elements/Get_IPVarDistr/","text":"Utilities > Plotting > Elements > Get_IPVarDistr Get_IPVarDistr Purpose plots distribution of integration point variables of elements with sections Synopsis Line = Get_IPVarDistr ( Model , ElemData , Post , Component , ElemList , UserScale ) Description PLOT_IPVARDISTR plots distribution of integration point variables of elements with sections PLOT_IPVARDISTR (MODEL,ELEMDATA,POST,COMPONENT,ELEMLIST,SCALE) the function plots the distribution of integration point variables of elements with sections identified by character variable COMPONENT in the current window; plotting is limited to elements in ELEMLIST; the model information is available in data structure MODEL and the element properties in cell array ELEMDATA; post-processing information is supplied in data structure POST; COMPONENT is a character variable with e for section deformation and s for section force (Example: s(2) represents the second component of the section force vector, i.e. the bending moment Mz in 2d Bernoulli sections); the optional row vector ELEMLIST contains the numbers of elements to include for plotting, e.g. [1:4 7 9] selects elements 1 through 4, 7 and 9; the optional scalar argument USERSCALE is a magnification factor for the diagram (default=1) Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) Get_ModelScale determines maximum and minimum element length in Model This function is called by:","title":"Get IPVarDistr"},{"location":"Functions/latest/Utilities/Plotting/Elements/Label_2dMoments/","text":"Utilities > Plotting > Elements > Label_2dMoments Label_2dMoments Purpose label end moment values for 2d frame elements in current window Synopsis Label_2dMoments ( Model , Post , ElemList , Digit , Units ) Description LABEL_2dMOMENTS label end moment values for 2d frame elements in current window LABEL_2dMOMENTS (MODEL,POST,ELEMLIST,DIGIT,UNITS) the function displays in the current window the end moment values of 2d frame elements in ELEMLIST for the structural model in data structure MODEL; POST is either the vector of basic forces Q, or a cell array with post-processing information for the basic element forces in POST.ELEM{el}.Q; the optional row vector ELEMLIST contains the numbers of elements to include for labeling, e.g. [1:4 7 9] selects elements 1 through 4, 7 and 9; the optional integer DIGIT controls the number of digits after the comma (default=1) the optional integer UNITS scales the output values by the UNITS value Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) Q2Post converts the vector of basic forces Q to cell array Post.Elem{} This function is called by:","title":"Label 2dMoments"},{"location":"Functions/latest/Utilities/Plotting/Elements/Label_AxialForces/","text":"Utilities > Plotting > Elements > Label_AxialForces Label_AxialForces Purpose label axial force values in current window Synopsis Label_AxialForces ( Model , Post , ElemList , Digit , Units ) Description LABEL_AXIALFORCES label axial force values in current window LABEL_AXIALFORCES (MODEL,POST,ELEMLIST,DIGIT,UNITS) the function displays in the current window the axial force values of elements in ELEMLIST for the structural model in data structure MODEL; POST is either the vector of basic forces Q, or a cell array with post-processing information for the basic element forces in POST.ELEM{el}.Q; the optional row vector ELEMLIST contains the numbers of elements to include for labeling, e.g. [1:4 7 9] selects elements 1 through 4, 7 and 9; the optional integer DIGIT controls the number of digits after the comma (default=1) the optional integer UNITS scaled the output values by the UNITS value Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) Q2Post converts the vector of basic forces Q to cell array Post.Elem{} This function is called by:","title":"Label AxialForces"},{"location":"Functions/latest/Utilities/Plotting/Elements/Plot_2dCurvDistr/","text":"Utilities > Plotting > Elements > Plot_2dCurvDistr Plot_2dCurvDistr Purpose plot curvature distribution of 2d linear elastic frame elements Synopsis Plot_2dCurvDistr ( Model , ElemData , Post , ElemList , UserScale ) Description PLOT_2dCURVDISTR plot curvature distribution of 2d linear elastic frame elements PLOT_2dCURVDISTR (MODEL,ELEMDATA,POST,ELEMLIST,USERSCALE) the function plots in the current window the curvature distribution for 2d linear elastic frame elements in ELEMLIST for the structural model in data structure MODEL; the cell array ELEMDATA carries information about element properties and loading; POST is either the vector of basic forces Q, or a cell array with post-processing information for the basic element forces in POST.ELEM{el}.Q; the optional row vector ELEMLIST contains the numbers of elements to include for plotting, e.g. [1:4 7 9] selects elements 1 through 4, 7 and 9; the optional scalar argument USERSCALE is a magnification factor for the diagram (default=1) Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) Get_ModelScale determines maximum and minimum element length in Model Q2Post converts the vector of basic forces Q to cell array Post.Elem{} This function is called by:","title":"Plot 2dCurvDistr"},{"location":"Functions/latest/Utilities/Plotting/Elements/Plot_2dMomntDistr/","text":"Utilities > Plotting > Elements > Plot_2dMomntDistr Plot_2dMomntDistr Purpose plots moment distribution for 2d frame elements in current window Synopsis Plot_2dMomntDistr ( Model , ElemData , Post , ElemList , UserScale ) Description PLOT_2dMOMNTDISTR plots moment distribution for 2d frame elements in current window PLOT_2dMOMNTDISTR (MODEL,ELEMDATA,POST,ELEMLIST,USERSCALE) the function plots in the current window the moment distribution for 2d frame elements in ELEMLIST for the structural model in data structure MODEL; the cell array ELEMDATA carries information about element loading; POST is either the vector of basic forces Q, or a cell array with post-processing information for the basic element forces in POST.ELEM{el}.Q; the optional row vector ELEMLIST contains the numbers of elements to include for plotting, e.g. [1:4 7 9] selects elements 1 through 4, 7 and 9; the optional scalar argument USERSCALE is a magnification factor for the diagram (default=1) Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) Get_ModelScale determines maximum and minimum element length in Model Q2Post converts the vector of basic forces Q to cell array Post.Elem{} This function is called by:","title":"Plot 2dMomntDistr"},{"location":"Functions/latest/Utilities/Plotting/Elements/Plot_AxialForces/","text":"Utilities > Plotting > Elements > Plot_AxialForces Plot_AxialForces Purpose plot axial forces in current window Synopsis Plot_AxialForces ( Model , Post , ElemList , UserScale ) Description PLOT_AXIALFORCES plot axial forces in current window PLOT_AXIALFORCES (MODEL,POST,ELEMLIST,USERSCALE) the function plots in the current window the axial force distribution of elements in ELEMLIST for the structural model in data structure MODEL; POST is either the vector of basic forces Q, or a cell array with post-processing information for the basic element forces in POST.ELEM{el}.Q; the optional row vector ELEMLIST contains the numbers of elements to include for plotting, e.g. [1:4 7 9] selects elements 1 through 4, 7 and 9; the optional scalar argument USERSCALE is a magnification factor for the diagram (default=1) Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) Get_ModelScale determines maximum and minimum element length in Model Q2Post converts the vector of basic forces Q to cell array Post.Elem{} This function is called by:","title":"Plot AxialForces"},{"location":"Functions/latest/Utilities/Plotting/Elements/Plot_ForcDistr/","text":"Utilities > Plotting > Elements > Plot_ForcDistr Plot_ForcDistr Purpose plots internal force distribution for truss and frame elements in ElemList Synopsis Plot_ForcDistr ( Model , ElemData , Post , Component , ElemList , UserScale ) Description PLOT_FORCDISTR plots internal force distribution for truss and frame elements in ElemList PLOT_FORCDISTR (MODEL,ELEMDATA,POST,COMPONENT,ELEMLIST,USERSCALE) function plots the distribution of the internal force identified by COMPONENT for the truss and frame elements in ELEMLIST in the current window; the model information is available in data structure MODEL and the element properties in cell array ELEMDATA; the current response of the model is supplied in data structure POST; COMPONENT is a character variable with one of the following values: N for axial force, Mx for torsional moment, My for bending moment about y-axis and Mz for bending moment about z-axis; ELEMLIST is optional (default is all elements) Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by:","title":"Plot ForcDistr"},{"location":"Functions/latest/Utilities/Plotting/Elements/Plot_IPStressField/","text":"Utilities > Plotting > Elements > Plot_IPStressField Plot_IPStressField Purpose plots stress field for all elements in the Model Synopsis FldNd = Plot_IPStressField ( Model , U , Post , Type , Comp , PlotOpt ) Description PLOT_STRESSFIELD plots stress field for all elements in the Model FLDND = PLOT_STRESSFIELD (MODEL,STATE,POST,TYPE,COMP,PLOTOPT) the function plots in the current window the distribution of component COMP for the stress field TYPE for all finite elements in the model; the function uses the Matlab function scatteredInterpolant to inter-extra polate from the stress field values at the integration points of the elements to the nodal values and returns the resulting nodal values in vector FLDND; TYPE is a character variable with values 'Axial', 'Shear' or 'Momnt'; COMP is a character variable with values 'xx','yy','zz','xy',yz','zx', '1', '2' or '3' for the axial and moment field, and values 'xy','yz','zx' for the shear field; COMP equal to '1', '2' or '3' plots the principal values of the corresponding field the model information is supplied in data structure MODEL; U are the global dof displacements; when present the function plots the stress field in the deformed configuration; POST is a data structure with the stress values of element e at integration point m in fields Elem{e}.Mat{m}.sig: for the membrane stresses Elem{e}.Mat{m}.M : for the bending moments Elem{e}.Mat{m}.V : for the shear forces PLOTOPT is an optional data structure with the following fields: Coord: coordinate system for stress field ('Carte','Polar','Spher') (default = 'Carte') MAGF : magnification factor for deformed shape (default=10) StrSF: scale factor for stress field (default=1) DirSF: scale factor for principal stress director line (default=1) LnWth: line width (default=1) LnClr: wireframe color (default = [0.6 0.6 0.6]) IntMd: interpolation method ('linear','nearest','natural'; default='natural') ExtMd: extrapolation method ('linear','nearest','none' ; default='nearest') Cross-Reference Information This function calls: This function is called by:","title":"Plot IPStressField"},{"location":"Functions/latest/Utilities/Plotting/Elements/Plot_IPVarDistr/","text":"Utilities > Plotting > Elements > Plot_IPVarDistr Plot_IPVarDistr Purpose plots distribution of integration point variables of elements with sections Synopsis LineH = Plot_IPVarDistr ( Model , ElemData , Post , Component , ElemList , UserScale ) Description PLOT_IPVARDISTR plots distribution of integration point variables of elements with sections PLOT_IPVARDISTR (MODEL,ELEMDATA,POST,COMPONENT,ELEMLIST,SCALE) the function plots the distribution of integration point variables of elements with sections identified by character variable COMPONENT in the current window; plotting is limited to elements in ELEMLIST; the model information is available in data structure MODEL and the element properties in cell array ELEMDATA; post-processing information is supplied in data structure POST; COMPONENT is a character variable with e for section deformation and s for section force (Example: s(2) represents the second component of the section force vector, i.e. the bending moment Mz in 2d Bernoulli sections); the optional row vector ELEMLIST contains the numbers of elements to include for plotting, e.g. [1:4 7 9] selects elements 1 through 4, 7 and 9; the optional scalar argument USERSCALE is a magnification factor for the diagram (default=1) Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) Get_ModelScale determines maximum and minimum element length in Model This function is called by:","title":"Plot IPVarDistr"},{"location":"Functions/latest/Utilities/Plotting/Elements/Plot_StressField/","text":"Utilities > Plotting > Elements > Plot_StressField Plot_StressField Purpose plots stress field for all elements in the Model Synopsis Plot_StressField ( Model , U , Plot , Type , Comp , PlotOpt ) Description PLOT_STRESSFIELD plots stress field for all elements in the Model PLOT_STRESSFIELD (MODEL,STATE,PLOT,TYPE,COMP,PLOTOPT) the function plots in the current window the distribution of component COMP for the stress field TYPE for all finite elements in the model; TYPE is a character variable with values 'Axial', 'Shear' or 'Momnt'; COMP is a character variable with values 'xx','yy','zz','xy',yz','zx', '1', '2' or '3' for the axial and moment field, and values 'xy','yz','zx' for the shear field; COMP equal to '1', '2' or '3' plots the principal values of the corresponding field the model information is supplied in data structure MODEL; U are the global dof displacements; when present the function plots the stress field in the deformed configuration; PLOT is a data structure with the nodal stress values in fields sigNd: for the membrane stresses MomNd: for the bending moments ShrNd: for the shear forces PLOTOPT is an optional data structure with the following fields: Coord: coordinate system for stress field ('Carte','Polar','Spher') (default = 'Carte') MAGF : magnification factor for deformed shape (default=10) StrSF: scale factor for stress field (default=1) DirSF: scale factor for principal stress director line (default=1) LnWth: line width (default=1) LnClr: wireframe color (default = [0.6 0.6 0.6]) Cross-Reference Information This function calls: This function is called by:","title":"Plot StressField"},{"location":"Functions/latest/Utilities/Plotting/Elements/TransfrmStr2AxiSym/","text":"Utilities > Plotting > Elements > TransfrmStr2AxiSym TransfrmStr2AxiSym Purpose transform stress tensor field to axi-symmetric Synopsis Post = TransfrmStr2AxiSym ( Model , Post , Type , SymAx , AxOr , ElemList ) Description TRANSFRM2AXISYM transform stress tensor field to axi-symmetric Cross-Reference Information This function calls: This function is called by:","title":"TransfrmStr2AxiSym"},{"location":"Functions/latest/Utilities/Plotting/Sections/","text":"Sections FontProp4PlotSection set up font attributes for section plot LineProp4PlotSection set up graphic attributes for line elements of section plot Plot_3dYieldSurface plot polynomial function for 3d yield surface Plot_Mesh4Circ plots mesh for a circular disc or annulus in current window Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window","title":"Sections"},{"location":"Functions/latest/Utilities/Plotting/Sections/FontProp4PlotSection/","text":"Utilities > Plotting > Sections > FontProp4PlotSection FontProp4PlotSection Purpose set up font attributes for section plot Synopsis [ Font , lt , ls ] = FontProp4PlotSection () Description FONTPROP4PLOTSECTION set up font attributes for section plot [FONT,LT,LS] = FONTPROP4PLOTSECTION () the function sets up font attributes for section plot Cross-Reference Information This function calls: This function is called by: Plot_SectionGeometry plots cross section geometry in current window","title":"FontProp4PlotSection"},{"location":"Functions/latest/Utilities/Plotting/Sections/LineProp4PlotSection/","text":"Utilities > Plotting > Sections > LineProp4PlotSection LineProp4PlotSection Purpose set up graphic attributes for line elements of section plot Synopsis [ Line ] = LineProp4PlotSection () Description LINEPROP4PLOTSECTION set up graphic attributes for line elements of section plot LINE = LINEPROP4PLOTSECTION () the function sets up graphic attributes for line elements of section plot Cross-Reference Information This function calls: This function is called by: Plot_Mesh4Circ plots mesh for a circular disc or annulus in current window Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window","title":"LineProp4PlotSection"},{"location":"Functions/latest/Utilities/Plotting/Sections/Plot_3dYieldSurface/","text":"Utilities > Plotting > Sections > Plot_3dYieldSurface Plot_3dYieldSurface Purpose plot polynomial function for 3d yield surface Synopsis Plot_3dYieldSurface ( GPYSC , varargin ) Description PLOT_3DYIELDSURFACE plot polynomial function for 3d yield surface the function plots the polynomial function with coefficients GPYSC for the plastic limit surface using triangulation of the 3d mesh Cross-Reference Information This function calls: This function is called by:","title":"Plot 3dYieldSurface"},{"location":"Functions/latest/Utilities/Plotting/Sections/Plot_Mesh4Circ/","text":"Utilities > Plotting > Sections > Plot_Mesh4Circ Plot_Mesh4Circ Purpose plots mesh for a circular disc or annulus in current window Synopsis Plot_Mesh4Circ ( SecData ) Description PLOT_MESH4CIRC plots mesh for a circular disc or annulus in current window PLOT_MESH4CIRC (SECDATA) the function plots in the current window the mesh for a circular disk or annulus whose properties are defined in data structure SECDATA; the function uses the line properties #12 in the line property script LineProp4PlotSection Cross-Reference Information This function calls: LineProp4PlotSection set up graphic attributes for line elements of section plot Create_MPMesh4Circ generate the mesh for a circular disc or annulus This function is called by: Plot_SectionGeometry plots cross section geometry in current window","title":"Plot Mesh4Circ"},{"location":"Functions/latest/Utilities/Plotting/Sections/Plot_Mesh4MultRectShape/","text":"Utilities > Plotting > Sections > Plot_Mesh4MultRectShape Plot_Mesh4MultRectShape Purpose plot the mesh for section of several rectangular patches Synopsis Plot_Mesh4MultRectShape ( SecData ) Description PLOT_MESH4MULTRECTSHAPE plot the mesh for section of several rectangular patches PLOT_MESH4MULTRECTSHAPE (SECDATA) the function plots the mesh for the cross section of several rectangular patches, whose properties are defined in data structure SECDATA; the function uses the line properties #12 in the line property script LineProp4PlotSection Cross-Reference Information This function calls: LineProp4PlotSection set up graphic attributes for line elements of section plot Create_BoxOutline generate geometry outline for box section Create_BoxwOvhOutline generate geometry outline for box section Create_CSecOutline generate geometry outline for C-section Create_ISecOutline generate geometry outline for I-section Create_LSecOutline generate geometry outline for L-section Create_RectOutline generate geometry outline for rectangular section Create_RectwCovOutline generate geometry outline for rectangular section with cover Create_SSecOutline generate geometry outline for C-section Create_TSecOutline generate geometry outline for T-section This function is called by: Plot_SectionGeometry plots cross section geometry in current window","title":"Plot Mesh4MultRectShape"},{"location":"Functions/latest/Utilities/Plotting/Sections/Plot_SectionGeometry/","text":"Utilities > Plotting > Sections > Plot_SectionGeometry Plot_SectionGeometry Purpose plots cross section geometry in current window Synopsis Plot_SectionGeometry ( SecData , PlotOpt ) Description PLOT_SECTIONGEOMETRY plots cross section geometry in current window PLOT_SECTIONGEOMETRY(SECDATA,PLOTOPT) the function plots the geometry of the cross section in SECDATA in the current window PLOTOPT is a structure with the following fields: PLOTOPT.IPDsp : true or false for displaying the location of integration points .FibDsp: true or false for displaying the fiber (section discretization) outline .BarDsp: true or false for displaying the reinforcing bars, if present .AxsDsp: true or false for displaying the section reference axes Cross-Reference Information This function calls: Draw_Arrow draws 2d or 3d arrow Draw_AxisCross draw cross through the axes origin of the x-y data FontProp4PlotSection set up font attributes for section plot LineProp4PlotSection set up graphic attributes for line elements of section plot Plot_Mesh4Circ plots mesh for a circular disc or annulus in current window Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Create_BoxOutline generate geometry outline for box section Create_BoxwOvhOutline generate geometry outline for box section Create_CSecOutline generate geometry outline for C-section Create_IPMesh4Circ integration point coordinates, weights and material IDs for circular disc or annulus Create_IPMesh4MultRectShape fiber discretization for section of several rectangular patches Create_ISecOutline generate geometry outline for I-section Create_LSecOutline generate geometry outline for L-section Create_RectOutline generate geometry outline for rectangular section Create_RectwCovOutline generate geometry outline for rectangular section with cover Create_SSecOutline generate geometry outline for C-section Create_TSecOutline generate geometry outline for T-section This function is called by:","title":"Plot SectionGeometry"},{"location":"Functions/latest/Utilities/Plotting/Structure/","text":"Structure Animate_EventSequence generate plot sequence with location of plastic hinges for each event Animate_ResponseHistory interactive or recorded animation of response history Get_HngPos4DefoElem determine axial and flexural hinge position for deformed element Get_ModelScale determines maximum and minimum element length in Model Label_Model displays element and node numbers and global axes in the current window Plot_BounCond plots symbols for boundary conditions of structural model Plot_DeformedStructure plot deformed shape of the structure Plot_DeformedSurface plots the deformed surface of 3d plate and shell models Plot_ElemLoading display element loading in current window Plot_Hinge4Elem plot releases or plastic hinges for truss or frame element Plot_Model plots the original or deformed geometry of the structural model Plot_NodalForces display nodal forces in current window Plot_OpenPlasticHinges display plastic hinge locations in original or deformed configuration Plot_PlasticHinges display plastic hinge locations in current window Plot_Releases display element releases in current window","title":"Structure"},{"location":"Functions/latest/Utilities/Plotting/Structure/Animate_EventSequence/","text":"Utilities > Plotting > Structure > Animate_EventSequence Animate_EventSequence Purpose generate plot sequence with location of plastic hinges for each event Synopsis Animate_EventSequence ( Model , ElemData , Ufh , Qh , PlotOpt ) Description ANIMATE_EVENTSEQUENCE generate plot sequence with location of plastic hinges for each event ANIMATE_EVENTSEQUENCE (MODEL,ELEMDATA,UFH,QH,PLOTOPT) the function generates a plot sequence of the deformed structural model with the plastic hinge locations at each event, thus animating the plastic hinge formation sequence; the free global dof displacement history is provided in array UFH, with one column for each event, and the corresponding basic force history in array QH, with one column for each event; the data structure MODEL contains information about the structural model, while ELEMDATA contains element property information; there are two options for supplying the plastic capacities of the structural elements in ELEMDATA: (a) as fields Np for axial and Mp for flexural of the cell array ELEMDATA (a) as a column vector PLOTOPT is a data structure for controlling the plastic hinge display with the following fields: HngSF: scale factor for size of plastic hinge symbol (default = 1) HOfSF: factor for offset of the plastic hinge symbol from element end (default = 1) LnClr: line color for deformed shape (default='r' for red) CdClr: line color for element chord (default='k' for black) PlJnt: switch for plotting joint offsets (default='yes') PlCrd: display element chords with deformed shape (default='no') NodSF: factor for relative size of node symbol (default=1) tol: relative tolerance for plastic capacity check; absolute tolerance for plastic rotation check Inter: switch for interactive animation (yes, default) or video generation (no) MovieFN: video file name (default=Movie) PauseDur: pause duration for screen animation in sec (default=0) FrameRate: frames per second for video recording (default=30) Nsub : number of interpolated intermediate plots between events for movie FctX : factor for X-axis limits (default = 1.2) FctY : factor for Y-axis limits (default = 1.1) Cross-Reference Information This function calls: Fs_matrix block diagonal matrix of element flexibity matrices for structural model D_index cell array of indices into structure arrays for non-zero element deformations Plot_DeformedStructure plot deformed shape of the structure Plot_Model plots the original or deformed geometry of the structural model Plot_PlasticHinges display plastic hinge locations in current window This function is called by:","title":"Animate EventSequence"},{"location":"Functions/latest/Utilities/Plotting/Structure/Animate_ResponseHistory/","text":"Utilities > Plotting > Structure > Animate_ResponseHistory Animate_ResponseHistory Purpose interactive or recorded animation of response history Synopsis Animate_ResponseHistory ( Model , ElemData , Post , PlotOpt ) Description ANIMATE_RESPONSEHISTORY interactive or recorded animation of response history ANIMATE_RESPONSEHISTORY (MODEL,ELEMDATA,POST,PLOTOPT) the function animates either interactively or in a recorded video file the response history of the model in the data structure MODEL with the element properties in the cell array ELEMDATA; the data structure POST contains the response history of the model; it can be either a data structure array of size equal to the number of response states with field U for the corresponding displacements or an array of size NDOF x NTIME, where NDOF is the number of model DOFs and NTIME the number of response states; the display of plastic hinges is only possible in the former case, since it requires information about the element deformations in Post(step).Elem{el}; PLOTOPT is a data structure for controlling the response and plastic hinge display with the following fields: MAGF: magnification factor for deformed shape (default = 10) EList: list of elements in animation (default = 1:Model.ne) NodSF: factor for relative size of node symbol (default = 1) HngSF: scale factor for size of plastic hinge symbol (default = 1) HOfSF: factor for offset of plastic hinge symbol from element end (default = 1) ShwPH: switch for displaying active and closed plastic hinges (default = 'no') LnClr: line color for deformed shape (default = 'r' for red) LnWth: line width for deformed shape (default = 2) PlJnt: switch for plotting joint offsets (default = 'yes') PlCrd: display element chords with deformed shape (default = 'no') Inter: switch for interactive animation (yes) or video generation (default = 'no') MovieFN: video file name (default = 'Movie') PauseDur: pause duration for screen animation in sec (default = 0) FrameRate: frames per second for video recording (default = 30) Nskip: number of response states to skip (default = 1, i.e. no skipping) Nstrt: time step at start of animation (default = 2, since 1 is initial state) Npend: time step at end of animation (default = end of data) ShowT: show time counter on screen (default = 'no') FntSz: font size of time counter (default = 14) FctX : factor for X-axis limits (default = 1.2) FctY : factor for Y-axis limits (default = 1.1) Cross-Reference Information This function calls: Plot_DeformedStructure plot deformed shape of the structure Plot_Model plots the original or deformed geometry of the structural model Plot_OpenPlasticHinges display plastic hinge locations in original or deformed configuration Plot_PlasticHinges display plastic hinge locations in current window Add_OpenPHIndx2Post add index to POST for open plastic hinges in elements This function is called by:","title":"Animate ResponseHistory"},{"location":"Functions/latest/Utilities/Plotting/Structure/Get_HngPos4DefoElem/","text":"Utilities > Plotting > Structure > Get_HngPos4DefoElem Get_HngPos4DefoElem Purpose determine axial and flexural hinge position for deformed element Synopsis [ AxHngCoor , FlHngCoor ] = Get_HngPos4DefoElem ( XYiod , XYjod , xyd , HngOpt ) Description GET_HNGPOS4DEFOELEM determine axial and flexural hinge position for deformed element [AXHNGCOOR,FLHNGCOOR] = GET_HNGPOS4DEFOELEM(XYIOD,XYJOD,XYD,HNGOPT) the function determines the axial hinge coordinates AXHNGCOOR and the flexural hinge coordinates FLHNGCOOR for a deformed truss or frame element from the end node coordinates XYIOD and XYJOD of the deformed configuration and the local deformed coordinates XYD of the deformed shape; the data structure HNGOPT has the fields HngSz for the hinge size and HngOf for the offset of the hinge location from the element end Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: Plot_DeformedStructure plot deformed shape of the structure","title":"Get HngPos4DefoElem"},{"location":"Functions/latest/Utilities/Plotting/Structure/Get_ModelScale/","text":"Utilities > Plotting > Structure > Get_ModelScale Get_ModelScale Purpose determines maximum and minimum element length in Model Synopsis [ ModSc , maxL , minL ] = Get_ModelScale ( Model , Ratio ) Description GET_MODELSCALE determines maximum and minimum element length in Model [MODSC,MAXL,MINL] = GET_MODELSCALE(MODEL,RATIO) the function determines a critical scale for the structural model in data structure MODEL from the maximum distance MAXL and the minimum distance MINL between nodes i and j of line elements; the maximum distance MAXL is divided by RATIO (default = 1.5-0.5*MINL/MAXL); depending on the value of RATIO the model scale is equal to the largest (RATIO<MAXL/MINL) or smallest distance (RATIO>MAXL/MINL) Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: Get_IPVarDistr plots distribution of integration point variables of elements with sections Plot_2dCurvDistr plot curvature distribution of 2d linear elastic frame elements Plot_2dMomntDistr plots moment distribution for 2d frame elements in current window Plot_AxialForces plot axial forces in current window Plot_IPVarDistr plots distribution of integration point variables of elements with sections Label_Model displays element and node numbers and global axes in the current window Plot_DeformedStructure plot deformed shape of the structure Plot_ElemLoading display element loading in current window Plot_Model plots the original or deformed geometry of the structural model Plot_NodalForces display nodal forces in current window Plot_OpenPlasticHinges display plastic hinge locations in original or deformed configuration Plot_PlasticHinges display plastic hinge locations in current window Plot_Releases display element releases in current window","title":"Get ModelScale"},{"location":"Functions/latest/Utilities/Plotting/Structure/Label_Model/","text":"Utilities > Plotting > Structure > Label_Model Label_Model Purpose displays element and node numbers and global axes in the current window Synopsis Label_Model ( Model , LblOpt ) Description LABEL_MODEL displays element and node numbers and global axes in the current window LABEL_MODEL (MODEL,LBLOPT) the function displays in the current window labels for nodes and elements, and the global coordinate axes; LBLOPT is an optional data structure controlling the display; in its absense the function plots all items with default values; LBLOPT has the following fields (all optional) Item : character variable with values 'node','elem', 'axes' (default='all') FntSF: font magnification factor (default = 1) AxsSF: axis arrow length magnification factor (default = 1) LOfSF: node and element label offset magnification factor (default = 1) NList: list of nodes to label (default all nodes in the model) EList: list of elements to label (default all elements in the model) Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) Draw_Arrow draws 2d or 3d arrow Get_ModelScale determines maximum and minimum element length in Model This function is called by:","title":"Label Model"},{"location":"Functions/latest/Utilities/Plotting/Structure/Plot_BounCond/","text":"Utilities > Plotting > Structure > Plot_BounCond Plot_BounCond Purpose plots symbols for boundary conditions of structural model Synopsis Plot_BounCond ( XYZ , BOUN , BsClr , BsSz ) Description PLOT_BOUNCOND plots symbols for boundary conditions of structural model PLOT_BOUNCOND (XYZ,BOUN,BSSZ) the function plots symbols for the boundary conditions of the structural model for the node coordinates in the array XYZ (undeformed or deformed configuration and the boundary conditions in the array BOUN; BSSZ gives the size of the node and boundary symbol Cross-Reference Information This function calls: This function is called by: Plot_DeformedStructure plot deformed shape of the structure Plot_Model plots the original or deformed geometry of the structural model","title":"Plot BounCond"},{"location":"Functions/latest/Utilities/Plotting/Structure/Plot_DeformedStructure/","text":"Utilities > Plotting > Structure > Plot_DeformedStructure Plot_DeformedStructure Purpose plot deformed shape of the structure Synopsis LnHndl = Plot_DeformedStructure ( Model , ElemData , U , Post , PlotOpt ) Description PLOT_DEFORMEDSTRUCTURE plot deformed shape of the structure PLOT_DEFORMEDSTRUCTURE (MODEL,ELEMDATA,U,POST,PLOTOPT) the function plots the deformed shape of the structural model in data structure MODEL based on the current displacements in vector U and the element deformations; the cell array ELEMDATA contains information about element properties and loading; POST is either the vector of the element deformations Veps, or a cell array with the element deformations in subfield ve of field Elem; this information is optional; if not given, the function assumes that all element ends are continuous; PLOTOPT is a data structure for plotting options with the following fields: MAGF : magnification factor for deformed shape (default=10) EList: list of elements to include in deformed shape (default all elements) LnStl: line style for deformed shape (default = '-', i.e. solid line) LnWth: line thickness for deformed shape (default = 2) LnClr: color for deformed shape (default = 'r', i.e. red) PlJnt: switch for plotting joint offsets (default='yes') PlCrd: switch for plotting element chord (default='no') PlRel: switch for plotting element releases (defaul='yes') HngSF: scale factor for size of release symbol (default = 1) HOfSF: scale factor for offset of flexural hinge symbol from element end (default = 1) PlBnd: switch for displaying boundary symbols (default='yes') BsClr: color for boundary nodes and symbols (default=[0.6 0 0.6]) NodSF: scale factor for size of boundary symbol (default = 1) AHClr: display color of axial hinges or releases (default = light gray) FHClr: display color of flexural hinges or releases (default = white) ModSF: switch for adjusting scale factor relative to element size (default = 'yes') Cross-Reference Information This function calls: DeformShape2dFrm deformed shape of linear elastic, uniform, prismatic 2d frame element DeformShape3dFrm deformed shape of linear elastic, uniform, prismatic 3d frame element Localize returns the node coordinates and id array of element TranJnt sets up transformation matrix for finite size joints Get_HngPos4DefoElem determine axial and flexural hinge position for deformed element Get_ModelScale determines maximum and minimum element length in Model Plot_BounCond plots symbols for boundary conditions of structural model Plot_Model plots the original or deformed geometry of the structural model This function is called by: Animate_EventSequence generate plot sequence with location of plastic hinges for each event Animate_ResponseHistory interactive or recorded animation of response history","title":"Plot DeformedStructure"},{"location":"Functions/latest/Utilities/Plotting/Structure/Plot_DeformedSurface/","text":"Utilities > Plotting > Structure > Plot_DeformedSurface Plot_DeformedSurface Purpose plots the deformed surface of 3d plate and shell models Synopsis Plot_DeformedSurface ( Model , U , MPlOpt ) Description PLOT_DEFORMEDSURFACE plots the deformed surface of 3d plate and shell models PLOT_DEFORMEDSURFACE (MODEL,U,MPLOPT) the function plots in the current window the deformed surface of 3d finite element models with plate and shell elements under the global dof displacements in vector U MPLOPT is an optional data structure which consists of a single field the magnification factor MAGF for the deformed geometry (default=10) Cross-Reference Information This function calls: This function is called by:","title":"Plot DeformedSurface"},{"location":"Functions/latest/Utilities/Plotting/Structure/Plot_ElemLoading/","text":"Utilities > Plotting > Structure > Plot_ElemLoading Plot_ElemLoading Purpose display element loading in current window Synopsis Plot_ElemLoading ( Model , ElemData , PlotOpt ) Description PLOT_ELEMLOADING display element loading in current window PLOT_ELEMLOADING (MODEL,ELEMDATA,PLOTOPT) the function displays in the current window the distributed element loading and the initial deformations in ELEMDATA for the structural model in data structure MODEL; PLOTOPT is an optional data structure controlling the display; in its absense the function plots the model with default values; PLOTOPT has the following fields: FrcSF: scale factor for shaft of nodal force arrow (default = 1) TipSF: scale factor for nodal force arrow tip ArWth: width of nodal force arrow shaft (default=3) ArClr: color for nodal force arrow shaft and tip (default='r') FntSF: scale factor for font size of force label Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) Draw_Arrow draws 2d or 3d arrow Get_ModelScale determines maximum and minimum element length in Model This function is called by:","title":"Plot ElemLoading"},{"location":"Functions/latest/Utilities/Plotting/Structure/Plot_Hinge4Elem/","text":"Utilities > Plotting > Structure > Plot_Hinge4Elem Plot_Hinge4Elem Purpose plot releases or plastic hinges for truss or frame element Synopsis Plot_Hinge4Elem ( nq , HngId , AxHngCoor , FlHngCoor , Colors ) Description PLOT_HINGE4ELEM plot releases or plastic hinges for truss or frame element PLOT_HINGE4ELEM (NQ,HNGID,AXHNGCOOR,FLHNGCOOR,PLOTOPT) the function plots the releases or plastic hinges for a truss or frame element NQ is the number of basic forces for the element HNGID is the index vector for the location of releases/plastic hinges AXHNGCOOR are the coordinates for the axial hinge location FLHNGCOOR are the coordinates for the flexural hinge location COLORS is a data structure with the release/plastic hinge colors in fields .AHCrl color for axial release or plastic hinge .FHCrl color for flexural release or plastic hinge without N-M interaction .CHCrl color for flexural release or plastic hinge with N-M interaction Cross-Reference Information This function calls: This function is called by: Plot_PlasticHinges display plastic hinge locations in current window","title":"Plot Hinge4Elem"},{"location":"Functions/latest/Utilities/Plotting/Structure/Plot_Model/","text":"Utilities > Plotting > Structure > Plot_Model Plot_Model Purpose plots the original or deformed geometry of the structural model Synopsis Plot_Model ( Model , U , MPlOpt ) Description PLOT_MODEL plots the original or deformed geometry of the structural model PLOT_MODEL (MODEL,U,MPLOPT) the function plots in the current window the original or deformed geometry of the structural model in the data structure MODEL depending on the presence of the global displacement vector U in the argument list; MPLOPT is an optional data structure controlling the display; in its absense the function plots the model with default values; MPLOPT has the following fields: MAGF : magnification factor for deformed wireframe (default=10) NodSF: scale factor for size of node symbol (default=1) LnStl: line style (default = '-' for undeformed, '-.' for deformed configuration) LnWth: line width (default = 2) LnClr: wireframe and node color (default = 'b' for undeformed, 'k' for deformed configuration) PlNod: switch for displaying node symbols (default ='no') PlBnd: switch for displaying boundary symbols (default='no') BsClr: color for boundary nodes and symbols (default=[0.6 0 0.6]) PlJnt: switch for plotting joint offsets (default='yes') ModSF: switch for adjusting scale factor relative to element size (default = 'yes') Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element TranJnt sets up transformation matrix for finite size joints Draw_Cube draws cube in current window Get_ModelScale determines maximum and minimum element length in Model Plot_BounCond plots symbols for boundary conditions of structural model This function is called by: Animate_EventSequence generate plot sequence with location of plastic hinges for each event Animate_ResponseHistory interactive or recorded animation of response history Plot_DeformedStructure plot deformed shape of the structure","title":"Plot Model"},{"location":"Functions/latest/Utilities/Plotting/Structure/Plot_NodalForces/","text":"Utilities > Plotting > Structure > Plot_NodalForces Plot_NodalForces Purpose display nodal forces in current window Synopsis Plot_NodalForces ( Model , Loading , PlotOpt ) Description PLOT_NODALFORCES display nodal forces in current window PLOT_NODALFORCES (MODEL,LOADING,PLOTOPT) the function displays in the current window the nodal forces in LOADING for the structural model in data structure MODEL there are two options for supplying the nodal forces: (a) LOADING is a numerical array with the nodal force values in the format PE(nn,comp) where nn is the node number and comp the component with 1 corresponding to the force in the X-direction, 2 in the Y-direction etc or, (b) LOADING is a data structure as generated by the function Create_Loading with the nodal forces in field Pref, which is a vector with its row number corresponding to the DOF number of the structure NOTE: the function currently plots only the first column of LOADING.Pref PLOTOPT is an optional data structure controlling the display; in its absense the function plots the model with default values; PLOTOPT has the following fields: FrcSF: scale factor for nodal force arrow shaft (default = 1) TipSF: scale factor for nodal force arrow tip (default = 1) ArWth: line width of nodal force arrow shaft (default=3) ArClr: color for nodal force arrow shaft and tip (default='r') Label: 'yes' for labeling the nodal force value (default='no') FntSF: scale factor for font size of force label (default = 1) Digit: number of digits to display to the right of decimal point (default = 2); Units: force units (default = base unit); MAGF : magnification scale for deformed configuration (default = 10) U : global DOF displacements for plotting in the deformed configuration (default = 0) Cross-Reference Information This function calls: Draw_Arrow draws 2d or 3d arrow Get_ModelScale determines maximum and minimum element length in Model This function is called by:","title":"Plot NodalForces"},{"location":"Functions/latest/Utilities/Plotting/Structure/Plot_OpenPlasticHinges/","text":"Utilities > Plotting > Structure > Plot_OpenPlasticHinges Plot_OpenPlasticHinges Purpose display plastic hinge locations in original or deformed configuration Synopsis Plot_OpenPlasticHinges ( Model , ElemData , Post , PlotOpt ) Description PLOT_OPENPLASTICHINGES display plastic hinge locations in original or deformed configuration PLOT_OPENPLASTICHINGES (MODEL,ELEMDATA,POST,PLOTOPT) the function displays in the current window the open plastic hinge locations; the data structure MODEL contains information about the structural model, with element property information provided in cell array ELEMDATA; the data structure POST contains all recorded structural response variables for one step PLOTOPT is a data structure for controlling the plastic hinge display with the following fields: EList: list of elements for which plastic hinges are displayed (default all elements) HngSF: scale factor for size of plastic hinge symbol (default = 1) HOfSF: factor for offset of the plastic hinge symbol from element end (default = 1) FHClr: color for flexural hinges CHClr: color for column hinges with N-M interaction AHClr: color for axial hinges in truss elements Cross-Reference Information This function calls: DeformShape2dFrm deformed shape of linear elastic, uniform, prismatic 2d frame element DeformShape2dFrm_wDispIntp deformed shape of 2d frame element with cubic polynomials DeformShape2dFrm_wCurvIntp deformed shape of 2d frame element from curvatures Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) TranJnt sets up transformation matrix for finite size joints Get_ModelScale determines maximum and minimum element length in Model This function is called by: Animate_ResponseHistory interactive or recorded animation of response history","title":"Plot OpenPlasticHinges"},{"location":"Functions/latest/Utilities/Plotting/Structure/Plot_PlasticHinges/","text":"Utilities > Plotting > Structure > Plot_PlasticHinges Plot_PlasticHinges Purpose display plastic hinge locations in current window Synopsis Plot_PlasticHinges ( Model , ElemData , U , Post , PlotOpt ) Description PLOT_PLASTICHINGES display plastic hinge locations in current window PLOT_PLASTICHINGES (MODEL,ELEMDATA,U,POST,PLOTOPT) the function displays in the current window the plastic hinge locations for the elements of the structural model in data structure MODEL (only 2d models for now). There are two options for supplying the plastic capacities and basic force values: (a) ELEMDATA is a vector of plastic capacities and or, (b) ELEMDATA is a cell array with the plastic capacities in fields Np for the axial, and Mp for the flexural capacity. In the presence of the global dof displacements U the plastic hinges are displayed in the deformed configuration otherwise in the undeformed. There are three options for POST: (a) POST is the vector of basic forces Q corresponding to case (a) of ELEMDATA (b) POST is the vector of plastic deformation increments DVPL in which case ELEMDATA is either empty or a character variable with the N-M interaction option NMOPT; NMOPT can be one of three options: 'None' (default), 'Dmnd' or 'AISC'; (c) POST is a cell array with post-processing information in the fields of POST.ELEM{el}. PLOTOPT is an optional data structure controlling the display; in its absense the function displays the plastic hinges with default properties; PLOTOPT has the following fields: EList: list of elements for which plastic hinges are displayed (default all elements) HngSF: scale factor for size of plastic hinge symbol (default = 1) HOfSF: factor for offset of the plastic hinge symbol from element end (default = 1) FHClr: color for flexural hinges (default='r') CHClr: color for column hinges with N-M interaction (default = [1 0.6 0]) AHClr: color for axial hinges in truss elements (default = [1 0.6 0]) tol: relative tolerance for plastic capacity check; absolute tolerance for plastic rotation check (default=1e-6) Cross-Reference Information This function calls: Create_PlasticLimitSurface pologonal plastic limit surface for truss and 2d frame elements DeformShape2dFrm deformed shape of linear elastic, uniform, prismatic 2d frame element Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) TranJnt sets up transformation matrix for finite size joints D_index cell array of indices into structure arrays for non-zero element deformations H_index cell array of indices into structure arrays for continuous element deformations Get_ModelScale determines maximum and minimum element length in Model Plot_Hinge4Elem plot releases or plastic hinges for truss or frame element Q2Post converts the vector of basic forces Q to cell array Post.Elem{} This function is called by: Animate_EventSequence generate plot sequence with location of plastic hinges for each event Animate_ResponseHistory interactive or recorded animation of response history","title":"Plot PlasticHinges"},{"location":"Functions/latest/Utilities/Plotting/Structure/Plot_Releases/","text":"Utilities > Plotting > Structure > Plot_Releases Plot_Releases Purpose display element releases in current window Synopsis Plot_Releases ( Model , ElemData , U , PlotOpt ) Description PLOT_RELEASES display element releases in current window PLOT_RELEASES (MODEL,ELEMDATA,U,PLOTOPT) the function displays in the current window internal force releases for the elements of the structural model in data structure MODEL; flexural releases are inserted for truss elements; for frame elements releases are inserted according to entries in the field Release of ELEMDATA the releases are displayed in the undeformed or deformed configuration (chords only) depending on the presence of the input argument U; PLOTOPT is an optional data structure controlling the display; in its absense the function plots the model with default values; PLOTOPT has the following fields: MAGF : magnification factor for deformed configuration (default=10) HngSF: scale factor for size of hinge symbol (default = 1) HOfSF: factor for hinge symbol offset from element end (default = 1) AHClr: display color of axial releases (default = light gray) FHClr: display color of flexural releases (default = white) Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) Get_ModelScale determines maximum and minimum element length in Model This function is called by:","title":"Plot Releases"},{"location":"Functions/latest/Utilities/PostProcessing/","text":"PostProcessing Add_OpenPHIndx2Post add index to POST for open plastic hinges in elements Complete_QV complete basic force QIN and element deformation vector VE with values at releases Create_NMInterDiagram generates the N-Mz interaction diagram of a section Get_HFlrTrans extract the horizontal floor translations of moment resisting frame Get_StDrift determine the horizontal story drifts for MR frame Get_StShear determine the story shears for moment resisting frame Get_Veps determine the elastic deformations from the displacements and plastic deformations Post2Q convert basic element forces in POST into vector Q for all elements Q2Post converts the vector of basic forces Q to cell array Post.Elem{}","title":"PostProcessing"},{"location":"Functions/latest/Utilities/PostProcessing/Add_OpenPHIndx2Post/","text":"Utilities > PostProcessing > Add_OpenPHIndx2Post Add_OpenPHIndx2Post Purpose add index to POST for open plastic hinges in elements Synopsis Post = Add_OpenPHIndx2Post ( Model , Post ) Description ADD_OPENPHINDX2POST add index to POST for open plastic hinges in elements POST = ADD_OPENPHINDX2POST (MODEL,POST) the function adds the field PEi under POST(t).Elem{m} for the open plastic hinges in element m at time step t; the data structure POST contains the complete response of the structural model in the data structure MODEL Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element ElmLenOr element length and x-axis orientation (direction cosines) This function is called by: Animate_ResponseHistory interactive or recorded animation of response history","title":"Add OpenPHIndx2Post"},{"location":"Functions/latest/Utilities/PostProcessing/Complete_QV/","text":"Utilities > PostProcessing > Complete_QV Complete_QV Purpose complete basic force QIN and element deformation vector VE with values at releases Synopsis [ Q , Ve ] = Complete_QV ( Model , ElemData , Qin ) Description COMPLETE_QV complete basic force QIN and element deformation vector VE with values at releases [Q,VE] = COMPLETE_QV (MODEL,ELEMDATA,QIN) the function completes the basic force and element deformation vectors, Q and VE, resp. with the values at releases for the elements of the structural model in data structure MODEL; the location of element releases is specified in field RELEASE of cell array ELEMDATA; QIN is the vector of basic forces without the zero values at releases Cross-Reference Information This function calls: Fs_matrix block diagonal matrix of element flexibity matrices for structural model V0_vector initial element deformation vector for the structural model H_index cell array of indices into structure arrays for continuous element deformations This function is called by: S_DisplMethod script for displacement method of structural analysis S_ForceMethod script for force method of structural analysis","title":"Complete QV"},{"location":"Functions/latest/Utilities/PostProcessing/Create_NMInterDiagram/","text":"Utilities > PostProcessing > Create_NMInterDiagram Create_NMInterDiagram Purpose generates the N-Mz interaction diagram of a section Synopsis [ N , M ] = Create_NMInterDiagram ( Method , SecType , IntOpt ) Description CREATE_NMINTERDIAGRAM generates the N-Mz interaction diagram of a section [N,M] = CREATE_NMINTERDIAGRAM (METHOD,SECTYPE,INTOPT) the function generates the pairs of normalized axial force N/Np and bending moment M/Mp for the normal force N - bending moment M interaction diagram of the section SECTYPE; this version supports only rectangular sections and wide flange steel profiles, as specified in the character variable SECTYPE (equal to 'Rect' or Wxxxxx); the character variable METHOD is either equal to 'exact' for the analytical solution or 'num' for the numerical determination of the N-M interaction pairs; in the latter case the optional argument INTOPT has the following fields: .IntTyp = for quadrature scheme (default = 'Midpoint' for midpoint integration rule); .nIP = no of integration points for rectangular section (default = 10) .nIP_fl = no of integration points for flange of W-section (default = 2) .nIP_wb = no of integration points for web of W-section (default = 8) Cross-Reference Information This function calls: AISC_Section extracts section properties from AISC W-,M-,S-,HP- and HSS-section database Rectangle2Layer integration points and weights for 1d-integration of a rectangle This function is called by:","title":"Create NMInterDiagram"},{"location":"Functions/latest/Utilities/PostProcessing/Get_HFlrTrans/","text":"Utilities > PostProcessing > Get_HFlrTrans Get_HFlrTrans Purpose extract the horizontal floor translations of moment resisting frame Synopsis HFlrTrans = Get_HFlrTrans ( Model , Frame , Post ) Description GET_HFLRTRANS extract the horizontal floor translations of moment resisting frame HFLRTRANS = GET_HFLRTRANS (MODEL,FRAME,POST) the function extracts the horizontal floor translations HFLRTRANS from the free DOF displacements in POST for the moment resisting frame in FRAME with complete structural model information in the data structure MODEL Cross-Reference Information This function calls: This function is called by:","title":"Get HFlrTrans"},{"location":"Functions/latest/Utilities/PostProcessing/Get_StDrift/","text":"Utilities > PostProcessing > Get_StDrift Get_StDrift Purpose determine the horizontal story drifts for MR frame Synopsis StDrift = Get_StDrift ( Model , Frame , Post , UBase ) Description GET_STDRIFT determine the horizontal story drifts for MR frame STDRIFT = GET_STDRIFT (MODEL,FRAME,POST,UBASE) the function determines the horizontal story drifts STDRIFT from the free DOF displacements in POST for the moment resisting frame in FRAME with complete structural model information in the data structure MODEL; POST is either a data structure with complete response information at a specific time step or a numeric array (nDOF,nstep) with the free DOF displacement history; UBASE is an optional numeric vector with the base displacement history Cross-Reference Information This function calls: This function is called by:","title":"Get StDrift"},{"location":"Functions/latest/Utilities/PostProcessing/Get_StShear/","text":"Utilities > PostProcessing > Get_StShear Get_StShear Purpose determine the story shears for moment resisting frame Synopsis StShear = Get_StShear ( Model , ElemData , Frame , Post , GravCol ) Description GET_STSHEAR determine the story shears for moment resisting frame STSHEAR = GET_STSHEAR (MODEL,ELEMDATA,FRAME,POST,GRAVCOL) the function determines the story shears STSHEAR for the moment resisting frame in FRAME from the response variables in POST; if GRAVCOL is true, the story shear includes the tranvserse forces in gravity columns due to the P-DELTA effect; the data structure MODEL provides complete information about the structural model and the cell array ELEMDATA contains element property information Cross-Reference Information This function calls: Localize returns the node coordinates and id array of element GeomTran_2dFrm kinematic matrices and deformations for a 2-node 2d frame element This function is called by:","title":"Get StShear"},{"location":"Functions/latest/Utilities/PostProcessing/Get_Veps/","text":"Utilities > PostProcessing > Get_Veps Get_Veps Purpose determine the elastic deformations from the displacements and plastic deformations Synopsis Veps = Get_Veps ( Model , Uf , Vpl ) Description GET_VEPS determine the elastic deformations from the displacements and plastic deformations VEPS = GET_VEPS (MODELm,UF,VPL) the function determines the elastic element deformations VEPS from the free DOF displacements in UF and the plastic element deformations in VPL; the data structure MODEL provides information about the structural model Cross-Reference Information This function calls: A_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements Aj_matrix kinematic matrix of structural model with 2d/3d truss and 2d frame elements This function is called by:","title":"Get Veps"},{"location":"Functions/latest/Utilities/PostProcessing/Post2Q/","text":"Utilities > PostProcessing > Post2Q Post2Q Purpose convert basic element forces in POST into vector Q for all elements Synopsis Q = Post2Q ( Post ) Description POST2Q convert basic element forces in POST into vector Q for all elements Q = POST2Q (POST) the function converts the basic element forces q in field Elem of POST to a single vector Q for all basic element forces of the structure Cross-Reference Information This function calls: This function is called by:","title":"Post2Q"},{"location":"Functions/latest/Utilities/PostProcessing/Q2Post/","text":"Utilities > PostProcessing > Q2Post Q2Post Purpose converts the vector of basic forces Q to cell array Post.Elem{} Synopsis Post = Q2Post ( Model , Q ) Description Q2POST converts the vector of basic forces Q to cell array Post.Elem{} POST = Q2POST(MODEL,Q) the function converts the basic force values in vector Q to the data structure POST consisting of the field Elem{el} for each el of the structural model in data structure MODEL which, in turn, contains the field Elem{el}.q with the basic forces of the particular element; the function uses information about missing basic forces in Q based on the field Model.Qmis; any missing basic forces are set to zero in Elem{el}.q Cross-Reference Information This function calls: D_index cell array of indices into structure arrays for non-zero element deformations This function is called by: Label_2dMoments label end moment values for 2d frame elements in current window Label_AxialForces label axial force values in current window Plot_2dCurvDistr plot curvature distribution of 2d linear elastic frame elements Plot_2dMomntDistr plots moment distribution for 2d frame elements in current window Plot_AxialForces plot axial forces in current window Plot_PlasticHinges display plastic hinge locations in current window","title":"Q2Post"},{"location":"Functions/latest/Utilities/PreProcessing/Elements/","text":"Elements AISC_Section extracts section properties from AISC W-,M-,S-,HP- and HSS-section database Create_FrameSections assign section information to column and girder elements ElemData2Qpl converts the plastic capacities from cell array of element properties to vector ElemData4SteelBraces generate element properties for steel braces ElemData4SteelFrame generate element properties for steel moment resisting frame (SMRF) Euro_IPSection extracts section properties from Euro-IP section database FiberElemData4SteelBraces generate fiber element properties for steel braces FiberElemData4SteelFrame generate fiber element properties for steel moment resisting frame (SMRF) Other files in this directory AISC_Sections.mat Euro_IPSections.mat","title":"Elements"},{"location":"Functions/latest/Utilities/PreProcessing/Elements/AISC_Section/","text":"Utilities > PreProcessing > Elements > AISC_Section AISC_Section Purpose extracts section properties from AISC W-,M-,S-,HP- and HSS-section database Synopsis SecProp = AISC_Section ( sect ) Description AISC_SECTION extracts section properties from AISC W-,M-,S-,HP- and HSS-section database SECPROP = AISC_SECTION (SECT) the function extracts the following properties from the W-,M-,S-,HP- and HSS-section database for the section with AISC Manual Label in character array SECT: W, A, d, bf, tw, tf, Ix, Zx, Sx, rx, Iy, Zy, Sy, ry, J, Cw ---------------------------------------------------------- The units for these properties are IN, IN2, IN3 and IN4 The structure SECPROP contains the properties in fields with the same name Example: SecData = AISC_Section ('W14x193'); Cross-Reference Information This function calls: This function is called by: Create_NMInterDiagram generates the N-Mz interaction diagram of a section","title":"AISC Section"},{"location":"Functions/latest/Utilities/PreProcessing/Elements/Create_FrameSections/","text":"Utilities > PreProcessing > Elements > Create_FrameSections Create_FrameSections Purpose assign section information to column and girder elements Synopsis Frame = Create_FrameSections ( Frame , ColSect , GrdSect ) Description CREATE_FRAMESECTIONS assign section information to column and girder elements FRAME = CREATE_FRAMESECTIONS (MODEL,COLSECT,GRDSECT) the function assigns the steel shape information in COLSECT and GRDSECT to the COLSECT and GRDSECT fields of data structure FRAME, respectively; the function duplicates a single entry per story or floor as many times as the number of elements of the corresponding story or floor Cross-Reference Information This function calls: This function is called by:","title":"Create FrameSections"},{"location":"Functions/latest/Utilities/PreProcessing/Elements/ElemData2Qpl/","text":"Utilities > PreProcessing > Elements > ElemData2Qpl ElemData2Qpl Purpose converts the plastic capacities from cell array of element properties to vector Synopsis Qpl = ElemData2Qpl ( Model , ElemData ) Description ELEMDATA2QPL converts the plastic capacities from cell array of element properties to vector QPL = ELEMDATA2QPL(MODEL,ELEMDATA) the function converts the plastic capacities in the fields Np and Mp of the cell array with element properties ELEMDATA to the vector QPL Cross-Reference Information This function calls: This function is called by:","title":"ElemData2Qpl"},{"location":"Functions/latest/Utilities/PreProcessing/Elements/ElemData4SteelBraces/","text":"Utilities > PreProcessing > Elements > ElemData4SteelBraces ElemData4SteelBraces Purpose generate element properties for steel braces Synopsis BraceElemData = ElemData4SteelBraces ( Frame , Data , DBase , LUnit ) Description ELEMDATA4STEELBRACES generate element properties for steel braces BRACEELEMDATA = ELEMDATA4STEELBRACES (FRAME,DATA,DBASE,LUNIT) the function assigns the properties for inelastic brace elements from information in FRAME by extracting the section properties with the help of function DBASE from the corresponding steel section database; DATA carries information about the material properties; the optional argument LUNIT specifies the length unit for the section property data BRACEELEMDATA is a cell array with the same organization as FRAME.BINDX Cross-Reference Information This function calls: This function is called by:","title":"ElemData4SteelBraces"},{"location":"Functions/latest/Utilities/PreProcessing/Elements/ElemData4SteelFrame/","text":"Utilities > PreProcessing > Elements > ElemData4SteelFrame ElemData4SteelFrame Purpose generate element properties for steel moment resisting frame (SMRF) Synopsis [ ColElemData , GrdElemData ] = ElemData4SteelFrame ( Frame , Data , DBase , LUnit , Member ) Description ELEMDATA4STEELFRAME generate element properties for steel moment resisting frame (SMRF) [COLELEMDATA,GRDELEMDATA] = ELEMDATA4STEELFRAME (FRAME,DATA,DBASE,LUNIT,MEMBER) the function assigns the properties for inelastic frame elements with force resultant sections from column and girder section information in FRAME by extracting the section properties with the help of function DBASE from the corresponding steel section database; DATA carries information about the material properties; the optional argument LUNIT specifies the length unit for the section property data and the optional character argument MEMBER limits the section property retrieval to the girders or columns with 'girders' or 'columns' respectively COLELEMDATA and GRDELEMDATA are cell arrays with the same organization as FRAME.CINDX and FRAME.GINDX, respectively Cross-Reference Information This function calls: This function is called by:","title":"ElemData4SteelFrame"},{"location":"Functions/latest/Utilities/PreProcessing/Elements/Euro_IPSection/","text":"Utilities > PreProcessing > Elements > Euro_IPSection Euro_IPSection Purpose extracts section properties from Euro-IP section database Synopsis SecProp = Euro_IPSection ( sect ) Description EURO_IPSECTION extracts section properties from Euro-IP section database SECPROP = EURO_IPSECTION (SECT) the function extracts the following properties from the Euro-IP database for the section with designation in character array SECT: A, d, bf, tw, tf, Ix, Zx, Sx, rx, Iy, Zy, Sy, ry, J THE UNITS FOR THESE PROPERTIES ARE are MM, MM2, MM3 and MM4 The structure SECPROP contains the properties in fields with the same name Example: SecData = Euro_IPSection ('IPE AA 120'); Cross-Reference Information This function calls: This function is called by:","title":"Euro IPSection"},{"location":"Functions/latest/Utilities/PreProcessing/Elements/FiberElemData4SteelBraces/","text":"Utilities > PreProcessing > Elements > FiberElemData4SteelBraces FiberElemData4SteelBraces Purpose generate fiber element properties for steel braces Synopsis BraceElemData = FiberElemData4SteelBraces ( Frame , Data , DBase , LUnit ) Description FIBERELEMDATA4STEELBRACES generate fiber element properties for steel braces BRACEELEMDATA = FIBERELEMDATA4STEELBRACES (FRAME,DATA,DBASE,LUNIT) the function assigns the properties for inelastic frame elements with fiber sections from brace information in FRAME by extracting the section properties with the help of function DBASE from the corresponding steel section database; DATA carries information about the material properties; the optional argument LUNIT specifies the length unit for the section property data BRACEELEMDATA is a cell array with the same organization as FRAME.BINDX Cross-Reference Information This function calls: This function is called by:","title":"FiberElemData4SteelBraces"},{"location":"Functions/latest/Utilities/PreProcessing/Elements/FiberElemData4SteelFrame/","text":"Utilities > PreProcessing > Elements > FiberElemData4SteelFrame FiberElemData4SteelFrame Purpose generate fiber element properties for steel moment resisting frame (SMRF) Synopsis [ ColElemData , GrdElemData ] = FiberElemData4SteelFrame ( Frame , Data , DBase , LUnit , Member ) Description FIBERELEMDATA4STEELFRAME generate fiber element properties for steel moment resisting frame (SMRF) [COLELEMDATA,GRDELEMDATA] = FIBERELEMDATA4STEELFRAME (FRAME,DATA,DBASE,LUNIT,MEMBER) the function assigns the properties for inelastic frame elements with fiber sections from column and girder section information in FRAME by extracting the section properties with the help of function DBASE from the corresponding steel section database; DATA carries information about the material properties; the optional argument LUNIT specifies the length unit for the section property data and the optional character argument MEMBER limits the section property retrieval to the girders or columns with 'girders' or 'columns', respectively COLELEMDATA and GRDELEMDATA are cell arrays with the same organization as FRAME.CINDX and FRAME.GINDX, respectively Cross-Reference Information This function calls: This function is called by:","title":"FiberElemData4SteelFrame"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/","text":"Sections Add_Bars2Section add bar group geometry and material data to section data Add_Shape2Section add section shape geometry and material data to section data CircLayer2Bar locations of discrete bars on a circular layer Create_BoxOutline generate geometry outline for box section Create_BoxwOvhOutline generate geometry outline for box section Create_CSecOutline generate geometry outline for C-section Create_CircBarGrid area and coordinates for circular grid of bars Create_IPMesh4Circ integration point coordinates, weights and material IDs for circular disc or annulus Create_IPMesh4MultRectShape fiber discretization for section of several rectangular patches Create_IPMesh4Rect coordinates, weights and material IDs for rectangular section with cover Create_IPMesh4WFShape coordinates, weights and material IDs for wide flange section Create_ISecOutline generate geometry outline for I-section Create_LSecOutline generate geometry outline for L-section Create_MPMesh4Circ generate the mesh for a circular disc or annulus Create_MultRectShape generate geometry outline and assign material properties for shape of rectangular patches Create_RectBarGrid area and coordinates for rectangular grid of bars Create_RectOutline generate geometry outline for rectangular section Create_RectPatch generate corner coordinates of rectangular patch for given reference point Create_RectShape generate geometry outline and assign material properties for rectangle Create_RectwCovOutline generate geometry outline for rectangular section with cover Create_SSecOutline generate geometry outline for C-section Create_ShapewMat generate geometry outline and assign material properties for shape STYPE Create_TSecOutline generate geometry outline for T-section MP1dInt4Circ integration points and weights for 1d-midpoint rule of circular disc or annulus MP2dInt4Circ integration points and weights for 2d-midpoint rule of circular disc or annulus Rectangle2Fiber integration points and weights for 2d-integration of a rectangle Rectangle2Layer integration points and weights for 1d-integration of a rectangle","title":"Sections"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Add_Bars2Section/","text":"Utilities > PreProcessing > Sections > Add_Bars2Section Add_Bars2Section Purpose add bar group geometry and material data to section data Synopsis SecData = Add_Bars2Section ( SecData , BarAyz , MatName , MatData , CrdOr ) Description ADD_BARS2SECTION add bar group geometry and material data to section data SECDATA = ADD_BARS2SECTION(SECDATA,BARAYZ,MATNAME,MATDATA,CRDOR) the function adds information about the group of reinforcing bars with area and y- and z-coordinates in array BARAYZ to the section description in data structure SECDATA; MATNAME specifies the material type of the bar group with properties in data structure MATDATA; the optional argument CRDOR permits placement of the shape centroid at a specific location relative to the reference point of the section; CRDOR has the fields yc and zc for the centroid coordinates of the bar group in the y- and z-direction of the section coordinate system Cross-Reference Information This function calls: This function is called by:","title":"Add Bars2Section"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Add_Shape2Section/","text":"Utilities > PreProcessing > Sections > Add_Shape2Section Add_Shape2Section Purpose add section shape geometry and material data to section data Synopsis SecData = Add_Shape2Section ( SecData , Shape , CrdOr ) Description ADD_SHAPE2SECTION add section shape geometry and material data to section data SECDATA = ADD_SHAPE2SECTION(SECDATA,SHAPE,CRDOR) the function adds information about the section shape in data structure SHAPE to the section description in data structure SECDATA; the optional argument CRDOR permits placement of the shape centroid at a specific location relative to the reference point of the section; CRDOR has the fields yc and zc for the centroid coordinates of the bar group in the y- and z-direction of the section coordinate system SHAPE has the following fields: .STYpe = type of section shape .ShLoc = shear center location .Outline = y-z coordinates for shape outline description .MeshData = IP mesh information for SType with relevant scalar fields ny nz, ncl, nct, nfl, nft, nwl, nwt, niy, niz .FibAyz = y-z coordinates and weights for fiber mesh discretization .FMatName = material type of shape .FMatData = material properties .FMatID = material ID Cross-Reference Information This function calls: This function is called by:","title":"Add Shape2Section"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/CircLayer2Bar/","text":"Utilities > PreProcessing > Sections > CircLayer2Bar CircLayer2Bar Purpose locations of discrete bars on a circular layer Synopsis [ yfib , zfib ] = CircLayer2Bar ( R , nb , Phi ) Description CIRCLAYER2BAR locations of discrete bars on a circular layer [YFIB,ZFIB] = CIRCLAYER2BAR (R,NBAR,OFS) the function determines the location in vectors YFIB and ZFIB of NBAR discrete bars on a circular layer with radius R; the first bar may be offset from the z-axis by the angle OFS in radians Cross-Reference Information This function calls: This function is called by:","title":"CircLayer2Bar"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_BoxOutline/","text":"Utilities > PreProcessing > Sections > Create_BoxOutline Create_BoxOutline Purpose generate geometry outline for box section Synopsis [ Outline , A , sy , sz ] = Create_BoxOutline ( Data ) Description CREATE_BOXOUTLINE generate geometry outline for box section [OUTLINE,A,SY,SZ] = CREATE_BOXOUTLINE (NDM,DATA) the function creates the data structure OUTLINE for box section with geometric properties in data structure DATA with the following fields: ndm = 2 or 3 for uniaxial or biaxial section model, respectively d = total depth bf = flange width tf = flange thickness tw = web thickness FlgOpt = true/false, FlgOpt = true : single outline for flange WebOpt = true/false, WebOpt = true : single outline for web FlgOpt = false + WebOpt = false : create separate outline for web-flange intersection the function returns the following information A = area of the cross section SY = centroidal distance relative to section mid-depth SZ = centroidal distance relative to section mid-width Dimensions and coordinate system: y ^ | .----------+----------. | tf | | | .------|------. | | | | | | z <-------+----- + | | d |tw | | | | '-------------' | | tf | '---------------------' bf Cross-Reference Information This function calls: Create_RectPatch generate corner coordinates of rectangular patch for given reference point This function is called by: Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window Create_MultRectShape generate geometry outline and assign material properties for shape of rectangular patches Create_ShapewMat generate geometry outline and assign material properties for shape STYPE","title":"Create BoxOutline"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_BoxwOvhOutline/","text":"Utilities > PreProcessing > Sections > Create_BoxwOvhOutline Create_BoxwOvhOutline Purpose generate geometry outline for box section Synopsis [ Outline , A , sy , sz ] = Create_BoxwOvhOutline ( Data ) Description CREATE_BOXwOVHOUTLINE generate geometry outline for box section [OUTLINE,A,SY,SZ] = CREATE_BOXwOVHOUTLINE (DATA) the function creates the data structure OUTLINE for box section with overhang with geometric properties in data structure DATA with the following fields: d = total depth bf = flange width tf = flange thickness tw = web thickness bo = overhang width Loc = 1 or 2 for flange above or below the z-axis FlgOpt = true/false, FlgOpt = true : single outline for flange WebOpt = true/false, WebOpt = true : single outline for web FlgOpt = false + WebOpt = false : create separate outline for web-flange intersection the function returns the following information A = area of the cross section SY = centroidal distance relative to section mid-depth SZ = centroidal distance relative to section mid-width Dimensions and coordinate system: y ^ bo | bo .----------.----------+----------.----------. | tf | | .----------. .------|------. . ---------. | | | | | z <-------+----- + | | d |tw | | | | '-------------' | | tf | '---------------------' bf Cross-Reference Information This function calls: Create_RectPatch generate corner coordinates of rectangular patch for given reference point This function is called by: Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window Create_MultRectShape generate geometry outline and assign material properties for shape of rectangular patches Create_ShapewMat generate geometry outline and assign material properties for shape STYPE","title":"Create BoxwOvhOutline"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_CSecOutline/","text":"Utilities > PreProcessing > Sections > Create_CSecOutline Create_CSecOutline Purpose generate geometry outline for C-section Synopsis [ Outline , A , sy , sz ] = Create_CSecOutline ( Data ) Description CREATE_CSECOUTLINE generate geometry outline for C-section [OUTLINE,A,SY,SZ] = CREATE_CSECOUTLINE (NDM,DATA) the function creates the data structure OUTLINE for C-section with geometric properties in data structure DATA with the following fields: d = total depth bf = flange width tf = flange thickness tw = web thickness Loc = 1 or 2 for web on the left or on the right of y-axis FlgOpt = true/false, FlgOpt = true : single outline for flange WebOpt = true/false, WebOpt = true : single outline for web FlgOpt = false + WebOpt = false : create separate outline for web-flange intersection the function returns the following information A = area of the cross section SY = centroidal distance relative to section mid-depth SZ = centroidal distance relative to section mid-width Dimensions and coordinate system: Loc=1 y ^ Loc=2 (web on the right) | .-------+------. | tf | | | .---|------. | | | z <-------+-- + d |tw | | '----------' | tf | '--------------' bf Cross-Reference Information This function calls: Create_RectPatch generate corner coordinates of rectangular patch for given reference point This function is called by: Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window Create_MultRectShape generate geometry outline and assign material properties for shape of rectangular patches Create_ShapewMat generate geometry outline and assign material properties for shape STYPE","title":"Create CSecOutline"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_CircBarGrid/","text":"Utilities > PreProcessing > Sections > Create_CircBarGrid Create_CircBarGrid Purpose area and coordinates for circular grid of bars Synopsis FibAyz = Create_CircBarGrid ( BarData ) Description CREATE_CIRCBARGRID area and coordinates for circular grid of bars FIBAYZ = CREATE_CIRCBARGRID (BARDATA) the function generates an array FIBAYZ with the coordinates and area of bars in a circular grid; the data structure BARDATA supplies details of the bar arrangement in fields AB = area of one bar, R = [ Ro Ri ] radii of outermost and innermost layer (default Ri = Ro), NBR = no of bars in radial direction (default = 1), NBP = no of bars in circumferential direction (default = 1); PHI = [PHIs PHIe] angles for the first and the last bar of each layer in radians measured from the y-axis (default = [0 2*pi]) each row of the FIBAYZ array corresponds to one bar with the y-coordinate of the bar in the first, the z-coordinate in the second, and the area of the bar in the third column. Coordinate system: ^ y | . + . / | \\ / |R \\ z <--|-----+ | \\ R / \\ / . _ . Cross-Reference Information This function calls: This function is called by:","title":"Create CircBarGrid"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_IPMesh4Circ/","text":"Utilities > PreProcessing > Sections > Create_IPMesh4Circ Create_IPMesh4Circ Purpose integration point coordinates, weights and material IDs for circular disc or annulus Synopsis [ yfib , zfib , wfib , MatID ] = Create_IPMesh4Circ ( SecData ) Description CREATE_IPMESH4CIRC integration point coordinates, weights and material IDs for circular disc or annulus [YFIB,ZFIB,WFIB,MATID] = CREATE_IPMESH4CIRC (SECDATA) the function generates the coordinates YFIB and ZFIB, the weights WFIB, and the material ID MATID for the fiber discretization of the circular disc or annulus in SECDATA; the circular disc or annulus can have a different outer and inner cover, as may be required for sections with reinforcing bars; NDM=2 generates a discretization in the y-axis only and NDM=3 in both y- and z-axis Cross-Reference Information This function calls: MP1dInt4Circ integration points and weights for 1d-midpoint rule of circular disc or annulus MP2dInt4Circ integration points and weights for 2d-midpoint rule of circular disc or annulus S2Cubature integration points and weights for 2d-integration over unit circle This function is called by: HomoCircSecw1dMat response of homogeneous circular section with uniaxial material HomoCircSecwNdMat response of homogeneous circular section with 1d/2d/3d materia ReCircSecw1dMat response of reinforced circular section with uniaxial materials Plot_SectionGeometry plots cross section geometry in current window","title":"Create IPMesh4Circ"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_IPMesh4MultRectShape/","text":"Utilities > PreProcessing > Sections > Create_IPMesh4MultRectShape Create_IPMesh4MultRectShape Purpose fiber discretization for section of several rectangular patches Synopsis Shape = Create_IPMesh4MultRectShape ( Shape , MeshData ) Description CREATE_IPMESH4MULTRECTSHAPE fiber discretization for section of several rectangular patches SHAPE = CREATE_IPMESH4MULTRECTSHAPE (SHAPE,MESHDATA) the function generates and adds the integration point locations and weights for the shape in SHAPE.SType to a section of rectangular patches described in the data structure SHAPE; the data structure MESHDATA supplies details for the fiber discretization in the fields: MESHDATA.ny = number of IPs in the y-direction (for rectangular sections) .nz = number of IPs in the z-direction (for rectangular sections) .ncl = number of IPs in the longitudinal cover direction (for rectangular sections) .nct = number of IPs in the transverse cover direction (for rectangular sections) .nfl = number of IPs along the flange width .nft = number of IPs across the flange thickness .nwl = number of IPs along the web depth .nwt = number of IPs across the web thickness .niy = number of IPs in the y-direction for flange-web intersection .niz = number of IPs in the z-direction for flange-web intersection .IntTyp = quadrature rule .ndm = 2 (discretization in y), 3 (discretization in y and z) the data structure SHAPE supplies the section shape and the outline in the fields SHAPE.SType = character variable for section shape with the following options: 'Rect', 'RectwCov', 'I-Shp', 'T-Shp', 'L-Shp', 'C-Shp', 'S-Shp', 'Box' , 'BoxwOvh' , 'Circ-Shp' SHAPE.Outline = cell array with the coordinates of each rectangular patch group: {1} for flange(s), {2} for web(s), {3} for flange-web intersection on return SHAPE is enriched with the following fields SHAPE.FibAyz = (nfib x 3) numerical array with y- and z-coordinates and weights of IPs SHAPE.FMatID = nfib x 1 with the material number for each IP SHAPE.MeshData = IP mesh information for SType with relevant scalar fields ny nz, ncl, nct, nfl, nft, nwl, nwt, niy, niz Cross-Reference Information This function calls: Rectangle2Fiber integration points and weights for 2d-integration of a rectangle This function is called by: Plot_SectionGeometry plots cross section geometry in current window","title":"Create IPMesh4MultRectShape"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_IPMesh4Rect/","text":"Utilities > PreProcessing > Sections > Create_IPMesh4Rect Create_IPMesh4Rect Purpose coordinates, weights and material IDs for rectangular section with cover Synopsis [ yfib , zfib , wfib , MatID ] = Create_IPMesh4Rect ( SecData ) Description CREATE_IPMESH4RECT coordinates, weights and material IDs for rectangular section with cover [YFIB,ZFIB,WFIB,MATID] = CREATE_IPMESH4RECT (SECDATA) the function generates the coordinates YFIB and ZFIB, the integration weights WFIB, and the material ID MATID for the fiber discretization of the rectangular section in SECDATA; the rectangular section can have a different top/bottom and side cover, as may be required for sections with reinforcing bars; SECDATA has two fields for assigning material IDs to core and cover fibers: FMatID = row vector with material ID for corresponding core fiber (default = row vector of 1s) FCovMID = row vector with material ID for corresponding cover fiber (default = row vector of 2s) Cross-Reference Information This function calls: Create_RectShape generate geometry outline and assign material properties for rectangle Rectangle2Fiber integration points and weights for 2d-integration of a rectangle This function is called by: ReRectSecw1dMat response of reinforced rectangular section with uniaxial materials","title":"Create IPMesh4Rect"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_IPMesh4WFShape/","text":"Utilities > PreProcessing > Sections > Create_IPMesh4WFShape Create_IPMesh4WFShape Purpose coordinates, weights and material IDs for wide flange section Synopsis [ yfib , zfib , wfib , MatID ] = Create_IPMesh4WFShape ( SecData ) Description CREATE_IPMESH4WFSHAPE coordinates, weights and material IDs for wide flange section [YFIB,ZFIB,WFIB,MATID] = CREATE_IPMESH4WFSHAPE (SECDATA) the function generates the coordinates YFIB and ZFIB, the integration weights WFIB, and the material ID MATID for the fiber discretization of the wide flange section in SECDATA; Cross-Reference Information This function calls: Create_RectPatch generate corner coordinates of rectangular patch for given reference point Rectangle2Fiber integration points and weights for 2d-integration of a rectangle This function is called by: HomoWFSecw1dMat response of homogeneous wide flange (WF) section with uniaxial material","title":"Create IPMesh4WFShape"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_ISecOutline/","text":"Utilities > PreProcessing > Sections > Create_ISecOutline Create_ISecOutline Purpose generate geometry outline for I-section Synopsis [ Outline , A , sy , sz ] = Create_ISecOutline ( Data ) Description CREATE_ISECOUTLINE generate geometry outline for I-section [OUTLINE,A,SY,SZ] = CREATE_ISECOUTLINE (NDM,DATA) the function creates the data structure OUTLINE for symmetric I-section with geometric properties in data structure DATA with the following fields: ndm = 2 or 3 for uniaxial or biaxial section model, respectively d = total depth bf = flange width tf = flange thickness tw = web thickness FlgOpt = true/false, FlgOpt = true : single outline for flange WebOpt = true/false, WebOpt = true : single outline for web FlgOpt = false + WebOpt = false : create separate outline for web-flange intersection the function returns the following information A = area of the cross section SY = centroidal distance relative to section mid-depth SZ = centroidal distance relative to section mid-width Dimensions and coordinate system: y ^ | .----+----. | | | '--. | .--' | | | z <-----+ + | d |tw | .--' '--. tf | | '---------' bf Cross-Reference Information This function calls: Create_RectPatch generate corner coordinates of rectangular patch for given reference point This function is called by: Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window Create_MultRectShape generate geometry outline and assign material properties for shape of rectangular patches Create_ShapewMat generate geometry outline and assign material properties for shape STYPE","title":"Create ISecOutline"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_LSecOutline/","text":"Utilities > PreProcessing > Sections > Create_LSecOutline Create_LSecOutline Purpose generate geometry outline for L-section Synopsis [ Outline , A , sy , sz ] = Create_LSecOutline ( Data ) Description CREATE_LSECOUTLINE generate geometry outline for L-section [OUTLINE,A,SY,SZ] = CREATE_LSECOUTLINE (NDM,DATA) the function creates the data structure OUTLINE for L-section with geometric properties in data structure DATA with the following fields: d = total depth bf = flange width tf = flange thickness tw = web thickness Loc = flange is located at the upper left (1=y+z+), lower left (2=y-z+), lower right(3=y-z-), upper right(4=y+z-) FlgOpt = true/false, FlgOpt = true : single outline for flange WebOpt = true/false, WebOpt = true : single outline for web FlgOpt = false + WebOpt = false : create separate outline for web-flange intersection the function returns the following information A = area of the cross section SY = centroidal distance relative to section mid-depth SZ = centroidal distance relative to section mid-width Dimensions and coordinate system: Loc=1 y ^ Loc=2 (top flange on the right) | bf .-------+-------. | tf | | '-------+--. | | | | z <------+ | | d | tw | | | | | '----' Cross-Reference Information This function calls: Create_RectPatch generate corner coordinates of rectangular patch for given reference point This function is called by: Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window Create_MultRectShape generate geometry outline and assign material properties for shape of rectangular patches Create_ShapewMat generate geometry outline and assign material properties for shape STYPE","title":"Create LSecOutline"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_MPMesh4Circ/","text":"Utilities > PreProcessing > Sections > Create_MPMesh4Circ Create_MPMesh4Circ Purpose generate the mesh for a circular disc or annulus Synopsis [ R1 , R2 , thfib , dth ] = Create_MPMesh4Circ ( Ri , Ro , nrfib , nthfib , MeshOpt ) Description CREATE_MPMESH4CIRC generate the mesh for a circular disc or annulus [R1,R2,THFIB,DTH] = CREATE_MPMESH4CIRC (RI,RO,NRFIB,NTHFIB,MESHOPT) the function generates the mesh for a circular disc or annulus with inner radius RI and outer radius RO; there are NRFIB radial and NTHFIB circumferential subdivisions; the function returns the radial subdivision in vectors R1 and R2 and the circumferential subdivisions for each ring in the cellarray THFIB; DTH is a vector with the circumfererential angle increment for each ring; the discretization is controlled by the optional data structure MESHOPT with the following fields: MESHOPT.BASIC = true (for NRFIB x NTHFIB mesh) or false (for NRFIB x variable NTHFIB mesh) .CP = true (with IP at center) or false (without IP at center) .UW = true (for uniform IP weight) or false (for variable IP weight) .ThInc = increment in number of circumferential fibers/quadrant .Phi = angle of first integration point in circumferential direction relative to y-axis if Phi='var' each ring is offset by half the angle between successive IPs .Nthst = initial number of circumferential fibers/quadrant (default = 4*Ri/Ro) Default values for MESHOPT fields: BASIC = true, CP = false, UW = false, ThInc = 1, Phi = 0 the function returns Cross-Reference Information This function calls: This function is called by: Plot_Mesh4Circ plots mesh for a circular disc or annulus in current window MP2dInt4Circ integration points and weights for 2d-midpoint rule of circular disc or annulus","title":"Create MPMesh4Circ"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_MultRectShape/","text":"Utilities > PreProcessing > Sections > Create_MultRectShape Create_MultRectShape Purpose generate geometry outline and assign material properties for shape of rectangular patches Synopsis Shape = Create_MultRectShape ( SType , Data ) Description CREATE_MULTRECTSHAPE generate geometry outline and assign material properties for shape of rectangular patches SHAPE = CREATE_MULTRECTSHAPE (STYPE,DATA) the function creates the data structure SHAPE with geometry outline information for the shape of rectangular patches in character variable STYPE using the geometry data in data structure DATA with the following fields: [SType\\Data] | d b tw tf bo Loc | --------------+---------------------------------+---------------------- 'Rect' | x x - - - - | rectangle 'Box' | x x x x - - | box 'BoxwOvh' | x x x x x x | box with overhangs 'C-Shp' | x x x x - x | C-Shape 'I-Shp' | x x x x - - | I-Shape 'T-Shp' | x x x x - x | T-Shape 'L-Shp' | x x x x - x | L-Shape 'S-Shp' | x x x x - - | S-Shape d = total depth bf = flange width (except for BoxwOvh) tf = flange thickness (default=0) tw = web thickness (default=0) bo = overhang width (default=0) Loc = top or bottom flange / left or right web (1 or 2) location, = upper left(1), lower left(2), lower right(3), upper right(4) for flange of L-shape Optional data: bf = flange width (set automatically, unless specified equal to b to request single patch for flange dw = web depth (set automatically, unless specified equal to d to request single patch for web without bf and dw specification separate patches are used for flange-web intersections Coordinate system: y ^ y ^ | | .----+----. .----------+----------. | | | | tf | | '--. | .--' | .------|------. | | | | | | | | | z <-----+ + | d z <-------+----- + | | d |tw | |tw | | | .--' '--. | '-------------' | tf | | | tf | '---------' '---------------------' bf bf The function assigns the properties in the field MATDATA of the material type MATNAME to parts of the shape, as follows: MATNAME{1}, MATDATA{1} are assigned to the core or flanges depending on shape MATNAME{2}, MATDATA{2} are assigned to the cover or webs depending on shape (default=same as 1) MATNAME{3}, MATDATA{3} are assigned to the intersections of flange and web (default=same as 1) The function returns the outline in cell array OUTLINE of data structure SHAPE; OUTLINE has at most 3 cells, each consisting of a 4 x N array where N is the number of rectangular patches that describe the outline of the corresponding part of the shape; OUTLINE{1} = rectangular patches for one or more flanges depending on shape OUTLINE{2} = rectangular patches for one or more webs depending on shape; OUTLINE{3} = rectangular patches for flange and web intersections (if requested); each rectangular patch is described with a 4x1 vector of corner coordinates [y1;z1,y2;z2] where 1 refers to the upper left and 2 to the lower right corner of the rectangular patch; these coordinates are measured relative to the geometric centroid of the shape; the date structure shape also contains the area of the shape in field A, and the distances of its geometric centroid from the mid-depth D and mid-width B in fields CY and CZ, respectively. Cross-Reference Information This function calls: Create_BoxOutline generate geometry outline for box section Create_BoxwOvhOutline generate geometry outline for box section Create_CSecOutline generate geometry outline for C-section Create_ISecOutline generate geometry outline for I-section Create_LSecOutline generate geometry outline for L-section Create_RectOutline generate geometry outline for rectangular section Create_RectwCovOutline generate geometry outline for rectangular section with cover Create_SSecOutline generate geometry outline for C-section Create_TSecOutline generate geometry outline for T-section This function is called by:","title":"Create MultRectShape"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_RectBarGrid/","text":"Utilities > PreProcessing > Sections > Create_RectBarGrid Create_RectBarGrid Purpose area and coordinates for rectangular grid of bars Synopsis FibAyz = Create_RectBarGrid ( BarGeomData ) Description CREATE_RECTBARGRID area and coordinates for rectangular grid of bars FIBAYZ = CREATE_RECTBARGRID (BARGEOMDATA) the function generates an array FIBAYZ with the coordinates and area of bars in a rectangular grid; the data structure BARGEOMDATA supplies details of the grid geometry in fields AB = area of one bar, BGY,BGZ = grid dimensions and NY,NZ = no of bars in Y-Z, respectively; the bars are evenly spaced on the grid which is assumed to be symmetrically placed relative to the origin of the Y-Z coordinate system; if NY or NZ is equal to 1, the function generates a layer of bars normal to the Y or Z-direction at a distance GDY/2 or GDZ/2 from the origin of the coordinate system, respectively; each row of the FIBAYZ array corresponds to one bar with the y-coordinate of the bar in the first, the z-coordinate in the second, and the area of the bar in the third column. Coordinate system: ^ y | ----+---- | | | | | | z <---+---+ | BGy | | | | --------- BGz Cross-Reference Information This function calls: This function is called by:","title":"Create RectBarGrid"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_RectOutline/","text":"Utilities > PreProcessing > Sections > Create_RectOutline Create_RectOutline Purpose generate geometry outline for rectangular section Synopsis [ Outline , A , sy , sz ] = Create_RectOutline ( Data ) Description CREATE_RECTOUTLINE generate geometry outline for rectangular section [OUTLINE,A,SY,SZ] = CREATE_RECTOUTLINE (NDM,DATA) the function creates the data structure OUTLINE for rectangular section with geometric properties in data structure DATA with the following fields: ndm = 2 or 3 for uniaxial or biaxial section model, respectively d = depth b = width the function returns the following information A = area of the cross section SY = centroidal distance relative to section mid-depth SZ = centroidal distance relative to section mid-width Dimensions and coordinate system: y ^ | .---+---. | | | | | | z <---+---+ | d | | | | '-------' b Cross-Reference Information This function calls: This function is called by: Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window Create_MultRectShape generate geometry outline and assign material properties for shape of rectangular patches Create_ShapewMat generate geometry outline and assign material properties for shape STYPE","title":"Create RectOutline"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_RectPatch/","text":"Utilities > PreProcessing > Sections > Create_RectPatch Create_RectPatch Purpose generate corner coordinates of rectangular patch for given reference point Synopsis yz = Create_RectPatch ( ty , tz , sy , sz ) Description CREATE_RECTPATCH generate corner coordinates of rectangular patch for given reference point YZ = CREATE_RECTPATCH (TY,TZ,SY,SZ) the function generates the corner coordinates of a rectangular patch TY x TZ, where TY is the dimension in Y and TZ is the dimension in Z, with respect to a reference point at a distance SY in Y and SZ in Z from the centroid of the patch; the function returns the corner coordinates in the 1x4 array YZ = [Y1 Z1 Y2 Z2] where 1 refers to the upper left corner and 2 to the lower right corner of the rectangular patch Section coordinate system: ^ y | ----+---- | | | | | | z <---+---+ | | | | | --------- Cross-Reference Information This function calls: This function is called by: Create_BoxOutline generate geometry outline for box section Create_BoxwOvhOutline generate geometry outline for box section Create_CSecOutline generate geometry outline for C-section Create_IPMesh4WFShape coordinates, weights and material IDs for wide flange section Create_ISecOutline generate geometry outline for I-section Create_LSecOutline generate geometry outline for L-section Create_RectShape generate geometry outline and assign material properties for rectangle Create_RectwCovOutline generate geometry outline for rectangular section with cover Create_SSecOutline generate geometry outline for C-section Create_TSecOutline generate geometry outline for T-section","title":"Create RectPatch"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_RectShape/","text":"Utilities > PreProcessing > Sections > Create_RectShape Create_RectShape Purpose generate geometry outline and assign material properties for rectangle Synopsis Shape = Create_RectShape ( ndm , SType , Data ) Description CREATE_RECTSHAPE generate geometry outline and assign material properties for rectangle SHAPE = CREATE_RECTSHAPE (NDM,STYPE,DATA) the function creates the data structure SHAPE with geometry outline information for the shape of the rectangular patches making up the rectangular section of the type in character variable STYPE; NDM=2 combines the side cover patches into a single patch; the function uses the geometry data in data structure DATA with the following fields: [SType\\Data] | d b cv tw tf bo Loc | --------------+-------------------------------------+---------------------- 'Rect' | x x - - - - - | rectangle 'RectwCov' | x x x - - - - | rectangle with cover d = depth b = width cv = cover thickness Coordinate system: y ^ | .---+---. | | | | | | z <---+---+ | d | | | | '-------' b The function assigns the properties in the field MATDATA of the material type MATNAME to parts of the shape, as follows: MATNAME{1}, MATDATA{1} are assigned to the core MATNAME{2}, MATDATA{2} are assigned to the cover, if present (default=same as 1) The function returns the outline in cell array OUTLINE of data structure SHAPE; OUTLINE has at most 2 cells: OUTLINE{1} contains a 4x1 array for the rectangular patch of the core; OUTLINE{2} contains a 4 x N array, where N=4 as the number of rectangular patches describing the cover outline; each rectangular patch is described with a 4x1 vector of corner coordinates [y1;z1,y2;z2] where 1 refers to the upper left and 2 to the lower right corner of the rectangular patch; these coordinates are measured relative to the geometric centroid of the shape; the date structure shape also contains the area of the shape in field A, and the distances of its geometric centroid from the mid-depth D and mid-width B in fields CY and CZ, respectively. Cross-Reference Information This function calls: Create_RectPatch generate corner coordinates of rectangular patch for given reference point This function is called by: Create_IPMesh4Rect coordinates, weights and material IDs for rectangular section with cover","title":"Create RectShape"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_RectwCovOutline/","text":"Utilities > PreProcessing > Sections > Create_RectwCovOutline Create_RectwCovOutline Purpose generate geometry outline for rectangular section with cover Synopsis [ Outline , A , sy , sz ] = Create_RectwCovOutline ( Data ) Description CREATE_RECTwCOVOUTLINE generate geometry outline for rectangular section with cover [OUTLINE,A,SY,SZ] = RECTwCOVOUTLINE (DATA) the function creates the data structure OUTLINE for rectangular section with cover with geometric properties in data structure DATA with the following fields: ndm = 2 or 3 for uniaxial or biaxial section model, respectively d = depth b = width cv(1:2) = cover thickness top/bottom, left/right (default = same thickness) the function returns the following information A = area of the cross section SY = centroidal distance relative to section mid-depth SZ = centroidal distance relative to section mid-width Dimensions and coordinate system: y ^ | .---+---. | | | | | | z <---+---+ | d | | | | '-------' b Cross-Reference Information This function calls: Create_RectPatch generate corner coordinates of rectangular patch for given reference point This function is called by: Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window Create_MultRectShape generate geometry outline and assign material properties for shape of rectangular patches Create_ShapewMat generate geometry outline and assign material properties for shape STYPE","title":"Create RectwCovOutline"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_SSecOutline/","text":"Utilities > PreProcessing > Sections > Create_SSecOutline Create_SSecOutline Purpose generate geometry outline for C-section Synopsis [ Outline , A , sy , sz ] = Create_SSecOutline ( Data ) Description CREATE_SSECOUTLINE generate geometry outline for C-section [OUTLINE,A,SY,SZ] = CREATE_SSECOUTLINE (DATA) the function creates the data structure OUTLINE for S-section with geometric properties in data structure DATA with the following fields: d = total depth bf = flange width tf = flange thickness tw = web thickness Loc = 1 or 2 for top flange on the left or on the right of y-axis FlgOpt = true/false, FlgOpt = true : single outline for flange WebOpt = true/false, WebOpt = true : single outline for web FlgOpt = false + WebOpt = false : create separate outline for web-flange intersection the function returns the following information A = area of the cross section SY = centroidal distance relative to section mid-depth SZ = centroidal distance relative to section mid-width Dimensions and coordinate system: Loc=1 y ^ Loc=2 (top flange on the right) bf | .--------------. | tf | | '----------. | | | | | z <---------+-+ | d |tw | | '----------. | tf | '--------------' bf Cross-Reference Information This function calls: Create_RectPatch generate corner coordinates of rectangular patch for given reference point This function is called by: Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window Create_MultRectShape generate geometry outline and assign material properties for shape of rectangular patches Create_ShapewMat generate geometry outline and assign material properties for shape STYPE","title":"Create SSecOutline"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_ShapewMat/","text":"Utilities > PreProcessing > Sections > Create_ShapewMat Create_ShapewMat Purpose generate geometry outline and assign material properties for shape STYPE Synopsis Shape = Create_ShapewMat ( SType , Data ) Description CREATE_SHAPEwMAT generate geometry outline and assign material properties for shape STYPE SHAPE = CREATE_MULTRECTSHAPE (STYPE,DATA) the function creates the data structure SHAPE with geometry outline information for the shape type in character variable STYPE using the geometry data in data structure DATA with the following fields: The function assigns the properties in the field MATDATA of the material type MATNAME to parts of the shape, as follows: MATNAME{1}, MATDATA{1} are assigned to the core or flanges depending on shape MATNAME{2}, MATDATA{2} are assigned to the cover or webs depending on shape (default=same as 1) MATNAME{3}, MATDATA{3} are assigned to the intersections of flange and web (default=same as 1) The function returns the outline in cell array OUTLINE of data structure SHAPE; OUTLINE has at most 3 cells, each consisting of a 4 x N array where N is the number of rectangular patches that describe the outline of the corresponding part of the shape; OUTLINE{1} = rectangular patches for one or more flanges depending on shape OUTLINE{2} = rectangular patches for one or more webs depending on shape; OUTLINE{3} = rectangular patches for flange and web intersections (if requested); each rectangular patch is described with a 4x1 vector of corner coordinates [y1;z1,y2;z2] where 1 refers to the upper left and 2 to the lower right corner of the rectangular patch; these coordinates are measured relative to the geometric centroid of the shape; the date structure shape also contains the area of the shape in field A, and the distances of its geometric centroid from the mid-depth D and mid-width B in fields CY and CZ, respectively. Cross-Reference Information This function calls: Create_BoxOutline generate geometry outline for box section Create_BoxwOvhOutline generate geometry outline for box section Create_CSecOutline generate geometry outline for C-section Create_ISecOutline generate geometry outline for I-section Create_LSecOutline generate geometry outline for L-section Create_RectOutline generate geometry outline for rectangular section Create_RectwCovOutline generate geometry outline for rectangular section with cover Create_SSecOutline generate geometry outline for C-section Create_TSecOutline generate geometry outline for T-section This function is called by:","title":"Create ShapewMat"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Create_TSecOutline/","text":"Utilities > PreProcessing > Sections > Create_TSecOutline Create_TSecOutline Purpose generate geometry outline for T-section Synopsis [ Outline , A , sy , sz ] = Create_TSecOutline ( Data ) Description CREATE_TSECOUTLINE generate geometry outline for T-section [OUTLINE,A,SY,SZ] = CREATE_TSECOUTLINE (NDM,DATA) the function creates the data structure OUTLINE for T-section with geometric properties in data structure DATA with the following fields: ndm = 2 or 3 for uniaxial or biaxial section model, respectively d = total depth bf = flange width tf = flange thickness tw = web thickness Loc = 1 or 2 for flange above or below the z-axis FlgOpt = true/false, FlgOpt = true : single outline for flange WebOpt = true/false, WebOpt = true : single outline for web FlgOpt = false + WebOpt = false : create separate outline for web-flange intersection the function returns the following information A = area of the cross section SY = centroidal distance relative to section mid-depth SZ = centroidal distance relative to section mid-width Dimensions and coordinate system: Loc=1 y ^ Loc=2 (flange below the z-axis) | bf .--------+--------. | tf | | '------. | .------' | | | d z <-----+ + | |tw | | | | | '---' Cross-Reference Information This function calls: Create_RectPatch generate corner coordinates of rectangular patch for given reference point This function is called by: Plot_Mesh4MultRectShape plot the mesh for section of several rectangular patches Plot_SectionGeometry plots cross section geometry in current window Create_MultRectShape generate geometry outline and assign material properties for shape of rectangular patches Create_ShapewMat generate geometry outline and assign material properties for shape STYPE","title":"Create TSecOutline"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/MP1dInt4Circ/","text":"Utilities > PreProcessing > Sections > MP1dInt4Circ MP1dInt4Circ Purpose integration points and weights for 1d-midpoint rule of circular disc or annulus Synopsis [ yfib , wfib ] = MP1dInt4Circ ( R , nrfib ) Description MP1dINT4CIRC integration points and weights for 1d-midpoint rule of circular disc or annulus [YFIB,WFIB] = MP1dINT4CIRC (R,NRFIB) the function determines the locations YFIB and the integration weights WFIB for the 1d integration of a circular disc or annulus by the midpoint rule with 2*NRFIB integration points in the radial direction, where YFIB and WFIB are (2xNRFIB) x 1 column vectors; R = [Ro Ri] is the outer/inner radius of the annulus (for circular disc R = Ro); Section coordinate system: ^ y | . + . / | \\ / | \\ z <- |----+ | \\ / \\ / . _ . Cross-Reference Information This function calls: This function is called by: Create_IPMesh4Circ integration point coordinates, weights and material IDs for circular disc or annulus","title":"MP1dInt4Circ"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/MP2dInt4Circ/","text":"Utilities > PreProcessing > Sections > MP2dInt4Circ MP2dInt4Circ Purpose integration points and weights for 2d-midpoint rule of circular disc or annulus Synopsis [ yfib , zfib , wfib ] = MP2dInt4Circ ( R , nrfib , nthfib , MeshOpt ) Description MP2dINT4CIRC integration points and weights for 2d-midpoint rule of circular disc or annulus [YFIB,ZFIB,WFIB] = MP2dINT4CIRC (R,NRFIB,NTHFIB,MESHOPT) the function determines the locations in vectors YFIB and ZFIB and the integration weights in vector WFIB for midpoint integration of a circular disc or annulus with number of integration points NRFIB in the radial direction and either a fixed number NTHFIB or a variable number of integration points (IPs) in the circumferential direction where YFIB, ZFIB and WFIB are (NFTOT x 1) column vectors, with NFTOT the total number of fibers; R = [Ro Ri] is the outer/inner radius of the annulus (for circular disc R = Ro); the discretization is controlled by the optional data structure MESHOPT with the following fields: MESHOPT.BASIC = true (for NRFIB x NTHFIB mesh) or false (for NRFIB x variable NTHFIB mesh) .CP = true (with IP at center) or false (without IP at center) .UW = true (for uniform IP weight) or false (for variable IP weight) .ThInc = increment in number of circumferential fibers/quadrant .IPCg = true (IP at exact centroid) or false (IP at average ring radius) .Phi = angle of first integration point in circumferential direction relative to y-axis if Phi='var' each ring is offset by half the angle between successive IPs .Nthst = initial number of circumferential fibers/quadrant (default = 4*Ri/Ro) .Rdrat = limit ratio of Ri/Ro; for Ri/Ro larger than the limit the function uses the specified NTHFIB number in the circumferential direction, otherwise it uses the mesh discretization specified in MESHOPT Default values for MESHOPT fields: BASIC = true, CP = false, UW = false, ThInc = 1, IPCg = true, Phi = 0, Rdrat = 0.75 Section coordinate system: ^ y | . + . / | \\ / | \\ z <- |----+ | \\ / \\ / . _ . Cross-Reference Information This function calls: Create_MPMesh4Circ generate the mesh for a circular disc or annulus This function is called by: Create_IPMesh4Circ integration point coordinates, weights and material IDs for circular disc or annulus","title":"MP2dInt4Circ"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Rectangle2Fiber/","text":"Utilities > PreProcessing > Sections > Rectangle2Fiber Rectangle2Fiber Purpose integration points and weights for 2d-integration of a rectangle Synopsis [ yfib , zfib , wfib ] = Rectangle2Fiber ( patcoor , IntTyp , nyfib , nzfib ) Description RECTANGLE2FIBER integration points and weights for 2d-integration of a rectangle [YFIB,ZFIB,WFIB] = RECTANGLE2FIBER (PATCOOR,INTTYP,NYFIB,NZFIB) the function determines the locations in vectors YFIB and ZFIB and the integration weights in vector WFIB for the 2d integration of a rectangle with the integration scheme in character array INTTYP and the number of integration points in the y-direction in NYFIB and in the z-direction in NZFIB, respectively; the geometry of the rectangle is supplied by specifying the coordinates of opposite corners in array PATCOOR [ y1 z1 (+ve quadrant); y2 z2 (-ve quadrant)] (right handed local x-y-z system) INTTYP can be either 'Midpoint', 'Trap', 'Simpson','Gauss', 'Lobatto' or 'Cubature' Cross-Reference Information This function calls: C2Cubature integration points and weights for 2d-integration over unit square This function is called by: HomoRectSecw1dMat response of homogeneous rectangular section with uniaxial material HomoRectSecwNdMat response of homogeneous rectangular section with 1d/2d/3d material Create_IPMesh4MultRectShape fiber discretization for section of several rectangular patches Create_IPMesh4Rect coordinates, weights and material IDs for rectangular section with cover Create_IPMesh4WFShape coordinates, weights and material IDs for wide flange section","title":"Rectangle2Fiber"},{"location":"Functions/latest/Utilities/PreProcessing/Sections/Rectangle2Layer/","text":"Utilities > PreProcessing > Sections > Rectangle2Layer Rectangle2Layer Purpose integration points and weights for 1d-integration of a rectangle Synopsis [ yfib , wfib ] = Rectangle2Layer ( patcoor , IntTyp , nfib ) Description RECTANGLE2LAYER integration points and weights for 1d-integration of a rectangle [YFIB,WFIB] = RECTANGLE2FIBER (PATCOOR,INTTYP,NFIB) the function determines the locations in vector YFIB and the integration weights in vector WFIB for the 1d integration in y of a rectangle with the integration scheme in character array INTTYP and the number of integration points in NFIB the geometry of the rectangle is supplied by specifying the coordinates of opposite corners in array PATCOOR [ y1 z1 (+ve quadrant); y2 z2 (-ve quadrant)] (right handed local x-y-z system) INTTYP can be either 'Midpoint', 'Trap', 'Simpson','Gauss' or 'Lobatto' Cross-Reference Information This function calls: This function is called by: Create_NMInterDiagram generates the N-Mz interaction diagram of a section","title":"Rectangle2Layer"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/","text":"Structure Add_Brace2Frame adds brace elements to a bay of a frame Add_GravityColumn2Frame generate gravity column and connectors to frame Convert_SAPModel reads SAP2000 Excel table data to generate model information Create_Block generation of node coordinates and element connectivity for quadrilateral block Create_JntOffsets generation of joint offsets for regular plane frame Create_Load4Frame generation of nodal force vector for regular frame Create_MRFrame generation of nodes and elements for regular N-story, M-bay MR frame Create_Mass4Frame generation of lumped mass vector for regular frame Tie_2dMesh tie nodes and elements for mesh generated in separate 2d blocks Tie_3dMesh tie nodes and elements for mesh generated in separate 3d blocks","title":"Structure"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/Add_Brace2Frame/","text":"Utilities > PreProcessing > Structure > Add_Brace2Frame Add_Brace2Frame Purpose adds brace elements to a bay of a frame Synopsis Frame = Add_Brace2Frame ( Frame , BayNo , BrType , EccR , StrRng , nsBr ) Description ADD_BRACE2FRAME adds brace elements to a bay of a frame FRAME = ADD_BRACE2FRAME (FRAME,BAYNO,BRTYPE,ECCR,STRRNG,NSBR) the function adds braces to the bay BAYNO of the frame in data structure FRAME over the stories in the contiguous range STRRNG (default is all stories); the braces are subdivided into NSBR elements with middle eccentricity ECCR, where ECCR is specified as a percentage of the brace length (default = 0) BRTYPE is a character variable with the following options: 'RDbr': rising diagonal brace 'FDbr': falling diagonal brace 'IVbr': inverted V-brace 'RVbr': regular V-brace 'AVbr': alternating V- and inverted V-braces (also known as X-brace) Cross-Reference Information This function calls: ElmLenOr element length and x-axis orientation (direction cosines) This function is called by:","title":"Add Brace2Frame"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/Add_GravityColumn2Frame/","text":"Utilities > PreProcessing > Structure > Add_GravityColumn2Frame Add_GravityColumn2Frame Purpose generate gravity column and connectors to frame Synopsis Frame = Add_GravityColumn2Frame ( Frame ) Description ADD_GRAVITYCOLUMN2FRAME generate gravity column and connectors to frame FRAME = ADD_GRAVITYCOLUMN2FRAME (FRAME) the function adds coordinate and connectivity information for a gravity column located next to the moment resisting frame described in data structure FRAME and returns this information in the updated data structure FRAME; the functions adds one gravity column and one rigid connector per story; the element index of the corresponding elements is returned in the field GColIndx of FRAME with the first NST elements corresponding to the gravity column and the next NST elements to the rigid connectors, where NST is the number of stories in FRAME Cross-Reference Information This function calls: This function is called by:","title":"Add GravityColumn2Frame"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/Convert_SAPModel/","text":"Utilities > PreProcessing > Structure > Convert_SAPModel Convert_SAPModel Purpose reads SAP2000 Excel table data to generate model information Synopsis [ XYZ , CON , BOUN , ElemData , NMass ] = Convert_SAPModel ( Fname ) Description CONVERT_SAPMODEL reads SAP2000 Excel table data to generate model information [XYZ,CON,BOUN,ELEMDATA,NMASS] = CONVERT_SAPMODEL (FNAME) INPUT FNAME.xlsx Excel workbook from SAP OUTPUT XYZ : Nodal coordinates CON : Connectivity array BOUN : Boundary conditions array ElemData: ElemData struct for FEDEASLab Cross-Reference Information This function calls: This function is called by:","title":"Convert SAPModel"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/Create_Block/","text":"Utilities > PreProcessing > Structure > Create_Block Create_Block Purpose generation of node coordinates and element connectivity for quadrilateral block Synopsis b = Create_Block ( xy , n , type ) Description CREATE_BLOCK generation of node coordinates and element connectivity for quadrilateral block B = CREATE_BLOCK(XY,N,TYPE) node coordinates and element connectivity for quadrilateral block the function generates a triangular or quadrilateral mesh with N(1) x N(2) elements depending on variable TYPE; the generated mesh is returned in data structure B with fields B.XY for the node coordinates and B.CON for the element connectivity Input Variables --------------- XY = corner point coordinates of block in counterclockwise (CCW) order N = 2-element vector with number of elements in node 1-2 and node 2-3 directions TYPE = 3 : three node triangle (diagonal in the direction 1-3) TYPE = 4 : four node quad TYPE = 6 : six node triangle (diagonal in the direction 1-3) TYPE = 8 : eight node quad TYPE = 9 : nine node quad Example: x = [0 1 2 -1] ; y = [0 0 1 1] ; XY = [x',y'] b = block(XY,[2;2]) ; creates 2x2 mesh of elements with corners 1: (0,0), 2: (1,0), 3: (2,1) and 4: (-1,1) Cross-Reference Information This function calls: This function is called by:","title":"Create Block"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/Create_JntOffsets/","text":"Utilities > PreProcessing > Structure > Create_JntOffsets Create_JntOffsets Purpose generation of joint offsets for regular plane frame Synopsis JntOff = Create_JntOffsets ( Frame , DBase ) Description CREATE_JNTOFFSETS generation of joint offsets for regular plane frame JNTOFF = CREATE_JNTOFFSETS (FRAME,DBASE) the function generates the element joint offsets for the regular plane frame in data structure FRAME from the section depth of the elements by extracting the corresponding value with the help of function DBASE from the corresponding steel section database; JNTOFF is a cell array with NE rows equal to the number of elements in FRAME each cell contains the joint offsets of the corresponding element in a 2x2 array with the first column referring to node I and the second to node J currently supported options for DBASE are: 'AISC_SECTION' for all AISC wide flange and HSS shapes 'EURO_IPSECTION' for European IP shapes Cross-Reference Information This function calls: This function is called by:","title":"Create JntOffsets"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/Create_Load4Frame/","text":"Utilities > PreProcessing > Structure > Create_Load4Frame Create_Load4Frame Purpose generation of nodal force vector for regular frame Synopsis Pe = Create_Load4Frame ( Frame , Pdis , index ) Description CREATE_LOAD4FRAME generation of nodal force vector for regular frame PE = CREATE_LOAD4FRAME (FRAME,PDIS,INDEX) the function generates the nodal force vector PE from information about the load distribution in vector PDIS; if PDIS is a column vector, the function assigns its distribution to the column lines in INDEX (default = all columns) if PDIS is a row vector, the function assigns its distribution to the floors in INDEX (default = all floors) Cross-Reference Information This function calls: This function is called by:","title":"Create Load4Frame"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/Create_MRFrame/","text":"Utilities > PreProcessing > Structure > Create_MRFrame Create_MRFrame Purpose generation of nodes and elements for regular N-story, M-bay MR frame Synopsis Frame = Create_MRFrame ( Lbv , Hsv , nsub ) Description CREATE_FRAME generation of nodes and elements for regular N-story, M-bay MR frame FRAME = CREATE_MRFRAME (LBV,HSV,NSUB) function generates the node coordinates XYZ and element connectivity CON for a regular N-story, M-bay frame with bay spans in row vector LBV and story heights in row vector HSV; the optional row vector NSUB specifies the number of subelements for each frame girder the function returns the generated information in data structure FRAME with fields XYZ (node coordinates), CON (element connectivity), CINDX (column index by story), GINDX (girder index by floor), NBY (no of bays), NST (no of stories), NC (no of columns), NG (no of girders) NN (no of nodes), NE (no of elements) Cross-Reference Information This function calls: This function is called by:","title":"Create MRFrame"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/Create_Mass4Frame/","text":"Utilities > PreProcessing > Structure > Create_Mass4Frame Create_Mass4Frame Purpose generation of lumped mass vector for regular frame Synopsis Me = Create_Mass4Frame ( Frame , Mdis , index ) Description CREATE_MASS4FRAME generation of lumped mass vector for regular frame ME = CREATE_MASS4FRAME (FRAME,MDIS,INDEX) the function generates the nodal mass vector ME from information about the mass distribution MDIS over the height of the frame; the same mass distribution MDIS is assigned to the column lines in INDEX Cross-Reference Information This function calls: This function is called by:","title":"Create Mass4Frame"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/Tie_2dMesh/","text":"Utilities > PreProcessing > Structure > Tie_2dMesh Tie_2dMesh Purpose tie nodes and elements for mesh generated in separate 2d blocks Synopsis [ XYZ , CON ] = Tie_2dMesh ( blst ) Description TIE_2DMESH tie nodes and elements for mesh generated in separate 2d blocks [XYZ, CON] = TIE_2DMESH (BLST) node coordinates and connectivity of tied mesh from separate blocks function returns coordinates XYZ and connectivity CON by merging the mesh of separate blocks in input cell array BLST Cross-Reference Information This function calls: This function is called by:","title":"Tie 2dMesh"},{"location":"Functions/latest/Utilities/PreProcessing/Structure/Tie_3dMesh/","text":"Utilities > PreProcessing > Structure > Tie_3dMesh Tie_3dMesh Purpose tie nodes and elements for mesh generated in separate 3d blocks Synopsis [ XYZ , CON ] = Tie_3dMesh ( blst ) Description TIE_3DMESH tie nodes and elements for mesh generated in separate 3d blocks [XYZ, CON] = TIE_3DMESH (BLST) node coordinates and connectivity of tied mesh from separate blocks function returns coordinates XYZ and connectivity CON by merging the 3d mesh of separate blocks in input cell array BLST Cross-Reference Information This function calls: DefGeom_Quad determines local coordinates and corotational triad of quadrilateral element This function is called by:","title":"Tie 3dMesh"},{"location":"Functions/latest/Utilities/Quadrature/","text":"Quadrature C2Cubature integration points and weights for 2d-integration over unit square Gauss locations and weights of Gauss-Legendre integration scheme Gauss2d Gauss integration rule in two dimensions Lobatto locations and weights of Gauss-Lobatto integration scheme Midpoint locations and weights for midpoint integration rule Radau locations and weights of Gauss-Radau integration scheme S2Cubature integration points and weights for 2d-integration over unit circle Simpson locations and weights for Simpson integration rule Trap locations and weights for trapezoidal integration rule","title":"Quadrature"},{"location":"Functions/latest/Utilities/Quadrature/C2Cubature/","text":"Utilities > Quadrature > C2Cubature C2Cubature Purpose integration points and weights for 2d-integration over unit square Synopsis [ yfib , zfib , wfib ] = C2Cubature ( n ) Description C2CUBATURE integration points and weights for 2d-integration over unit square [YFIB,ZFIB,WFIB] = C2CUBATURE (N) the function determines the locations YFIB and ZFIB and integration weights WFIB for the 2d integration over the unit square with N integration points; YFIB, ZFIB and WFIB are N x 1 column vectors N can be either 4, 5, 7, 8, 9, 12, 13, 16, 20, 21, 25, 28, 37, 48 References: (1) Abramowicz/Stegun, Handbook of Mathematical Functions (1964) (2) Stroud, A.H., Approximate Calculation of Multiple Integrals (1970) rules marked by (*) are particularly useful according to Stroud Section coordinate system: ^ y | ----+---- | | | | | | z <---+---+ | | | | | --------- Cross-Reference Information This function calls: This function is called by: Rectangle2Fiber integration points and weights for 2d-integration of a rectangle","title":"C2Cubature"},{"location":"Functions/latest/Utilities/Quadrature/Gauss/","text":"Utilities > Quadrature > Gauss Gauss Purpose locations and weights of Gauss-Legendre integration scheme Synopsis [ xIP , wIP ] = Gauss ( nIP ) Description GAUSS locations and weights of Gauss-Legendre integration scheme [XIP,WIP] = GAUSS (NIP) the function determines the locations in the interval -1<x<1 and the weights of the Gauss-Legendre integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP; the first vector term corresponds to x=-1; the function supports NIP values of 1,2,3,4,5,..20, 32 and 64 Cross-Reference Information This function calls: This function is called by: Gauss2d Gauss integration rule in two dimensions","title":"Gauss"},{"location":"Functions/latest/Utilities/Quadrature/Gauss2d/","text":"Utilities > Quadrature > Gauss2d Gauss2d Purpose Gauss integration rule in two dimensions Synopsis [ xIP , wIP ] = Gauss2d ( nIP ) Description GAUSS2D Gauss integration rule in two dimensions [XIP,WIP] = GAUSS2D (NIP) locations and weights of 2d Gauss-Legendre integration scheme the function determines the locations in the intervals -1<xi<1, -1<eta<1, and the weights of the Gauss-Legendre integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP Cross-Reference Information This function calls: Gauss locations and weights of Gauss-Legendre integration scheme This function is called by: Inel4nodeMindlinReShellwITC isoparametric inelastic 4 node quad Mindlin RC layer shell element with ITC Inel4nodeMindlinShellwITC isoparametric inelastic 4 node quad Mindlin layer shell element with ITC Inel4to9nodeMindlinReShell inelastic isoparametric 4-9 node quad Mindlin element with reinforcing layers Inel4to9nodeMindlinShell isoparametric 4-9 node quad layer shell element with inelastic material Inel4to9nodeQuad isoparametric 4-9 node quadrilateral element with inelastic material Inel4to9nodeReQuad isoparametric 4-9 node quad element with inelastic material and reinforcing layers LE4nodeMindlinPlate linear elastic isoparametric 4-node quadrilateral Mindlin plate element LE4nodeMindlinPlatewITC linear elastic isoparametric 4-node quadrilateral Mindlin plate element with ITC LE4nodeMindlinShellwITC linear elastic isoparametric 4-node quadrilateral Mindlin shell element with ITC LE4nodeQuad isoparametric 4-node quadrilateral element with linear elastic material LE4nodeQuadwIM isoparametric 4-node quad element with linear elastic material and incompatible bending modes LE4to9nodeMindlinPlate linear elastic isoparametric 4-9 node quadrilateral Mindlin plate element LE4to9nodeMindlinShell linear elastic isoparametric 4-9 node quadrilateral Mindlin shell element LE4to9nodeQuad isoparametric 4-9 node quadrilateral element with linear elastic material LE9nodeQuad isoparametric 9 node quadrilateral element with linear elastic material","title":"Gauss2d"},{"location":"Functions/latest/Utilities/Quadrature/Lobatto/","text":"Utilities > Quadrature > Lobatto Lobatto Purpose locations and weights of Gauss-Lobatto integration scheme Synopsis [ xIP , wIP ] = Lobatto ( nIP ) Description LOBATTO locations and weights of Gauss-Lobatto integration scheme [XIP,WIP] = LOBATTO (NIP) the function determines the locations in the interval -1<x<1 and the weights of the Gauss-Lobatto integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP the first vector term corresponds to x=-1 the function supports NIP values of 1,2,3,4,5,..20 Cross-Reference Information This function calls: This function is called by:","title":"Lobatto"},{"location":"Functions/latest/Utilities/Quadrature/Midpoint/","text":"Utilities > Quadrature > Midpoint Midpoint Purpose locations and weights for midpoint integration rule Synopsis [ xIP , wIP ] = Midpoint ( nIP ) Description MIDPOINT locations and weights for midpoint integration rule [XIP,WIP] = MIDPOINT (NIP) the function determines the locations in the interval -1<x<1 and the weights of the midpoint integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP Cross-Reference Information This function calls: This function is called by:","title":"Midpoint"},{"location":"Functions/latest/Utilities/Quadrature/Radau/","text":"Utilities > Quadrature > Radau Radau Purpose locations and weights of Gauss-Radau integration scheme Synopsis [ xIP , wIP ] = Radau ( nIP ) Description RADAU locations and weights of Gauss-Radau integration scheme [XIP,WIP] = RADAU (NIP) the function determines the locations in the interval -1<x<1 and the weights of the Gauss-Radau integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP the first vector term corresponds to x=-1 the function supports NIP values of 1,2,3,4,5,..15 Cross-Reference Information This function calls: This function is called by:","title":"Radau"},{"location":"Functions/latest/Utilities/Quadrature/S2Cubature/","text":"Utilities > Quadrature > S2Cubature S2Cubature Purpose integration points and weights for 2d-integration over unit circle Synopsis [ yfib , zfib , wfib ] = S2Cubature ( n ) Description S2CUBATURE integration points and weights for 2d-integration over unit circle [YFIB,ZFIB,WFIB] = S2CUBATURE (N) the function determines the locations YFIB and ZFIB and integration weights WFIB for the 2d integration over the unit circle with N integration points; YFIB, ZFIB and WFIB are N x 1 column vectors N can be either 3, 4, 5, 6, 7, 9, 12, 16, 19, 21, 28, 32, 37, 41, 44, 48, 61, 64, 76, 108 References: (1) Abramowicz/Stegun, Handbook of Mathematical Functions (1964) (2) Stroud, A.H., Approximate Calculation of Multiple Integrals (1970) rules marked by (*) are particularly useful according to Stroud (3) Engels, H., Numerical Quadrature and Cubature (1980) Section coordinate system: ^ y | . + . / | \\ / | \\ z <- |----+ | \\ / \\ / . _ . Cross-Reference Information This function calls: This function is called by: Create_IPMesh4Circ integration point coordinates, weights and material IDs for circular disc or annulus","title":"S2Cubature"},{"location":"Functions/latest/Utilities/Quadrature/Simpson/","text":"Utilities > Quadrature > Simpson Simpson Purpose locations and weights for Simpson integration rule Synopsis [ xIP , wIP ] = Simpson ( nIP ) Description SIMPSON locations and weights for Simpson integration rule [XIP,WIP] = SIMPSON (NIP) the function determines the locations in the interval -1<x<1 and the weights of Simpson's integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP Cross-Reference Information This function calls: This function is called by:","title":"Simpson"},{"location":"Functions/latest/Utilities/Quadrature/Trap/","text":"Utilities > Quadrature > Trap Trap Purpose locations and weights for trapezoidal integration rule Synopsis [ xIP , wIP ] = Trap ( nIP ) Description TRAP locations and weights for trapezoidal integration rule [XIP,WIP] = TRAP (NIP) the function determines the locations in the interval -1<x<1 and the weights of the trapezoidal integration scheme for NIP integration points; the locations are reported in vector XIP and the weights in vector WIP Cross-Reference Information This function calls: This function is called by:","title":"Trap"},{"location":"Gallery/","text":"Gallery","title":"Gallery"},{"location":"Gallery/Basic2/","text":"Analysis of 3-Story, Multi-Bay Steel Frame The script files contain the geometry, the element properties and the loading of a 3-story, 2/3/4/5-bay steel frame that was used in past editions of the Earthquake Resistant Design course at UC Berkeley by the late Professor Stephen Mahin. There is even a variable bay length model for illustrating the capabilities of the pre-processing functions of FEDEASLab for generating the geometry of multi-story moment resisting or braced steel frames. The analysis scripts cover the linear and nonlinear, static or transient analysis solutions for a structure: Linear elastic analysis with load combination. Adding some information. Determination of period and shape of vibration modes for a structural model. Determination of linear elastic dynamic response with modal analysis. Determination of collapse load factor with the lower and upper bound of plastic analysis. Push-over analysis for linear elastic, perfectly plastic element response with the event-to-event strategy. Push-over analysis for any nonlinear material response under linear or nonlinear geometry. Transient analysis for any nonlinear material response under linear or nonlinear geometry. The scripts have the prefix S_ . The results for each type of analysis are post-processed and displayed with the help of scripts with prefix Post.","title":"Analysis of 3-Story, Multi-Bay Steel Frame"},{"location":"Gallery/BasicFrame/","text":"Analysis of 2-Story Steel Frame Download zip package The script files contain the geometry, the element properties and the loading of a 2-story, 1-bay steel frame. The description of the model is subdivided into the following scripts: Description of model geometry with boundary conditions in a file with prefix Model . Description of the element properties in a file with the suffix ElemData . LinearElemData.m specifies the properties for linear elastic frame elements, and SimpleInelElemData for simple inelastic elements that will be discussed in the course of this semester. Four scripts are provided for the following types of analysis: Linear elastic analysis under static loads (file S_LinearAnalysis.m ). Vibration periods and mode shapes (file S_PeriodNModes.m ). Transient analysis under ground acceleration with mode superposition (modal analysis) (file S_ModalAnalysis.m ). Determination of the collapse load factor, the basic forces at incipient collapse and the collapse mechanism by the lower and upper bound theorems of plastic analysis (file S_PlasticAnalysis.m ). All analysis scripts start with calls of A and B for the description of the model geometry and element properties. The first script then specifies the applied loading and use the function LinearStep.m to determine the linear static solution with the direct stiffness implementation of the displacement method of analysis. The post-processing of the results takes place in a separate script called Post_LinearAnalysis.m The second script specifies the lumped mass matrix of the model and uses the function EigenMode.m to determine the period and the shape of its eigenmodes. The third script specifies the influence vector at the free DOFs under horizontal support acceleration and the ground acceleration record. It then uses the function ModalAnalysis.m to determine the transient response of each mode to the support acceleration. The post-processing of the results takes place in a separate script called Post_ModalAnalysis.m . The fourth script specifies the reference load distribution and then uses the function PlasticAnalysis.m to determine the collapse load factor, the basic forces at incipient collapse and the plastic collapse mechanism. The post-processing of the results takes place in a separate script called Post_PlasticAnalysis.m .","title":"Analysis of 2-Story Steel Frame"},{"location":"Pages/","text":"Pages","title":"Pages"},{"location":"Pages/FAQ/","text":"Frequently Asked Questions Table of contents: - Errors with optimoptions Errors with optimoptions Error using optimoptions. Invalid solver specified. Provide a solver name or handle (such as 'fmincon' or @fminunc). Type DOC OPTIMOPTIONS for a list of solvers. The Matlab user group reports this error for older versions of Matlab or for missing the global optimization toolbox in a more recent version. If you believe that you are using Matlab 2019b make sure that the following directories are on your path - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\optim\\optim - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\optim - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\optim\\optimdemos - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\optim\\problemdef - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\globaloptim - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\globaloptim\\globaloptim - C:\\Program Files\\MATLAB\\R2019b\\toolbox\\globaloptim\\globaloptimdemos in Matlab 2019b (by typing \u201cpath\u201d at the command prompt).","title":"FAQ"},{"location":"Pages/Install/","text":"Installation Guide Coming Soon","title":"Installation Guide"},{"location":"Pages/Basic/","text":"Basic Structural Analysis Functions FEDEAS Lab functions implement structural analysis concepts in parallel with their theoretical presentation in the introductory structural analysis course, thus illustrating the generality of the methods and their application to large scale and complex structural models. The intent is not only to reinforce the understanding of the structural response under different types and arrangements of loading, but also to facilitate system and parameter studies. Function Organization The structural analysis functions for the introductory course are organized in two folders: Basic and Utilities . The Basic folder contains 20 functions that directly implement the analysis concepts of the course in MATLAB . Many functions in this folder are provided in open source form ( .m file format), so that interested readers can relate the implementation details with the theory presented in the course. Table 1: Functions for Structural Matrices and Vectors Function name Input arguments (optional) Output B_matrix Model B BbariBbarx_matrix Bf , ( ind_r ) Bbari , Bbarx A_matrix Model A Fs_matrix Model , ElemData , (Roption) Fs V0_vector Model , ElemData , (Roption) V0 Ks_matrix Model , ElemData Ks Q0_vector Model , ElemData Q0 Kf_matrix Model , ElemData Kf The FEDEAS Lab functions in the Basic folder can be classified in the following categories: Functions for Structural Matrices and Vectors : 8. These are listed in Table 1 . Analysis Functions and Scripts : 4. These are listed in Table 2 . Structural Model and Loading Functions : 3. These are listed in Table 4 . Model and Element Utility Functions : 6, namely Localize , ElmLenOr , Create_PlasticLimitSurface , DefGeom_2dFrm , DeformShape2dFrm and Large2du2v_Frm which are not invoked directly, but are used either by the Model and Loading Functions or by Graphics Utility Functions to be discussed subsequently. Table 2: Analysis Functions and Scripts Script name Input variables (optional) Output variables S_ForceMethod Model , ElemData , ( Pf ), ( Pwf ) Q , Ve , Uf S_DisplMethod Model , ElemData , ( Pf ), ( Pwf ) Uf , Q , Ve Table 3: Analysis Functions and Scripts Function name Input arguments Output PlasticAnalysis_wLBT Bf , Qpl , Pref , (Pcf) , (Options) lambdac , Qc PlasticAnalysis_wUBT Af , Qpl , Pref , (Pcf) , (Options) lambdac , DUf , DVhp Table 4: Model and Loading Functions Function name Input arguments Output Create_SimpleModel XYZ , CON , BOUN , ElemName Model Create_NodalForces Model , Pe Pf Create_PwForces Model , ElemData Pw The folder Utilities contains 28 functions. Almost all functions in this folder are provided in content-obscured form (encoded .p file format), since the implementation details have no bearing on the structural analysis concepts and may only be of interest to readers with programming curiosity and skills. They can be classified in the following categories: General Utility Functions : 2, namely CleanStart and Print_PDFile . Graphics Utility Functions : 13. These are listed in Table 5 . Supporting Functions : 13. These are not invoked directly, but are used by the analysis functions and scripts and by the graphics utility functions. They are not described further in this text, since they are of little interest to the user, but details about input and output arguments may be found in the online help. Table 5: Graphics Utility Functions Function name Input arguments (optional) Create_Window DX , DY Plot_Model Model , ( Uf ) , ( Options ) Label_Model Model , ( Options ) Plot_NodalForces Model , Pe , ( Options ) Plot_ElemLoading Model , ElemData , ( Options ) Plot_Releases Model , ( ElemData ) , ( Uf ) , ( Options ) Plot_AxialForces Model , Q , ( ElemList ), ( Scale ) Label_AxialForces Model , Q , ( ElemList ), ( Digit ), ( Units ) Plot_2dMomntDistr Model , ( ElemData ), Q , ( ElemList ), ( Scale ) Label_2dMoments Model , Q , ( ElemList ), ( Digit ), ( Units ) Plot_2dCurvDistr Model , ElemData , Q , ( ElemList ), ( Scale ) Plot_DeformedStructure Model , ( ElemData ), Uf , ( Ve ), ( Options ) Plot_PlasticHinges Model , ElemData , ( Uf ), Q , ( Options ) The user defines the geometry and properties of the structural model, and then specifies the structural analysis procedure(s) and the graphical post-processing of the results by selecting suitable functions from Table 1 -Table 5 in a MATLAB script file, as described in the following sections. Scripting affords extensive flexibility for the response determination and the presentation of the results, but puts the burden on the user to assemble the whole by understanding its parts. This supports the open-ended educational mission of FEDEAS Lab , as opposed to the black-box nature of commercial analysis software. The following sections describe the functions in Table 1 -Table 5 with examples. The notation for function arguments and local variables agrees with the notation of the course reader, as summarized in Appendix Chap. A of the reader 1 . The examples in this chapter correspond to examples of the course reader with the MATLAB scripts for all examples available in the folder Examples of the basic FEDEAS Lab package. Data Organization The initial set of analysis functions for the concepts of an introductory course on structural analysis is built around two data structures: Model for the geometric description of the structural model, and ElemData for the element and material properties and element loading, as is evident from the input argument list of the functions in Table 1 -Table 5 . The organization of structural model information in two data structures serves to emphasize the concept of the introductory structural analysis course that, under linear conditions, the governing static and kinematic relations depend only on the geometry of the structural model and not on any element properties. Accordingly, the functions B_matrix for setting up the linear equilibrium matrix \\(\\mathbf{B}\\) and A_matrix for setting up the linear kinematic matrix \\(\\mathbf{A}\\) of the structure take as single input argument the data structure Model with model geometry information. Data Structure Model In FEDEAS Lab information about the structural model is collected in the data structure Model , which is set up by the function Create_SimpleModel from information supplied by the user. The function Create_SimpleModel is limited to models consisting of 2-node, 2d or 3d truss and frame elements. The function numbers the degrees of freedom (DOFs) of the structure, as discussed in the course reader, thus facilitating their identification for small structural models. With this degree of freedom (DOF) numbering the analysis functions set up full matrices that do not take advantage of the small number of non-zero terms in large structural models. The general model creation function Create_Model does not have limitations on element type and uses a DOF numbering scheme that minimizes the storage of structure matrices. The use of sparse matrices with minimum storage is essential for the analysis of large structural models with 2d and 3d finite elements. Figure 1: Specification of model geometry for plane truss in script file Ex3_1.m % clear memory; close open windows CleanStart % define model geometry XYZ ( 1 ,: ) = [ 0 0 ] ; XYZ ( 2 ,: ) = [ 8 0 ] ; XYZ ( 3 ,: ) = [ 16 0 ] ; XYZ ( 4 ,: ) = [ 8 6 ] ; % element connectivity array CON ( 1 ,: ) = [ 1 2 ] ; CON ( 2 ,: ) = [ 2 3 ] ; CON ( 3 ,: ) = [ 1 4 ] ; CON ( 4 ,: ) = [ 2 4 ] ; CON ( 5 ,: ) = [ 3 4 ] ; % boundary conditions BOUN ( 1 ,: ) = [ 1 1 ] ; BOUN ( 3 ,: ) = [ 0 1 ] ; % specify element type ne = size ( CON , 1 ) ; [ ElemName { 1 : ne }] = deal ( 'Truss' ) ; Fig. 1 shows the input data for the structure of Ex. 3.1 of the reader in the form of numerical arrays XYZ , BOUN , and CON . The rows of XYZ correspond to the nodes and the \\(ndm\\) columns to the node coordinates, where \\(ndm\\) is the dimension of the structural model. The rows of BOUN also correspond to the nodes and the \\(ndf\\) columns to node restraint switches, where \\(ndf\\) is the maximum number of DOFs per node for the model. The DOF order for each node is: 1 = force in \\(X\\) , 2 = force in \\(Y\\) , 3 = moment about \\(Z\\) (for 2d model), or force in \\(Z\\) (for 3d model), 4,5,6 = moment about \\(X\\) , \\(Y\\) and \\(Z\\) , respectively (for 3d model). The switch value 0 indicates a free and the value 1 a restrained DOF. CON can be a numerical array for a structural model with only 2-node elements. For finite element models with elements having a different number of nodes, CON needs to be specified as a cell array so that the row contents can vary from element to element. Each row of the numerical CON array contains the node numbers to which the corresponding element connects. Finally, ElemName is a cell array that accommodates element names with a different number of characters. The names 'Truss' and '2dFrm' suffice for tasks that do not require element and material properties. For tasks requiring element and material properties the element names need to be 'LinTruss' , 'Lin2dFrm' , and 'Lin3dFrm' for the 2d/3d truss, the 2d frame, and the 3d frame element, respectively. At the start of each input script the command CleanStart issues two MATLAB commands, one for clearing the computer memory of all stored variable values ( clearvars ), and the second for closing any open figure windows ( close all ). It may also be expedient to include the call to the function Create_Units at the start of each script, so as to take advantage of the unit definitions in the return argument Units and obviate the need for unit conversion in the values of variables with different units. The command Model = Create_SimpleModel ( XYZ , CON , BOUN , ElemName ) generates the data structure Model . Once Model is created its contents can be displayed by executing disp ( Model ) . Listing 1: disp ( Model ) nn : 4 ndm : 2 XYZ : [ 4 x2 double ] ne : 5 CON : { 5 x1 cell } ElemName : { 'Truss' 'Truss' 'Truss' 'Truss' 'Truss' } nen : [ 2 2 2 2 2 ] nq : [ 1 1 1 1 1 ] ndf : [ 2 2 2 2 2 ] nt : 8 BOUN : [ 4 x2 double ] nf : 5 DOF : [ 4 x2 double ] Listing 1 shows the fields and some of their contents for the data structure Model of the truss in Fig. 1 : \\(nn\\) is the number of nodes of the structural model, \\(ndm\\) the model dimension, XYZ the node coordinate array, \\(ne\\) the number of elements, CON a cell array of element connectivity with the row number corresponding to the element number (by conversion of the numerical array CON supplied as input argument), \\(nq\\) the number of basic forces in each element, \\(ndf\\) the number of local DOFs/node and \\(nen\\) the number of end nodes of each element, ElemName the cell array of element types, \\(nt\\) the total number of DOFs, BOUN the array of node restraint switches, \\(nf\\) the number of free DOFs, and DOF the global DOF numbering array. Typing Model or disp(Model) at the command prompt only shows contents of scalar fields of Model and numeric or cell arrays that can be displayed in a single line, as Listing 1 shows (numeric arrays use [ ] operators and cell arrays use { } operators in MATLAB ). To display the contents of fields of other array types, type the data structure name and the field name separated by a period as input argument to the MATLAB function disp to avoid echoing the variable name: Model.XYZ for node coordinates : Model.BOUN for node restraint switches Model.DOF for global DOF numbering Data Structure ElemData for Element Properties and Loading ElemData is the second data structure of FEDEAS Lab after Model . It is specified entirely by the user. Because the element property data vary from element to element, it is necessary to use a cell array for ElemData so that the array contents can vary from element to element. ElemData is a one dimensional cell array with the row number corresponding to the element number. It has the fields in Table 6 with optional fields with default value 0 shown in parentheses. Table 6: ElemData fields (optional fields with default value 0 in parentheses) Field Description E elastic material modulus (scalar) A cross section area (scalar) I moment of inertia (scalar) (2d frame only) ( Release ) 3x1 vector of release codes; 0=continuous, 1=release (2d frame only) ( w ) uniform element load, 2x1 vector with \\(w_x\\) and \\(w_y\\) (2d frame only) ( e0 ) non-mechanical effects, 2x1 vector with \\(\\varepsilon_0\\) and \\(\\kappa_0\\) (2d frame only) ( q0 ) initial prestressing force (scalar) (truss only) Np plastic axial capacity (scalar) Mp plastic flexural capacity (scalar) (2d frame only) Table 6 shows that ElemData includes a field Np for the plastic axial capacity and a field Mp for the plastic flexural capacity. These are only required for the plastic analysis of large structural models . Otherwise, the plastic capacities of the elements may be directly specified with vector \\(\\boldsymbol{Q}_{pl}\\) , as discussed later in this chapter. function [ xyz , id ] = Localize ( Model , el ) XYZ = Model . XYZ ; % node coordinates DOF = Model . DOF ; % array with dof numbers for all nodes CON = Model . CON { el } ; % extract connectivity array for element ndf = Model . ndf ( el ) ; % extract no of dofs/node for element % extract element coordinates into array xyz; % use CON array to extract appropriate rows of global XYZ array xyz = XYZ ( CON ( CON > 0 ) ,: ) '; % extract dof numbers into array id % use CON array to extract appropriate rows of DOF array id = DOF ( CON ( CON > 0 ) , 1 : ndf ) '; % reshape id array into vector id = id ( : ) ; function [ L , dcx ] = ElmLenOr ( xyz ) % coordinate differences Dx, Dy, Dz depending on problem dimension Dxyz = xyz ( :, 2 ) - xyz ( :, 1 ) ; % element length L = sqrt ( Dxyz '* Dxyz ) ; % direction cosines of element orientation dcx = Dxyz ./ L ; General Utility Functions Once the geometry and other relevant information about the structural model is collected in data structure Model by the function Create_SimpleModel , information about the geometry and the global DOF correspondence for a particular element can be extracted with the help of two general utility functions: Localize and ElmLenOr . All functions with input arguments Model and ElemData in Table 1 invoke these utility functions for setting up the corresponding structural matrices or vectors. Function Localize This function locates the element el in the Model and returns its end node coordinates in array xyz , and the local-global DOF correspondence in vector id . The first column of the two dimensional array xyz contains the coordinates of end \\(i\\) of the element and the second column those of end \\(j\\) . Function ElmLenOr This function returns the element length L and the direction cosines of the element \\(x\\) -axis in vector dcx from the end node coordinates supplied in array xyz . Structural Equilibrium The global DOF equilibrium equations of the structural model are given by Eq. 3.77 of the reader . As discussed in Chap. 3 of the reader , the equilibrium equations at the free DOFs of the structural model in Eq. 3.79a of the reader are used to solve for the basic forces \\(\\boldsymbol{Q}\\) . For determining the solution of these equations it is necessary to set up the applied nodal forces \\(\\boldsymbol{P}_f\\) , the equivalent nodal forces \\(\\boldsymbol{P}_{wf}\\) and the equilibrium matrix \\(\\mathbf{B}_f\\) . The latter is extracted from the full equilibrium matrix \\(\\mathbf{B}\\) . Assembly of Equilibrium Matrix \\(\\mathbf{B}\\) The assembly of the equilibrium matrix \\(\\mathbf{B}\\) of the structural model in Eq. 3.4.1 of the reader involves the determination of the equilibrium matrix \\(\\mathbf{b}_g\\) of each element and the re-assignment of the rows of \\(\\mathbf{b}_g\\) to the rows of \\(\\mathbf{B}\\) based on the local-global DOF number correspondence in accordance with the \\(\\boldsymbol{id}\\) array of the element. Setting up the equilibrium matrix \\(\\mathbf{b}_g\\) of each element according to Eq. 3.57 of the reader , Eq. 3.59 of the reader or Eq. 3.60 of the reader for a 2d frame, a 2d truss and a 3d truss element, respectively, requires the element length \\(L\\) and the direction cosines of the undeformed element \\(x\\) -axis. These are set up by the utility function ElmLenOr in conjunction with the utility function Localize , which also sets up the \\(\\boldsymbol{id}\\) array for the element, as described earlier. The assembly of the \\(\\mathbf{B}\\) matrix according to Eq. 3.76 of the reader is implemented in FEDEAS Lab function B_matrix , as shown in Listing 2 . The function B_matrix calls the internal function bg_matrix to set up the equilibrium matrix \\(\\mathbf{b}_g\\) of each element according to Eq. 3.57 of the reader , Eq. 3.59 of the reader or Eq. 3.60 of the reader for a 2d frame, a 2d truss and a 3d truss element, respectively. The function syntax is given in Listing 3 . Because the data structure Model does not have information about basic force releases, it is the user\u2019s responsibility to remove the columns of the \\(\\mathbf{B}\\) -matrix corresponding to basic force releases so that the difference between the number of columns and the number of rows of the \\(\\mathbf{B}\\) -matrix matches the degree of static indeterminacy NOS of the structural model. A convenient way for setting up an index of element release locations is furnished by the utility function H_index with information about the element releases in ElemData , as will be discussed later. After setting up the complete equilibrium matrix \\(\\mathbf{B}\\) for the structural model, the equilibrium matrix \\(\\mathbf{B}_f\\) for the free DOFs corresponds to the upper \\(nf\\) rows of \\(\\mathbf{B}\\) . It can be extracted with the statement Listing 2: function B = B_matrix ( Model ) % assemble structure equilibrium matrix ne = Model . ne ; % number of elements in structural model k = 0 ; % initialize column index into matrix B for el = 1 : ne % loop over all elements % locate element in Model and return end coordinates and id array [ xyz , id ] = Localize ( Model , el ) ; % form element equilibrium matrix bg bg = bg_matrix ( Model . ElemName { el } , xyz ) ; % assemble element equilibrium matrix bg into static matrix B nc = size ( bg , 2 ) ; % determine number of columns of matrix bg B ( id , k + 1 : k + nc ) = bg ; % insert bg into id locations of matrix B k = k + nc ; % augment column index by number of columns end Listing 3: function bg = bg_matrix ( ElemName , xyz ) % determine element length and orientation [ L , dcx ] = ElmLenOr ( xyz ) ; if contains ( ElemName , 'Truss' ) % truss element bg = [ - dcx ; dcx ] ; elseif contains ( ElemName , '2dFrm' ) % 2d frame element dXL = dcx ( 1 ) ; dYL = dcx ( 2 ) ; bg = [ - dXL - dYL / L - dYL / L ; - dYL dXL / L dXL / L ; 0 1 0 ; dXL dYL / L dYL / L ; dYL - dXL / L - dXL / L ; 0 0 1 ] ; else error ( 'only truss and 2d frame elements supported; check syntax' ) end Specification of Nodal Forces Figure 2: Specification of applied nodal forces in the script file Ex3_1.m %% specify loading Pe ( 2 , 2 ) = - 5 ; % node 2, direction Y Pe ( 4 , 1 ) = 10 ; % node 4, direction X % generate applied force vector Pf The next task for setting up the node equilibrium equations of the structural model is the specification of the applied and the equivalent nodal forces. For this task it is impractical to know the global DOF numbering for directly setting up the applied and the equivalent nodal force vectors \\(\\boldsymbol{P}_f\\) and \\(\\boldsymbol{P}_{wf}\\) at the free DOFs, respectively. Instead, it is convenient to specify the nodal forces in a two dimensional array Pe with row numbers corresponding to node numbers and column numbers corresponding to DOF numbers, where 1 = force in \\(X\\) , 2 = force in \\(Y\\) , 3 = moment about \\(Z\\) (for 2d model), or force in \\(Z\\) (for 3d model), 4,5,6 = moment about \\(X\\) , \\(Y\\) and \\(Z\\) , respectively (for 3d model). With the global DOF numbering available in the data structure Model , the FEDEAS Lab function Create_NodalForces in Table 4 ] sets-up the nodal force vector. The input arguments to the function are the data structure Model and the two dimensional nodal force array Pe , while the output argument is the nodal force vector Pf . Fig. 2 shows the syntax for the applied nodal forces of the truss from Ex. 3.1 of the reader . The equivalent nodal forces \\(\\boldsymbol{P}_w\\) are set up by the function Create_PwForces in Table 4 for the element loading \\(w\\) specified in data structure ElemData according to Table 6 . Solution for Statically Determinate Structures For a stable, statically determinate structure the equilibrium matrix \\(\\mathbf{B}_f\\) is square with full rank. The MATLAB function rank can be used to make sure that this is indeed the case. Given the nodal forces \\(\\boldsymbol{P}_f\\) and \\(\\boldsymbol{P}_{wf}\\) at the free DOFs of a stable structural model, a unique solution of the system of linear equations in Eq. 3.79a of the reader exists, resulting in the basic forces \\(\\boldsymbol{Q}\\) of the structure. The product of the basic forces \\(\\boldsymbol{Q}\\) with the full equilibrium matrix \\(\\mathbf{B}\\) gives the complete nodal force vector \\(\\boldsymbol{P}\\) according to Eq. 3.77 of the reader . The entries in the upper \\(nf\\) rows of \\(\\boldsymbol{P}\\) correspond to the nodal forces \\(\\boldsymbol{P}_f-\\boldsymbol{P}_{wf}\\) , and the entries in the remaining rows correspond to the support reactions \\(\\boldsymbol{R}\\) according to Eq. 3.78 of the reader . Listing 4 shows an excerpt from a MATLAB script file that follows the generation of Model in Fig. 1 and of the applied nodal force vector \\(\\boldsymbol{P}_f\\) in Fig. 2 . The script shows the determination of the equilibrium matrix \\(\\mathbf{B}\\) with function B_matrix and its display, the solution of the equilibrium equations in Eq. 3.79a of the reader with the MATLAB \\(\\backslash\\) command, and the resulting basic forces \\(\\boldsymbol{Q}\\) . The basic forces \\(\\boldsymbol{Q}\\) are then used to determine the support reactions \\(\\boldsymbol{R}\\) after first multiplying these with the full equilibrium matrix \\(\\mathbf{B}\\) and then extracting the rows corresponding to the restrained DOFs. Listing 4: Solution for Statically Indeterminate Structures The general solution of the equilibrium equations in Eq. 3.79a of the reader for a equilibrium matrix \\(\\mathbf{B}_f\\) with full rank and with more columns than rows uses the row-echelon form of the matrix . Conversion of a matrix to row-echelon form uses the Gauss-Jordan elimination procedure. This well established procedure of linear algebra is implemented in the function rref of MATLAB . It can be used to establish the rank of \\(\\mathbf{B}_f\\) and provide the particular and the homogeneous solutions of the equilibrium equations according to Fig. 3.5.2 of the reader . Following Fig. 3.5.2 of the reader the general solution of the equilibrium equations in Eq. 3.100 of the reader is based on the basic force influence matrix \\(\\bar{\\mathbf{B}}_i\\) of the primary structure for the applied and equivalent nodal forces, and the basic force influence matrix \\(\\bar{\\mathbf{B}}_x\\) for the redundant basic forces \\(\\boldsymbol{Q}_x\\) . FEDEAS Lab function BbariBbarx_matrix takes the equilibrium matrix \\(\\mathbf{B}_f\\) as input argument and uses its reduced-row echelon form to set up the force influence matrices \\(\\bar{\\mathbf{B}}_i\\) and \\(\\bar{\\mathbf{B}}_x\\) . The optional function argument ind_r can be used to select specific basic forces as redundants. If ind_r is not specified, the Gauss-Jordan elimination process selects the redundant basic forces automatically, and the function BbariBbarx_matrix returns the index array ind_x to the basic force vector \\(\\boldsymbol{Q}\\) , so that the redundant basic forces \\(\\boldsymbol{Q}_x\\) can be extracted with Qx = Q(ind_x) . The function syntax is function [ Bbari , Bbarx , ind x ] = BbariBbarx matrix ( Bf , ind r ) Listing 5: Bf = [ 1 / 6 1 / 6 0 0 0 0.8 ; 0 1 1 0 0 0 ; 0 0 - 1 / 4 - 1 / 4 1 / 4 0 ; 0 0 0 1 1 0 ] ; % select basic force redundants ind_r = [ 1 , 4 ] ; [ Bbari , Bbarx , ind_x ] = BbariBbarx_matrix ( Bf , ind_r ) ; Pf = [ 20 ; 0 ;- 30 ; 0 ] ; Qp = Bbari * Pf ; %% Matlab script for force influence matrix generation % Department of Civil and Environmental Engineering % University of California, Berkeley % Professor Filip C. Filippou % clear memory CleanStart % static matrix Bf of braced frame (Ex 2.7) Bf = [ 1 / 6 1 / 6 0 0 0 0.8 ; 0 1 1 0 0 0 ; 0 0 - 1 / 4 - 1 / 4 1 / 4 0 ; 0 0 0 1 1 0 ] ; % select basic force redundants ind_r = [ 1 , 4 ] ; Listing 5 shows the direct specification of the \\(\\mathbf{B}_f\\) matrix for the braced frame of Ex. 3.13 of the reader that corresponds to the equilibrium equations in Eq. 3.122 of the reader . The function BbariBbarx_matrix then determines the force influence matrices \\(\\bar{\\mathbf{B}}_i\\) and \\(\\bar{\\mathbf{B}}_x\\) for the selection of \\(\\boldsymbol{Q}_1\\) and \\(\\boldsymbol{Q}_4\\) as redundant basic forces, as specified by ind_r=[1,4] . With the direct specification of the nodal force vector \\(\\boldsymbol{P}_f\\) the particular solution for the given nodal forces can be determined by the product \\(\\bar{\\mathbf{B}}_i\\mspace{1.5mu}\\boldsymbol{P}_f\\) . The resulting values agree with those from Ex. 3.13 of the reader (b) and (c). Structural Kinematics The structural kinematic relations in Eq. 4.53 of the reader relate the element deformations \\(\\boldsymbol{V}\\) to the free global DOF displacements \\(\\boldsymbol{U}_f\\) through the kinematic matrix \\(\\mathbf{A}_f\\) of the structure. With a given set of compatible element deformations \\(\\boldsymbol{V}\\) the solution of the kinematic relations in Eq. 4.53 of the reader gives the values of the free DOF displacements \\(\\boldsymbol{U}_f\\) . This approach to the determination of the free DOF displacements is of particular interest for statically determinate structures, for which the number of element deformations is equal to the number of unknown free DOF displacements, so that the element deformations are not constrained by compatibility conditions, as the examples of Chap. 4 of the reader demonstrate. Assembly of Kinematic Matrix \\(\\mathbf{A}\\) Because \\(\\mathbf{A}_f^T=\\mathbf{B}_f\\) according to the principle of virtual work, it is not necessary to create separate functions for setting up the equilibrium matrix \\(\\mathbf{B}\\) and the kinematic matrix \\(\\mathbf{A}\\) . Nonetheless, FEDEAS Lab has two separate functions in the interest of completeness. The assembly of the kinematic matrix \\(\\mathbf{A}\\) is completely analogous to that of the equilibrium matrix \\(\\mathbf{B}\\) and the corresponding functions practically identical. Nonetheless, a brief description of the process is given in the following. The assembly of the kinematic matrix \\(\\mathbf{A}\\) of the structural model in Fig. 4.4.5 of the reader involves the determination of the kinematic matrix \\(\\mathbf{a}_g\\) of each element and the re-assignment of the columns of \\(\\mathbf{a}_g\\) to the columns of \\(\\mathbf{A}\\) based on the local-global DOF number correspondence in accordance with the \\(\\boldsymbol{id}\\) array of the element. The kinematic matrix \\(\\mathbf{a}_g\\) of each element is set up according to Eq. 4.37 of the reader , Eq. 4.38 of the reader , or Eq. 4.39 of the reader for 2d frame, 2d truss and 3d truss, respectively, and requires the element length \\(L\\) and the \\(x\\) -axis orientation in the form of the direction cosines, as discussed for the equilibrium matrix \\(\\mathbf{b}_g\\) in sec. 5.1 . Listing 6: function A = A_matrix ( Model ) ne = Model . ne ; % number of elements in structural model k = 0 ; % initialize row index into matrix A for el = 1 : ne % loop over all elements % locate element in Model and return end coordinates and id array [ xyz , id ] = Localize ( Model , el ) ; % form element compatibility matrix ag ag = ag_matrix ( Model . ElemName { el } , xyz ) ; % assemble element compatibility matrix ag into structure matrix A nc = size ( ag , 1 ) ; % number of rows of matrix ag A ( k + 1 : k + nc , id ) = ag ; % insert ag into location of matrix A k = k + nc ; % augment row index by number of rows in ag end Listing 7: . function ag = ag_matrix ( ElemName , xyz ) % determine element length and orientation [ L , dcx ] = ElmLenOr ( xyz ) ; if contains ( ElemName , 'Truss' ) % truss element ag = [ - dcx ' dcx ' ] ; elseif contains ( ElemName , '2dFrm' ) % 2d frame element dXL = dcx ( 1 ) ; dYL = dcx ( 2 ) ; ag = [ - dXL - dYL 0 dXL dYL 0 ; - dYL / L dXL / L 1 dYL / L - dXL / L 0 ; - dYL / L dXL / L 0 dYL / L - dXL / L 1 ] ; else error ( 'only truss and 2d frame elements supported' ) end Listing 6 gives the syntax for function A_matrix . The function A_matrix calls the internal function ag_matrix to set up the kinematic matrix \\(\\mathbf{a}_g\\) of each element according to Eq. 4.37 of the reader , Eq. 4.38 of the reader , or Eq. 4.39 of the reader for 2d frame, 2d truss and 3d truss, respectively. The function syntax is given in Listing 7 . Because the data structure Model does not have information about basic force releases, it is the user\u2019s responsibility to remove the rows of the \\(\\mathbf{A}\\) -matrix corresponding to element ends with release deformations \\(\\boldsymbol{V}_h\\) . After setting up the complete kinematic matrix \\(\\mathbf{A}\\) for the structural model, the kinematic matrix \\(\\mathbf{A}_f\\) for the free DOFs corresponds to the first \\(nf\\) columns of \\(\\mathbf{A}\\) . For a stable, statically determinate structure the kinematic matrix \\(\\mathbf{A}_f\\) is square with full rank. Given the element deformations \\(\\boldsymbol{V}\\) , a unique solution of the system of linear equations in Eq. 4.53 of the reader exists, resulting in the displacements \\(\\boldsymbol{U}_f\\) at the free DOFs of the structural model. The excerpt from a MATLAB script file in Listing 8 follows the input data for the plane truss of Ex. 4.2 of the reader and the command Create_SimpleModel . The element deformation vector V0 is populated with zeroes. It has size equal to the total number of basic forces sum(Model.nq) for this model which does not have element releases. After specifying the non-zero values of the element deformations the solution of the kinematic relations in Eq. 4.53 of the reader gives the free DOF displacements Uf . The values are identical with those of Ex. 4.2 of the reader with the corresponding deformed shape in Fig. 4.28 of the reader . Listing 8: Determination of the free DOF displacements for the truss of Ex. 4.2 of the reader Force-Deformation Relations for Linear Material Response Chap. 6 of the reader establishes the deformation-force relations of the truss element in Eq. 7.9 of the reader and of the 2d frame element in Eq. 6.39 of the reader . The collection of these relations for all elements of the structural model results in the structure deformation-force relations in Eq. 7.2 of the reader . Consequently, the collection of the element flexibility matrices \\(\\mathbf{f}\\) to form the matrix \\(\\mathbf{F}_s\\) and the collection of the initial element deformation vectors \\(\\boldsymbol{v}_0\\) to form the vector \\(\\boldsymbol{V}_{0}\\) depends on setting up \\(\\mathbf{f}\\) and \\(\\boldsymbol{v}_0\\) for all elements of the structural model. The latter depend on the material properties and the loading of each element which are supplied in ElemData according to the information in Table 6 . Force-Deformation Functions With the element property and loading information in ElemData , the FEDEAS Lab function Fs_matrix collects the element flexibility matrices into the block-diagonal matrix \\(\\mathbf{F}_s\\) according to Eq. 7.2 of the reader . Similarly, the function V0_vector collects the initial element deformations into vector \\(\\boldsymbol{V}_{0}\\) . Listing 9: function Fs = Fs_matrix ( Model , ElemData , Roption ) ne = Model . ne ; f = cell ( ne , 1 ) ; % loop over all elements in structural model for el = 1 : ne % locate element in Model and return end coordinates xyz xyz = Localize ( Model , el ) ; % determine element length from end coordinates L = ElmLenOr ( xyz ) ; % set up element flexibility matrix f { el } = f_matrix ( Model . ElemName { el } , ElemData { el } , L , Roption ) ; end % block-diagonal array of element flexibility matrices Fs = blkdiag ( f { : }) ; Listing 10: function f = f_matrix ( ElemName , ElemData , L , Roption ) E = ElemData . E ; % elastic modulus A = ElemData . A ; % area EA = E * A ; % axial stiffness switch ElemName case 'LinTruss' % linear truss element f = L / EA ; case 'Lin2dFrm' % 2d linear frame element I = ElemData . I ; EI = E * I ; f = [ L / EA 0 0 ; 0 L / ( 3 * EI ) - L / ( 6 * EI ) ; 0 - L / ( 6 * EI ) L / ( 3 * EI )] ; % extract necessary submatrix in the presence of release(s) ide = 1 : 3 ; if Roption && isfield ( ElemData , 'Release' ) idr = find ( ElemData . Release ) ; ide = setdiff ( ide , idr ) ; end f = f ( ide , ide ) ; otherwise error ( 'only linear truss and 2d frame elements supported' ) end The syntax of function Fs_matrix is shown in Listing 9 2 . The function Fs_matrix calls the internal function f_matrix to set up the flexibility matrix \\(\\mathbf{f}\\) for each element according to Eq. 6.39 of the reader with the flexibility matrices for the truss element in Eq. 6.25 of the reader and for the 2d frame element in Eq. 6.36 of the reader . The function syntax is given in Listing 10 . The function V0_vector has similar syntax and is not listed here. According to Eq. 6.5 of the reader , the element force-deformation relations are established as the inverse of the deformation-force relations of the element with the basic element stiffness matrix \\(\\mathbf{k}\\) equal to the inverse of the element flexibility matrix \\(\\mathbf{f}\\) and the initial force vector \\(\\boldsymbol{q}_0\\) according to Eq. 6.52 of the reader . function Ks = Ks_matrix ( Model , ElemData ) ne = Model . ne ; k = cell ( ne , 1 ) ; for el = 1 : ne % locate element in Model and return end coordinates xyz xyz = Localize ( Model , el ) ; % determine element length from end coordinates L = ElmLenOr ( xyz ) ; % set up element stiffness matrix k { el } = k_matrix ( Model . ElemName { el } , ElemData { el } , L ) ; end % block-diagonal array of element stiffness matrices Ks = blkdiag ( k { : }) ; Listing 11: Syntax of the function k_matrix . function k = k_matrix ( ElemName , ElemData , L ) E = ElemData . E ; % elastic modulus A = ElemData . A ; % area EA = E * A ; % axial stiffness switch ElemName case 'LinTruss' % linear truss element k = EA / L ; case 'Lin2dFrm' % 2d linear frame element I = ElemData . I ; EI = E * I ; f = [ L / EA 0 0 ; 0 L / ( 3 * EI ) - L / ( 6 * EI ) ; 0 - L / ( 6 * EI ) L / ( 3 * EI )] ; % extract necessary submatrix in the presence of release(s) ide = 1 : 3 ; if isfield ( ElemData , 'Release' ) idr = find ( ElemData . Release ) ; ide = setdiff ( ide , idr ) ; end f = f ( ide , ide ) ; % invert element flexibility to get basic element stiffness k = inv ( f ) ; otherwise error ( 'only linear truss and 2d frame elements supported' ) end Listing 12: function q0 = q0_vector ( ElemName , ElemData , L ) E = ElemData . E ; % elastic modulus A = ElemData . A ; % area EA = E * A ; % axial stiffness switch ElemName case 'LinTruss' % linear truss element if ~ isfield ( ElemData , 'e0' ) , ElemData . e0 = 0 ; end if ~ isfield ( ElemData , 'q0' ) , ElemData . q0 = 0 ; end e0 = ElemData . e0 ; % initial axial strain q0 = ElemData . q0 ; % initial prestressing force q0 = q0 - EA * e0 ; % fixed-end force vector case 'Lin2dFrm' % 2d linear frame element I = ElemData . I ; EI = E * I ; if ~ isfield ( ElemData , 'e0' ) , ElemData . e0 = [ 0 ; 0 ] ; end if ~ isfield ( ElemData , 'w' ) , ElemData . w = [ 0 ; 0 ] ; end e0 = ElemData . e0 ; % initial section deformations w = ElemData . w ; % uniformly element load in x and y % 2d linear frame element v0 = [ e0 ( 1 ) * L ; - e0 ( 2 ) * L / 2 ; e0 ( 2 ) * L / 2 ] ; v0 = v0 + [ w ( 1 ) * L * L / ( 2 * EA ) ; w ( 2 ) * L ^ 3 / ( 24 * EI ) ; - w ( 2 ) * L ^ 3 / ( 24 * EI )] ; % flexibility matrix f = [ L / EA 0 0 ; 0 L / ( 3 * EI ) - L / ( 6 * EI ) ; 0 - L / ( 6 * EI ) L / ( 3 * EI )] ; % index of continuous element deformations ide = 1 : 3 ; if isfield ( ElemData , 'Release' ) idr = find ( ElemData . Release ) ; ide = setdiff ( ide , idr ) ; end v0 = v0 ( ide ) ; f = f ( ide , ide ) ; q0 = - f \\ v0 ; otherwise error ( 'only linear truss and 2d frame elements supported' ) end FEDEAS Lab function Ks_matrix collects the basic element stiffness matrices into the block-diagonal matrix \\(\\mathbf{K}_s\\) according to Eq. 6.11 of the reader . Similarly, the function Q0_vector collects the initial element forces into vector \\(\\boldsymbol{Q}_{0}\\) . The function Ks_matrix calls the internal function k_matrix to set up the stiffness matrix \\(\\mathbf{k}\\) for each element according to Eq. 6.52 of the reader with the stiffness for the truss element in Eq. 6.42 of the reader and the stiffness matrix of the 2d frame element in Eq. 6.45 of the reader or Eq. 6.49 of the reader depending on the presence of an end moment release. The syntax of function Ks_matrix is shown in Listing \u00bflst:Ksmatimpl? , while the syntax for the internal function k_matrix is given in Listing 11 . The syntax of function Q0_vector is very similar except for the collection of vectors instead of matrices. The function calls the internal function q0_vector with the function syntax in Listing 12 to set up the initial force vector \\(\\boldsymbol{q}_0\\) of each element according to Eq. 6.43 of the reader , Eq. 6.46 of the reader and Eq. 6.50 of the reader . Force Method of Analysis The steps of the force method of analysis are summarized in Eq. 8.1 of the reader . This step sequence is implemented in the MATLAB script file S_ForceMethod . In contrast to a function, a script file operates on the variables in the workspace memory and stores its output also in the workspace memory. FEDEAS Lab makes use of script files for two purposes: to define several variables at once and place them in the workspace for easy access or to issue a few simple MATLAB commands with a single call rather than individually; to collect a series of commands involving FEDEAS Lab functions into solution procedures that can be invoked with a single call from the workspace; such scripts are identified with prefix S_ and can be easily modified to suit individual needs. The limitation of such a script, however, is that variables serving as input arguments to the functions in the script should be present in the workspace with the same syntax as the function arguments in the script. All script variables reside in the MATLAB workspace and are, therefore, of global character. Such variables may lead to name conflicts, if care is not exercised. In contrast, variables in functions are local and can only be accessed if they appear in the input or output argument list. Clearly, this is the preferred approach for data protection in a modular computing environment. For this reason, scripts are used sparingly in FEDEAS Lab . Listing 13: % form static matrix B for all dofs B = B_matrix ( Model ) ; % get element cell array for continuous element deformations iced = H_index ( Model , ElemData ) ; % concatenate indices to single index vector ic ic = [ iced { : }] ; % form Bf matrix without columns corresponding to releases Bf = B ( 1 : Model . nf , ic ) ; % determine force influence matrices Bbari, Bbarx if ~ exist ( 'ind_r' , 'var' ) , ind_r = [] ; end [ Bbari , Bbarx ] = ForceInfl_matrix ( Bf , ind_r ) ; % set up Fs matrix and V0 vector Fs = Fs_matrix ( Model , ElemData ) ; V0 = V0_vector ( Model , ElemData ) ; % determine redundant basic forces Qp = Bbari * ( Pf - Pwf ) ; Fxx = Bbarx '* Fs * Bbarx ; Qx = - Fxx \\ ( Bbarx '* ( Fs * Qp + V0 )) ; % determine final basic forces Q = Qp + Bbarx * Qx ; % determine element deformations Veps (Ve for short) Ve = Fs * Q + V0 ; % determine free dof displacements Uf = Bbari '* Ve ; % complete Q vector with release values and return Ve [ Q , Ve ] = Complete_QV ( Model , ElemData , Q ) ; The script S_ForceMethod depends on the definition of the structural model geometry in the data structure Model , and on the specification of the element property and loading information in the data structure ElemData . The specification of an index ind_r for the redundant basic forces is optional, as is the specification of the nodal forces Pf and Pwf . The default value for the nodal forces is zero. The command sequence for the implementation of the force method of analysis according to Eq. 8.1 of the reader is divided in two parts in Listing 13 : the setting up of the necessary matrices \\(\\mathbf{B}\\) , \\(\\bar{\\mathbf{B}}_i\\) , \\(\\bar{\\mathbf{B}}_x\\) , \\(\\mathbf{F}_s\\) and the vector \\(\\boldsymbol{V}_{\\scriptstyle{0}}\\) from information in Model and ElemData , and (b) the solution steps of the force method. The script generates the basic forces \\(\\boldsymbol{Q}\\) of the structural model, the corresponding element deformations \\(\\boldsymbol{V}_{\\varepsilon}\\) , and the free DOF displacements \\(\\boldsymbol{U}_f\\) . These can be used for response interpretation, as will be discussed in sec. 12 . The script S_ForceMethod uses two auxiliary functions: (a) H_index to set up a cell array of indices for continuous element deformations from information in the field Release of ElemData , and (b) Complete_QV which uses the same information to pad the basic forces \\(\\boldsymbol{Q}\\) from the force method of analysis with zero values at the releases, so that it can determine the element deformations \\(\\boldsymbol{V}_{\\varepsilon}\\) at the ends with flexural releases and plot the deformed shape of the corresponding element, if required. Displacement Method of Analysis The steps of the displacement method of analysis are described in Eq. 9.3 of the reader and Eq. 9.4 of the reader . A summary of these steps for implementation in FEDEAS Lab is: With the kinematic matrix \\(\\mathbf{A}_f\\) set up the stiffness matrix \\(\\mathbf{K}_f\\) and the initial force vector \\(\\boldsymbol{P}_{0}\\) \\[ \\mathbf{K}_f= \\mathbf{A}_f^T\\mspace{1.5mu}\\mathbf{K}_s\\mspace{1.5mu}\\mathbf{A}_f \\quad \\quad \\boldsymbol{P}_{0}= \\mathbf{A}_f^T\\mspace{1.5mu}\\boldsymbol{Q}_{0}+ \\boldsymbol{P}_{wf} \\] Solve the equilibrium equations for the free DOF displacements \\(\\boldsymbol{U}_f\\) \\[\\boxed{ \\boldsymbol{P}_f= \\mathbf{K}_f\\mspace{1.5mu}\\boldsymbol{U}_f+ \\boldsymbol{P}_{0}}\\] Determine the element deformations \\(\\boldsymbol{V}\\) from the kinematic relations \\[\\boxed{ \\boldsymbol{V}= \\mathbf{A}_f\\mspace{1.5mu}\\boldsymbol{U}_f}\\] Determine the basic forces \\(\\boldsymbol{Q}\\) from the collection of element force-deformation relations \\[\\boxed{ \\boldsymbol{Q}= \\mathbf{K}_s\\mspace{1.5mu}\\boldsymbol{V}+ \\boldsymbol{Q}_{0}}\\] Listing 14 shows the implementation of these steps in the MATLAB script file S_DisplMethod . Listing 14: % form kinematic matrix A for all dofs A = A_matrix ( Model ) ; % get element cell array for continuous element deformations iced = H_index ( Model , ElemData ) ; % concatenate indices to single index vector ic ic = [ iced { : }] ; % form Af matrix for free dofs without rows with release deformations Af = A ( ic , 1 : Model . nf ) ; % set up Ks matrix and Q0 vector Ks = Ks_matrix ( Model , ElemData ) ; Q0 = Q0_vector ( Model , ElemData ) ; % set up stiffness matrix Kf and initial force vector P0 Kf = Af '* Ks * Af ; P0 = Pwf + Af '* Q0 ; % solve equilibrium equations for free dof displacements Uf Uf = Kf \\ ( Pf - P0 ) ; % determine continuous element deformations V V = Af * Uf ; % determine basic forces Q Q = Ks * V + Q0 ; % complete Q vector with release values and return Ve [ Q , Ve ] = Complete_QV ( Model , ElemData , Q ) ; As is the case with the script for the force method of analysis, the script S_DisplMethod depends on the definition of the structural model geometry in the data structure Model , and on the specification of the element property and loading information in the data structure ElemData . The specification of the nodal forces Pf and Pwf is optional with default values equal to zero. The script uses the same auxiliary functions as the script for the force method to remove the rows of the kinematic matrix \\(\\mathbf{A}\\) with release deformations and pad the vector of basic forces \\(\\boldsymbol{Q}\\) from the displacement method of analysis with zero values at the releases, so that it can determine the element deformations \\(\\boldsymbol{V}_{\\varepsilon}\\) at the element ends with flexural releases and plot the deformed shape of the corresponding element, if required. Direct Stiffness Assembly Fig. 9.6.3 of the reader demonstrates the significant advantage of the displacement method over the force method of analysis: the direct assembly of the structure stiffness matrix \\(\\mathbf{K}_f\\) and the resisting forces \\(\\boldsymbol{P}_{r}\\) . We demonstrate briefly the ease of implementing the direct stiffness assembly in FEDEAS Lab by taking advantage of the array indexing capabilities of MATLAB described in Appendix [C:ArrayIndx] and avoiding the multiplication by the Boolean array in Eq. 9.31 of the reader . The latter approach is symbolically compact but computationally inefficient, because the Boolean matrix \\(\\mathbf{A}_b^{(el)}\\) in Eq. 9.31 of the reader contains only a few terms of unit value but mostly zeros. In the direct assembly process the element \\(\\boldsymbol{id}\\) array serves as index of the element stiffness coefficients into the structure stiffness matrix \\(\\breve{\\mathbf{K}}\\) . The FEDEAS Lab function Kf_matrix.m assembles the complete stiffness matrix \\(\\breve{\\mathbf{K}}\\) and then extracts the stiffness \\(\\mathbf{K}\\) at the free dofs (in practice only the free dof stiffness \\(\\mathbf{K}\\) is assembled to save storage). Listing 15: function Kf = Kf_matrix ( Model , ElemData ) K = zeros ( nt , nt ) ; for el = 1 : ne % locate element in Model and return end coordinates and id array [ xyz , id ] = Localize ( Model , el ) ; % form element stiffness matrix ke in global reference system ke = ke_matrix ( Model . ElemName { el } , ElemData { el } , xyz ) ; % assemble element stiffness matrix ke into structure matrix K K ( id , id ) = K ( id , id ) + ke ; end Kf = K ( 1 : nf , 1 : nf ) ; % extract stiffness matrix of free dof's Listing 15 shows the function excerpt with the operations of direct stiffness assembly. K corresponds to \\(\\breve{\\mathbf{K}}\\) and Kf corresponds to \\(\\mathbf{K}\\) in the code. The function Kf_matrix.m calls each element by its name, as specified in the field ElemName of Model , gives it its end coordinates and element properties and expects its stiffness matrix in global coordinates as return argument. This operation should be implemented in a separate function for each element, so that new elements can be added with ease. Because we plan to pursue a different implementation in FEDEAS Lab \u2006 as will be discussed in the course of Nonlinear Analysis, we include only the truss and the 2d frame element stiffness determination in a subfunction ke_matrix of Kf_matrix.m . Eq. 9.27 of the reader gives the element stiffness matrix of the truss and the 2d frame element in global coordinates. The MATLAB commands are excerpted in Listing 16 noting that the stiffness determination of the 2d frame element with basic force releases follows the description in Eq. 9.7 of the reader . Listing 16: % determine element length and orientation (direction cosines of x-axis) [ L , dcx ] = ElmLenOr ( xyz ) ; % extract element properties from ElemData E = ElemData . E ; A = ElemData . A ; EA = E * A ; switch ElemName case 'LinTruss' % linear truss element % transformation matrix from basic to global ag = [ - dcx ' dcx ' ] ; k = EA / L ; ke = ag '* k * ag ; case 'Lin2dFrm' % 2d linear frame element with or w/o release % transformation matrix from basic to global dXL = dcx ( 1 ) ; dYL = dcx ( 2 ) ; ag = [ - dXL - dYL 0 dXL dYL 0 ; - dYL / L dXL / L 1 dYL / L - dXL / L 0 ; - dYL / L dXL / L 0 dYL / L - dXL / L 1 ] ; I = ElemData . I ; EI = E * I ; k = [ EA / L 0 0 ; 0 4 * EI / L 2 * EI / L ; 0 2 * EI / L 4 * EI / L ] ; % introduce release indices MR MR = zeros ( 3 , 1 ) ; if isfield ( ElemData , 'Release' ) , MR ( ElemData . Release == 1 ) = 1 ; end % compatibility matrix in the presence of moment release(s) ah = [ 1 - MR ( 1 ) 0 0 ; 0 1 - MR ( 2 ) - 0.5 * ( 1 - MR ( 3 )) * MR ( 2 ) ; 0 - 0.5 * ( 1 - MR ( 2 )) * MR ( 3 ) 1 - MR ( 3 ) ] ; % transform basic stiffness matrix for release(s) k = ah '* k * ah ; % transform basic stiffness to global reference ke = ag '* k * ag ; Plastic Analysis According to Chap. 11 of the reader the determination of the collapse load factor of a structural model is possible either with the lower bound theorem of plastic analysis that makes use of the equilibrium equations and the plastic conditions, or with the upper bound theorem of plastic analysis that makes use of the kinematic relations and the plastic work increment of structural mechanisms. Even though the uniqueness theorem of plastic analysis states that the collapse load factor is the same with these methods, FEDEAS Lab uses two separate functions to better illustrate the resulting information from each method, which is of equilibrium nature for the lower bound theorem and of kinematic nature for the upper bound theorem. The basic forces at incipient collapse from the lower bound theorem can be used to display the moment distribution at incipient collapse , while the displacement and deformation increments from the upper bound theorem can be used to display the mechanism after the onset of collapse . Lower Bound Theorem The formulation of the lower bound theorem of plastic analysis in Eq. 11.13 of the reader of Chap. 11 of the reader is a linear programming problem . Functions for the solution of such problems are available in the Optimization toolbox of MATLAB . In particular, the linprog function of the toolbox is suited for structural problems involving linear equalities and inequalities . To set up the input arguments for this function the FEDEAS Lab function takes the equilibrium matrix Bf , the array of plastic capacities Qpl , and the reference force vector Pref at the free DOFs of the structural model as input arguments. The latter is set up directly or with the help of the function Create_NodalForces , as discussed in sec. 5.2 . Optional input arguments to the function are the constant nodal forces \\(\\boldsymbol{P}_{cf}\\) and the data structure Options with parameters for the linear programming solution. The default value for the constant nodal forces is zero, while the default parameters for the linear programming function that MATLAB selects work in most cases. They need to be modified only if numerical difficulties arise. Listing 17: % static matrix Bf for column-girder (Ex 12.2) Bf = [ 1 / 6 1 / 6 0 0 0 ; 0 1 1 0 0 ; 0 0 - 1 / 4 - 1 / 4 1 / 4 ; 0 0 0 1 1 ] ; % specify plastic capacities in vector Qpl Qpl = [ 160 160 120 120 120 ] '; % specify reference load in vector Pref Pref = [ 20 0 - 20 0 ] '; [ lambdac , Qc ] = PlasticAnalysis_wLBT ( Bf , Qpl , Pref ) ; %% Script for Example 12.2 in First Course on Matrix Structural Analysis % plastic analysis of column-girder assembly %% clear memory and define global variables With this information the function determines the collapse load factor lambdac and the corresponding basic forces Qc of the structure under the collapse load. The syntax of the plastic analysis function is function [ lambdac , Qc ] = PlasticAnalysis_wLBT ( Bf , Qpl , Pref , Pcf , Options ) Listing 17 shows the input arguments to for the column-girder assembly of Ex. 11.2 of the reader . The output arguments are the collapse load factor lambdac and the corresponding basic forces Qc of the structural model under the collapse load. Upper Bound Theorem The formulation of the upper bound theorem of plastic analysis in Eq. 11.53 of the reader , Eq. 11.54 of the reader , and Eq. 11.55 of the reader of Chap. 11 of the reader is also a linear programming problem , in fact it is the dual problem of the lower bound theorem in Eq. 11.13 of the reader [@Strang_1988] . The FEDEAS Lab function [func:PlasticAnalysis_wUBT] sets up the necessary equality and inequality constraints with input arguments \\(\\mathbf{A}_f\\) , \\(\\boldsymbol{Q}_{pl}\\) , \\(\\boldsymbol{P}_{ref}\\) . It invokes the simplex algorithm for the solution of the linear programming problem and returns the collapse load factor \\(\\lambda_c\\) , and the displacement rates \\(\\dot{\\boldsymbol{U}}_f\\) as displacement increments DUf and the plastic hinge deformation rates \\(\\dot{\\boldsymbol{V}}_{hp}\\) as plastic deformation increments DVhp of the collapse mechanism. The syntax is Listing 18: Upper bound plastic analysis of the portal frame from Ex. 11.4 of the reader %% Script for % plastic analysis of one story portal frame % ========================================================================================= % FEDEASLab - Release 3.2, July 2012 % Matlab Finite Elements for Design, Evaluation and Analysis of Structures % Professor Filip C. Filippou (filippou@ce.berkeley.edu) % Department of Civil and Environmental Engineering, UC Berkeley % Copyright(c) 1998-2012. The Regents of the University of California. All Rights Reserved. % ========================================================================================= %% clear memory and define global variables CleanStart ; %% define structural model (coordinates, connectivity, boundary conditions, element types) XYZ ( 1 ,: ) = [ 0 0 ] ; % first node XYZ ( 2 ,: ) = [ 0 5 ] ; % second node, etc XYZ ( 3 ,: ) = [ 4 5 ] ; % XYZ ( 4 ,: ) = [ 8 5 ] ; % XYZ ( 5 ,: ) = [ 8 0 ] ; % % element connectivity array CON ( 1 ,: ) = [ 1 2 ] ; CON ( 2 ,: ) = [ 2 3 ] ; CON ( 3 ,: ) = [ 3 4 ] ; CON ( 4 ,: ) = [ 4 5 ] ; % boundary conditions (1 = restrained, 0 = free) (specify only restrained dof's) BOUN ( 1 ,: ) = [ 1 1 1 ] ; BOUN ( 5 ,: ) = [ 1 1 1 ] ; % specify element type ne = length ( CON ) ; % number of elements [ ElemName { 1 : ne }] = deal ( '2dFrm' ) ; % 2d frame element %% Model creation Model = Create_SimpleModel ( XYZ , CON , BOUN , ElemName ) ; % plot and label model for checking (optional) Create_Window ( 0.80 , 0.80 ) ; % open figure window Plot_Model ( Model ) ; % plot model Label_Model ( Model ) ; % label model %% static matrix Af for portal frame Af = [ 1 / 5 1 / 5 0 0 0 0 1 / 5 1 / 5 ; 0 1 1 0 0 0 0 0 ; 0 0 - 1 / 4 - 1 / 4 1 / 4 1 / 4 0 0 ; 0 0 0 1 1 0 0 0 ; 0 0 0 0 0 1 1 0 ] '; % specify plastic capacities in vector Qpl Qpl = [ 150 150 120 120 120 120 150 150 ] '; % specify reference load in vector Pref Pref = [ 30 0 - 50 0 0 ] '; %% call function for upper bound plastic analysis in FEDEASLab [ lambdac , DUf , DVhp ] = PlasticAnalysis_wUBT ( Af , Qpl , Pref ) ; diary on disp ( 'the collapse mechanism displacement rates are' ) disp ( DUf / DUf ( 1 )) disp ( 'the plastic deformation rates are' ) disp ( DVhp / DUf ( 1 )) diary off % expand displacements and deformations for plotting Model . InextEList = 1 : ne ; ied = D_index ( Model ) ; A = A_matrix ( Model ) ; Af = A ( :, 1 : Model . nf ) ; ic = setdiff ( 1 : size ( A , 1 ) , [ ied { : }]) ; Ac = Ac_matrix ( Af , ic , [ Model . DOF ( 2 , 1 ) , Model . DOF ( 3 , 2 )]) ; Aftild = Af * Ac ; %% plot the collapse mode Create_Window ( 0.80 , 0.80 ) ; Plot_Model ( Model ) ; PlotOpt . MAGF = 50 ; Plot_Model ( Model , Ac * DUf , PlotOpt ) ; Plot_PlasticHinges ( Model , [] , Ac * DUf , DVhp , PlotOpt ) ; print - painters - dpdf - r600 Ex12_2F1 Listing 18 shows the input arguments to [func:PlasticAnalysis_wUBT] for the portal frame of Ex. 11.4 of the reader . The function output consists of the collapse load factor lambdac , the corresponding displacement increments DUf , and the plastic hinge deformation increments DVhp of the collapse mechanism. The values match those from Ex. 11.4 of the reader . Graphics Utility Functions FEDEAS Lab has functions for displaying on the computer screen the geometry of the model and the results of the analysis in the form of internal force distributions, deformed shape, and plastic hinge locations. The graphics utility functions are listed in Table 5 and are briefly described in the following. These functions depend on several supporting functions in the folder Utilities/ , which are of no further interest for the user. Specifically: The function Create_Window opens an empty window with two input arguments DX and DY for the percentage of the computer screen that the window occupies in the horizontal and in the vertical direction, respectively. Thus, the function call Create_Window ( 0.80 , 0.60 ) creates an empty window centered on the computer display and occupying 80% of the horizontal display and 60% of the vertical display dimension. The function Plot_Model displays the nodes of the structural model connected by straight lines (the element chords). The presence of the optional input argument Uf in any plotting function ensures that the information is displayed in the deformed configuration. The optional input argument Options in a plotting function is a data structure with fields specifying the attributes of graphical elements. Field descriptions of the data structure Options are given in Table 7 -Table 12 for the different plotting functions. Because some fields appear in more than one function, the user should make sure to change the field value before invoking the corresponding function, lest the last definition of the field is used, which may not be the intention. The function Label_Model displays node and element numbers of the structural model as well as the coordinate axes for the geometry description. The functions for plotting the axial force, the bending moment and the curvature distribution support an optional numerical input argument Scale for the magnification of the distribution display without affecting the numerical values of the internal forces and deformations. The functions for labeling the axial force and the bending moment distribution support an optional integer input argument Digit for the number of digits after the comma to display. The default is 1. The functions for labeling the axial force and the bending moment distribution support an optional character input argument Units , so that the values of the corresponding internal force are scaled to the specified unit of axial force or bending moment. The function Create_Units.m generates different units of force, moment, length and area in the return argument. The user can define additional dependent units in terms of those already present in the fields of the return argument. Plotting and labeling can be limited to some elements of the structural model with the optional argument ElemList . The default option is to display the requested information for all elements of the structural model. In the absence of the input argument ElemData the corresponding plot function will display the moment distribution and the deformed shape for the homogeneous solution of the element equilibrium. The field w must be specified in ElemData for the function to display the moment distribution and the deformed shape for the complete solution that includes the particular solution under the element loading. The variable Ve corresponds to \\(\\boldsymbol{V}_{\\varepsilon}\\) , the element deformations of continuous nature. Table 7: Fields of the optional input argument Options for function Plot_Model Field name Purpose Default value MAGF magnification for deformed wireframe 10 PlNod switch for displaying node symbols 'no' PlBnd switch for displaying boundary symbols 'no' NodSF scale factor for node symbol 1 PlJnt switch for displaying rigid joint offsets 'yes' LnStl line style for undeformed/deformed model \u2018-\u2019 / \u2018-.\u2019 LnWth line thickness 2 LnClr line color for undeformed/deformed model 'b' / \u2018k\u2019 BsClr color for boundary node and symbol [0.6 0 0.6] ModSF switch for adjusting the scale factor with element size 'yes' Table 8: Fields of the optional input argument Options for function Label_Model Field name Purpose Default value Item \u2018node\u2019,\u2018elem\u2019 or \u2018axes\u2019 'all' FntSF label font scale factor 1 AxsSF coordinate axes arrow scale factor 1 LOfSF label offset scale factor 1 NList list of nodes to label 1:nn EList list of elements to label 1:ne Table 9: Some fields of the optional input argument Options for function Plot_NodalForces Field name Purpose Default value FrcSF scale factor for force arrow shaft 1 TipSF scale factor for force arrow tip 1 ArWth line width for force arrow shaft 3 ArClr nodal force arrow color \u2018r\u2019 Label \u2018yes\u2019 / \u2018no\u2019 for labeling nodal force \u2018No\u2019 FntSF scale factor for nodal force label 1 Digit number of digits for nodal force label 2 Units force units base unit Table 10: Fields of optional input argument Options for function Plot_Releases Field name Purpose Default value MAGF magnification factor for deformed model 10 HngSF scale factor for size of hinge symbol 1 HOfSF factor for hinge symbol offset from element end 1 AHClr display color for axial releases light gray FHClr display color for flexural releases white Table 11: Fields of optional input argument Options for function Plot_DeformedStructure Field name Purpose Default value MAGF magnification for deformed configuration 10 EList list of elements to include in deformed shape 1:ne PlBnd switch for displaying boundary symbols \u2018Yes\u2019 NodSF scale factor for size of boundary symbol 1 PlJnt switch for displaying rigid joint offsets \u2018Yes\u2019 PlCrd switch for displaying element chord \u2018No\u2019 PlRel switch for displaying element releases \u2018Yes\u2019 LnStl line style for deformed shape \u2018-\u2019 LnWth line thickness for deformed shape 2 LnClr line color for deformed shape \u2018r\u2019 BsClr color for boundary node and symbol [0.6 0 0.6] HngSF scale factor for size of release symbol 1 HOfSF scale factor for flexural hinge symbol offset from element end 1 AHClr display color for axial releases light gray FHClr display color for flexural releases white ModSF switch for adjusting the scale factor with element size \u2018yes\u2019 Table 12: Fields of optional input argument Options for function Plot_PlasticHinges Field name Purpose Default value EList list of elements for which plastic hinges are displayed 1 : ne HngSF scale factor for size of plastic hinge symbol 1 HOfSF scale factor for flexural hinge offset from element end 1 FHClr flexural hinge color 'r' CHClr color for column hinge with \\(N\\) - \\(M\\) interaction [ 1 0.6 0 ] AHClr axial hinge color in truss elements [1 0.6 0] tol relative tolerance for plastic capacity check \\(10^{-6}\\) Examples The examples in this section showcase the main graphics utility functions with further details about features. A separate MATLAB script file is available for each example in the course reader with the file name starting with the prefix ChmExn corresponding to the example n in Chapter m of the reader. Salient excerpts from some of these script files are used in the following to showcase the FEDEAS Lab functions in the preceding sections and, in particular, the graphics utility functions. Plotting and Labeling of Model Once the function Create_SimpleModel creates the data structure Model \u2006 the information about the geometry of the model can be displayed with the functions Plot_Model and Label_Model . The default values for the graphic objects of these functions may result in an unsatisfactory image: disproportionately small size of labels and disproportionately large coordinate axes. Moreover, the default option for the function Plot_Model does not display node and boundary symbols in Fig. 3 . Create_Window ( 0.50 , 0.80 ) ; Plot_Model ( Model ) ; Label_Model ( Model ) ; Figure 3: Display of 2d truss model with default values for graphic objects After turning on the fields PlNod and PlBnd in PlotOpt , adjusting the size of the node and boundary symbols with NodSF , adjusting the size of the coordinate axes with AxsSF , and adjusting the size and offset of labels with FntSz and LOfSz , respectively, the resulting display in Fig. 4 is improved significantly. Create_Window ( 0.50 , 0.80 ) ; PlotOpt . PlNod = 'yes' ; PlotOpt . PlBnd = 'yes' ; PlotOpt . NodSF = 0.6 ; Plot_Model ( Model , [] , PlotOpt ) ; LblOpt . AxsSF = 0.5 ; LblOpt . FntSF = 2 ; LblOpt . LOfSF = 1.3 ; Label_Model ( Model , LblOpt ) ; Figure 4: Improved display of 2d truss with custom values for plot options The default sizing and labeling values produce satisfactory results for the 3d truss model in Fig. 5 , as long as the user requests that the node and boundary symbols be displayed. Figure 5: Satisfactory display of 3d truss with default values for graphic objects Plotting of Nodal Forces and Element Loading The function Plot_NodalForces displays the nodal forces Pe before these are assigned to the free DOFs of the structural model by the function Create_NodalForces . It is expedient to prevent the display of node symbols in Plot_Model . The nodal force values are displayed by turning on the field Label in PlotOpt . The size of the arrow can be customized with the field FrcSF . The function Plot_ElemLoading displays the element loads specified in field w and the element deformations in field e0 of the data object ElemData . The size of the arrow for the element loading can be customized with the field FrcSF and the size of the arrow tip with the field TipSF . Calling the function Plot_Model after calling Plot_ElemLoading and not before ensures that the node and boundary symbols are clearly visible in Fig. 6 . Figure 6: Display of the uniformly distributed element load \\(w\\) for the simple frame with an inclined element from Ex. 3.6 of the reader Plotting of Releases for Internal Forces The function Plot_Releases displays the internal force releases. End moment releases for truss elements are displayed automatically with default values when invoking the function. The size and offset of the moment release symbol can be adjusted with the fields HngSF and HOfSF . Figure 7: Display of the end moment release for the three hinge portal frame of Ex. 3.7 of the reader For frame elements the display of internal force releases depends on the field Release of the data structure ElemData . The entries of the field in Fig. 7 indicate the presence of an end moment release at end \\(i\\) of element \\(c\\) for the model of a three hinge portal frame. Plotting and Labeling of Axial Force Distribution The script excerpt in Listing 19 displays and labels the axial forces \\(\\boldsymbol{Q}\\) in Fig. 8 for the plane truss of Ex. 3.1 of the reader . The optional input argument ScaleN in Plot_AxialForces controls the scaling of the axial force distribution, while the optional input argument NDigt=2 in Label_AxialForces requests 2 digits after the comma for the label of the axial force value. A tensile axial force distribution is shown in blue and a compressive axial force in red. Listing 19: Command sequence for the display of the axial forces in Fig. 8 ScaleN = 1 / 3 ; NDigt = 2 ; Create_Window ( WinXr , WinYr ) ; Plot_Model ( Model ) ; Plot_AxialForces ( Model , Q , [] , ScaleN ) ; Label_AxialForces ( Model , Q , [] , NDigt ) ; Figure 8: Axial force distribution for the truss of Ex. 3.1 of the reader Plotting and Labeling of Bending Moment Distribution Listing 20: Command sequence for display of the bending moment distribution in Fig. 9 Figure 9: Bending moment distribution for the homogeneous solution of the beam from Ex. 3.5 of the reader The script excerpt in Listing 20 uses the basic forces \\(\\boldsymbol{Q}\\) to display and label the bending moments in Fig. 9 for the beam with overhang of Ex. 3.5 of the reader . Without specification of the value for the distributed element loading in the field w of ElemData the function \"is not aware\" of the presence of element loads and only displays the homogeneous solution for the bending moment distribution. Listing 21: Figure 10: Bending moment distribution for the complete solution of the beam from Ex. 3.5 of the reader The script excerpt in Listing 21 includes the input argument ElemData in the call to the function Plot_2dMomntDistr , so that it can display the complete solution by superposing the particular solution for element \\(b\\) to the homogeneous solution of Fig. 9 . Plotting of Deformed Shape The script excerpt in Fig. 11 uses the free DOF displacements Uf under the initial element deformations V0 in Listing 8 to display the resulting deformed shape for the truss of Ex. 4.2 of the reader with the help of the function Plot_DeformedStructure . The input arguments ElemData and Veps to the function are not required for the case in hand. Figure 11: Deformed shape for plane truss of Ex. 4.2 of the reader Fig. 11 shows the deformed shape of the truss with default values under a magnification factor MAGF of 30. The function displays the releases of internal forces by default, which may not be desirable for truss models. The function also displays the boundary symbols by default, but the default size value is disproportionately large for the model in Fig. 11 . Figure 12: Improved display of deformed shape for plane truss of Ex. 4.2 of the reader Fig. 12 shows the improvement of the display for the deformed shape of the truss by suppressing the display of internal force releases and scaling the boundary symbols to a quarter of the default value. Figure 13: Deformed shape for the plane truss of Ex. 4.2 of the reader Fig. 13 shows that the deformed shape of a truss model can also be displayed with the function Plot_Model by including the free dof displacements Uf as the second input argument. This instructs the function to connect the nodes of the model in the deformed configuration by straight lines and can, therefore, be used for elements with straight edges to display the deformed shape of the structure. The default option is not to display the boundary conditions. The default values for the line color and line style reflect the color and style selection for element chords of deformed frame elements. These values can be overwritten with the field PlBnd for displaying the the boundary symbols, and with the fields LnClr and LnStl of PlotOpt for setting the line color and style for the deformed shape of the structure, respectively. Listing 22 shows the specification of the element deformations \\(\\boldsymbol{V}_{\\varepsilon}\\) for the three hinge portal frame of Ex. 4.4 of the reader . It is important to initialize \\(\\boldsymbol{V}_{\\varepsilon}\\) to its full size. The script uses the function Localize to extract the end coordinates of each element, which are then used with the function ElmLenOr to determine the element length. The axial deformations in elements a through d are set equal to zero on account of their inextensible character. The index of continuous element deformations ic is set up with the MATLAB function setdiff after specification of the flexural release locations at end \\(i\\) of element a, end \\(i\\) of element c, and end \\(j\\) of element d for the three hinge portal frame in Fig. 4.35 of the reader (a). Listing 22: Specification of element deformations \\(V_\\varepsilon\\) for the three hinge portal frame of Ex. 4.4 of the reader Veps = zeros ( sum ( Model . nq ) , 1 ) ; for el = 1 : Model . ne [ xyz ] = Localize ( Model , el ) ; L ( el ) = ElmLenOr ( xyz ) ; end Veps ( 2 : 3 ) = - 0.00072 .* [ - 1 ; 1 ] .* L ( 1 ) / 2 ; Veps ( 5 : 6 ) = - 0.0006 .* [ - 1 ; 1 ] .* L ( 2 ) / 2 ; Veps ( 8 : 9 ) = - 0.0006 .* [ - 1 ; 1 ] .* L ( 3 ) / 2 ; % ih=release index, ic=continuous deformation index ih = [ 2 8 12 ] ; ic = setdiff ( 1 : sum ( Model . nq ) , ih ) ; The command sequence in Listing 23 sets up the kinematic matrix \\(\\mathbf{A}\\) and extracts the submatrix \\(\\mathbf{A}_f\\) corresponding to the free DOFs of the model in Fig. 4.35 of the reader (a) without taking advantage of the inextensibility of elements a through d to reduce the size of the matrix, as was done for the hand calculations in Ex. 4.4 of the reader . The matrix \\(\\mathbf{A}_f\\) refers to element deformations at continuous element ends. In this case the kinematic relations in Eq. 4.53 of the reader result in a system of 9 equations with 9 unknowns that gives a unique solution for the free DOF displacements under the given element deformations \\(\\boldsymbol{V}_{\\varepsilon}\\) . Following the determination of the free DOF displacements \\(\\boldsymbol{U}_f\\) the release deformations can be determined with the relation \\[ \\boxed{ \\boldsymbol{V}_h= \\breve{\\mathbf{A}}_f\\mspace{1.5mu}\\boldsymbol{U}_f- \\boldsymbol{V}_{\\varepsilon} } \\qquad(1)\\] Listing 23: Free DOF displacement determination from the kinematic relations for the portal frame of Ex. 4.4 of the reader % form kinematic matrix A A = A_matrix ( Model ) ; % submatrix for free dofs and continuous deformations Af = A ( ic , 1 : Model . nf ) ; % solve for free dof displacements Uf = Af \\ Veps ( ic ) ; % determine release deformation(s) Vh = A ( :, 1 : Model . nf ) * Uf - Veps ; disp ( 'the release deformations are' ) disp ( Vh ( ih )) Create_Window ( 0.50 , 0.80 ) ; PlotOpt . NodSF = 0.60 ; Plot_Model ( Model ) ; % plot element chords in deformed configuration PlotOpt . MAGF = 60 ; Plot_Model ( Model , Uf , PlotOpt ) ; PlotOpt . HngSF = 0.60 ; ElemData { 1 }. Release = [ 0 ; 1 ; 0 ] ; ElemData { 3 }. Release = [ 0 ; 1 ; 0 ] ; ElemData { 4 }. Release = [ 0 ; 0 ; 1 ] ; Plot_DeformedStructure ( Model , ElemData , Uf , Veps , PlotOpt ) ; The command sequence in Listing \u00bflst:DefoFrmcom? draws the model in Fig. 14 in the original configuration in blue color. The command Plot_Model with the optional argument Uf draws the nodes and the element chords in the deformed configuration. The element chords are displayed with a black, dash-dotted line by default. Finally, the function call Plot_DeformedStructure draws the deformed shape of the model in the deformed configuration with a red solid line by default. The default line color, line style and line width of most plotting functions can be overwritten with specification of the PlotOpt fields LnClr , LnStl , and LnWth , respectively. Figure 14: Deformed shape for the three hinge portal frame of Ex. 4.4 of the reader under given element deformations \\(\\boldsymbol{V}_0\\) The presence of flexural releases at end \\(i\\) of element a, end \\(i\\) of element c, and end \\(j\\) of element d results in concentrated rotations at these locations. For the correct deformed shape it is imperative to specify the element deformations \\(\\boldsymbol{V}_{\\varepsilon}\\) as the fourth input argument to Plot_DeformedStructure in Listing \u00bflst:DefoFrmcom? . Furthermore, the function displays the end moment releases in elements a, c and d, as long as ElemData appears as the second input argument of the function with the release specification in the field Release , as Listing \u00bflst:DefoFrmcom? shows. If the element deformations Veps are not specified as the fourth input argument to the function Plot_DeformedStructure , as in Listing \u00bflst:DefoWrong? , the function draws the deformed shape in Fig. 15 under the assumption that the element tangents are continuous at the nodes. Consequently, instead of determining \\(\\boldsymbol{V}_h\\) according to eq. 1 and the element deformations \\(\\boldsymbol{V}\\) from \\(\\boldsymbol{V}_{\\varepsilon}+\\boldsymbol{V}_h\\) , the function simply uses \\(\\boldsymbol{V}= \\mathbf{A}_f\\mspace{1.5mu}\\boldsymbol{U}_f\\) resulting in the wrong deformed shape in Fig. 15 with fixed ends at the two supports and a continuous tangent at the midspan of the girder. Create_Window ( 0.50 , 0.80 ) ; PlotOpt . NodSF = 0.60 ; Plot_Model ( Model , [] , PlotOpt ) ; % plot element chords in deformed configuration PlotOpt . MAGF = 60 ; Plot_Model ( Model , Uf , PlotOpt ) ; Plot_DeformedStructure ( Model , [] , Uf , [] , PlotOpt ) ; Figure 15: Wrong deformed shape for the portal frame of Ex. 4.4 of the reader with continuous element deformations throughout The specification of the element release locations in Listing 22 by setting up the global index ic into the element deformation vector \\(\\boldsymbol{V}\\) is inconvenient for large structural models. In such case it is advisable to take advantage of the field Release in ElemData for specifying the release locations of each element. Release is a 3-component column vector, with component 1 corresponding to the axial force, component 2 to the moment at end \\(i\\) , and component 3 to the moment at end \\(j\\) of the element. A value of 1 indicates the presence of a release for the corresponding basic element force. Listing 24 shows the specification of the flexural releases at end \\(i\\) of element a, end \\(i\\) of element c, and end \\(j\\) of element d for the three hinge portal frame in B-F:KineFrEx2F1 . This information is used by FEDEAS Lab function H_index to set up the collection of cell arrays iced in Listing 24 with the indices for the continuous element deformations. Concatenating these cell arrays produces the global index ic for the continuous element deformations and the use of the MATLAB function setdiff gives the global index ih for the release locations in Listing 24 . Listing 24: % specify release locations in ElemData ElemData { 1 }. Release = [ 0 ; 1 ; 0 ] ; ElemData { 3 }. Release = [ 0 ; 1 ; 0 ] ; ElemData { 4 }. Release = [ 0 ; 0 ; 1 ] ; % cell array of element continuity indices iced = H_index ( Model , ElemData ) ; % concatenate to ic index for structure ic = [ iced { : }] ; % ih release index for structure ih = setdiff ( 1 : sum ( Model . nq ) , ic ) ; Linear Analysis Following the specification of the model geometry and the generation of the data structure Model with the function Create_SimpleModel Listing 25 shows the specification of the element properties for the portal frame of Ex. 9.3 of the reader in Fig. 9.23 of the reader (a). To account for the inextensible character of elements a, b, c and d a large value for the cross section area \\(A\\) is specified in ElemData . The value of \\(A=10^6\\) suffices for the purpose. Listing 25: Specification of element properties for the portal frame of Ex. 9.3 of the reader % specify element properties for el = 1 : Model . ne ElemData { el }. E = 1000 ; ElemData { el }. A = 1e6 ; ElemData { el }. I = 60 ; end % insert release at base of element a ElemData { 1 }. Release = [ 0 ; 1 ; 0 ] ; Listing 26 shows the determination of the equivalent nodal forces for the uniform element load in elements a and b in Fig. 9.32 of the reader . The uniform element load values are specified in ElemData and used as input to the function Create_PwForces to generate the equivalent nodal forces at all DOFs. The equivalent nodal forces \\(\\boldsymbol{P}_{wf}\\) at the free DOFs are extracted from Pw . The element load is defined in the local reference system with the \\(x\\) -axis pointing from end \\(i\\) to end \\(j\\) . Consequently, the \\(y\\) -axis of element a points to the left and that of element b upward, with the element load \\(w\\) in Fig. 9.32 of the reader pointing in the negative \\(y\\) direction in both in agreement with the sign for the field w of ElemData in Listing 26 . Listing 26: Specification of the equivalent nodal forces and of the element loads for the portal frame of Ex. 9.3 of the reader % Load case: uniform load in elements a and b ElemData { 1 }. w = [ 0 ; - 5 ] ; ElemData { 2 }. w = [ 0 ;- 10 ] ; Pw = Create_PwForces ( Model , ElemData ) ; Pwf = Pw ( 1 : Model . nf ) ; Following the element property and loading specification, Listing 27 shows the command sequence for the displacement method of analysis of the portal frame and for plotting and labeling the bending moment distribution under the uniform element load in elements a and b with a scale factor of \\(0.5\\) . Listing 27: Command sequence for plotting and labeling the bending moment distribution in Fig. 16 % displacement method of analysis S_DisplMethod % bending moment distribution Create_Window ( 0.50 , 0.80 ) ; Plot_Model ( Model ) ; Plot_2dMomntDistr ( Model , ElemData , Q , [] , 0.5 ) ; Label_2dMoments ( Model , Q ) Figure 16: Bending moment distribution of the portal frame under uniform load \\(w\\) in elements a and b Listing 28 shows the specification of the uniform thermal curvature in elements a and b for the portal frame of Ex. 9.3 of the reader . Note the clearing of the values from the preceding load case of uniform element loading. Finally, Listing 29 shows the command sequence for producing the result display in Fig. 17 under the uniform thermal curvature in elements a and b. Listing 28: Specification of a uniform thermal curvature in elements a and b % no nodal forces, clear earlier values clear Pwf % initial element deformations ElemData { 1 }. e0 = [ 0 ; 0.002 ] ; ElemData { 2 }. e0 = [ 0 ; 0.002 ] ; % clear distributed load from ElemData ElemData { 1 }. w = [ 0 ; 0 ] ; ElemData { 2 }. w = [ 0 ; 0 ] ; Listing 29: Command sequence for the determination and the display of the response in Fig. 17 % displacement method of analysis S_DisplMethod % bending moment distribution Create_Window ( 0.50 , 0.80 ) ; Plot_Model ( Model ) ; Plot_2dMomntDistr ( Model , ElemData , Q , [] , 0.6 ) ; Label_2dMoments ( Model , Q ) % plot curvature distribution Create_Window ( 0.50 , 0.80 ) ; Plot_Model ( Model ) ; Plot_2dCurvDistr ( Model , ElemData , Q , [] , 0.6 ) ; % plot deformed shape Create_Window ( 0.50 , 0.80 ) ; PlotOpt . MAGF = 50 ; Plot_Model ( Model ) ; % plot element chords in deformed geometry Plot_Model ( Model , Uf , PlotOpt ) ; % plot deformed shape Plot_DeformedStructure ( Model , ElemData , Uf , [] , PlotOpt ) ; Figure 17: Bending moment, curvature distribution, and deformed shape under uniform curvature in elements a and b Bending moment distribution Figure 18: Bending moment, curvature distribution, and deformed shape under uniform curvature in elements a and b Curvature distribution Deformed shape Plastic Analysis sec. 11.1 discusses the use of FEDEAS Lab function for determining the collapse load factor \\(\\lambda_c\\) and the corresponding basic forces \\(\\boldsymbol{Q}_c\\) of a structural model under a given reference load vector \\(\\boldsymbol{P}_{ref}\\) at the free DOFs. The input arguments to the function are the equilibrium matrix Bf at the free DOFs, the vector of plastic capacities Qpl and the reference load vector Pref . The script in Listing 17 shows the set-up of the input arguments to the function for the column-girder assembly of Ex. 11.2 of the reader . Listing 30: Command sequence for plotting the moment distribution and the plastic hinge locations at collapse for the column-girder assembly of [B-X:P1AColGird] Model . Qmis { 1 } = 1 ; Model . Qmis { 2 } = 1 ; Model . Qmis { 3 } = [ 1 3 ] ; % open new window Create_Window ( 0.50 , 0.80 ) ; Plot_Model ( Model ) ; Plot_2dMomntDistr ( Model , [] , Qc , [] , 0.4 ) ; PlotOpt . HngSF = 0.6 ; Plot_PlasticHinges ( Model , Qpl , [] , Qc , PlotOpt ) Label_2dMoments ( Model , Qc ) Because the end forces Qc in Listing 17 do not include the axial basic forces nor the end moment at the roller support, it is not possible to use the post-processing functions of FEDEAS Lab to display the moment distribution and the plastic hinge locations at collapse without information about the missing basic element forces. To accomplish this we append the field Qmis to the data structure Model to supply the index of the missing basic forces. The plotting and labeling functions of FEDEAS Lab use the entries in this field, if present, to adjust the incoming basic force vector \\(\\boldsymbol{Q}\\) , so that its terms end up in the right location of the full basic force vector \\(\\boldsymbol{Q}\\) before performing the display and labeling operations. Figure 20: Moment distribution with plastic hinge locations at collapse for the column-girder assembly of Ex. 11.2 of the reader Listing 30 shows the specification of the element index Qmis for the missing basic element forces and the command sequence for plotting the moment distribution and the plastic hinge locations at collapse for the girder-column assembly of Ex. 11.2 of the reader in Fig. 20 . Because the plastic flexural capacity of elements b and c is the same, a plastic hinge is displayed at end \\(j\\) of element b as well as at end \\(i\\) of element c indicating, in fact, that a plastic hinge forms at the girder midspan. To avoid the display of a double hinge the plastic capacity of element b should be slightly different from element c. The last example deals with the determination and display of the collapse mechanism of the portal frame in Ex. 11.4 of the reader . In Listing 18 the collapse load factor and the kinematics of the collapse mechanism were determined by specifying explicitly the kinematic matrix \\(\\mathbf{A}_f\\) of the portal frame and invoking the FEDEAS Lab function for the upper bound theorem. In Listing 31 we let FEDEAS Lab set up the kinematic matrix with the function A_matrix based on the geometric information of the structural model in data structure Model . Because this function includes also the axial deformations of the frame elements in the entries of the kinematic matrix \\(\\mathbf{A}_f\\) it is important to specify a plastic capacity vector of equal length with the number of rows of \\(\\mathbf{A}_f\\) . For this reason the plastic axial capacity is included in the plastic capacity vector Qpl in Listing 31 . It is set to a relatively high value to exclude the possibility of an axial plastic hinge forming in the portal frame. Listing 31: Listing 32: Listing 31 shows the required sequence of commands for plotting the collapse mechanism of the portal frame with the plastic hinge locations in Fig. 21 . After creating a new window and displaying the structural model in the undeformed configuration the magnification factor MAGF is set and the Plot_Model function is invoked a second time with an additional argument the displacement increments DUf of the collapse mechanism. Finally the function Plot_PlasticHinges with the optional argument DUf displays the plastic hinge locations on the collapse mechanism. Figure 21: Collapse mechanism of portal frame We note that the third input argument of the Plot_PlasticHinges function can be either the basic forces Qc at incipient collapse, as is the case in Listing 30 , in which case the plastic capacity at the corresponding location needs to be specified as the second argument to the function, or the plastic hinge deformation increments DVhp , as shown in Listing 32 . Summary of Basic FEDEAS Lab Functions and Scripts The basic FEDEAS Lab functions and script files are summarized below. Model and Loading Functions Function name Input arguments Output Create_SimpleModel XYZ , CON , BOUN , ElemName Model Create_NodalForces Model , Pe Pf Create_PwForces Model , ElemData Pw Functions for Structural Matrices and Vectors Function name Input arguments (optional) Output B_matrix Model B BbariBbarx_matrix Bf , ( ind_r ) Bbari , Bbarx A_matrix Model A Fs_matrix Model , ElemData , (Roption) Fs V0_vector Model , ElemData , (Roption) V0 Ks_matrix Model , ElemData Ks Q0_vector Model , ElemData Q0 Kf_matrix Model , ElemData Kf Analysis Scripts and Functions Script name Input variables (optional) Output variables S_ForceMethod Model , ElemData , ( Pf ), ( Pwf ) Q , Ve , Uf S_DisplMethod Model , ElemData , ( Pf ), ( Pwf ) Uf , Q , Ve Function name Input arguments Output [func:PlasticAnalysis_wLBT] Bf , Qpl , Pref , (Pcf) , (Options) lambdac , Qc [func:PlasticAnalysis_wUBT] Af , Qpl , Pref , (Pcf) , (Options) lambdac , DUf , DVhp General Utility Functions Function name Input arguments Output CleanStart '---' '---' Create_Units 'US' or 'SI' Units Localize Model , el xyz , id [func:ElemLenOr] xyz L , dcx H_index Model , ElemData iced D_index Model ied Complete_QV Model , ElemData , Q Q , Ve ElemData2Qpl Model , ElemData Qpl Q2Post Model , Q Post Graphics Utility Functions Function name Input arguments (optional) Create_Window DX , DY Plot_Model Model , ( Uf ) , ( Options ) Label_Model Model , ( Options ) Plot_NodalForces Model , Pe , ( Options ) Plot_ElemLoading Model , ElemData , ( Options ) Plot_Releases Model , ( ElemData ) , ( Uf ) , ( Options ) Plot_AxialForces Model , Q , ( ElemList ), ( Scale ) Label_AxialForces Model , Q , ( ElemList ), ( Digit ), ( Force Units ) Plot_2dMomntDistr Model , ( ElemData ), Q , ( ElemList ), ( Scale ) Label_2dMoments Model , Q , ( ElemList ), ( Digit ), ( Moment Units ) Plot_2dCurvDistr Model , ElemData , Q , ( ElemList ), ( Scale ) Plot_DeformedStructure Model , ( ElemData ), Uf , ( Ve ), ( Options ) Plot_PlasticHinges Model , ElemData , ( Uf ), Q , ( Options ) Auxiliary Functions Function Name Get_ModelScale Plot_BounCond DeformShape2dFrm Draw_Arrow Draw_Cube The prefix R in this report refers to material in the course reader \u21a9\ufe0e Roption specifies whether release information is used to strip matrix rows and columns corresponding to releases \u21a9\ufe0e","title":"Basic Structural Analysis Functions"}]}